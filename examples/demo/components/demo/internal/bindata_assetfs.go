// Code generated by go-bindata.
// sources:
// migrations/20160301010200_test.sql
// migrations/20160301010203_test2.sql
// DO NOT EDIT!

package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _migrations20160301010200_testSql = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xce\xb1\x8a\x83\x40\x14\x46\xe1\x7e\x9e\xe2\x2f\x77\xd9\xb5\x0f\x88\xc5\xa8\x57\x73\x89\x8e\x32\xde\x01\xad\x32\x82\x12\x2c\xa2\x21\x19\xc8\xeb\x07\x43\x8a\xf4\xe7\xc0\x17\x45\xf8\xbb\x2e\x97\xfb\x18\x66\xb8\x9b\xca\x2c\x69\x21\x88\x4e\x2b\x02\x17\x30\x8d\x80\x7a\xee\xa4\x83\x0f\xf3\x23\x78\xfc\x28\xc0\x2f\x93\x47\xca\x25\x1b\x79\x17\xc6\x55\x15\x5a\xcb\xb5\xb6\x03\x4e\x34\x40\x3b\x69\xce\x6c\x32\x4b\x35\x19\xf9\xdf\x97\x69\x0c\xa3\x87\x50\x2f\xea\x17\x64\x4a\x36\x94\xf0\xba\x6e\x79\x8a\xec\xa8\x6d\x47\x92\x38\x29\x0e\xb1\x52\xdf\xa4\x7c\x7b\xae\x2a\xb7\x4d\xfb\x21\xed\x86\xf8\x15\x00\x00\xff\xff\xd6\xf3\x5c\xb8\xb4\x00\x00\x00"

func migrations20160301010200_testSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations20160301010200_testSql,
		"migrations/20160301010200_test.sql",
	)
}

func migrations20160301010200_testSql() (*asset, error) {
	bytes, err := migrations20160301010200_testSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/20160301010200_test.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations20160301010203_test2Sql = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xce\xb1\x8a\x83\x40\x14\x46\xe1\x7e\x9e\xe2\x2f\x77\xd9\xb5\xd9\x6a\x41\x2c\x46\xbd\x9a\x4b\x74\x94\xf1\x0e\x68\x95\x11\x94\x60\x11\x0d\xc9\x40\x5e\x3f\x44\x52\xa4\x3f\x07\xbe\x28\xc2\xcf\x65\x39\xdf\xc6\x30\xc3\x5d\x55\x66\x49\x0b\x41\x74\x5a\x11\xb8\x80\x69\x04\xd4\x73\x27\x1d\x7c\x98\xef\xe1\xcf\xe3\x4b\x01\x7e\x99\x3c\x52\x2e\xd9\xc8\x9e\x18\x57\x55\x68\x2d\xd7\xda\x0e\x38\xd2\x00\xed\xa4\x39\xb1\xc9\x2c\xd5\x64\xe4\xf7\xb5\x4c\x63\x18\x3d\x84\x7a\x51\xdf\x20\x53\xb2\xa1\x84\xd7\x75\xcb\x53\x64\x07\x6d\x3b\x92\xc4\x49\xf1\x1f\x2b\xf5\x69\xca\xb7\xc7\xaa\x72\xdb\xb4\x6f\xd3\x8e\x88\x9f\x01\x00\x00\xff\xff\x35\xdb\x93\x49\xb6\x00\x00\x00"

func migrations20160301010203_test2SqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations20160301010203_test2Sql,
		"migrations/20160301010203_test2.sql",
	)
}

func migrations20160301010203_test2Sql() (*asset, error) {
	bytes, err := migrations20160301010203_test2SqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/20160301010203_test2.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"migrations/20160301010200_test.sql":  migrations20160301010200_testSql,
	"migrations/20160301010203_test2.sql": migrations20160301010203_test2Sql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"migrations": &bintree{nil, map[string]*bintree{
		"20160301010200_test.sql":  &bintree{migrations20160301010200_testSql, map[string]*bintree{}},
		"20160301010203_test2.sql": &bintree{migrations20160301010203_test2Sql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
