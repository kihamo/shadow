// Code generated by go-bindata.
// sources:
// templates/views/releases.html
// templates/views/update.html
// locales/ru/LC_MESSAGES/ota.mo
// locales/ru/LC_MESSAGES/releases.mo
// locales/ru/LC_MESSAGES/update.mo
// DO NOT EDIT!

package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsReleasesHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\xdb\x8e\xdb\x36\x13\xbe\xcf\x53\x0c\xf8\xef\x0f\x79\x91\x95\x64\x6f\x9b\xb6\x70\xac\x2d\x82\xa4\x45\x03\xa4\x6d\x90\x6c\x7a\xd1\x9b\x80\x16\xc7\x36\x37\x32\xa9\x90\x23\x7b\x5d\xc3\xef\x5e\x50\x07\x5b\xb6\x65\x5b\xeb\x1c\x80\x16\xf5\x45\x42\x91\x73\xe2\x37\xdf\x90\xc3\x5d\x2e\x41\xe0\x48\x2a\x04\x16\x6b\x45\xa8\x88\xc1\x6a\xf5\x68\x20\xe4\x0c\xe2\x84\x5b\x1b\x31\xa3\xe7\xec\xe6\x11\x00\x40\x7d\x36\xd6\x89\x3f\x15\x7e\xef\x1a\xdc\xc8\x4e\xab\xd1\xbd\xf5\x7b\xd7\xa5\xfc\xae\xce\xfd\xfb\x94\x2b\x4c\x6a\xab\xfb\x12\x24\x29\xc1\x1d\x89\x5c\x6a\x72\x7d\xb3\x5c\x82\xec\xfd\xa0\x80\xbd\xc1\x04\xb9\x45\xcb\x20\x80\xd5\x6a\x10\x4e\xae\x1b\x14\xea\xc1\x26\xc8\xcd\x48\xde\xb3\x9b\x41\x28\xe4\x6c\xc7\x7f\xc3\xd4\x56\x48\x15\x30\xc7\x7d\x10\x1f\x26\xe8\x1b\xb4\xa9\x56\x56\xce\x9a\xf6\x90\xab\xe4\x72\x5b\x4a\x50\xa8\x5a\x32\x32\x45\x01\x82\x13\x2f\xe6\x05\xd5\xec\x81\xd2\x73\xc3\x53\x06\x96\x16\x09\x46\x6c\x2e\x05\x4d\xfa\xbd\x6e\xf7\xff\x07\x3c\x15\xde\x26\xc8\xc5\xb1\x75\x73\x78\xb1\x34\xb0\x81\xfd\x0f\x34\x56\x6a\x55\xa1\x4e\x93\x07\xe8\x3e\x8b\x49\x6a\x65\xcf\xd2\x7d\x97\x26\x9a\x0b\x14\xc0\xe9\x2c\xfd\xb7\xf2\x2f\x3c\x4b\xf1\xf9\x04\xe3\x0f\x36\x9b\x9e\xb7\x63\x13\x4f\x24\x61\x4c\x99\x39\xcf\xfb\x6b\x4e\x93\x36\x8a\x83\xf0\x58\x16\x9d\xee\x09\x0e\x0c\xb5\x58\x1c\x5e\x5f\x2e\xc1\x70\x35\x46\xb8\x90\x57\x70\x61\x8a\xd2\x83\x7e\x04\x41\x39\xb6\xee\xc4\x38\x6c\xfd\x24\xc3\x84\xdb\x72\x65\x38\x28\x49\x06\xab\x95\xf3\x2c\x47\x9b\x95\x97\xf6\x79\x66\x0c\x2a\x72\x88\xd8\x94\xab\xaa\x8a\x12\x3e\xc4\x04\xf2\x7f\x7d\x9b\xc5\x31\x5a\xcb\x36\x30\xc6\x85\x12\x83\x8b\x1c\x49\xa7\xe8\x16\x51\x89\x02\xd9\x23\xd0\x54\xf1\x1d\x15\x80\x9d\x83\x60\x48\xca\x1f\x1b\x9d\xa5\x0c\x8c\x76\x95\x5a\x7c\x9c\x36\x92\x1b\xe2\x30\x31\x38\x8a\x58\xa8\x89\x87\x06\x53\x6d\x25\x69\xb3\x08\xeb\x10\xbd\x7c\x01\xab\x55\x58\x7d\x0d\xa5\x62\x40\xdc\x8c\x91\x22\xf6\x7e\x98\x70\xf5\x81\xd5\x62\x01\x17\x4f\x89\x4a\x3e\x96\xb1\x2e\x26\xef\x6d\xcb\xa0\xf2\xc0\x64\x65\x73\xc4\x2d\x8c\xb8\x3f\x92\x09\xfa\x42\xcf\x95\xab\x4d\x06\xf9\xb9\x1d\xb1\x35\xea\x2f\xd6\x2b\x0e\x76\x77\xf0\xca\x96\x08\x84\xfc\xe6\x51\x2b\xc9\x82\x1e\x0a\x9b\x18\x42\x26\xc3\x63\xb4\x6c\xb6\x85\x1f\xe1\x22\x28\xf9\xe2\xca\x77\x63\xb9\x5e\xcc\x0f\xb1\x3b\x18\x66\x44\x5a\x01\x2d\x52\x8c\x58\xf1\xb1\x97\x1d\xe1\xca\xcb\xec\x25\x27\xbf\x09\x7c\xd2\xe3\xb1\x43\x76\xaa\x05\x4f\xaa\xb9\x32\xdb\xff\xab\x4f\xe6\x63\xbf\xcc\xc3\x73\xad\x46\xd2\x4c\x21\x4b\xc7\x86\x0b\x04\xd2\x50\x55\x6e\x73\xb1\x6d\x19\x89\x79\x92\x0c\x79\xfc\x21\x62\xa5\xe0\xbb\xc2\x4c\xc7\xdb\xa3\xa1\x77\x05\x23\x9e\x58\xbc\x7c\xfa\x00\x32\x41\x13\xa1\xb8\x31\x7a\xee\xc7\xd2\xc4\x09\xfa\xae\x7a\x76\x29\x55\x06\x01\x3c\x4d\x13\x19\x73\xca\xaf\xa2\x07\xb2\x2b\xf7\x1c\x16\x79\x78\x80\xc6\x3f\x25\x8b\xc0\x95\x00\x83\x96\xb8\xa1\x6d\x9c\xce\xce\xae\xab\xa4\x4f\x4f\x6e\x9c\xe8\x4c\xf8\x59\x7e\x91\xfb\x3c\xa1\x56\xd9\x85\xb9\xa4\x49\xb5\x9d\xaf\x94\xea\xf5\xcd\xd0\xee\x0c\x82\xb6\xec\x98\x73\xa3\xa4\x1a\x7f\x11\x7a\x18\x9c\xea\x19\x7e\x52\x81\xbf\xc9\x4d\x34\x31\xe0\xd3\x73\x4f\x86\xdb\xc9\x7e\xc2\x0b\x97\x5f\x21\xad\x9b\x94\x9e\xb6\xbb\xf7\x14\xd8\x17\x69\xd3\x30\x0c\x6c\x6c\x64\x4a\x25\x25\x6a\x94\x0e\xef\xf8\x8c\x17\x8b\xec\x46\xe8\x38\x9b\xa2\xa2\x60\x6e\x24\x61\x47\x70\xc2\x5b\xfd\x96\x8c\x54\xe3\xed\x4c\x54\x0d\xf0\x33\x0a\x7e\xd6\x66\xca\x09\xd8\x75\xb7\xfb\x9d\xdf\xed\xf9\xdd\xeb\xdb\xde\x93\x7e\xf7\xdb\x7e\xf7\xc9\x9f\xdd\xef\xfb\xdd\x2e\xcb\x93\x76\x39\x08\x0b\x2f\x37\xed\x02\xae\x7b\x73\xed\x72\xeb\xd6\xa8\xae\x58\xb5\xcb\x67\x29\xef\xdc\xb0\x0f\x37\xe0\xda\xe5\x93\x8a\xc7\x7b\xe5\xd3\x4c\x19\x84\x47\xba\xe5\x41\x98\xbf\xdb\x1a\xde\x89\x27\x5f\x9d\xb5\xcf\x72\x58\xfe\x57\x3b\x8f\x6a\x6f\x75\xd7\xd1\xb3\x2a\xce\xe5\x12\x2c\x71\x92\xf1\x2f\xb7\xbf\xbe\x82\x4e\x31\x7e\xf7\xe6\x15\xb0\x50\x70\x3b\x19\x6a\x6e\x44\xc8\xad\x45\xb2\xe1\x0c\x95\xd0\xc6\x86\xeb\x47\xa6\x0d\x14\x92\x3f\xb4\x61\x6c\x8b\xd9\xdb\x62\x76\xa8\x35\x59\x32\x3c\x0d\xa6\x52\x05\xb1\xb5\xac\xbc\xe7\x3f\xa3\xd7\xcd\xe3\xb6\x0a\x60\x33\x73\x3c\x80\x66\x54\xee\xec\x67\xc4\x24\xbc\xb3\xe1\xdd\xc7\x0c\xcd\x22\xa8\xc1\xe2\x62\xb9\xfb\x12\x58\x0c\xad\x73\x78\x30\x01\x5f\xc4\xe7\x06\xed\x1d\xdf\xb5\x34\x7c\x05\xe7\xe5\xde\x0f\xe6\x7e\xdb\x7d\x51\x23\xad\xce\xd7\x75\x75\x5d\x74\xaa\xa3\xf6\x32\x30\xc8\xc5\xa2\x33\xca\x54\xfe\x07\x09\xe8\x5c\xc2\x72\xab\x30\xe7\x52\x09\x3d\x0f\xb6\x5b\x23\x88\x60\xa3\x21\xc5\x55\xd5\x94\xec\x2a\xbb\xdf\x8c\x1b\xc8\x20\x02\xaf\x7c\xc2\xe5\x76\x42\x0f\x1e\x83\x14\xf0\x18\xbc\xb0\xec\xe6\xbc\xa7\xfb\x2d\x86\x1c\x41\xe7\x88\x69\xf7\xcb\xe0\x71\x04\xde\x8f\xa5\x54\xd4\xf3\xf6\xa4\x1a\x5a\x97\x8b\x80\xdf\xf1\xfb\x4e\xb3\x45\x07\x62\x1f\xbc\xd7\xbf\xbf\xbd\xf5\xae\x9a\x7d\x9a\xa4\x0f\x59\xf3\x5a\xf9\xb4\xec\xd7\x00\x32\x87\x62\x5f\x6f\xd1\x31\x2c\x4b\x08\xa2\x28\x02\x6f\xc4\x65\x82\xc2\x3b\xa6\xe4\x7e\x0a\xe7\xf0\xfa\x37\x4d\x72\xb4\x38\xb0\x91\xad\x4d\xb9\x6e\xa3\x0f\xde\x4f\xc6\x68\x73\x60\x5b\x5b\xf2\x78\x4f\x7d\x30\xc1\x14\xad\xe5\x63\x6c\xa1\x50\xa0\x86\x2d\xed\x4f\xa4\xc0\x7e\x41\xe3\xd3\xc2\x96\x16\x89\x54\xe3\x3e\x78\xeb\x4a\xf8\x66\x3f\xcf\xf5\xdf\xea\xf2\xe9\xc1\xf5\xe6\xdb\x6c\x7f\x76\xd7\xc6\x6a\x87\xa0\xdb\x95\x51\xb4\x6f\x3b\x85\xd1\x94\xc3\xcf\xc1\xbd\x83\xb5\x54\xb4\xbe\x07\x54\xff\xa3\xe6\xbf\x98\x9a\xbb\x4b\xeb\x86\x77\xd3\x1c\xfc\x1d\x00\x00\xff\xff\x4e\xf5\x14\x91\xdd\x18\x00\x00"

func templatesViewsReleasesHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsReleasesHtml,
		"templates/views/releases.html",
	)
}

func templatesViewsReleasesHtml() (*asset, error) {
	bytes, err := templatesViewsReleasesHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/releases.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesViewsUpdateHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x57\x5b\x8f\xdb\xba\x11\x7e\xdf\x5f\x31\x55\x52\xc8\x46\xd6\x12\xec\x9e\x87\xc2\xc7\x72\x51\xb4\x3d\x68\x80\x34\xdd\xee\x25\x7d\x5c\xd0\xe2\xd8\xa2\x43\x91\x0a\x49\x79\xd7\x6b\xf8\xbf\x17\x14\x25\x5b\xd6\x4a\xbe\x64\xd1\x20\x0f\x87\xc0\xae\xa5\xd1\x7c\x33\xc3\xb9\x71\xb8\xd9\x00\xc5\x39\x13\x08\x5e\x2c\x85\x41\x61\x3c\xd8\x6e\xaf\x26\x94\xad\x20\xe6\x44\xeb\xc8\x53\xf2\xc9\x9b\x5e\x01\x00\xd4\xa9\xb1\xe4\x83\x94\x0e\x86\x23\xb0\x4f\x3a\xad\x9e\x9e\xf5\x60\x38\x2a\xf9\x9b\x98\xe7\xc7\x8c\x08\xe4\xb5\xaf\xaf\x39\x2a\x2b\x0e\x79\x0a\xbe\x64\x34\xdd\x6c\x80\x0d\xff\x2c\xc0\x7b\xc8\x16\x8a\x50\x04\x85\x1c\x89\x46\x0f\x02\xd8\x6e\x27\x61\x32\x6a\xc1\x59\xf9\x8c\x46\xde\x13\x7b\x21\x8a\x7a\x95\xae\xb9\x54\xe9\xa3\xa3\x81\xfb\x79\x5c\xa1\x32\x2c\xe6\xd8\xa2\xbd\x90\x94\xf3\x0a\xcc\x99\x36\x83\x5c\x68\xb3\xe6\xb8\x83\x6b\x83\x99\xee\xc0\x16\x78\xce\xa6\x13\x02\x89\xc2\x79\xe4\xbd\xb3\xdc\x83\xa1\x37\x9d\xe8\x8c\x88\x4a\xae\x25\x3e\x0a\xe9\x4d\x87\x93\xd0\xd2\xa7\x93\x90\x4c\x27\x21\x67\x17\x49\x1d\x75\x49\x1d\x9d\x25\x75\x12\xe6\xbc\xe3\x4b\xe5\xcb\xca\xf8\x6e\xab\x92\x5f\x2a\xed\x77\x06\xb3\x7b\x66\xac\x5b\x77\xf1\xb3\x34\x18\xc2\x43\xc6\x25\xa1\x30\x63\x82\xa8\x35\xcc\x19\xdf\x47\xf2\x97\x23\xb2\x6d\xe8\xea\x61\x1c\x24\x52\xb1\x17\x29\x0c\xe1\x50\xbc\x73\x32\x43\x3e\xe0\x38\x37\x40\x95\xcc\x5e\xa4\x40\x0f\x94\xe4\xe8\xf8\x3d\x48\xd1\x24\x92\x46\x5e\x26\xb5\xf1\x8a\x1d\x49\x43\xbc\x4e\x8d\x6e\x91\xd8\x30\x29\x22\x6f\xb3\x81\xe0\x16\xbf\xe5\xa8\x4d\xf0\x70\xfb\x29\xb8\x21\x26\x81\xed\xd6\x03\x21\x57\x84\x33\x4a\x0c\x4e\x27\xa1\x55\xd4\xe5\x5f\xca\x56\xe7\x38\x78\xf4\x46\x07\x8f\xe0\x0b\x2a\x36\x5f\x43\x5e\xf8\x19\xe9\xf9\x2e\xa6\xbb\x54\xa7\xbc\xe6\xde\x23\x06\x39\x98\xd9\x9b\xf0\x05\x95\x66\x52\x38\x75\xe3\x49\x48\xcd\x29\x30\xad\x74\xae\x1c\x74\xb0\x22\x3c\x47\x6f\x3a\x09\x29\x9d\x5e\x9d\xaf\xf9\x6f\x09\xc6\x5f\x75\x9e\x7e\x8f\xea\xb8\xc4\x7e\xaf\xee\xbf\xaa\x38\x61\x06\x63\x93\x2b\xbc\x44\xff\x61\xc5\x12\x15\x27\x7b\x0b\x8a\x9a\x85\x82\xe1\x44\x8a\xba\x55\x17\x42\x89\x58\xa0\x82\xa2\x22\xdc\xff\x92\x54\x4b\x16\xa6\x41\x48\x63\x4b\x07\xe2\x5c\x29\x14\x06\x48\x96\x71\x16\x13\x9b\xf0\x40\x6a\x5b\x82\x3f\x6a\xbb\x2b\xc1\xf8\xee\x2f\x58\x48\xcb\x51\xe4\x54\x61\xe9\xf1\xad\x5e\xe8\xcf\x3b\xf6\xf2\x06\x3f\x6a\xf6\x82\x4d\x3f\xee\x44\xcf\xd6\x06\x75\x55\x0d\xd6\xaa\x23\x36\x77\x34\x44\x68\x1c\x60\x45\xf7\x59\x28\x99\x67\xa7\x2a\x65\x96\x1b\x23\x05\x98\x75\x86\x91\xe7\x5e\x76\x47\xd3\xcc\x08\x98\x19\x31\xd0\x79\x1c\xa3\xd6\x1e\x50\x62\xc8\xc0\xc8\xc5\xc2\x76\xb0\x54\x52\xc2\x4f\xf5\x2a\xb7\x1c\x8e\xa8\x05\x9a\xc8\x7b\x77\x29\xb0\xe0\x1f\x18\xdb\x59\x8a\xa6\x57\x16\x97\x14\x73\xa6\x52\xc8\xcb\x23\xb8\x96\x29\xce\x97\x17\x6b\x88\x09\xe7\x33\x12\x7f\x8d\xbc\xf2\x38\x2f\x4f\xf7\xde\x9c\x70\x8d\xfd\x5f\xbd\x57\xe7\xbe\x53\x74\x22\xcf\x9c\x53\x4f\xe5\xda\x39\x71\x78\x22\x4a\x30\xb1\xf8\xc9\xe3\x20\x28\x28\xd4\x86\x28\xf3\xff\x8c\x89\x51\x79\x6b\x48\xea\xfa\x7f\x70\x78\xca\x7e\xf6\x53\x46\x47\x61\x2a\x57\xd8\x76\x00\xbf\x3d\x24\xb7\x85\xec\xde\x41\x34\x1c\xed\xa2\x00\x74\x73\x74\x8f\x29\xed\x9f\x5a\xc8\x0d\x52\xed\xb5\x7c\x2c\x7f\x36\x1b\x40\x41\xad\xd1\x57\xb5\x3b\x49\x82\x84\x7a\xd5\x4e\x36\x1b\xd0\x86\x18\x16\xff\xf3\xfe\x5f\x9f\xa0\xe7\x9e\x1f\x6e\x3f\x81\x17\x52\xa2\x93\x99\x24\x8a\x86\x44\x6b\x34\x3a\x5c\xa1\xa0\x52\xe9\xb0\x9a\xfe\x96\x3a\x8c\xf5\xfe\x35\x48\x99\x08\x62\xdb\x59\x5d\x8b\xb1\x2a\xda\x2d\x58\x6a\xaf\xfc\xf8\x16\xdd\xcb\x86\xea\x65\x53\xf3\xc5\xc2\x97\xff\xc9\x51\xad\x07\x77\x29\x51\x66\xf0\xdf\xe2\xfe\x61\xb5\x2c\xbf\x59\x72\xa0\x2d\xd9\x51\x5b\xf4\x5d\x4d\x74\xac\x58\x66\xca\xaa\xaa\x35\x8b\x70\x49\x56\xc4\x7d\x2c\xcf\xaf\xf7\x3d\x2a\xe3\x3c\x45\x61\xfa\x81\x42\x42\xd7\xbd\x79\x2e\x8a\x39\x18\x7a\x7d\xd8\xec\x02\xfb\xbe\xe7\xbf\x73\xd7\x20\xbf\x5f\x57\xdf\xeb\xff\x7a\x55\x67\x0a\x5c\xd6\x7d\xc6\x67\xe3\xf7\x83\x84\x51\x9b\xbf\x2d\x0c\x37\x0a\x57\x4c\xe6\xfa\x28\xd3\x6f\x4c\x30\x9d\xd4\x58\x76\x3c\x1c\x4d\x75\x37\xfc\x48\x21\x02\xdf\xaf\x7d\xfc\x7b\x15\x0a\x99\xd9\x8d\xe8\x40\x1a\x02\x51\x6d\x33\x76\x65\x44\x11\xce\x91\xbb\x2b\x8a\x1e\xc3\xf0\xfa\xd5\xf7\xf4\x33\x49\x71\x0c\x7e\xa9\xc9\x3f\xe4\x88\x15\x12\x83\x1f\x53\xb2\xc0\xfb\x24\x4f\x67\x82\x30\xae\xc7\x2e\x0e\x87\x9c\x24\x8e\x31\x33\x48\x7f\x63\x1c\xf5\x18\xfc\x7a\x44\x52\x12\xbb\xeb\xd1\x75\x30\x63\xa2\xa1\xa2\x1c\x10\xc6\xb0\x0f\xca\xfc\x1a\x54\xbf\xb1\x97\xa3\x01\xf2\x17\xf2\x5e\xda\xeb\x82\x7f\x0d\xa3\x9a\x9b\x4f\x03\x29\xd3\x64\xc6\xb1\xc4\x0e\xeb\xfe\xaf\x56\x3d\x06\x2a\x60\xb4\x85\xc5\x86\xf3\x60\xde\xf7\xfb\x81\xc1\x67\xd3\x53\x15\xb9\xdd\xa8\xe0\x70\x52\xdf\xa3\x2a\x7a\x07\x6c\x3f\x5a\xef\x21\xf5\x09\xb7\x03\xb6\x9f\x24\xf7\x30\x4b\x6b\xdb\x35\x9b\x43\x43\x28\xfc\x21\x02\xdf\xde\x1b\x77\xb3\xb2\xdf\x16\xa4\xca\xdf\xee\xf6\x07\x41\x6d\x08\x6c\x29\x84\x63\xa8\x72\x64\x39\x8d\x0a\x6a\xb7\x04\x1b\xe0\x44\x3e\xb5\x71\x6f\x01\xb9\xc6\x8b\x4d\xee\x12\x77\xdc\xe4\x13\xa8\x86\xc9\x5d\x1b\x3c\x3c\xff\xf6\x6f\xdb\x5a\xc4\x9e\x98\xa0\xf2\x29\x38\x9c\x71\x20\xaa\xd5\x53\x39\xd2\x34\xa3\xb5\x22\x0a\x72\xdb\x58\x42\x69\x48\x58\xe2\x43\x1f\x3e\xd4\x52\xfe\x03\xf8\x61\x39\x9d\xf9\x8d\x2c\x29\x32\xa4\x5d\xb2\x5d\x39\x7c\x88\xc0\xff\x4b\xc9\x11\x0d\xfd\xc6\x56\x0e\x5e\xdf\x07\x64\x49\x9e\x7b\xaf\xa5\xd8\xf6\x3e\x06\xff\xe6\xdf\x77\xf7\x8d\xbe\x51\xe8\x50\x7c\x0c\xf9\x6b\x7a\x4b\x4f\x69\x6d\x28\xbb\x6d\x04\x0a\x75\xce\x0d\x44\x51\x04\xfe\x9c\x30\x8e\xb4\x33\xb9\xed\x12\xf8\x04\x37\x9f\xa5\x61\xf3\x75\x8b\xd1\x07\x1b\xb0\x43\xd5\x18\xfc\x7f\x28\x25\x55\xcb\x16\x0e\x78\xf1\xd9\x8c\x41\x05\x29\x6a\x4d\x16\x78\x82\xd9\x79\x06\xcf\x90\x6b\xb3\xab\xb5\x69\x37\x97\x36\x6b\xce\xc4\x62\x0c\xfe\x4c\x4a\xa3\x8d\x22\xd9\x9f\xfc\x4e\xc4\xb6\x23\xbd\x8f\xd6\x19\x7c\x97\xf7\xee\xca\x6a\x3c\xc7\x7f\x15\x73\x75\xab\x38\x05\x72\x7e\xd4\x67\x69\xf8\xd1\x9e\x3c\xd5\x10\x6a\xb8\xee\x96\xe0\xe6\xe9\x83\x8e\xd0\xcc\xed\xb7\xd4\xdf\xa9\xf6\xe1\xae\x0f\x2d\xe8\xdf\xab\xf4\x60\xfd\x6c\x55\x7a\xd6\xb4\x35\xec\x90\x7e\x5c\xc0\xe1\xd4\xd5\x36\xb1\xc1\xe5\xd9\x5f\x91\x26\xa1\x9b\xfe\x6b\x17\xb2\xff\x05\x00\x00\xff\xff\x6a\x6e\xce\x24\x23\x1a\x00\x00"

func templatesViewsUpdateHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsUpdateHtml,
		"templates/views/update.html",
	)
}

func templatesViewsUpdateHtml() (*asset, error) {
	bytes, err := templatesViewsUpdateHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/update.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesOtaMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\x4d\x6b\xd4\x40\x1c\xc6\x9f\x6e\x57\x0a\xc1\x37\x44\x3c\x79\xf8\x7b\xb0\x28\x32\x35\xa9\x1e\x64\x76\xb3\xeb\x5b\x0b\x62\x17\xa5\xa4\xde\xc7\xcd\x34\x0d\x26\x33\x61\x66\x22\x16\x7a\x10\x4f\x8a\x5e\x05\x4f\xe2\xc9\xbb\x82\x76\x45\x5c\x0f\x7e\x81\xd9\x2f\xe0\x67\x91\x6c\xb6\x8a\x03\x03\xcf\xef\xf7\x7f\xe6\xe5\xf7\x99\xee\x5b\x00\x38\x06\xe0\x3c\x80\xbb\x00\x56\x00\x14\x68\xd7\x4b\x00\x27\x01\xbc\x02\x70\x02\xc0\x3b\x00\xa7\x00\x7c\x04\x70\x1c\xc0\x57\x00\xc3\x25\xe0\x17\x80\xe5\x66\x77\x5a\xbf\xd2\x01\xce\x01\x38\xdb\x01\x4e\x03\xb8\xd2\x01\x96\x16\x77\x76\x01\x74\x16\x6f\x2e\x2f\x1c\xc6\x5a\xed\xe6\x19\x73\xe2\x71\x57\x3b\x81\x52\xaa\xba\xbb\x2d\x0b\x29\xac\xb4\x47\x54\x69\x9b\x3b\x6d\xf6\x5b\xde\xa9\x32\x23\x52\x89\xc6\x1b\xc7\x46\x36\xcb\x53\x76\xbb\xce\x2c\x4b\x34\xa7\x54\x3e\xbd\xf9\x24\xdf\x13\xa5\x5e\x33\x75\xb0\x25\xac\x63\x89\x11\xca\x16\xc2\x69\xc3\xe9\xfe\x7c\x44\xa3\xda\x88\x52\xa7\x9a\xfa\xff\xf5\x07\xc1\x96\x50\x59\x2d\x32\xc9\x12\x29\x4a\x4e\x7f\x99\xd3\x76\x6d\x6d\x2e\x54\x30\xba\x37\xda\x60\x8f\xa4\xb1\xb9\x56\x9c\xa2\xb5\x30\xb8\xa3\x95\x93\xca\xb1\x64\xbf\x92\x9c\x9c\x7c\xe6\xae\x56\x85\xc8\x55\x8f\xc6\x7b\xc2\x58\xe9\xe2\x9d\x64\x93\xdd\xf8\xd7\x6b\xfe\xb3\x2b\x0d\xdb\x50\x63\x9d\xe6\x2a\xe3\x14\x3c\x2c\x6a\x23\x0a\xb6\xa9\x4d\x69\x39\xa9\x6a\x8e\x36\xbe\xd6\xa3\x36\xc6\xea\x62\x14\xc6\x71\x44\xab\xab\xd4\xc4\xf0\x42\x1c\x45\x34\xa4\x90\xf8\x9c\x07\xf1\xfa\xd1\xa8\x1f\x5f\x6f\xe2\xa5\x79\xad\x1f\x85\x74\x70\xd0\x1e\x19\xc4\xeb\xe1\x65\x1a\x52\x44\x9c\xd6\x7b\x78\x90\xdc\x82\xff\xe0\xbf\xf8\xef\x7e\xe2\x0f\x67\xaf\x5b\xf8\xe9\xa7\xfe\xd0\x4f\x66\x2f\xfc\x74\xf6\xdc\x4f\xfc\x37\xf8\xf7\xfe\x93\xff\xe1\xa7\xfe\x73\xa3\x67\x6f\xf0\x27\x00\x00\xff\xff\xb2\xdb\xf7\x31\x3c\x02\x00\x00"

func localesRuLc_messagesOtaMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesOtaMo,
		"locales/ru/LC_MESSAGES/ota.mo",
	)
}

func localesRuLc_messagesOtaMo() (*asset, error) {
	bytes, err := localesRuLc_messagesOtaMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/ota.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesReleasesMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x4f\x4b\x4f\x34\x45\x14\x3d\xcd\xa0\xe8\xa0\x46\x5d\x68\x4c\x5c\x94\x0b\x09\x2e\x1a\xa7\xd1\x44\x6d\x68\x1e\x22\x24\x46\x26\x92\x71\x30\x2e\x74\x51\xe9\x29\x66\x3a\xcc\x74\x77\xaa\xab\x41\x0d\x8b\x79\x68\x8c\x91\x44\xe3\x63\x2b\x1a\x17\x2c\x5c\xd8\x3e\xc6\x19\x86\x01\x56\xee\x6f\xf9\x03\xfc\x05\x26\xfe\x05\xd3\x0f\x3e\xf2\xdd\x45\xd5\x3d\xe7\x9e\x7b\xef\xb9\xff\x3c\x39\xfb\x1d\x00\x3c\x0a\xe0\x59\x00\x9f\x00\x78\x02\xc0\xbf\xc8\xa3\x62\x00\x73\x00\x2c\x03\x78\x04\xc0\x6b\x06\xf0\x10\x80\x9d\xe2\x7f\xdb\x00\x66\x01\xbc\x57\xe0\x0f\x0c\xe0\x41\x00\x07\x05\xdf\x31\x00\x06\x40\x1a\xc0\x3c\x80\x6f\x8a\x79\x67\xc5\x7f\x6e\x00\xeb\x06\xf0\x8b\x01\x3c\x0e\xe0\xbf\x19\xe0\xa9\x74\x71\x29\xc7\x4f\x97\x80\xc7\x00\x2c\x96\xf2\xf9\xaf\x94\x72\x1f\x1b\x05\x5f\x2d\xf0\xfb\x25\x60\x13\x80\x57\x02\x9e\x01\xf0\x73\xc1\xff\x55\xe8\xfe\x2e\x01\x06\x80\x87\x91\xfb\x4a\xe3\x01\xe4\x5e\xd3\xdb\xe7\x0a\x2e\xed\x99\xcf\xd7\x67\xfb\xca\xb8\x8b\x99\xf4\xd9\x74\x95\x17\xf8\x11\x36\xa5\xdb\xf2\x94\x70\x55\x2c\x05\xb6\x5a\xc2\x3d\x8c\xe2\x0e\xde\x08\x8e\xfd\x76\xc0\x1b\xd8\xe3\xaa\x85\x9a\x68\x0b\x1e\x89\x08\x35\xd1\x09\x8e\x04\xde\xf1\x3e\x16\xd8\x0f\x9b\x92\x37\x04\xe3\x61\xd8\xf6\x5c\x9e\x4e\x63\xc7\x9e\x6a\x31\x29\x22\xc5\xa5\xc2\x7e\x98\x4e\x10\x0d\xc6\x15\xde\x15\x32\xf2\x02\x1f\x6e\x2c\xa5\xf0\x15\x6a\x22\x0c\xa4\x32\xab\x51\xd3\x6b\x98\xaf\xc7\xcd\xc8\xac\x07\x36\x6b\x88\xa3\x8d\x43\xaf\xc5\x3b\xc1\x92\x8c\xcb\xbb\x3c\x52\x66\x5d\x72\x3f\x6a\x73\x15\x48\x9b\xbd\x95\x95\x58\x35\x96\xbc\x13\x34\x02\xb6\x7a\x9f\x7e\xad\xbc\xcb\xfd\x66\xcc\x9b\xc2\xac\x0b\xde\xb1\xd9\x3d\x6c\xb3\x5a\x1c\x45\x1e\xf7\xcb\xd5\x37\xab\xdb\x66\xe1\xc5\x66\xd6\x52\xa5\xbc\x15\xf8\x4a\xf8\xca\xac\x7f\x14\x0a\x9b\x29\xf1\xa1\x7a\x31\x6c\x73\xcf\x5f\x61\x6e\x8b\xcb\x48\x28\x67\xbf\xbe\x63\xbe\x7a\xa7\x4b\xfd\x1c\x08\x69\x6e\xfb\x6e\xd0\xf0\xfc\xa6\xcd\xca\x7b\xed\x58\xf2\xb6\xb9\x13\xc8\x4e\x64\x33\x3f\xcc\x60\xe4\xbc\xb4\xc2\xf2\xd4\xf1\x9f\xb7\x2a\x8e\x63\xb1\x85\x05\x96\xa6\x95\xe7\x1c\xcb\x62\xeb\xac\xc2\xec\x0c\xaf\x39\xcb\xb7\xa5\x55\xe7\xe5\x34\x5d\xcc\x64\xab\x56\x85\x9d\x9c\xe4\x2d\x6b\xce\x72\xe5\x05\xb6\xce\x2c\x66\xb3\xe5\x15\xd0\xb7\x34\xa4\x0b\xdd\xd3\x7d\xfa\x8d\xc6\xfa\x4b\xd0\x57\xba\xab\x3f\xa5\xb1\xee\xd3\x90\x26\xba\xaf\x07\xba\x4b\x09\xe8\x3c\x83\x3d\x3d\xa0\x29\x4d\x53\xe2\x47\x9a\x50\xa2\x3f\xa3\x44\xf7\xf5\x29\xe8\x4c\x0f\xf2\xe4\x07\x1a\xd2\x25\x8d\x69\xa4\xbf\x00\xfd\x44\x7f\x50\x92\xc2\xdb\x5a\x42\x23\x9a\xd2\x50\x77\x41\xdf\xd3\xaf\x74\x45\xd7\xd9\xde\xbe\x3e\x65\x74\xa3\xbb\x34\xa6\x4b\xba\xa6\x3f\x69\x48\x57\x34\xa6\x21\xd3\x3d\x46\x37\xa9\x9e\x86\x34\xa2\x84\x6e\xf4\x40\xf7\x68\x42\xd7\x34\x4d\xbd\x27\xba\x4f\x09\xcb\x2a\xbf\xeb\xae\x1e\xd0\x88\x26\x34\x06\x7d\x9d\xb6\xe8\x5e\x76\x51\x71\xc9\x40\x7f\x4e\x63\xba\xc0\xff\x01\x00\x00\xff\xff\x59\x7c\xe5\x90\xe1\x03\x00\x00"

func localesRuLc_messagesReleasesMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesReleasesMo,
		"locales/ru/LC_MESSAGES/releases.mo",
	)
}

func localesRuLc_messagesReleasesMo() (*asset, error) {
	bytes, err := localesRuLc_messagesReleasesMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/releases.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesUpdateMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\x4d\x6f\x1b\x55\x14\x3d\x83\xcd\x97\x11\x42\x82\x15\x82\xc5\x65\xd1\x00\x8b\x09\x1e\x03\x02\x4d\x32\x09\x6a\x69\xa5\x8a\x46\xa0\xe2\x74\x43\x37\x0f\xcf\xb3\x33\xc2\x7e\x6f\xf4\x66\xa6\x6a\xa4\x2e\x8c\x0d\x0b\x44\xa5\xac\x10\x1b\x44\x25\x56\x2c\x58\xb8\x6d\xdc\x4c\x63\xc5\xf9\x01\x6c\xee\xfb\x03\x08\x7e\x08\x08\xcd\x8c\x31\x29\x89\x10\xcc\xea\x7e\x9c\x73\xee\x39\x4f\x9a\x5f\x9e\xaf\x7f\x03\x00\x4f\x03\x78\x19\x40\x08\xe0\x59\x00\x3f\xa1\xfa\x7e\x5d\xcc\x7f\x03\xf0\x2a\x80\x3f\x00\xbc\x04\x60\xc5\x01\x5e\x04\x70\xde\xa9\xfa\xeb\x0e\xf0\x02\x80\x9b\x0e\xf0\x1c\x80\xdb\x0e\xb0\x0a\xe0\x3b\x07\xd8\x74\x80\x9f\x1d\xe0\x43\x00\xcf\xd4\x80\xeb\x00\x3e\xa9\x01\xef\x03\xc8\x6b\xc0\x3b\x00\x7e\xaf\x01\x01\x80\xb7\xeb\x15\x2f\xa9\x57\xba\x3f\xd4\x81\xcb\x00\xe6\x75\xc0\x01\xf0\x04\x80\xfa\xc2\x5b\x0d\xc0\x63\x8b\xfa\x29\x00\x8f\x2f\x72\x3c\x89\x13\xdf\x05\xad\xba\x91\x19\x90\x91\x03\x7d\x43\x52\x16\xf7\xb5\x08\x65\x48\xdd\xa8\x2f\x97\xcb\x2c\xee\x19\x11\x4a\x12\x2a\x24\x23\x93\x54\x98\x94\x44\x1c\xf7\xa3\x8e\x48\x23\xad\x4e\xe3\x4e\xec\x3e\x4e\x65\x4c\x1e\x6d\x97\xc2\xf4\x69\xa4\x84\xd9\xad\xd4\xcb\x4d\x8b\xae\x49\x13\x75\x77\xff\x71\x79\xfb\xf4\xc5\xe5\xcc\xc8\xbe\x14\x89\x44\x94\x90\xd2\x29\x75\xb5\xa1\x4e\x66\x8c\x54\x8f\x98\x22\x61\x3a\x3b\x51\x2a\x3b\x69\x66\x24\x9d\x4b\x70\x55\xc6\xda\xa4\xee\x56\xd2\x8b\x42\xf7\x7c\xd6\x4b\xdc\xb6\xf6\x29\x94\x37\xde\xfb\x2c\xda\x11\x03\xbd\x6a\xb2\xc6\x15\x91\xa4\x6e\xdb\x08\x95\xf4\x45\xaa\x8d\x4f\x1f\x94\x2b\xda\xca\x8c\x18\xe8\x50\xd3\xfa\x23\xf8\x8d\xc6\x15\xa1\x7a\x99\xe8\x49\xb7\x2d\xc5\xc0\xa7\x65\xef\xd3\xd5\x2c\x49\x22\xa1\x1a\x5b\x97\xb7\x2e\xba\xd7\xa4\x49\x22\xad\x7c\xf2\x56\x9b\x8d\x0b\x5a\xa5\x52\xa5\x6e\x7b\x37\x96\x3e\xa5\xf2\x66\xfa\x46\xdc\x17\x91\x5a\xa3\xce\x8e\x30\x89\x4c\x83\xed\xf6\x25\xf7\xdd\xbf\x71\x85\x9f\xae\x34\xee\x45\xd5\xd1\x61\xa4\x7a\x3e\x35\x3e\xea\x67\x46\xf4\xdd\x4b\xda\x0c\x12\x9f\x54\x5c\xb6\x49\xf0\xe6\x1a\x55\x65\xa0\xce\x79\xcd\x20\xf0\x68\x65\x85\x8a\xb2\xf9\x4a\xe0\x79\xb4\x49\x4d\xf2\xcb\x7e\x23\x68\xfd\xb5\x5a\x0f\xde\x2a\xca\xd7\x4a\xd8\xba\xd7\xa4\x5b\xb7\x2a\xca\x46\xd0\x6a\xbe\x4e\x9b\xe4\x91\x4f\xad\x35\xf0\x1d\x9e\xf3\xbe\x1d\xf1\x3d\x9e\xda\x21\x3f\xe0\x7d\x9e\xf2\x11\xe7\x3c\x25\x3b\xe6\x7d\x9e\xf0\xac\x1a\xd8\x3d\xe2\x03\x9e\xf0\x7d\x3b\xb4\x63\x7e\x50\x0e\x8f\x78\xce\xf7\x79\x4e\xf6\x0b\x9e\xf0\x43\x9e\xf1\xe4\xdf\xf4\x78\xce\x77\x4b\xca\xbd\x93\x9a\x39\xf1\x71\x09\x9d\x96\xf2\xc7\x76\x6c\x3f\xe7\x43\xe2\x63\x3b\xe4\x9c\x67\x3c\x5f\xdc\xca\xed\xde\xff\x17\x3f\x53\xe4\xc7\x22\x05\x79\xc4\xdf\x2e\xe3\x1c\xf0\x21\x4f\x88\xef\x72\xce\x47\x3c\xb1\xc3\x33\x93\x55\xbc\x16\xf1\x1d\x3b\x2c\x0f\x15\x1e\x4a\xde\x7f\x79\x97\xef\x97\xfe\x72\x3b\xb2\xb7\xcf\x0e\x6e\x47\xd5\xf6\x34\xbc\xc4\xcd\x38\xe7\x03\xf0\x51\x91\x77\x9f\x67\x76\x8f\xec\x88\xa7\x7c\x68\xc7\xf6\x2b\x9e\xf2\x43\x2a\xbc\xdb\x2f\x0b\x4a\x39\x1e\xd9\xb1\x1d\xda\xaf\xcf\x7c\x87\xe2\xe7\xf9\x33\x00\x00\xff\xff\x3c\x85\x89\x53\x08\x05\x00\x00"

func localesRuLc_messagesUpdateMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesUpdateMo,
		"locales/ru/LC_MESSAGES/update.mo",
	)
}

func localesRuLc_messagesUpdateMo() (*asset, error) {
	bytes, err := localesRuLc_messagesUpdateMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/update.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/releases.html":      templatesViewsReleasesHtml,
	"templates/views/update.html":        templatesViewsUpdateHtml,
	"locales/ru/LC_MESSAGES/ota.mo":      localesRuLc_messagesOtaMo,
	"locales/ru/LC_MESSAGES/releases.mo": localesRuLc_messagesReleasesMo,
	"locales/ru/LC_MESSAGES/update.mo":   localesRuLc_messagesUpdateMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"ota.mo":      &bintree{localesRuLc_messagesOtaMo, map[string]*bintree{}},
				"releases.mo": &bintree{localesRuLc_messagesReleasesMo, map[string]*bintree{}},
				"update.mo":   &bintree{localesRuLc_messagesUpdateMo, map[string]*bintree{}},
			}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"releases.html": &bintree{templatesViewsReleasesHtml, map[string]*bintree{}},
			"update.html":   &bintree{templatesViewsUpdateHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
