// Code generated by go-bindata.
// sources:
// templates/views/releases.html
// templates/views/update.html
// locales/ru/LC_MESSAGES/ota.mo
// locales/ru/LC_MESSAGES/releases.mo
// locales/ru/LC_MESSAGES/update.mo
// DO NOT EDIT!

package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsReleasesHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\xdb\x8e\xdb\x36\x13\xbe\xcf\x53\x0c\xf8\xef\x0f\x79\x91\x95\x64\x6f\x9b\xb6\x70\xac\x2d\x82\xa4\x45\x03\xa4\x6d\x90\x6c\x7a\xd1\x9b\x80\x16\xc7\x36\x37\x32\xa9\x90\x23\x7b\x5d\xc3\xef\x5e\x50\x07\x5b\xb6\x65\x5b\xeb\x1c\x80\x16\xf5\x45\x42\x91\x73\xe2\x37\xdf\x90\xc3\x5d\x2e\x41\xe0\x48\x2a\x04\x16\x6b\x45\xa8\x88\xc1\x6a\xf5\x68\x20\xe4\x0c\xe2\x84\x5b\x1b\x31\xa3\xe7\xec\xe6\x11\x00\x40\x7d\x36\xd6\x89\x3f\x15\x7e\xef\x1a\xdc\xc8\x4e\xab\xd1\xbd\xf5\x7b\xd7\xa5\xfc\xae\xce\xfd\xfb\x94\x2b\x4c\x6a\xab\xfb\x12\x24\x29\xc1\x1d\x89\x5c\x6a\x72\x7d\xb3\x5c\x82\xec\xfd\xa0\x80\xbd\xc1\x04\xb9\x45\xcb\x20\x80\xd5\x6a\x10\x4e\xae\x1b\x14\xea\xc1\x26\xc8\xcd\x48\xde\xb3\x9b\x41\x28\xe4\x6c\xc7\x7f\xc3\xd4\x56\x48\x15\x30\xc7\x7d\x10\x1f\x26\xe8\x1b\xb4\xa9\x56\x56\xce\x9a\xf6\x90\xab\xe4\x72\x5b\x4a\x50\xa8\x5a\x32\x32\x45\x01\x82\x13\x2f\xe6\x05\xd5\xec\x81\xd2\x73\xc3\x53\x06\x96\x16\x09\x46\x6c\x2e\x05\x4d\xfa\xbd\x6e\xf7\xff\x07\x3c\x15\xde\x26\xc8\xc5\xb1\x75\x73\x78\xb1\x34\xb0\x81\xfd\x0f\x34\x56\x6a\x55\xa1\x4e\x93\x07\xe8\x3e\x8b\x49\x6a\x65\xcf\xd2\x7d\x97\x26\x9a\x0b\x14\xc0\xe9\x2c\xfd\xb7\xf2\x2f\x3c\x4b\xf1\xf9\x04\xe3\x0f\x36\x9b\x9e\xb7\x63\x13\x4f\x24\x61\x4c\x99\x39\xcf\xfb\x6b\x4e\x93\x36\x8a\x83\xf0\x58\x16\x9d\xee\x09\x0e\x0c\xb5\x58\x1c\x5e\x5f\x2e\xc1\x70\x35\x46\xb8\x90\x57\x70\x61\x8a\xd2\x83\x7e\x04\x41\x39\xb6\xee\xc4\x38\x6c\xfd\x24\xc3\x84\xdb\x72\x65\x38\x28\x49\x06\xab\x95\xf3\x2c\x47\x9b\x95\x97\xf6\x79\x66\x0c\x2a\x72\x88\xd8\x94\xab\xaa\x8a\x12\x3e\xc4\x04\xf2\x7f\x7d\x9b\xc5\x31\x5a\xcb\x36\x30\xc6\x85\x12\x83\x8b\x1c\x49\xa7\xe8\x16\x51\x89\x02\xd9\x23\xd0\x54\xf1\x1d\x15\x80\x9d\x83\x60\x48\xca\x1f\x1b\x9d\xa5\x0c\x8c\x76\x95\x5a\x7c\x9c\x36\x92\x1b\xe2\x30\x31\x38\x8a\x58\xa8\x89\x87\x06\x53\x6d\x25\x69\xb3\x08\xeb\x10\xbd\x7c\x01\xab\x55\x58\x7d\x0d\xa5\x62\x40\xdc\x8c\x91\x22\xf6\x7e\x98\x70\xf5\x81\xd5\x62\x01\x17\x4f\x89\x4a\x3e\x96\xb1\x2e\x26\xef\x6d\xcb\xa0\xf2\xc0\x64\x65\x73\xc4\x2d\x8c\xb8\x3f\x92\x09\xfa\x42\xcf\x95\xab\x4d\x06\xf9\xb9\x1d\xb1\x35\xea\x2f\xd6\x2b\x0e\x76\x77\xf0\xca\x96\x08\x84\xfc\xe6\x51\x2b\xc9\x82\x1e\x0a\x9b\x18\x42\x26\xc3\x63\xb4\x6c\xb6\x85\x1f\xe1\x22\x28\xf9\xe2\xca\x77\x63\xb9\x5e\xcc\x0f\xb1\x3b\x18\x66\x44\x5a\x01\x2d\x52\x8c\x58\xf1\xb1\x97\x1d\xe1\xca\xcb\xec\x25\x27\xbf\x09\x7c\xd2\xe3\xb1\x43\x76\xaa\x05\x4f\xaa\xb9\x32\xdb\xff\xab\x4f\xe6\x63\xbf\xcc\xc3\x73\xad\x46\xd2\x4c\x21\x4b\xc7\x86\x0b\x04\xd2\x50\x55\x6e\x73\xb1\x6d\x19\x89\x79\x92\x0c\x79\xfc\x21\x62\xa5\xe0\xbb\xc2\x4c\xc7\xdb\xa3\xa1\x77\x05\x23\x9e\x58\xbc\x7c\xfa\x00\x32\x41\x13\xa1\xb8\x31\x7a\xee\xc7\xd2\xc4\x09\xfa\xae\x7a\x76\x29\x55\x06\x01\x3c\x4d\x13\x19\x73\xca\xaf\xa2\x07\xb2\x2b\xf7\x1c\x16\x79\x78\x80\xc6\x3f\x25\x8b\xc0\x95\x00\x83\x96\xb8\xa1\x6d\x9c\xce\xce\xae\xab\xa4\x4f\x4f\x6e\x9c\xe8\x4c\xf8\x59\x7e\x91\xfb\x3c\xa1\x56\xd9\x85\xb9\xa4\x49\xb5\x9d\xaf\x94\xea\xf5\xcd\xd0\xee\x0c\x82\xb6\xec\x98\x73\xa3\xa4\x1a\x7f\x11\x7a\x18\x9c\xea\x19\x7e\x52\x81\xbf\xc9\x4d\x34\x31\xe0\xd3\x73\x4f\x86\xdb\xc9\x7e\xc2\x0b\x97\x5f\x21\xad\x9b\x94\x9e\xb6\xbb\xf7\x14\xd8\x17\x69\xd3\x30\x0c\x6c\x6c\x64\x4a\x25\x25\x6a\x94\x0e\xef\xf8\x8c\x17\x8b\xec\x46\xe8\x38\x9b\xa2\xa2\x60\x6e\x24\x61\x47\x70\xc2\x5b\xfd\x96\x8c\x54\xe3\xed\x4c\x54\x0d\xf0\x33\x0a\x7e\xd6\x66\xca\x09\xd8\x75\xb7\xfb\x9d\xdf\xed\xf9\xdd\xeb\xdb\xde\x93\x7e\xf7\xdb\x7e\xf7\xc9\x9f\xdd\xef\xfb\xdd\x2e\xcb\x93\x76\x39\x08\x0b\x2f\x37\xed\x02\xae\x7b\x73\xed\x72\xeb\xd6\xa8\xae\x58\xb5\xcb\x67\x29\xef\xdc\xb0\x0f\x37\xe0\xda\xe5\x93\x8a\xc7\x7b\xe5\xd3\x4c\x19\x84\x47\xba\xe5\x41\x98\xbf\xdb\x1a\xde\x89\x27\x5f\x9d\xb5\xcf\x72\x58\xfe\x57\x3b\x8f\x6a\x6f\x75\xd7\xd1\xb3\x2a\xce\xe5\x12\x2c\x71\x92\xf1\x2f\xb7\xbf\xbe\x82\x4e\x31\x7e\xf7\xe6\x15\xb0\x50\x70\x3b\x19\x6a\x6e\x44\xc8\xad\x45\xb2\xe1\x0c\x95\xd0\xc6\x86\xeb\x47\xa6\x0d\x14\x92\x3f\xb4\x61\x6c\x8b\xd9\xdb\x62\x76\xa8\x35\x59\x32\x3c\x0d\xa6\x52\x05\xb1\xb5\xac\xbc\xe7\x3f\xa3\xd7\xcd\xe3\xb6\x0a\x60\x33\x73\x3c\x80\x66\x54\xee\xec\x67\xc4\x24\xbc\xb3\xe1\xdd\xc7\x0c\xcd\x22\xa8\xc1\xe2\x62\xb9\xfb\x12\x58\x0c\xad\x73\x78\x30\x01\x5f\xc4\xe7\x06\xed\x1d\xdf\xb5\x34\x7c\x05\xe7\xe5\xde\x0f\xe6\x7e\xdb\x7d\x51\x23\xad\xce\xd7\x75\x75\x5d\x74\xaa\xa3\xf6\x32\x30\xc8\xc5\xa2\x33\xca\x54\xfe\x07\x09\xe8\x5c\xc2\x72\xab\x30\xe7\x52\x09\x3d\x0f\xb6\x5b\x23\x88\x60\xa3\x21\xc5\x55\xd5\x94\xec\x2a\xbb\xdf\x8c\x1b\xc8\x20\x02\xaf\x7c\xc2\xe5\x76\x42\x0f\x1e\x83\x14\xf0\x18\xbc\xb0\xec\xe6\xbc\xa7\xfb\x2d\x86\x1c\x41\xe7\x88\x69\xf7\xcb\xe0\x71\x04\xde\x8f\xa5\x54\xd4\xf3\xf6\xa4\x1a\x5a\x97\x8b\x80\xdf\xf1\xfb\x4e\xb3\x45\x07\x62\x1f\xbc\xd7\xbf\xbf\xbd\xf5\xae\x9a\x7d\x9a\xa4\x0f\x59\xf3\x5a\xf9\xb4\xec\xd7\x00\x32\x87\x62\x5f\x6f\xd1\x31\x2c\x4b\x08\xa2\x28\x02\x6f\xc4\x65\x82\xc2\x3b\xa6\xe4\x7e\x0a\xe7\xf0\xfa\x37\x4d\x72\xb4\x38\xb0\x91\xad\x4d\xb9\x6e\xa3\x0f\xde\x4f\xc6\x68\x73\x60\x5b\x5b\xf2\x78\x4f\x7d\x30\xc1\x14\xad\xe5\x63\x6c\xa1\x50\xa0\x86\x2d\xed\x4f\xa4\xc0\x7e\x41\xe3\xd3\xc2\x96\x16\x89\x54\xe3\x3e\x78\xeb\x4a\xf8\x66\x3f\xcf\xf5\xdf\xea\xf2\xe9\xc1\xf5\xe6\xdb\x6c\x7f\x76\xd7\xc6\x6a\x87\xa0\xdb\x95\x51\xb4\x6f\x3b\x85\xd1\x94\xc3\xcf\xc1\xbd\x83\xb5\x54\xb4\xbe\x07\x54\xff\xa3\xe6\xbf\x98\x9a\xbb\x4b\xeb\x86\x77\xd3\x1c\xfc\x1d\x00\x00\xff\xff\x4e\xf5\x14\x91\xdd\x18\x00\x00"

func templatesViewsReleasesHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsReleasesHtml,
		"templates/views/releases.html",
	)
}

func templatesViewsReleasesHtml() (*asset, error) {
	bytes, err := templatesViewsReleasesHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/releases.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesViewsUpdateHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x57\x6d\x6f\xdb\xbe\x11\x7f\x9f\x4f\x71\x53\x33\xc8\x46\x63\x09\xf6\xfa\x62\x70\x2d\x0f\x43\xb7\x62\x05\xba\x2e\xcb\x43\xf7\x32\xa0\xc5\xb3\x45\x97\x22\x55\x92\x72\xe2\x18\xfe\xee\x03\xf5\x60\x4b\x8a\xe4\x87\xa6\x28\xfa\xe2\x4f\x20\xb1\x74\xba\xdf\xdd\xf1\x9e\x78\xdc\x6c\x80\xe2\x9c\x09\x04\x27\x94\xc2\xa0\x30\x0e\x6c\xb7\x17\x13\xca\x56\x10\x72\xa2\x75\xe0\x28\xf9\xe8\x4c\x2f\x00\x00\xaa\xd4\x50\xf2\x41\x4c\x07\xc3\x11\xd8\x27\x1d\x97\x4f\x4f\x7a\x30\x1c\x15\xfc\x4d\xcc\xd3\x43\x42\x04\xf2\xca\xd7\x97\x1c\xa5\x15\x75\x9e\x8c\x2f\x1a\x4d\x37\x1b\x60\xc3\xbf\x0a\x70\xee\x93\x85\x22\x14\x41\x21\x47\xa2\xd1\x01\x0f\xb6\xdb\x89\x1f\x8d\x5a\x70\x56\x3e\xa3\x81\xf3\xc8\x9e\x89\xa2\x4e\xa9\x6b\x2e\x55\xfc\x90\xd3\x20\xff\x79\x58\xa1\x32\x2c\xe4\xd8\xa2\x3d\x93\x94\xf2\x12\xcc\x99\x36\x83\x54\x68\xb3\xe6\xb8\x83\x6b\x83\x89\xee\xc0\x66\x78\xce\xa6\x13\x02\x91\xc2\x79\xe0\xbc\xb1\xdc\x83\xa1\x33\x9d\xe8\x84\x88\x52\xae\x25\x3e\x08\xe9\x4c\x87\x13\xdf\xd2\xa7\x13\x9f\x4c\x27\x3e\x67\x67\x49\x1d\x75\x49\x1d\x9d\x24\x75\xe2\xa7\xbc\xe3\x4b\xe9\xcb\xd2\xf8\x6e\xab\xa2\x77\xa5\xf6\x5b\x83\xc9\x1d\x33\xd6\xad\xbb\xf8\x59\x1a\x0c\xe1\x3e\xe1\x92\x50\x98\x31\x41\xd4\x1a\xe6\x8c\xef\x23\xf9\xee\x80\x6c\x1b\xba\x6a\x18\x07\x91\x54\xec\x59\x0a\x43\x38\x64\xef\x9c\xcc\x90\x0f\x38\xce\x0d\x50\x25\x93\x67\x29\xd0\x01\x25\x39\xe6\xfc\x0e\xc4\x68\x22\x49\x03\x27\x91\xda\x38\xd9\x8e\xa4\x21\x4e\xa7\xc6\x7c\x91\xd0\x30\x29\x02\x67\xb3\x01\xef\x06\xbf\xa7\xa8\x8d\x77\x7f\xf3\xd9\xbb\x26\x26\x82\xed\xd6\x01\x21\x57\x84\x33\x4a\x0c\x4e\x27\xbe\x55\xd4\xe5\x5f\xca\x56\xa7\x38\x78\xf4\x4a\x07\x8f\xe0\x2b\x2a\x36\x5f\x43\x9a\xf9\x19\xe9\xe9\x2e\xa6\xbb\x54\xa7\xbc\xe2\xde\x03\x06\xe5\x30\xb3\x37\xe1\x2b\x2a\xcd\xa4\xc8\xd5\x8d\x27\x3e\x35\xc7\xc0\xb4\xd4\xb9\xca\xa1\x83\x15\xe1\x29\x3a\xd3\x89\x4f\xe9\xf4\xe2\x74\xcd\x1f\x22\x0c\xbf\xe9\x34\xfe\x11\xd5\x61\x81\xfd\x51\xdd\x7f\x57\x61\xc4\x0c\x86\x26\x55\x78\x8e\xfe\x7a\xc5\x12\x15\x46\x7b\x0b\xb2\x9a\x85\x8c\xe1\x48\x8a\xe6\xab\x2a\x84\x12\xb1\x40\x05\x59\x45\xe4\xff\x0b\x52\x25\x59\x98\x06\x21\x0d\x84\xa9\x52\x28\x0c\x90\xca\x16\xe0\xcf\xda\xee\x42\x30\xbe\xfb\xf3\x16\xd2\x72\x64\x39\x94\x59\x76\x78\x6b\x67\xfa\xef\x96\x3d\xbf\xc2\x6f\x9a\x3d\x63\xd3\x6f\x3b\xd1\xb3\xb5\x41\x5d\x66\xbf\xb5\xea\x80\xcd\x1d\x0d\x10\x1a\x07\x56\xd6\x6d\x16\x4a\xa6\xc9\xb1\xca\x98\xa5\xc6\x48\x01\x66\x9d\x60\xe0\xe4\x2f\xbb\xa3\x68\x66\x04\xcc\x8c\x18\xe8\x34\x0c\x51\x6b\x07\x28\x31\x64\x60\xe4\x62\x61\x3b\x56\x2c\x29\xe1\xc7\x7a\x53\xbe\x72\x1c\x51\x0b\x34\x81\xf3\xe6\x5c\x60\xc6\x3f\x30\xb6\x93\x04\xce\x07\x29\xe6\x4c\xc5\x90\x36\x4e\xda\x73\xc5\x85\x84\xf3\x19\x09\xbf\x05\x4e\x21\xa1\x38\xba\x7b\x73\xc2\x35\xf6\xdf\x3b\x2f\x0e\x75\x07\x2e\xed\x0c\x72\xd0\x9b\x7e\xee\xc1\x63\x89\x75\x8a\xd3\x1f\x89\x12\x4c\x2c\x7e\x67\xa7\x03\x11\x14\x14\x6a\x43\x94\x01\x92\x24\x9c\x85\xc4\x1e\x45\x3f\x2f\x18\x46\xa5\xad\xb1\xa8\x6a\xfe\xc5\x71\x29\xba\xd4\xef\x14\x16\x85\xb1\x5c\xfd\xc4\x52\xb8\xc9\xe4\xf5\x6a\x8e\xcf\x69\x67\xf9\xba\x9b\xa3\x7b\xce\x68\xff\xd4\x42\x6e\x90\x2a\xaf\xc5\x63\xf1\xb3\xd9\x00\x0a\x6a\x8d\xbe\xa8\x5c\x2a\x22\x24\xd4\x29\x77\xb2\xd9\x80\x36\xc4\xb0\xf0\x5f\x77\xff\xfe\x0c\xbd\xfc\xf9\xfe\xe6\x33\x38\x3e\x25\x3a\x9a\x49\xa2\xa8\x4f\xb4\x46\xa3\xfd\x15\x0a\x2a\x95\xf6\xcb\xf1\x6d\xa9\xfd\x50\xef\x5f\xbd\x98\x09\x2f\xb4\xad\x32\x6f\x23\x56\x45\xbb\x05\x4b\xed\x14\x1f\x5f\xa3\x7b\xd9\x50\xbd\x6c\x6a\x3e\x5b\xf8\xf2\xbf\x29\xaa\xf5\xe0\x36\x26\xca\x0c\xfe\x97\x5d\x20\xac\x96\xe5\x77\x4b\xf6\xb4\x25\xe7\xd4\x16\x7d\x17\x13\x1d\x2a\x96\x98\xa2\x80\x2a\x1d\xc1\x5f\x92\x15\xc9\x3f\x16\x07\xd2\x65\x8f\xca\x30\x8d\x51\x98\xbe\xa7\x90\xd0\x75\x6f\x9e\x8a\x6c\x90\x85\x5e\x1f\x36\xbb\xc0\x5e\xf6\xdc\x37\xf9\x3d\xc6\xed\x57\xd5\xf7\xfa\xef\x2f\xaa\x4c\x5e\x9e\x75\x5f\xf0\xc9\xb8\x7d\x2f\x62\xd4\xe6\x6f\x0b\xc3\xb5\xc2\x15\x93\xa9\x3e\xc8\xf4\x91\x09\xa6\xa3\x0a\xcb\x8e\x87\xa3\x29\xeb\xec\x13\x85\x00\x5c\xb7\xf2\xf1\x1f\x65\x28\x64\x62\x37\xa2\x3d\x69\x08\x04\x95\xcd\xd8\x95\x10\x45\x38\x47\x9e\xdf\x31\xf4\x18\x86\x57\x2f\xbe\xc7\x5f\x48\x8c\x63\x70\x0b\x4d\x6e\x9d\x23\x54\x48\x0c\x7e\x8a\xc9\x02\xef\xa2\x34\x9e\x09\xc2\xb8\x1e\xe7\x71\xa8\x73\x92\x30\xc4\xc4\x20\xfd\xc8\x38\xea\x31\xb8\xd5\x88\xc4\x24\xcc\xef\x37\x57\xde\x8c\x89\x86\x8a\xe2\xc4\x1f\xc3\x3e\x28\xf3\x2b\x50\xfd\xc6\x5e\x0e\x06\xc8\x5d\xc8\x3b\x69\xe7\x7d\xf7\x0a\x46\x15\x37\x1f\x07\x52\xa6\xc9\x8c\x63\x81\x1d\x56\xfd\x5f\xae\x6a\x0c\x94\xc7\x68\x0b\x8b\x0d\x67\x6d\x60\x77\xfb\x9e\xc1\x27\xd3\x53\x25\xb9\xdd\x28\xaf\x3e\x6a\xef\x51\x25\xbd\x03\xb6\x9f\x8d\xf7\x90\xea\xc8\xda\x01\xdb\x8f\x86\x7b\x98\xa5\xb5\xed\x9a\xcd\xa1\x21\x14\xfe\x14\x80\x6b\x2f\x7e\xbb\xe1\xd7\x6d\x0b\x52\xe9\xef\xfc\xfa\x06\x5e\x65\xaa\x6b\x29\x84\x43\xa8\x62\x2c\x39\x8e\xf2\x2a\x63\xbe\x0d\x70\x24\x1f\xdb\xb8\xb7\x80\x5c\xe3\xd9\x26\x77\x89\x3b\x6c\xf2\x11\x54\xc3\xe4\xae\x0d\xd6\xcf\xbf\xfd\xdb\xb6\x12\xb1\x47\x26\xa8\x7c\xf4\xea\xe3\x0c\x04\x95\x7a\x2a\xa6\x97\x66\xb4\x56\x44\x41\x6a\x1b\x8b\x2f\x0d\xf1\x0b\xbc\xef\xc2\xdb\x4a\xca\xbf\x05\xd7\x2f\x46\x31\xb7\x91\x25\x59\x86\xb4\x4b\xb6\x2b\x85\xb7\x01\xb8\x7f\x2b\x38\x82\xa1\xdb\xd8\x4a\xed\xf5\xd2\x23\x4b\xf2\xd4\x7b\x29\xc5\xb6\xf7\x31\xb8\xd7\xff\xb9\xbd\x6b\xf4\x8d\x4c\x87\xe2\x63\x48\x5f\xd2\x5b\x7a\x4a\x6b\x43\xd9\x6d\xc3\x53\xa8\x53\x6e\x20\x08\x02\x70\xe7\x84\x71\xa4\x9d\xc9\x6d\x97\xc0\x47\xb8\xfe\x22\x0d\x9b\xaf\x5b\x8c\xae\x6d\xc0\xce\x4f\x63\x70\xff\xa9\x94\x54\x2d\x5b\xa8\xf1\xe2\x93\x19\x83\xf2\x62\xd4\x9a\x2c\xf0\x08\x73\xee\x19\x3c\x41\xae\xcd\xae\xd6\xa6\xdd\x5c\xda\xac\x39\x13\x8b\x31\xb8\x33\x29\x8d\x36\x8a\x24\x7f\x71\x3b\x11\xdb\x8e\xf4\x3e\x58\x67\xf0\x43\xde\xbb\x2d\xaa\xf1\x14\xff\x95\xcc\xe5\x15\xe2\x18\x28\xf7\xa3\x3e\x49\xc3\xaf\xf6\xe4\xb1\x86\x50\xc1\x75\xb7\x84\x7c\x9e\xae\x75\x84\x66\x6e\xbf\xa6\xfe\x8e\xb5\x8f\xfc\xca\xd0\x82\xfe\xa3\x4a\x6b\xeb\x77\xab\xd2\x93\xa6\xad\x61\x87\xf4\xc3\x02\xea\x53\x57\xdb\xc4\x06\xe7\x67\x7f\x49\x9a\xf8\xf9\xf4\x5f\xb9\x90\xfd\x3f\x00\x00\xff\xff\x27\x19\x97\x57\xe4\x19\x00\x00"

func templatesViewsUpdateHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsUpdateHtml,
		"templates/views/update.html",
	)
}

func templatesViewsUpdateHtml() (*asset, error) {
	bytes, err := templatesViewsUpdateHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/update.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesOtaMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\xcd\x8a\xd4\x40\x14\x85\x4f\xb4\xdd\x04\x15\x71\xed\xe2\xba\x70\xd0\x45\x8d\x49\xeb\x42\xaa\xbb\xba\xfd\x61\x06\xc4\x69\x94\x26\xe3\xca\x4d\xd9\xa9\xc9\x04\x93\xaa\x58\x55\x11\x85\x59\x88\x5b\xc5\x9d\x2b\x41\x7c\x05\x05\x71\x40\xf4\x19\xaa\xd7\x82\xbe\x80\x0f\x21\x49\x46\xc5\xbb\x3a\xdf\x3d\xe7\xfe\xfc\x38\x3b\x7a\x03\x00\x23\x00\xe7\x00\x4c\x01\x9c\x00\xf0\x00\x43\x35\x00\x4e\x03\x78\x0c\xe0\x14\x80\xe7\x00\x4e\x02\x78\x0d\x60\x1e\x01\x6f\x01\x1c\x07\xf0\x3d\x1a\xfa\x3f\x23\xe0\x0c\x80\x5f\x11\x10\x1d\x79\xc7\x8e\x76\x75\x37\xb0\x32\x7a\xaf\x2c\x98\x97\x0f\x47\xc6\x4b\xd4\x4a\xb7\xa3\xa5\xaa\x94\x74\xca\x0d\xb4\xdb\x14\x56\xe6\x0a\x4b\xd5\x18\xeb\xd9\xc2\x15\x65\xce\x6e\xb6\x85\x63\x99\xe1\x94\xab\x27\xd7\x1f\x95\xfb\xb2\x36\x9b\xb6\x8d\x77\xa4\xf3\x2c\xb3\x52\xbb\x4a\x7a\x63\x39\xdd\xe9\x2d\x5a\xb4\x56\xd6\x26\x37\x34\xfd\x2f\x3f\x8b\x77\xa4\x2e\x5a\x59\x28\x96\x29\x59\x73\xfa\xcb\x9c\x96\xad\x73\xa5\xd4\xf1\xe2\xf6\x62\x8b\xdd\x57\xd6\x95\x46\x73\x4a\x37\x93\xf8\x96\xd1\x5e\x69\xcf\xb2\x67\x8d\xe2\xe4\xd5\x53\x7f\xb9\xa9\x64\xa9\x27\xb4\xda\x97\xd6\x29\x2f\x76\xb3\x6d\x76\xed\x5f\xae\xfb\x67\x4f\x59\xb6\xa5\x57\x26\x2f\x75\xc1\x29\xbe\x57\xb5\x56\x56\x6c\xdb\xd8\xda\x71\xd2\x4d\x8f\x4e\x5c\x99\xd0\x20\x85\xbe\x90\x26\x42\xa4\xb4\xb1\x41\x9d\x4c\xce\x8b\x34\xa5\x39\x25\xc4\x7b\x9e\x89\xf1\x1f\x6b\x2a\xae\x76\xf2\x62\x1f\x9b\xa6\x09\x1d\x1c\x0c\x23\x33\x31\x4e\x2e\xd1\x9c\x52\xe2\x34\x9e\xe0\x6e\x76\x03\xe1\x7d\xf8\x14\xbe\x84\xc3\xf0\x79\xfd\x12\xe1\x5d\xf8\x10\xbe\x86\x6f\xe1\x63\x38\x5c\xbf\x58\xbf\xc2\xef\x00\x00\x00\xff\xff\xcf\xe7\x6b\x25\xfd\x01\x00\x00"

func localesRuLc_messagesOtaMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesOtaMo,
		"locales/ru/LC_MESSAGES/ota.mo",
	)
}

func localesRuLc_messagesOtaMo() (*asset, error) {
	bytes, err := localesRuLc_messagesOtaMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/ota.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesReleasesMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x4f\x4b\x4f\x34\x45\x14\x3d\xcd\xa0\xe8\xa0\x46\x5d\x68\x4c\x5c\x94\x0b\x09\x2e\x1a\xa7\xd1\x44\x6d\x68\x1e\x22\x24\x46\x26\x92\x71\x30\x2e\x74\x51\xe9\x29\x66\x3a\xcc\x74\x77\xaa\xab\x41\x0d\x8b\x79\x68\x8c\x91\x44\xe3\x63\x2b\x1a\x17\x2c\x5c\xd8\x3e\xc6\x19\x86\x01\x56\xee\x6f\xf9\x03\xfc\x05\x26\xfe\x05\xd3\x0f\x3e\xf2\xdd\x45\xd5\x3d\xe7\x9e\x7b\xef\xb9\xff\x3c\x39\xfb\x1d\x00\x3c\x0a\xe0\x59\x00\x9f\x00\x78\x02\xc0\xbf\xc8\xa3\x62\x00\x73\x00\x2c\x03\x78\x04\xc0\x6b\x06\xf0\x10\x80\x9d\xe2\x7f\xdb\x00\x66\x01\xbc\x57\xe0\x0f\x0c\xe0\x41\x00\x07\x05\xdf\x31\x00\x06\x40\x1a\xc0\x3c\x80\x6f\x8a\x79\x67\xc5\x7f\x6e\x00\xeb\x06\xf0\x8b\x01\x3c\x0e\xe0\xbf\x19\xe0\xa9\x74\x71\x29\xc7\x4f\x97\x80\xc7\x00\x2c\x96\xf2\xf9\xaf\x94\x72\x1f\x1b\x05\x5f\x2d\xf0\xfb\x25\x60\x13\x80\x57\x02\x9e\x01\xf0\x73\xc1\xff\x55\xe8\xfe\x2e\x01\x06\x80\x87\x91\xfb\x4a\xe3\x01\xe4\x5e\xd3\xdb\xe7\x0a\x2e\xed\x99\xcf\xd7\x67\xfb\xca\xb8\x8b\x99\xf4\xd9\x74\x95\x17\xf8\x11\x36\xa5\xdb\xf2\x94\x70\x55\x2c\x05\xb6\x5a\xc2\x3d\x8c\xe2\x0e\xde\x08\x8e\xfd\x76\xc0\x1b\xd8\xe3\xaa\x85\x9a\x68\x0b\x1e\x89\x08\x35\xd1\x09\x8e\x04\xde\xf1\x3e\x16\xd8\x0f\x9b\x92\x37\x04\xe3\x61\xd8\xf6\x5c\x9e\x4e\x63\xc7\x9e\x6a\x31\x29\x22\xc5\xa5\xc2\x7e\x98\x4e\x10\x0d\xc6\x15\xde\x15\x32\xf2\x02\x1f\x6e\x2c\xa5\xf0\x15\x6a\x22\x0c\xa4\x32\xab\x51\xd3\x6b\x98\xaf\xc7\xcd\xc8\xac\x07\x36\x6b\x88\xa3\x8d\x43\xaf\xc5\x3b\xc1\x92\x8c\xcb\xbb\x3c\x52\x66\x5d\x72\x3f\x6a\x73\x15\x48\x9b\xbd\x95\x95\x58\x35\x96\xbc\x13\x34\x02\xb6\x7a\x9f\x7e\xad\xbc\xcb\xfd\x66\xcc\x9b\xc2\xac\x0b\xde\xb1\xd9\x3d\x6c\xb3\x5a\x1c\x45\x1e\xf7\xcb\xd5\x37\xab\xdb\x66\xe1\xc5\x66\xd6\x52\xa5\xbc\x15\xf8\x4a\xf8\xca\xac\x7f\x14\x0a\x9b\x29\xf1\xa1\x7a\x31\x6c\x73\xcf\x5f\x61\x6e\x8b\xcb\x48\x28\x67\xbf\xbe\x63\xbe\x7a\xa7\x4b\xfd\x1c\x08\x69\x6e\xfb\x6e\xd0\xf0\xfc\xa6\xcd\xca\x7b\xed\x58\xf2\xb6\xb9\x13\xc8\x4e\x64\x33\x3f\xcc\x60\xe4\xbc\xb4\xc2\xf2\xd4\xf1\x9f\xb7\x2a\x8e\x63\xb1\x85\x05\x96\xa6\x95\xe7\x1c\xcb\x62\xeb\xac\xc2\xec\x0c\xaf\x39\xcb\xb7\xa5\x55\xe7\xe5\x34\x5d\xcc\x64\xab\x56\x85\x9d\x9c\xe4\x2d\x6b\xce\x72\xe5\x05\xb6\xce\x2c\x66\xb3\xe5\x15\xd0\xb7\x34\xa4\x0b\xdd\xd3\x7d\xfa\x8d\xc6\xfa\x4b\xd0\x57\xba\xab\x3f\xa5\xb1\xee\xd3\x90\x26\xba\xaf\x07\xba\x4b\x09\xe8\x3c\x83\x3d\x3d\xa0\x29\x4d\x53\xe2\x47\x9a\x50\xa2\x3f\xa3\x44\xf7\xf5\x29\xe8\x4c\x0f\xf2\xe4\x07\x1a\xd2\x25\x8d\x69\xa4\xbf\x00\xfd\x44\x7f\x50\x92\xc2\xdb\x5a\x42\x23\x9a\xd2\x50\x77\x41\xdf\xd3\xaf\x74\x45\xd7\xd9\xde\xbe\x3e\x65\x74\xa3\xbb\x34\xa6\x4b\xba\xa6\x3f\x69\x48\x57\x34\xa6\x21\xd3\x3d\x46\x37\xa9\x9e\x86\x34\xa2\x84\x6e\xf4\x40\xf7\x68\x42\xd7\x34\x4d\xbd\x27\xba\x4f\x09\xcb\x2a\xbf\xeb\xae\x1e\xd0\x88\x26\x34\x06\x7d\x9d\xb6\xe8\x5e\x76\x51\x71\xc9\x40\x7f\x4e\x63\xba\xc0\xff\x01\x00\x00\xff\xff\x59\x7c\xe5\x90\xe1\x03\x00\x00"

func localesRuLc_messagesReleasesMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesReleasesMo,
		"locales/ru/LC_MESSAGES/releases.mo",
	)
}

func localesRuLc_messagesReleasesMo() (*asset, error) {
	bytes, err := localesRuLc_messagesReleasesMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/releases.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesUpdateMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\x4f\x6f\xd3\x58\x14\xc5\x8f\x9b\xce\x4c\x27\x9a\xd1\x48\xed\xac\x80\xc5\xed\xa2\x15\x20\xb9\xc4\x69\x90\x90\x5b\xb7\x88\xaa\x95\x10\x8d\x84\x4a\x5a\xb1\x7d\xd4\x2f\xa9\x85\x63\x5b\xcf\x36\xa2\x52\x17\xa1\x65\xc9\x16\xb1\xa3\x5b\x36\x48\xe9\x9f\x90\x40\x69\xfa\x15\xae\xbf\x00\x62\xcb\x0e\xd8\xb2\x41\xb1\x9d\x22\x04\xde\xfc\xce\xbd\xf7\xdc\xfb\x8e\x3f\x8c\x8f\x3e\x07\x80\x22\x80\x4b\x00\x5c\x00\xff\x02\x78\x8f\xec\xfb\x0c\x60\x02\xc0\x17\x00\x7f\x02\xf8\x43\xcb\xf8\x4f\xce\x89\x9c\x17\xb4\xcc\x37\xa9\x01\xff\x01\xb8\xae\x01\xe3\x00\x96\x35\xe0\x7f\x00\xf7\x35\x60\x51\x03\x9a\x1a\x50\x06\xf0\x7a\x04\x18\x03\xf0\x31\xe7\xa7\x9c\x5f\x73\x7e\x1b\x01\xa6\x00\x8c\x16\x80\x8b\x00\xae\x16\x80\x19\x00\x2b\x05\xa0\x02\x20\x2e\x00\x5a\x9e\xf1\x6f\x00\x23\xf9\x3f\xfc\x95\xf7\xc6\x72\x16\x06\x37\x06\xb9\xf3\xfc\x58\xf2\xbd\xba\xa3\x9a\x24\x3c\x9b\x94\x0c\x23\xa1\x22\xdc\x8b\x64\x40\x46\x86\x72\x86\xd9\x0c\x15\xac\x07\x0d\x25\x6c\x49\x22\x08\x5c\x67\x53\x44\x8e\xef\x9d\xf7\x94\x74\xa5\x08\x25\xd6\x03\xd7\x17\x36\x3d\x70\x3c\xa1\xb6\xa9\xee\xb8\x12\x1b\x52\x39\xf5\x6d\x8a\xd3\x89\xb4\xb3\xe6\x9a\x0c\x7c\x15\xe9\xd5\xb0\xe1\xd8\xfa\xad\xb8\x11\xea\x35\xdf\x24\x5b\x3e\xba\xf9\xd0\xd9\x12\x4d\x7f\x46\xc5\xc5\x55\x11\x46\x7a\x4d\x09\x2f\x74\x45\xe4\x2b\x93\xee\xa4\x23\xaa\xc6\x4a\x34\x7d\xdb\xa7\xf9\x9f\xfc\x0b\xc5\x55\xe1\x35\x62\xd1\x90\x7a\x4d\x8a\xa6\x49\xe7\xb5\x49\x6b\x71\x18\x3a\xc2\x2b\x56\x6f\x57\x97\xf5\x0d\xa9\x42\xc7\xf7\x4c\x32\x66\x4a\xc5\x25\xdf\x8b\xa4\x17\xe9\xb5\xed\x40\x9a\x14\xc9\xc7\xd1\xb5\xc0\x15\x8e\x37\x47\x9b\x5b\x42\x85\x32\xb2\xd6\x6b\x2b\xfa\x8d\x1f\xbe\x41\x9e\xba\x54\xfa\xb2\xb7\xe9\xdb\x8e\xd7\x30\xa9\x78\xd7\x8d\x95\x70\xf5\x15\x5f\x35\x43\x93\xbc\x20\x2d\x43\x6b\x76\x8e\x32\x69\x79\x53\x46\xc9\xb2\x0c\x9a\x9e\xa6\x81\x2c\x4d\x5a\x86\x41\x8b\x54\x22\x33\xad\x17\xac\xf2\x70\x34\x6f\x55\x06\xf2\x72\x6a\x9b\x37\x4a\xb4\xb3\x93\xad\x2c\x58\xe5\xd2\x15\x5a\x24\x83\x4c\x2a\xcf\x81\xf7\xb9\xcf\xc7\x7c\xc8\x9d\xa4\xc5\xc7\xdc\x4b\x76\x93\x67\xc4\x3d\xe2\xb3\xb4\xd3\xe1\x2e\xb7\xf9\x2c\xd9\x4b\x9e\x24\xbb\xd9\x14\xfc\x8a\xdb\x7c\x44\xc6\x50\x94\x87\x62\x76\x28\x2a\xe0\x97\x7c\xc0\xa7\xdc\xe7\xc3\xe1\xc9\xb3\xa4\xc5\x3d\x3e\xe1\x3e\xbf\xe1\x0e\x9f\x72\x8f\x3b\xbf\xba\xd2\x17\x4f\xb8\xc7\x5d\xf0\x8b\xc1\xa9\xa4\x95\xec\x71\x97\xdf\x71\x9b\xf8\x80\x7b\x7c\xca\xed\xa4\x95\xae\x1c\x71\x9f\x92\xa7\xdc\xe6\xb7\x7c\xc2\x6d\xf0\x7e\xd2\x4a\x0f\x0d\x52\xa7\xf6\xee\xf9\x7e\xf6\xe0\x6f\x96\xbe\x07\x00\x00\xff\xff\x1e\x7a\x2f\x1a\xaa\x03\x00\x00"

func localesRuLc_messagesUpdateMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesUpdateMo,
		"locales/ru/LC_MESSAGES/update.mo",
	)
}

func localesRuLc_messagesUpdateMo() (*asset, error) {
	bytes, err := localesRuLc_messagesUpdateMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/update.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/releases.html":      templatesViewsReleasesHtml,
	"templates/views/update.html":        templatesViewsUpdateHtml,
	"locales/ru/LC_MESSAGES/ota.mo":      localesRuLc_messagesOtaMo,
	"locales/ru/LC_MESSAGES/releases.mo": localesRuLc_messagesReleasesMo,
	"locales/ru/LC_MESSAGES/update.mo":   localesRuLc_messagesUpdateMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"ota.mo":      &bintree{localesRuLc_messagesOtaMo, map[string]*bintree{}},
				"releases.mo": &bintree{localesRuLc_messagesReleasesMo, map[string]*bintree{}},
				"update.mo":   &bintree{localesRuLc_messagesUpdateMo, map[string]*bintree{}},
			}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"releases.html": &bintree{templatesViewsReleasesHtml, map[string]*bintree{}},
			"update.html":   &bintree{templatesViewsUpdateHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
