// Code generated by go-bindata.
// sources:
// templates/views/releases.html
// templates/views/update.html
// locales/ru/LC_MESSAGES/ota.mo
// locales/ru/LC_MESSAGES/releases.mo
// locales/ru/LC_MESSAGES/update.mo
// DO NOT EDIT!

package internal

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsReleasesHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x6d\x6f\xdb\x36\x10\xfe\xde\x5f\x71\xe0\x52\xc8\x41\x23\xc9\xce\xd6\x6d\x70\xad\x0c\x45\xbb\x61\x05\xba\xad\x68\xd3\x7d\xd8\x97\x82\x16\xcf\x36\x53\x9a\x54\x49\xca\x8e\x67\xf8\xbf\x0f\xd4\x8b\x2d\xcb\xb2\xad\xa4\x4e\x30\x0c\x13\xd0\x86\x22\xef\x8d\xcf\x3d\x47\x1d\xbd\x5c\x02\xc3\x11\x97\x08\x24\x56\xd2\xa2\xb4\x04\x56\xab\x27\x03\xc6\x67\x10\x0b\x6a\x4c\x44\xb4\x9a\x93\xab\x27\x00\x00\xd5\xd9\x58\x09\x7f\xca\xfc\xde\x25\xb8\x91\x99\x96\xa3\x5b\xe3\xf7\x2e\x0b\xf9\xba\xce\xed\xa7\x84\x4a\x14\x95\xd5\x5d\x09\xcb\xad\xc0\x9a\x44\x26\x35\xb9\xbc\x5a\x2e\x81\xf7\x7e\x94\x40\xde\xa3\x40\x6a\xd0\x10\x08\x60\xb5\x1a\x84\x93\xcb\x06\x85\x6a\xb0\x02\xa9\x1e\xf1\x5b\x72\x35\x08\x19\x9f\xd5\xfc\x37\x4c\x6d\x85\x54\x02\x73\xd8\x87\xa5\x43\x81\xbe\x46\x93\x28\x69\xf8\xac\x69\x0f\x99\x4a\x26\xb7\xa5\x04\xb9\xaa\xb1\x9a\x27\xc8\x80\x51\x4b\xf3\x79\x66\x2b\xf6\x40\xaa\xb9\xa6\x09\x01\x63\x17\x02\x23\x32\xe7\xcc\x4e\xfa\xbd\x6e\xf7\xe9\x1e\x4f\xb9\xb7\x09\x52\x76\x68\x5d\xef\x5f\x2c\x0c\x6c\x60\xff\x13\xb5\xe1\x4a\x96\xa8\xdb\xc9\x1d\x74\x5f\xc6\x96\x2b\x69\xee\xa5\xfb\x31\x11\x8a\x32\x64\x40\xed\xbd\xf4\x3f\xf0\xbf\xf1\x5e\x8a\xaf\x26\x18\x7f\x36\xe9\xf4\x7e\x3b\xd6\xf1\x84\x5b\x8c\x6d\xaa\xef\xe7\xfd\x1d\xb5\x93\x36\x8a\x83\xf0\x50\x16\x9d\xee\x11\x0e\x0c\x15\x5b\xec\x5f\x5f\x2e\x41\x53\x39\x46\x38\xe3\x17\x70\xa6\xf3\xd2\x83\x7e\x04\x41\x31\x36\xee\xc4\xd8\x6f\xfd\x28\xc3\x98\xdb\x72\x69\x38\x28\x48\x06\xab\x95\xf3\xcc\x47\x9b\x95\x37\xe6\x55\xaa\x35\x4a\xeb\x10\x31\x09\x95\x65\x15\x09\x3a\x44\x01\xd9\xff\xbe\x49\xe3\x18\x8d\x21\x1b\x18\xe3\x5c\x89\xc0\x59\x86\xa4\x53\x74\x8b\x28\x59\x8e\xec\x01\x68\xca\xf8\x0e\x0a\x40\xed\x20\x18\x5a\xe9\x8f\xb5\x4a\x13\x02\x5a\xb9\x4a\xcd\x5f\x8e\x1b\xc9\x0c\x51\x98\x68\x1c\x45\x24\x54\x96\x86\x1a\x13\x65\xb8\x55\x7a\x11\x56\x21\x7a\xf3\x1a\x56\xab\xb0\x7c\x1b\x72\x49\xc0\x52\x3d\x46\x1b\x91\x4f\x43\x41\xe5\x67\x52\x89\x05\x5c\x3c\x05\x2a\xd9\x98\xc7\x2a\x9f\xbc\x35\x2d\x83\xca\x02\xe3\xa5\xcd\x11\x35\x30\xa2\xfe\x88\x0b\xf4\x99\x9a\x4b\x57\x9b\x04\xb2\x73\x3b\x22\x6b\xd4\x5f\xaf\x57\x1c\xec\xee\xe0\xe5\x2d\x11\x08\xe9\xd5\x93\x56\x92\x39\x3d\x24\x36\x31\xc4\xea\x14\x0f\xd1\xb2\xd9\x16\x7e\x81\xb3\xa0\xe0\x8b\x2b\xdf\x8d\xe5\x6a\x31\xdf\xc5\xee\x60\x98\x5a\xab\x24\xd8\x45\x82\x11\xc9\x5f\x76\xb2\xc3\x5c\x79\xe9\x9d\xe4\x64\x5f\x02\xdf\xaa\xf1\xd8\x21\x3b\x55\x8c\x8a\x72\xae\xc8\xf6\x37\xd5\xc9\x6c\xec\xd7\xf3\xf0\x4a\xc9\x11\xd7\x53\x48\x93\xb1\xa6\x0c\xc1\x2a\x28\x4b\xf8\xa9\x71\xc9\x91\x5c\xac\xff\x35\x14\xe1\x96\xf1\x98\x0a\x31\xa4\xf1\xe7\x88\x14\x82\x1f\x73\xab\x1d\x6f\x87\x9e\xde\x05\x8c\xa8\x30\x78\xfe\xe2\x0e\x24\x83\x26\xa2\x51\xad\xd5\xdc\x8f\xb9\x8e\x05\xfa\xae\xaa\xea\x5b\x2c\x82\x00\x9a\x24\x82\xc7\xd4\x66\x9f\xa8\x3b\xb2\x2e\xf3\x1c\xe6\xf9\xb9\x83\xc6\xbf\x3a\xbb\x40\x25\x03\x8d\xc6\x52\x6d\xeb\xe0\x3c\x5c\xd6\x5d\xe5\x7d\x7d\xd2\x63\xa1\x52\xe6\xa7\xd9\x87\xdf\xa7\xc2\xb6\xca\x3a\xcc\xb9\x9d\x94\x3b\x7e\x24\x0a\xac\xbf\x24\xed\xce\x2c\x58\x9f\x35\x95\x43\xeb\x3d\x4e\xd5\xcc\x75\x7c\xa7\x3e\x58\xe6\x54\x4b\x2e\xc7\x0f\xcb\x3d\xed\xa2\xc7\x53\x9e\x2a\x19\x1e\x8d\xf4\xfa\x7a\x62\x59\x4d\xcd\x64\x97\x4d\xb9\xcb\x47\xe7\xcc\x69\xa5\x1b\x6e\x32\xbb\x22\x27\xe9\x77\x6a\x14\x2e\x1b\xf4\x97\xb6\xed\xa6\x06\x26\xd6\x3c\xb1\x05\x7d\x2b\x35\x1c\xde\xd0\x19\xcd\x17\xc9\x15\x53\x71\x3a\x45\x69\x83\xb9\xe6\x16\x3b\x8c\x5a\xbc\x56\x1f\xac\xe6\x72\xbc\xcd\x8e\x4d\x00\xc1\x2f\x4a\x4f\xa9\x05\x72\xd9\xed\x7e\xef\x77\x7b\x7e\xf7\xf2\xba\xf7\xbc\xdf\xfd\xae\xdf\x7d\xfe\x57\xf7\x87\x7e\xb7\x4b\x32\x22\x9d\x0f\xc2\xdc\x4b\xab\xcd\xb6\x48\x40\x3b\x64\xab\x41\xbb\x6b\x49\xeb\x16\xb4\xaa\x58\x5e\x4b\xee\xa5\x5c\xeb\x64\xee\x6e\xc0\x5d\x4b\x8e\x2a\x1e\xbe\x93\x1c\x47\x74\x10\x1e\xb8\x95\x0c\xc2\xec\x7e\xdc\x70\x1f\x3f\x7a\xbb\xaf\xbc\x16\xc3\xe2\x4f\xe5\x1c\xaf\xfc\x26\xe2\x6e\x4e\xa4\x8c\x73\xb9\x04\x63\xa9\xe5\xf1\xaf\xd7\xbf\xbd\x85\x4e\x3e\xfe\xf8\xfe\x2d\x90\x90\x51\x33\x19\x2a\xaa\x59\x48\x8d\x41\x6b\xc2\x19\x4a\xa6\xb4\x09\xd7\x97\x79\x13\x48\xb4\xfe\xd0\x84\xb1\xc9\x67\xaf\xf3\xd9\xa1\x52\xd6\x58\x4d\x93\x60\xca\x65\x10\x1b\x43\x8a\xbe\xe9\x84\x5e\x37\x3f\x22\x94\x01\x6c\x66\x0e\x07\xd0\x8c\xca\x8d\x39\x21\x26\xe1\x8d\x09\x6f\xbe\xa4\xa8\x17\x41\x05\x16\x17\xcb\xcd\x43\x60\x31\x34\xce\xe1\xde\x04\x3c\x88\xcf\x0d\xda\x35\xdf\x95\x34\x3c\x82\xf3\x62\xef\x7b\x73\xbf\xed\x3e\xaf\x91\x56\xc7\xf4\xba\xba\xce\x3a\xe5\x89\x7d\x1e\x68\xa4\x6c\xd1\x19\xa5\x32\xfb\xe1\x07\x3a\xe7\xb0\xdc\x2a\xcc\x39\x97\x4c\xcd\x83\xed\x96\x12\x22\xd8\x68\x70\x76\x51\x36\x73\x75\x65\xf7\xcc\xa8\x86\x14\x22\xf0\x8a\xab\x72\x66\x27\xf4\xe0\x19\x70\x06\xcf\xc0\x0b\x8b\xa6\xd8\x7b\xb1\xdb\x9a\xf1\x11\x74\x0e\x98\x76\x4f\x0a\xcf\x22\xf0\x7e\x2a\xa4\xa2\x9e\xb7\x23\xd5\xd0\xf2\x9d\x05\xf4\x86\xde\x76\x9a\x2d\x3a\x10\xfb\xe0\xbd\xfb\xe3\xc3\xb5\x77\xd1\xec\x53\x8b\x3e\xa4\xcd\x6b\xc5\x15\xbe\x5f\x01\x48\xef\x8b\x7d\xbd\x45\xc7\xb0\x54\x58\x88\xa2\x08\xbc\x11\xe5\x02\x99\x77\x48\xc9\x3d\x12\xe7\xf0\xee\x77\x65\xf9\x68\xb1\x67\x23\x5b\x9b\x72\x8d\x54\x1f\xbc\x9f\xb5\x56\x7a\xcf\xb6\xb6\xe4\xf1\xd6\xf6\x41\x07\x53\x34\x86\x8e\xb1\x85\x42\x8e\x1a\xb6\xb4\x3f\xe1\x0c\xfb\x39\x8d\x8f\x0b\x1b\xbb\x10\x5c\x8e\xfb\xe0\xad\x2b\xe1\xdb\xdd\x3c\x57\x9f\xd5\xf9\x8b\xbd\xeb\xcd\x5f\xb3\xdd\xd9\xba\x8d\x55\x8d\xa0\xdb\x95\x91\x77\xa6\xb5\xc2\x68\xca\xe1\x29\xb8\xb7\xb7\x96\xf2\x26\x7f\x8f\xea\xff\xd4\xfc\x0f\x53\xb3\xbe\xb4\xe9\x9b\xd7\xcd\xc1\x3f\x01\x00\x00\xff\xff\x8d\x10\x33\x40\x45\x1a\x00\x00"

func templatesViewsReleasesHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsReleasesHtml,
		"templates/views/releases.html",
	)
}

func templatesViewsReleasesHtml() (*asset, error) {
	bytes, err := templatesViewsReleasesHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/releases.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesViewsUpdateHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x57\x5b\x8f\xdb\xba\x11\x7e\xdf\x5f\x31\x55\x52\xc8\x46\xd6\x12\xec\x9e\x87\xc2\xc7\x72\x51\xb4\x3d\x68\x80\x34\xdd\xee\x25\x7d\x5c\xd0\xe2\xd8\xa2\x43\x91\x0a\x49\x79\xd7\x6b\xf8\xbf\x17\x14\x25\x5b\xd6\x4a\xbe\x64\xd1\x20\x0f\x87\xc0\xae\xa5\xd1\x7c\x33\xc3\xb9\x71\xb8\xd9\x00\xc5\x39\x13\x08\x5e\x2c\x85\x41\x61\x3c\xd8\x6e\xaf\x26\x94\xad\x20\xe6\x44\xeb\xc8\x53\xf2\xc9\x9b\x5e\x01\x00\xd4\xa9\xb1\xe4\x83\x94\x0e\x86\x23\xb0\x4f\x3a\xad\x9e\x9e\xf5\x60\x38\x2a\xf9\x9b\x98\xe7\xc7\x8c\x08\xe4\xb5\xaf\xaf\x39\x2a\x2b\x0e\x79\x0a\xbe\x64\x34\xdd\x6c\x80\x0d\xff\x2c\xc0\x7b\xc8\x16\x8a\x50\x04\x85\x1c\x89\x46\x0f\x02\xd8\x6e\x27\x61\x32\x6a\xc1\x59\xf9\x8c\x46\xde\x13\x7b\x21\x8a\x7a\x95\xae\xb9\x54\xe9\xa3\xa3\x81\xfb\x79\x5c\xa1\x32\x2c\xe6\xd8\xa2\xbd\x90\x94\xf3\x0a\xcc\x99\x36\x83\x5c\x68\xb3\xe6\xb8\x83\x6b\x83\x99\xee\xc0\x16\x78\xce\xa6\x13\x02\x89\xc2\x79\xe4\xbd\xb3\xdc\x83\xa1\x37\x9d\xe8\x8c\x88\x4a\xae\x25\x3e\x0a\xe9\x4d\x87\x93\xd0\xd2\xa7\x93\x90\x4c\x27\x21\x67\x17\x49\x1d\x75\x49\x1d\x9d\x25\x75\x12\xe6\xbc\xe3\x4b\xe5\xcb\xca\xf8\x6e\xab\x92\x5f\x2a\xed\x77\x06\xb3\x7b\x66\xac\x5b\x77\xf1\xb3\x34\x18\xc2\x43\xc6\x25\xa1\x30\x63\x82\xa8\x35\xcc\x19\xdf\x47\xf2\x97\x23\xb2\x6d\xe8\xea\x61\x1c\x24\x52\xb1\x17\x29\x0c\xe1\x50\xbc\x73\x32\x43\x3e\xe0\x38\x37\x40\x95\xcc\x5e\xa4\x40\x0f\x94\xe4\xe8\xf8\x3d\x48\xd1\x24\x92\x46\x5e\x26\xb5\xf1\x8a\x1d\x49\x43\xbc\x4e\x8d\x6e\x91\xd8\x30\x29\x22\x6f\xb3\x81\xe0\x16\xbf\xe5\xa8\x4d\xf0\x70\xfb\x29\xb8\x21\x26\x81\xed\xd6\x03\x21\x57\x84\x33\x4a\x0c\x4e\x27\xa1\x55\xd4\xe5\x5f\xca\x56\xe7\x38\x78\xf4\x46\x07\x8f\xe0\x0b\x2a\x36\x5f\x43\x5e\xf8\x19\xe9\xf9\x2e\xa6\xbb\x54\xa7\xbc\xe6\xde\x23\x06\x39\x98\xd9\x9b\xf0\x05\x95\x66\x52\x38\x75\xe3\x49\x48\xcd\x29\x30\xad\x74\xae\x1c\x74\xb0\x22\x3c\x47\x6f\x3a\x09\x29\x9d\x5e\x9d\xaf\xf9\x6f\x09\xc6\x5f\x75\x9e\x7e\x8f\xea\xb8\xc4\x7e\xaf\xee\xbf\xaa\x38\x61\x06\x63\x93\x2b\xbc\x44\xff\x61\xc5\x12\x15\x27\x7b\x0b\x8a\x9a\x85\x82\xe1\x44\x8a\xba\x55\x17\x42\x89\x58\xa0\x82\xa2\x22\xdc\xff\x92\x54\x4b\x16\xa6\x41\x48\x63\x4b\x07\xe2\x5c\x29\x14\x06\x48\x96\x71\x16\x13\x9b\xf0\x40\x6a\x5b\x82\x3f\x6a\xbb\x2b\xc1\xf8\xee\x2f\x58\x48\xcb\x51\xe4\x54\x61\xe9\xf1\xad\x5e\xe8\xcf\x3b\xf6\xf2\x06\x3f\x6a\xf6\x82\x4d\x3f\xee\x44\xcf\xd6\x06\x75\x55\x0d\xd6\xaa\x23\x36\x77\x34\x44\x68\x1c\x60\x45\xf7\x59\x28\x99\x67\xa7\x2a\x65\x96\x1b\x23\x05\x98\x75\x86\x91\xe7\x5e\x76\x47\xd3\xcc\x08\x98\x19\x31\xd0\x79\x1c\xa3\xd6\x1e\x50\x62\xc8\xc0\xc8\xc5\xc2\x76\xb0\x54\x52\xc2\x4f\xf5\x2a\xb7\x1c\x8e\xa8\x05\x9a\xc8\x7b\x77\x29\xb0\xe0\x1f\x18\xdb\x59\x8a\xa6\x57\x16\x97\x14\x73\xa6\x52\xc8\xcb\x23\xb8\x96\x29\xce\x97\x17\x6b\x88\x09\xe7\x33\x12\x7f\x8d\xbc\xf2\x38\x2f\x4f\xf7\xde\x9c\x70\x8d\xfd\x5f\xbd\x57\xe7\xbe\x53\x74\x22\xcf\x9c\x53\x4f\xe5\xda\x39\x71\x78\x22\x4a\x30\xb1\xf8\xc9\xe3\x20\x28\x28\xd4\x86\x28\xf3\xff\x8c\x89\x51\x79\x6b\x48\xea\xfa\x7f\x70\x78\xca\x7e\xf6\x53\x46\x47\x61\x2a\x57\xd8\x76\x00\xbf\x3d\x24\xb7\x85\xec\xde\x41\x34\x1c\xed\xa2\x00\x74\x73\x74\x8f\x29\xed\x9f\x5a\xc8\x0d\x52\xed\xb5\x7c\x2c\x7f\x36\x1b\x40\x41\xad\xd1\x57\xb5\x3b\x49\x82\x84\x7a\xd5\x4e\x36\x1b\xd0\x86\x18\x16\xff\xf3\xfe\x5f\x9f\xa0\xe7\x9e\x1f\x6e\x3f\x81\x17\x52\xa2\x93\x99\x24\x8a\x86\x44\x6b\x34\x3a\x5c\xa1\xa0\x52\xe9\xb0\x9a\xfe\x96\x3a\x8c\xf5\xfe\x35\x48\x99\x08\x62\xdb\x59\x5d\x8b\xb1\x2a\xda\x2d\x58\x6a\xaf\xfc\xf8\x16\xdd\xcb\x86\xea\x65\x53\xf3\xc5\xc2\x97\xff\xc9\x51\xad\x07\x77\x29\x51\x66\xf0\xdf\xe2\xfe\x61\xb5\x2c\xbf\x59\x72\xa0\x2d\xd9\x51\x5b\xf4\x5d\x4d\x74\xac\x58\x66\xca\xaa\xaa\x35\x8b\x70\x49\x56\xc4\x7d\x2c\xcf\xaf\xf7\x3d\x2a\xe3\x3c\x45\x61\xfa\x81\x42\x42\xd7\xbd\x79\x2e\x8a\x39\x18\x7a\x7d\xd8\xec\x02\xfb\xbe\xe7\xbf\x73\xd7\x20\xbf\x5f\x57\xdf\xeb\xff\x7a\x55\x67\x0a\x5c\xd6\x7d\xc6\x67\xe3\xf7\x83\x84\x51\x9b\xbf\x2d\x0c\x37\x0a\x57\x4c\xe6\xfa\x28\xd3\x6f\x4c\x30\x9d\xd4\x58\x76\x3c\x1c\x4d\x75\x37\xfc\x48\x21\x02\xdf\xaf\x7d\xfc\x7b\x15\x0a\x99\xd9\x8d\xe8\x40\x1a\x02\x51\x6d\x33\x76\x65\x44\x11\xce\x91\xbb\x2b\x8a\x1e\xc3\xf0\xfa\xd5\xf7\xf4\x33\x49\x71\x0c\x7e\xa9\xc9\x3f\xe4\x88\x15\x12\x83\x1f\x53\xb2\xc0\xfb\x24\x4f\x67\x82\x30\xae\xc7\x2e\x0e\x87\x9c\x24\x8e\x31\x33\x48\x7f\x63\x1c\xf5\x18\xfc\x7a\x44\x52\x12\xbb\xeb\xd1\x75\x30\x63\xa2\xa1\xa2\x1c\x10\xc6\xb0\x0f\xca\xfc\x1a\x54\xbf\xb1\x97\xa3\x01\xf2\x17\xf2\x5e\xda\xeb\x82\x7f\x0d\xa3\x9a\x9b\x4f\x03\x29\xd3\x64\xc6\xb1\xc4\x0e\xeb\xfe\xaf\x56\x3d\x06\x2a\x60\xb4\x85\xc5\x86\xf3\x60\xde\xf7\xfb\x81\xc1\x67\xd3\x53\x15\xb9\xdd\xa8\xe0\x70\x52\xdf\xa3\x2a\x7a\x07\x6c\x3f\x5a\xef\x21\xf5\x09\xb7\x03\xb6\x9f\x24\xf7\x30\x4b\x6b\xdb\x35\x9b\x43\x43\x28\xfc\x21\x02\xdf\xde\x1b\x77\xb3\xb2\xdf\x16\xa4\xca\xdf\xee\xf6\x07\x41\x6d\x08\x6c\x29\x84\x63\xa8\x72\x64\x39\x8d\x0a\x6a\xb7\x04\x1b\xe0\x44\x3e\xb5\x71\x6f\x01\xb9\xc6\x8b\x4d\xee\x12\x77\xdc\xe4\x13\xa8\x86\xc9\x5d\x1b\x3c\x3c\xff\xf6\x6f\xdb\x5a\xc4\x9e\x98\xa0\xf2\x29\x38\x9c\x71\x20\xaa\xd5\x53\x39\xd2\x34\xa3\xb5\x22\x0a\x72\xdb\x58\x42\x69\x48\x58\xe2\x43\x1f\x3e\xd4\x52\xfe\x03\xf8\x61\x39\x9d\xf9\x8d\x2c\x29\x32\xa4\x5d\xb2\x5d\x39\x7c\x88\xc0\xff\x4b\xc9\x11\x0d\xfd\xc6\x56\x0e\x5e\xdf\x07\x64\x49\x9e\x7b\xaf\xa5\xd8\xf6\x3e\x06\xff\xe6\xdf\x77\xf7\x8d\xbe\x51\xe8\x50\x7c\x0c\xf9\x6b\x7a\x4b\x4f\x69\x6d\x28\xbb\x6d\x04\x0a\x75\xce\x0d\x44\x51\x04\xfe\x9c\x30\x8e\xb4\x33\xb9\xed\x12\xf8\x04\x37\x9f\xa5\x61\xf3\x75\x8b\xd1\x07\x1b\xb0\x43\xd5\x18\xfc\x7f\x28\x25\x55\xcb\x16\x0e\x78\xf1\xd9\x8c\x41\x05\x29\x6a\x4d\x16\x78\x82\xd9\x79\x06\xcf\x90\x6b\xb3\xab\xb5\x69\x37\x97\x36\x6b\xce\xc4\x62\x0c\xfe\x4c\x4a\xa3\x8d\x22\xd9\x9f\xfc\x4e\xc4\xb6\x23\xbd\x8f\xd6\x19\x7c\x97\xf7\xee\xca\x6a\x3c\xc7\x7f\x15\x73\x75\xab\x38\x05\x72\x7e\xd4\x67\x69\xf8\xd1\x9e\x3c\xd5\x10\x6a\xb8\xee\x96\xe0\xe6\xe9\x83\x8e\xd0\xcc\xed\xb7\xd4\xdf\xa9\xf6\xe1\xae\x0f\x2d\xe8\xdf\xab\xf4\x60\xfd\x6c\x55\x7a\xd6\xb4\x35\xec\x90\x7e\x5c\xc0\xe1\xd4\xd5\x36\xb1\xc1\xe5\xd9\x5f\x91\x26\xa1\x9b\xfe\x6b\x17\xb2\xff\x05\x00\x00\xff\xff\x6a\x6e\xce\x24\x23\x1a\x00\x00"

func templatesViewsUpdateHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsUpdateHtml,
		"templates/views/update.html",
	)
}

func templatesViewsUpdateHtml() (*asset, error) {
	bytes, err := templatesViewsUpdateHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/update.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesOtaMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\x4d\x6b\xd4\x40\x1c\xc6\x9f\x6e\x57\x0a\xc1\x37\x44\x3c\x79\xf8\x7b\xb0\x28\x32\x35\xa9\x1e\x64\x76\xb3\xeb\x5b\x0b\x62\x17\xa5\xa4\xde\xc7\xcd\x34\x0d\x26\x33\x61\x66\x22\x16\x7a\x10\x4f\x8a\x5e\x05\x4f\xe2\xc9\xbb\x82\x76\x45\x5c\x0f\x7e\x81\xd9\x2f\xe0\x67\x91\x6c\xb6\x8a\x03\x03\xcf\xef\xf7\x7f\xe6\xe5\xf7\x99\xee\x5b\x00\x38\x06\xe0\x3c\x80\xbb\x00\x56\x00\x14\x68\xd7\x4b\x00\x27\x01\xbc\x02\x70\x02\xc0\x3b\x00\xa7\x00\x7c\x04\x70\x1c\xc0\x57\x00\xc3\x25\xe0\x17\x80\xe5\x66\x77\x5a\xbf\xd2\x01\xce\x01\x38\xdb\x01\x4e\x03\xb8\xd2\x01\x96\x16\x77\x76\x01\x74\x16\x6f\x2e\x2f\x1c\xc6\x5a\xed\xe6\x19\x73\xe2\x71\x57\x3b\x81\x52\xaa\xba\xbb\x2d\x0b\x29\xac\xb4\x47\x54\x69\x9b\x3b\x6d\xf6\x5b\xde\xa9\x32\x23\x52\x89\xc6\x1b\xc7\x46\x36\xcb\x53\x76\xbb\xce\x2c\x4b\x34\xa7\x54\x3e\xbd\xf9\x24\xdf\x13\xa5\x5e\x33\x75\xb0\x25\xac\x63\x89\x11\xca\x16\xc2\x69\xc3\xe9\xfe\x7c\x44\xa3\xda\x88\x52\xa7\x9a\xfa\xff\xf5\x07\xc1\x96\x50\x59\x2d\x32\xc9\x12\x29\x4a\x4e\x7f\x99\xd3\x76\x6d\x6d\x2e\x54\x30\xba\x37\xda\x60\x8f\xa4\xb1\xb9\x56\x9c\xa2\xb5\x30\xb8\xa3\x95\x93\xca\xb1\x64\xbf\x92\x9c\x9c\x7c\xe6\xae\x56\x85\xc8\x55\x8f\xc6\x7b\xc2\x58\xe9\xe2\x9d\x64\x93\xdd\xf8\xd7\x6b\xfe\xb3\x2b\x0d\xdb\x50\x63\x9d\xe6\x2a\xe3\x14\x3c\x2c\x6a\x23\x0a\xb6\xa9\x4d\x69\x39\xa9\x6a\x8e\x36\xbe\xd6\xa3\x36\xc6\xea\x62\x14\xc6\x71\x44\xab\xab\xd4\xc4\xf0\x42\x1c\x45\x34\xa4\x90\xf8\x9c\x07\xf1\xfa\xd1\xa8\x1f\x5f\x6f\xe2\xa5\x79\xad\x1f\x85\x74\x70\xd0\x1e\x19\xc4\xeb\xe1\x65\x1a\x52\x44\x9c\xd6\x7b\x78\x90\xdc\x82\xff\xe0\xbf\xf8\xef\x7e\xe2\x0f\x67\xaf\x5b\xf8\xe9\xa7\xfe\xd0\x4f\x66\x2f\xfc\x74\xf6\xdc\x4f\xfc\x37\xf8\xf7\xfe\x93\xff\xe1\xa7\xfe\x73\xa3\x67\x6f\xf0\x27\x00\x00\xff\xff\xb2\xdb\xf7\x31\x3c\x02\x00\x00"

func localesRuLc_messagesOtaMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesOtaMo,
		"locales/ru/LC_MESSAGES/ota.mo",
	)
}

func localesRuLc_messagesOtaMo() (*asset, error) {
	bytes, err := localesRuLc_messagesOtaMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/ota.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesReleasesMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x52\xdf\x6b\x1c\x55\x14\xfe\xf6\x97\xd6\x55\xa3\x54\x50\x14\x85\x23\xd2\x52\x1f\xa6\xee\x46\x05\x99\x64\x13\x63\xda\x42\xb1\x81\x12\x37\xbe\x89\x5c\x76\x6f\x77\x87\xee\xce\xac\x77\xee\xf4\x87\xf6\x61\x7f\x20\x22\x8a\x15\x51\x7c\x11\xab\x88\xf8\xba\xad\xd9\x64\x9a\xa4\x9b\xbf\x40\x3c\xf7\x1f\x28\xbe\xfa\x0f\xf8\x2c\x77\x66\x36\x6d\x21\x88\x2f\xbd\x2f\x73\xce\xf9\xce\xf7\x9d\xef\xdc\x3b\x77\x8f\x16\xbf\x03\x80\xa7\x01\xbc\x08\xe0\x07\x00\xcf\xd9\x38\x87\xe4\x5c\xc9\x01\x8f\x02\xb8\x9a\x03\x9e\x00\x30\xc8\x01\x47\x00\x7c\x95\x03\x9e\x07\xf0\x7d\x0e\x78\x09\xc0\xcd\x1c\xf0\x26\x80\x3f\x33\xbc\x94\x07\x8a\x00\xe6\xf2\x69\xfe\x4c\x1e\x78\xc4\xea\x66\xf5\x57\xf2\x00\x01\x38\x91\x07\x1e\x07\x70\x36\x9f\xce\xd9\xc8\xbe\x1f\xe4\x81\xe5\x1c\x20\xf3\xa9\xb7\x5f\x0b\xc0\xb3\x00\xb6\x0a\x69\xfe\x47\x01\x58\x00\x70\xb7\x00\x9c\x02\xf0\x42\x11\xf8\x08\xc0\x87\x45\x60\x0e\x80\x29\xa6\x73\xff\x2a\xa6\xbe\xff\xce\xea\xff\x64\x79\xa9\x04\xac\x00\x38\x5a\x4a\xf7\xa8\x97\xd2\xba\x5f\x4a\xfb\x3e\x29\x01\xf6\x0a\x9e\x02\x50\x4e\xaf\x22\xf1\x5d\x42\xda\x67\x77\x29\x64\xf5\x39\xdc\x3b\x47\xf0\xe0\xc9\x03\x78\x12\xc0\x63\x48\xf7\xb2\xde\xed\xbe\x58\x69\x68\x2f\xf0\x43\xac\xa8\x46\xdb\xd3\xb2\xa1\x23\x25\xb1\xda\x96\x8d\x8b\x61\xd4\xc5\x6a\xe0\x5f\xf0\x54\x97\x94\xec\x06\x97\x24\x29\xd9\x91\x22\x94\x74\x2c\x3c\x40\xa2\x5e\x4b\x89\xa6\x24\x1d\xfc\x6f\x94\x84\xdf\x24\x25\x43\x2d\x94\x26\xd1\xeb\x75\xbc\x86\xb0\x26\x70\x2a\xb8\xec\x77\x02\xd1\xc4\x79\xa1\xdb\x58\x4f\x09\x21\xd6\x93\xe1\x78\xcf\xfb\x58\x62\x23\x13\xbc\x8f\x46\x97\x3d\xdd\x9e\xe9\x61\xa3\x67\x15\x64\x93\x84\xc6\xfb\x52\x85\x56\xb7\x11\x29\x25\x7d\x8d\x75\xd9\x0b\x94\x76\xd6\xc2\x96\xd7\x74\xde\x89\x5a\xa1\x53\x0f\x5c\x6a\xca\x4b\x6f\x5f\xf4\xda\xa2\x1b\x9c\x54\x51\xf9\x9c\x08\xb5\x53\x57\xc2\x0f\x3b\x42\x07\xca\xa5\x77\x13\x88\xd6\x22\x25\xba\x41\x33\xa0\xc5\x07\xfa\x97\xca\xe7\x84\xdf\x8a\x44\x4b\x3a\x75\x29\xba\x2e\x1d\xe4\x2e\xad\x47\x61\xe8\x09\xbf\xbc\x76\x76\xed\xb4\x93\x79\x71\xa9\x7a\xb2\x52\x5e\x0d\x7c\x2d\x7d\xed\xd4\xaf\xf6\xa4\x4b\x5a\x5e\xd1\xaf\xf5\x3a\xc2\xf3\x17\xa8\xd1\x16\x2a\x94\xba\xb6\x51\x3f\xe3\xbc\x75\xaf\xcf\xfa\xb9\x20\x95\x73\xda\x6f\x04\x4d\xcf\x6f\xb9\x54\x3e\xdf\x89\x94\xe8\x38\x67\x02\xd5\x0d\x5d\xf2\x7b\x49\x1a\xd6\x5e\x5f\xa0\x34\xac\xf9\xc7\xaa\x95\x5a\xad\x4a\xc7\x8f\x93\x0d\x2b\x2f\xd7\xaa\x55\x5a\xa6\x0a\xb9\x49\xbe\x54\x9b\x9f\x41\x8b\xb5\x37\x6c\x78\x22\x69\x5b\xac\x56\xe8\xda\xb5\x94\xb2\x54\x9b\xaf\xbc\x4a\xcb\x54\x25\x97\xe6\x17\xc0\xdf\xf2\x84\x6f\x9b\x81\x19\xf2\x2d\x8e\xcd\x75\xf0\xd7\xa6\x6f\x3e\xe5\xd8\x0c\x79\xc2\x3b\x66\x68\x46\xa6\xcf\x63\xf0\x6f\x49\x3a\x30\x23\xde\xe3\x3d\x5b\xb8\xc1\x53\xde\x4c\x68\x13\xd3\xe7\x2d\xde\xe4\x09\xdf\xe1\x98\x27\x64\x46\xbc\xc9\x63\xde\x4d\x0b\xe6\x3a\x99\x3e\x4f\x78\x97\x63\xde\xe6\xb1\xfd\x95\xfe\x83\xcb\x53\xbe\xc9\x77\x78\xca\xb7\xee\xe3\xf3\x26\x4f\x1f\x8a\x08\x71\x4c\xbc\x9f\xf0\x27\xb6\xc4\xfb\x66\x64\x06\xbc\x43\xbc\x6f\xfa\x1c\xf3\x2e\x4f\x79\x6b\xa6\x00\xfe\x99\x77\x78\x6c\x3e\xe3\xb1\x19\x9a\x2f\xc1\x37\xcc\x28\x0d\x7e\x9a\x89\x9a\x2f\xc0\xbf\x64\xcb\xc7\x33\x6c\xcc\xdb\xbc\x67\x67\x80\x7f\x3c\xf0\x95\xa0\x87\x8c\xb1\xd7\x37\x38\xd4\x13\x4f\x79\xcf\x3e\xd7\xd8\x0c\x79\x4c\x09\xf2\xbb\xe9\x9b\x11\x6f\xf3\x0e\xc7\xe0\x6f\x2c\xc5\x0c\x12\xa7\xd9\xe3\x8d\xcc\xe7\x1c\xf3\x6d\xfc\x1b\x00\x00\xff\xff\xea\xd6\x9e\x47\x8a\x05\x00\x00"

func localesRuLc_messagesReleasesMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesReleasesMo,
		"locales/ru/LC_MESSAGES/releases.mo",
	)
}

func localesRuLc_messagesReleasesMo() (*asset, error) {
	bytes, err := localesRuLc_messagesReleasesMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/releases.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesUpdateMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\x4d\x6f\x1b\x55\x14\x3d\x43\xcc\x97\x25\x3e\x04\x62\x81\x60\x71\x11\x6a\x81\xc5\x04\x8f\x41\x80\x26\x99\x04\x51\x5a\xa9\xa2\x16\x28\x38\x5d\xb1\x79\xd8\xcf\xce\x88\xf1\x7b\xa3\x37\x33\x15\x91\xba\x30\x36\x48\xa0\x22\x85\x0d\x62\x83\xe8\x86\x05\x4b\xb7\xb5\x1b\x37\x26\xce\x0f\x60\x73\xdf\x1f\x60\xc3\x82\x2d\xfc\x03\x34\x33\xae\x49\x49\x40\xf4\x6d\xe6\x7e\x9c\x73\xee\xb9\x57\x9a\x5f\x9f\xaa\x7c\x0b\x00\x55\x00\xcf\x03\x88\x00\x3c\x06\xe0\x67\x94\xef\x8f\x45\xfd\x4f\x00\x2f\x01\x78\xdc\x01\x9e\x03\xf0\x86\x03\x3c\x0b\x60\x6b\x91\x47\x0e\xf0\x30\x80\x2f\x1d\xe0\x69\x00\xdf\x38\xc0\x13\x00\x7e\x74\x80\x55\x00\x63\x07\xd8\x74\x80\xdf\x1c\xe0\x7d\x00\x2f\xae\x00\x1f\x01\x48\x56\x80\x77\x01\xf0\x0a\xf0\x26\x80\x67\x2a\x40\x00\xa0\x51\x01\x9e\x04\x70\xad\x52\xf2\xbf\xaf\x94\x73\x7e\xa9\x00\x17\x01\xfc\x5e\x01\x1c\x00\x0f\x01\xa8\x2c\xbc\xae\x00\x78\x60\xb1\xcb\xa3\x00\x1e\x44\xe9\xe9\x11\x1c\x7b\xe7\xb4\xea\x84\xa6\x47\x46\xf6\xf4\x15\x49\x59\x1c\x69\xd1\x96\x6d\xea\x84\x91\x5c\x36\xb3\xb8\x6b\x44\x5b\x92\x50\x6d\x32\x32\x49\x85\x49\x49\xc4\x71\x14\xb6\x44\x1a\x6a\x75\x12\x77\xac\xf7\x61\x2a\x63\xf2\x68\xbb\x10\xa6\x8f\x43\x25\xcc\x6e\xa9\x5e\x74\xea\x74\x59\x9a\xb0\xb3\xfb\x8f\xc9\xdb\xa5\xd2\xdd\xef\xf1\xc9\xcb\x9a\x91\x91\x14\x89\x44\x98\x90\xd2\x29\x75\xb4\xa1\x56\x66\x8c\x54\xf7\x98\x23\x61\x5a\x3b\x61\x2a\x5b\x69\x66\x24\x9d\x49\xb0\x25\x63\x6d\x52\xb7\x91\x74\xc3\xb6\xfb\x4e\xd6\x4d\xdc\xa6\xf6\xa9\x2d\xaf\xbc\xfd\x49\xb8\x23\x7a\x7a\xd5\x64\xd5\x4b\x22\x49\xdd\xa6\x11\x2a\x89\x44\xaa\x8d\x4f\xef\x15\x2d\x6a\x64\x46\xf4\x74\x5b\xd3\xfa\x3d\xf8\x8d\xea\x25\xa1\xba\x99\xe8\x4a\xb7\x29\x45\xcf\xa7\x65\xee\xd3\x56\x96\x24\xa1\x50\xd5\xc6\xc5\xc6\x79\xf7\xb2\x34\x49\xa8\x95\x4f\xde\x6a\xad\x7a\x4e\xab\x54\xaa\xd4\x6d\xee\xc6\xd2\xa7\x54\x7e\x9a\xbe\x1a\x47\x22\x54\x6b\xd4\xda\x11\x26\x91\x69\xb0\xdd\xbc\xe0\xbe\xf5\x37\x2e\xf7\xd3\x91\xc6\x3d\xaf\x5a\xba\x1d\xaa\xae\x4f\xd5\x0f\xa2\xcc\x88\xc8\xbd\xa0\x4d\x2f\xf1\x49\xc5\x45\x9a\x04\xaf\xad\x51\x19\x06\xea\x8c\x57\x0b\x02\x8f\xce\x9e\xa5\x3c\xac\xbd\x10\x78\x1e\x6d\x52\x8d\xfc\x22\xdf\x08\xea\x77\x5b\xeb\xc1\xeb\x79\xf8\x72\x01\x5b\xf7\x6a\x74\xf5\x6a\x49\xd9\x08\xea\xb5\x57\x68\x93\x3c\xf2\xa9\xbe\x06\xbe\xce\x73\x1e\xdb\x01\xdf\xe4\x89\xed\xf3\x6d\x1e\xf3\x84\x0f\x79\xca\x13\xb2\x43\x1e\xf3\x88\x67\x65\xc1\xee\x11\xef\xf3\x88\x6f\xd9\xbe\x1d\xf2\xed\xa2\x78\xc8\x73\xbe\xc5\x73\xb2\x9f\xf3\x88\xef\xf0\x8c\x47\xff\xa5\xc7\x73\xbe\x51\x50\x6e\x1e\xd7\x9c\x12\x1f\x15\xd0\x49\x21\x7f\x64\x87\xf6\x33\x3e\x20\x3e\xb2\x7d\x9e\xf2\x8c\xe7\x8b\x59\x53\xbb\x77\xff\xe2\xa7\x8a\xfc\x94\x6f\x41\x1e\xf1\x77\xcb\x75\xf6\xf9\x80\x47\xc4\x37\x78\xca\x87\x3c\xb2\xfd\x53\x37\x2b\x79\x75\xe2\xeb\xb6\x5f\x0c\xca\x3d\x14\xbc\xff\x73\x97\x1f\x96\xfe\xa6\x76\x60\xbf\x3e\x51\x38\xfd\x12\x76\xf0\x6f\xf0\x02\x37\xe3\x29\xef\x83\x0f\xf3\x03\x8c\x79\x66\xf7\xc8\x0e\x78\xc2\x07\x76\x68\xbf\xe2\x09\xdf\xa1\x7c\x19\xfb\x45\x4e\x29\xca\x03\x3b\xb4\x7d\x7b\xed\xd4\xc3\xe4\x7f\xd3\x5f\x01\x00\x00\xff\xff\xa4\xe9\x47\xb0\x31\x05\x00\x00"

func localesRuLc_messagesUpdateMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesUpdateMo,
		"locales/ru/LC_MESSAGES/update.mo",
	)
}

func localesRuLc_messagesUpdateMo() (*asset, error) {
	bytes, err := localesRuLc_messagesUpdateMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/update.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/releases.html": templatesViewsReleasesHtml,
	"templates/views/update.html": templatesViewsUpdateHtml,
	"locales/ru/LC_MESSAGES/ota.mo": localesRuLc_messagesOtaMo,
	"locales/ru/LC_MESSAGES/releases.mo": localesRuLc_messagesReleasesMo,
	"locales/ru/LC_MESSAGES/update.mo": localesRuLc_messagesUpdateMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"ota.mo": &bintree{localesRuLc_messagesOtaMo, map[string]*bintree{}},
				"releases.mo": &bintree{localesRuLc_messagesReleasesMo, map[string]*bintree{}},
				"update.mo": &bintree{localesRuLc_messagesUpdateMo, map[string]*bintree{}},
			}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"releases.html": &bintree{templatesViewsReleasesHtml, map[string]*bintree{}},
			"update.html": &bintree{templatesViewsUpdateHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
