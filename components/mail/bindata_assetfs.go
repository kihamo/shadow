// Code generated by go-bindata.
// sources:
// templates/views/index.html
// DO NOT EDIT!

package mail

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x57\x4d\x4f\xdc\x3c\x10\xbe\xf3\x2b\x2c\x1f\xde\xc3\xab\x66\x23\xa0\xe2\xd2\xec\xb6\x55\x2f\x3d\x14\xb5\x12\xdc\x91\x37\x9e\x10\xaf\xfc\x91\xda\xce\x76\x0b\xe2\xbf\x77\x1c\xc7\x4b\x60\xb3\x01\x5a\x2a\xe8\x4a\xb0\x63\x7b\x3c\x1f\xcf\x33\x99\x9d\x5c\x5f\x13\x0e\x95\xd0\x40\x68\x69\xb4\x07\xed\x29\xb9\xb9\x39\x28\xb8\x58\x93\x52\x32\xe7\xe6\xd4\x9a\x1f\x74\x71\x40\xf0\x33\xdc\x2d\x8d\xcc\x14\xcf\x0e\x8f\x48\x90\x9c\x4a\xd2\xc6\xa1\xd4\xeb\xdf\xbf\xb3\xb9\x68\x98\x06\x39\x38\xdd\xd5\xf0\xc2\x4b\xb8\xa7\xd1\x69\xd5\x47\x8b\x53\x26\x64\x91\xa3\xb0\x7b\x3a\x8c\x4c\x02\xb3\x95\xd8\xd0\x45\x91\xe3\xf6\x3d\x67\x23\x5b\x77\xfc\x27\x14\x76\x7d\x20\x54\xa2\x22\x33\xb0\xd6\xd8\x80\xd1\x54\x0c\x4c\x82\xf5\xa4\xfb\x9f\x71\xa6\x2f\xc1\xa6\x85\x70\x4a\x38\xc7\x96\xa3\x49\x76\x66\x96\xad\xf7\x46\x13\xff\xb3\x81\x39\x8d\x0b\x7a\x9b\x9b\x71\x40\x09\x67\x9e\x25\x53\xbd\x33\x4a\x98\x15\x2c\xab\x05\xe7\xa0\xe7\xd4\xdb\x16\x1d\xfc\xe7\x85\x02\xf7\xae\xc8\xa3\x99\x71\x87\x98\xd7\x44\x52\xbb\x78\xf5\x77\x40\xf3\x70\x61\x1f\x4c\xe8\xd7\xb1\x4b\x78\x0a\x50\x42\x57\xe6\x75\xc3\x34\x95\xd4\x93\x81\x2a\x2a\x63\x55\x8a\x38\xc8\x59\x6d\xac\xb8\xc2\xfa\x63\x92\x74\x6b\xc9\x96\x20\x33\x09\x15\x86\x6d\x8d\x84\xa8\x46\x89\x02\x5f\x1b\x3e\xa7\x8d\x71\x78\x22\x50\x72\xe8\x24\x53\xf8\x78\x60\x7e\xa5\x17\x06\x53\xcb\xe3\x52\x9b\x35\x93\x02\x91\x80\x3d\x38\x0e\xc8\x10\x1e\x54\xf4\x7c\x69\x4d\xdb\xec\x41\xbe\xbb\xd5\x85\x16\x74\x11\x43\x73\x8b\x3b\x06\x8f\x81\xc6\xc0\x49\xdf\x22\x8e\x53\x87\x38\x1e\x6d\x10\x63\x9f\xf3\xaf\xa4\x70\xd8\x2b\xb6\x2d\x08\xbe\xb7\xc2\x02\xa7\x8b\xff\x8b\x3c\x1c\x4c\x44\x96\x77\xce\x27\x14\x76\x9b\xd8\x49\x8a\xf0\xe4\xd1\x11\x16\x42\x37\xad\xef\xab\xcf\xc3\xc6\xd3\x3b\x4c\xf6\x40\x44\x72\x02\x40\x9a\x29\x88\x52\x23\x59\x09\xb5\x91\x1c\x10\x3b\xd8\x30\xd5\x48\x38\xfc\xc0\x0d\xd2\xa5\x67\xa5\x51\x6f\x48\xbf\x79\x34\xd8\xa4\x04\x59\x6c\xd1\x02\x16\x42\x8f\xc5\x10\x95\x09\x34\x46\xab\xf2\xa1\xa3\x3f\xae\x09\xd7\x2e\x57\x50\xfa\x67\x2f\x8c\xb3\x68\xf7\x5f\x62\x7f\x0b\x45\x2c\x81\xed\x32\x11\xfa\xfa\xc8\x0b\x69\x3d\x3b\x73\x9f\xe2\xef\x6a\x87\xd9\x8b\xd3\xe7\x40\x22\x07\xe3\x9c\xe1\xb8\x83\x7b\x6f\xb7\x8f\x6c\x07\x46\xf7\x18\x07\x69\xda\x70\x67\xdc\x34\xa1\x01\x27\x7e\xf1\x71\x17\x9a\x2e\xbe\x85\x2f\x12\x4a\xa5\xc8\xa3\xc2\x93\x2d\xd5\x5e\xe1\xe8\xf4\xf9\xfc\xf4\xcb\xe3\x4c\x60\xa7\xec\xd2\x7c\x7d\x05\xd6\xff\x8c\x3e\x7b\x8d\x9d\x46\xbb\x2f\x5e\x5e\x81\x66\x66\x81\x8d\x15\x18\xf6\x6f\x27\xae\xc2\x60\x73\x91\xd4\x76\x6a\x6e\x8b\x4f\x28\xbb\xb4\xc0\x69\x36\x5d\xf8\x9b\x8c\x4a\x7d\xe1\x0c\x0e\x0c\xa3\xd3\xf3\xd8\x85\xc7\xb1\xbf\x0f\x58\x14\x4c\x55\x39\xf0\xd9\xf1\x43\xa8\xf6\x03\x5f\x1a\x77\x68\xdf\x7e\xb1\xa1\x2a\x71\xdb\x80\x97\x5e\x13\xfc\xcb\x5c\x5b\x96\x88\x1c\x5d\x9c\xa1\xee\xf4\x64\xf7\x7b\xc0\x15\x79\xc8\x7c\xf2\xed\x62\xb0\xec\xc5\xfe\x6b\x30\x15\x0e\x5e\xc0\x56\x2e\xbe\x7b\xb9\xd2\x8a\xc6\x13\x67\x4b\x9c\xe2\x38\x73\xf5\xd2\x30\xcb\x73\x4c\x0f\xbc\xcb\xd7\x78\xd3\x58\xfc\x8e\x63\x9d\xb1\xf9\x6a\xb0\x98\x29\x1c\x18\x56\xee\xfd\x7a\x1e\xe6\xd5\x8f\x4d\x23\x45\xc9\x42\xaf\x98\x2d\x5b\x21\x83\xcb\x40\x6c\xf4\x30\x88\xe3\x57\x00\x00\x00\xff\xff\x4e\x63\xaf\xea\x07\x0e\x00\x00")

func templatesViewsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsIndexHtml,
		"templates/views/index.html",
	)
}

func templatesViewsIndexHtml() (*asset, error) {
	bytes, err := templatesViewsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/index.html", size: 3591, mode: os.FileMode(420), modTime: time.Unix(1502456105, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/index.html": templatesViewsIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"index.html": &bintree{templatesViewsIndexHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: AssetInfo, Prefix: k}
	}
	panic("unreachable")
}
