// Code generated by go-bindata.
// sources:
// templates/views/index.html
// DO NOT EDIT!

package mail

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x57\xcd\x4e\xc4\x36\x10\xbe\xf3\x14\x96\x0f\x3d\x54\xcd\x46\x2c\x15\x97\x26\x69\xab\x5e\x7a\x28\x6a\x25\xb8\x23\x27\x9e\x10\xaf\xfc\x93\x7a\x26\xcb\x96\x15\xef\x5e\x39\x4e\x96\xc0\x66\x03\xb4\x54\x50\x0e\xac\xc7\x1e\xcf\xcf\xf7\x4d\x26\x93\xfd\x9e\x49\xa8\x95\x05\xc6\x2b\x67\x09\x2c\x71\xf6\xf8\x78\x96\x49\xb5\x65\x95\x16\x88\x39\xf7\xee\x9e\x17\x67\x8c\x31\x36\xdd\xad\x9c\x4e\x8c\x4c\xce\xd7\x2c\xac\xd0\x8c\xab\x1d\x26\xe7\xeb\x41\xff\xe5\x9d\xdd\x6d\x2b\x2c\xe8\xc9\xe9\xb1\x06\x29\xd2\xf0\x42\xa3\xd7\x6a\xd6\xc5\x95\x50\x3a\x4b\x9b\xf5\xcc\xe9\x34\x32\x0d\xc2\xd7\x6a\xc7\x8b\x2c\x95\x6a\xfb\xc2\xd9\xcc\xd6\x33\xff\x23\x0a\xc7\x3e\xf6\x7b\xa6\x6a\xb6\x02\xef\x9d\x0f\x18\x2d\xc5\x20\x34\x78\x62\xfd\xff\x44\x0a\x7b\x07\x7e\x14\x14\x1a\x85\x28\xca\xd9\x24\x7b\x33\x65\x47\xe4\x2c\xa3\xbf\x5a\xc8\x79\x14\xf8\x53\x6e\x0e\x81\x33\x29\x48\x8c\xa6\x06\x67\x9c\x09\xaf\x44\xd2\x28\x29\xc1\xe6\x9c\x7c\x07\xbc\xf8\x86\x94\x01\xfc\x21\x4b\xa3\x99\x79\x87\xfb\xfd\x52\x52\xc7\x78\x0d\x77\xc0\xca\x70\xe1\x14\x4c\x06\x10\xc5\x1d\xbc\x07\x28\x65\x6b\xf7\xb5\x61\x5a\x4a\xea\xdd\x40\x65\xb5\xf3\x66\x8c\x38\xac\x93\xc6\x79\xf5\xe0\x2c\x09\xcd\x7a\x59\x8b\x12\x74\xa2\xa1\x26\xce\xbc\xd3\x10\xd5\x38\x33\x40\x8d\x93\x39\x6f\x1d\x12\x67\x4a\xe6\x1c\xc1\xca\xc4\x08\xa5\x39\x13\x15\x29\x67\x73\x9e\x46\xd1\xba\xad\xd0\x4a\x0a\x82\x13\x38\x4e\xc8\x50\x04\x26\x7a\xbe\xf3\xae\x6b\x4f\x20\xdf\xdf\xea\x43\x0b\xba\x39\x27\xf7\x84\xbb\xb3\xe4\x9d\x8e\x81\xb3\xa1\x45\x5c\x8c\x1d\xe2\x62\xb6\x41\xcc\xfd\xdd\xfc\xce\x32\x6c\x85\x3d\xb4\x20\xf8\xb3\x53\x1e\x24\x2f\xbe\xcd\xd2\x70\xb0\x10\x59\xda\x3b\x5f\x50\x38\x6e\x62\x97\x63\x84\x97\x6f\x8e\x30\x53\xb6\xed\x68\xa8\x3e\x82\x1d\xf1\x67\x4c\x0e\x40\x44\x72\x02\x40\x56\x18\x88\xab\x56\x8b\x0a\x1a\xa7\x25\xf8\x9c\xc3\x4e\x98\x56\xc3\xf9\x4f\xd2\x19\xa1\xec\xaa\x72\xe6\x3b\x36\x6c\xae\x27\x9b\x9c\x6d\x85\xee\x20\xe7\x9c\x8d\x58\x4c\x51\x59\x40\x63\xb6\x2a\x5f\x3b\xfa\xd7\x35\x81\x5d\xb9\x81\x8a\x3e\xbc\x30\xae\xa3\xdd\xff\x13\xfb\x07\x28\x62\x09\x1c\xc4\x91\xd0\xaf\x47\x5e\x48\xeb\xc3\x99\xfb\x25\xbe\x57\x7b\xcc\x3e\x9d\x3e\x04\x0d\x15\xcd\x71\xc6\xe2\xd1\x3a\x34\xdc\x7b\xcc\xf9\xf7\x87\x47\xb7\x07\xa5\x7f\x9c\xc3\x6a\xd9\x41\xef\xc4\xb5\xa1\x11\x8f\x3c\xb7\x5a\x28\xcb\x8b\x3f\xc2\x0f\x0b\x25\x93\xa5\x51\xe1\xdd\x96\x1a\x32\x9a\x17\xbf\xde\x5c\xfd\xf6\x36\x13\x59\x1a\x73\xfa\x7a\x85\x36\xbc\x4e\x3f\xbc\xd6\xae\xa2\xdd\x4f\x2f\xb3\x40\xb3\xf0\x20\x66\x0b\xcd\x03\xaa\x87\x30\xe0\xdc\x8e\x6a\x47\x35\x77\xc0\x27\x94\xdd\x28\x14\x59\x3a\x5e\xf8\x2f\x19\xd5\xf6\x16\x9d\x56\x72\x76\x8a\x9e\xbb\xf0\x36\xf6\x4f\x01\x6b\x64\xe2\xea\x1a\x81\x92\x8b\xd7\x50\x1d\x06\xbf\x71\xec\xe1\x43\x1b\xc6\xae\x34\xea\xa9\x11\x97\x64\x59\x49\x36\xc1\xae\xaa\x00\x91\x17\xd7\x60\xe5\xf2\x84\xf7\xcf\x80\xcb\xd2\x90\xf9\xe2\x57\xc6\x44\x1c\x96\xc3\xcf\x64\x3a\x9c\x7c\x88\x6d\x30\x7e\x83\x61\xe5\x55\x4b\x0c\x7d\x95\xf3\x54\x0a\x6c\x4a\x27\xbc\x4c\x05\x22\x10\xa6\x5b\xb0\xd2\x79\x4c\x87\xf1\xce\xf9\x74\x33\x11\x56\x46\xd9\xd5\x06\x7f\xdc\xe6\x61\x6e\xfd\xb9\x6d\xb5\xaa\x44\xe8\x15\xab\xb2\x53\x3a\xb8\x0c\xc4\x46\x0f\x93\x38\xfe\x0e\x00\x00\xff\xff\x62\xe7\x58\x9a\x0f\x0e\x00\x00")

func templatesViewsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsIndexHtml,
		"templates/views/index.html",
	)
}

func templatesViewsIndexHtml() (*asset, error) {
	bytes, err := templatesViewsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/index.html", size: 3599, mode: os.FileMode(420), modTime: time.Unix(1504122133, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/index.html": templatesViewsIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"index.html": &bintree{templatesViewsIndexHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: AssetInfo, Prefix: k}
	}
	panic("unreachable")
}
