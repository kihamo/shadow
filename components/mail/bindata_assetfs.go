// Code generated by go-bindata.
// sources:
// templates/views/index.html
// DO NOT EDIT!

package mail

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x56\xcd\x6e\xd4\x30\x10\xbe\xf7\x29\x2c\x1f\x38\x91\x86\x5d\x71\x23\x1b\x21\x71\xe1\x40\x05\x52\xfb\x02\x4e\x3c\xd9\x18\xf9\x27\xb2\x9d\xd2\x52\xf5\xdd\x19\xff\x24\x4d\xc3\xae\x76\x51\xa1\x62\xa5\xdd\x78\xec\xf1\xf8\xfb\xbe\x99\xf1\xe6\xe1\x81\x70\xe8\x84\x06\x42\x5b\xa3\x3d\x68\x4f\xc9\xe3\xe3\x45\xc5\xc5\x2d\x69\x25\x73\x6e\x47\xad\xf9\x41\xeb\x0b\x82\x9f\xe5\x6c\x6b\x64\x21\xf7\xc5\x66\x9b\xd7\xe2\x7a\xbf\x99\x96\x07\xb6\x87\xa2\x07\xc6\xc1\xd2\xfa\x8a\x09\x59\x95\xfd\x26\x47\x29\x31\x4c\x7d\x91\x1f\xcf\x8e\x1a\x98\x06\x59\x34\x86\xdf\xe7\xa8\x08\x4f\x74\xe4\x12\xac\x35\x36\xe0\x5a\xa3\x60\x12\xac\x27\xf1\xb7\xe0\x4c\xef\xc1\x4e\x86\x70\x4a\x38\xc7\x1a\x09\x4b\x80\xcd\xe8\xbd\xd1\xc4\xdf\x0f\xb0\xa3\xc9\xa0\x33\x23\x69\x1c\x50\xc2\x99\x67\xd3\xf6\x7c\x00\x25\xcc\x0a\x56\xf4\x82\x73\xd0\x3b\xea\xed\x88\x41\xdf\x78\xa1\xc0\x7d\xa8\xca\x14\xe6\xe9\x10\xc4\xbc\x02\x9c\x98\xe6\x35\xd0\x3c\x2c\x2c\xe9\x61\x1c\x87\x7a\x9d\x22\x28\x74\x67\xfe\x0f\x7a\x6b\xc0\x47\x09\x56\x9d\xb1\x6a\x42\x10\xc6\x45\x6f\xac\xf8\x89\x95\xc6\x24\x25\xd6\x48\x48\xd3\x94\x28\xf0\xbd\xe1\x58\x02\xc6\x21\x20\x81\x23\x87\x81\x0a\x85\xa5\x83\xf8\x5a\x2f\x0c\x42\x2b\xa3\xb9\x20\xbc\x50\x2a\x46\xdf\x5b\x33\x0e\x0b\x87\xe8\x24\x59\x03\x92\xe0\x3a\x72\x33\x74\x59\xc0\x4e\x15\x5b\x12\xea\xde\x86\x6a\x0e\x6e\xb4\xbe\xf9\x5a\x95\x71\xb8\x8a\xb2\xaa\x7d\xdc\xba\x79\xb7\x3a\x29\xfa\x09\x3d\x8c\x3e\xa7\xc0\xc3\x9d\xa7\xcf\x00\xe6\xc3\x12\xc3\x80\x46\x33\x05\x69\x34\x48\xd6\x42\x6f\x24\xb6\xcc\x8e\xc2\x1d\x53\x83\x84\xcd\x47\x6e\x90\xb3\xbe\x6c\x8d\x7a\x4b\xf2\xe4\x76\x31\x49\xc9\x2d\x93\x23\x46\x58\x93\x7e\x4a\xc9\x21\xf3\x4f\x75\x73\x63\xf3\x1d\x5a\x7f\x52\xbc\xeb\xe4\xf7\x6a\x0a\xce\xb8\x92\x8c\xb3\xf9\x2a\xa2\x04\x84\x27\x15\xf9\x94\x6e\xd5\x48\xe7\x65\xb2\x38\x90\xc8\xed\xb0\x16\x78\x47\xe3\xdc\xfb\xb9\x9c\x22\xb2\x58\x62\x61\xf4\x7b\xb0\x18\xd0\x0c\xa1\xab\x26\xad\xb0\xfc\x84\xa6\xf5\xb7\xf0\x20\x41\xf6\xaa\x4c\x0e\x67\xed\xee\xbd\x42\xb2\x9f\x6f\xae\xbe\x1c\xdf\x56\x95\x89\xc2\x3f\x4d\x4a\xbe\x9a\x4e\xe6\xe5\x2a\xf9\xbd\x2c\x25\x41\x26\x66\x81\x9d\x95\x94\x19\x59\xc8\xcb\x64\xd4\x55\x39\x05\xf9\xfb\xb2\x1c\xa2\x41\xf2\xc8\x74\x9d\x03\x5f\x6c\x8f\x37\x60\xee\x2f\x25\x96\xed\x15\xad\xd4\x9a\x93\x95\x2b\xe0\x1a\xaf\xeb\x59\xf5\xc6\x6b\x82\xdf\x62\xb0\x42\x31\x7b\x7f\x76\x1f\x56\x65\x60\x33\xbf\x1c\xcc\xff\x26\xbf\x02\x00\x00\xff\xff\xa1\x61\x04\xaf\xa7\x08\x00\x00")

func templatesViewsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsIndexHtml,
		"templates/views/index.html",
	)
}

func templatesViewsIndexHtml() (*asset, error) {
	bytes, err := templatesViewsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/index.html", size: 2215, mode: os.FileMode(420), modTime: time.Unix(1483474197, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/index.html": templatesViewsIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"index.html": &bintree{templatesViewsIndexHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: AssetInfo, Prefix: k}
	}
	panic("unreachable")
}
