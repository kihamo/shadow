// Code generated by go-bindata.
// sources:
// templates/views/index.html
// DO NOT EDIT!

package mail

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x57\x5f\x6f\xdc\x36\x0c\x7f\xef\xa7\x10\xf4\x30\x6c\xc3\x1c\x23\x97\xa1\x2f\xb3\x8d\x01\x7b\xd9\x43\x83\x0d\x6b\xf7\x1c\xf0\x2c\x3a\xa7\x40\x7f\x3c\x91\xbe\xde\x6a\xf4\xbb\x0f\xb2\xec\x8b\x9b\xf3\xb9\xc9\x96\xa1\xe9\x3d\x9c\x49\x89\xe2\x9f\x1f\x69\x9a\xea\x7b\xa1\xb0\xd1\x0e\x85\xac\xbd\x63\x74\x2c\xc5\xc7\x8f\xaf\x0a\xa5\xf7\xa2\x36\x40\x54\xca\xe0\xdf\xcb\xea\x95\x10\x42\xcc\x57\x6b\x6f\x32\xab\xb2\xcb\x8d\x88\x14\xd9\x89\x3a\x50\x76\xb9\x19\xe5\x1f\x9e\x39\xdc\xb4\xe0\xd0\xcc\x76\x4f\x25\x58\xb3\xc1\x07\x12\x83\xd4\x6e\x53\x5d\x83\x36\x45\xbe\xdb\x2c\xec\xce\x3d\x33\x08\xa1\xd1\x07\x59\x15\xb9\xd2\xfb\x07\xc6\x16\x96\x3e\xb1\x3f\xa1\x70\x6a\xa3\xef\x85\x6e\xc4\x05\x86\xe0\x43\xc4\x68\xcd\x07\x30\x18\x58\x0c\xff\x99\x02\x77\x8b\x61\x62\x34\x59\x4d\x04\xdb\xc5\x20\x07\x35\xdb\x8e\xd9\x3b\xc1\x7f\xb7\x58\xca\xc4\xc8\xfb\xd8\x3c\xa1\x14\x0a\x18\x26\x55\xa3\x31\x29\x20\x68\xc8\x76\x5a\x29\x74\xa5\xe4\xd0\xa1\xac\xbe\x61\x6d\x91\x7e\x2a\xf2\xa4\x66\xd9\x60\xdf\xaf\x05\x75\x8a\xd7\x78\x06\x9d\x8a\x07\xce\xc1\x64\x91\x08\x6e\xf1\x29\x40\x69\xd7\xf8\x97\x0d\xd3\x5a\x50\x4f\x06\xaa\x68\x7c\xb0\x93\xc7\x91\xce\x76\x3e\xe8\x0f\xde\x31\x18\x31\xf0\x06\xb6\x68\x32\x83\x0d\x4b\x11\xbc\xc1\x24\x26\x85\x45\xde\x79\x55\xca\xd6\x13\x4b\xa1\x55\x29\x09\x9d\xca\x2c\x68\x23\x05\xd4\xac\xbd\x2b\x65\x9e\x58\xe7\xf7\x60\xb4\x02\xc6\x33\x38\xce\x92\xa1\x19\x6d\xb2\x7c\x1b\x7c\xd7\x9e\x41\x7e\x38\x35\xb8\x16\x65\x4b\xc9\xfe\x1e\x77\xef\x38\x78\x93\x1c\x17\x63\x8b\xb8\x9a\x3a\xc4\xd5\x62\x83\x58\xfa\xbd\xfb\x4d\x14\xd4\x82\x3b\xb6\x20\xfc\xab\xd3\x01\x95\xac\xbe\x2f\xf2\xb8\xb1\xe2\x59\x3e\x18\x5f\x11\x38\x6d\x62\xaf\x27\x0f\x5f\x3f\xda\xc3\x42\xbb\xb6\xe3\xb1\xfa\x18\x0f\x2c\x3f\xc9\xe4\x08\x44\x4a\x4e\x04\xc8\x81\xc5\x44\xb5\x06\x6a\xdc\x79\xa3\x30\x94\x12\x0f\x60\x5b\x83\x97\x3f\x2b\x6f\x41\xbb\x8b\xda\xdb\x1f\xc4\xb8\xb8\x99\x2d\x4a\xb1\x07\xd3\x61\x29\xa5\x98\xb0\x98\xa3\xb2\x82\xc6\x62\x55\x7e\x6e\xeb\x3f\xd7\x04\x75\xdb\x3b\xac\xf9\xd9\x0b\xe3\x6d\xd2\xfb\x35\x65\xff\x08\x45\x2a\x81\x23\x3b\x25\xf4\xe5\x25\x2f\x86\xf5\xec\x99\xfb\x25\x7d\x57\x07\xcc\xbe\x78\xfa\x08\x0d\xd6\xbc\x94\x33\x91\xb6\x36\xb1\xe1\xbe\xa7\x52\xfe\x78\x7c\x75\x07\x50\x86\xd7\x39\x52\xeb\x06\x06\x23\xbe\x8d\x8d\x78\xca\x73\x6b\x40\x3b\x59\xfd\x1e\x1f\x22\x96\x4c\x91\x27\x81\x27\x6b\xda\xb1\x35\xb2\xfa\xf5\xdd\xf5\x9b\xc7\xa9\x28\xf2\x14\xd3\xcb\x2b\xb4\xf1\x73\xfa\xec\xb5\x76\x9d\xf4\x7e\xf1\x32\x8b\x69\x86\x80\xb0\x58\x68\x01\x49\x7f\x88\x03\xce\xcd\x24\x76\x52\x73\x47\x7c\x62\xd9\x4d\x4c\x55\xe4\xd3\x81\xff\x33\xa3\xc6\xdd\x90\x37\x5a\x2d\x4e\xd1\x4b\x07\x1e\x97\xfd\x73\xc0\x5a\x95\xf9\xa6\x21\xe4\xec\xea\x73\xa8\x8e\x83\xdf\x34\xf6\xc8\xb1\x0d\x53\xb7\xb5\xfa\xbe\x11\x6f\xd9\x89\x2d\xbb\x8c\xba\xba\x46\x22\x59\xbd\x45\xa7\xd6\x27\xbc\x7f\x07\x5c\x91\xc7\xc8\x57\x6f\x19\x33\x76\x24\xc7\xc7\x6c\x3a\x9c\x5d\xc4\xee\x68\xb8\x83\xf5\xbd\x20\x06\xd6\x75\x7c\xd5\xc5\xb7\x89\xfe\xf3\x8f\x37\x42\xe6\x0a\x68\xb7\xf5\x10\x54\x0e\x44\xc8\x94\xef\xd1\x29\x1f\x28\x1f\x67\x3d\x1f\xf2\xbb\x19\x73\x61\xb5\xbb\x88\x5a\x1b\x30\x84\xdf\x8d\xca\x93\xe5\x7f\x02\x00\x00\xff\xff\x7f\x9c\xdc\xa5\x01\x0e\x00\x00")

func templatesViewsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsIndexHtml,
		"templates/views/index.html",
	)
}

func templatesViewsIndexHtml() (*asset, error) {
	bytes, err := templatesViewsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/index.html", size: 3585, mode: os.FileMode(420), modTime: time.Unix(1505253019, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/index.html": templatesViewsIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"index.html": &bintree{templatesViewsIndexHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: AssetInfo, Prefix: k}
	}
	panic("unreachable")
}
