// Code generated by go-bindata.
// sources:
// templates/views/send.html
// DO NOT EDIT!

package internal

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsSendHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x57\x4b\x6f\xdc\x36\x10\xbe\xe7\x57\x10\x3c\x14\x6d\x51\x99\xf0\xba\xc8\xa5\x92\x50\xa0\x97\x1e\x62\xb4\x68\xd2\xb3\x31\x2b\x8e\xbc\x34\xf8\x50\x39\xa3\xcd\x36\x42\xfe\x7b\x41\x3d\xd6\x8a\x57\xab\xd8\xad\x8b\x38\x7b\x58\xcd\x90\xc3\x79\x7c\x33\x1a\x0d\xbb\x4e\x68\xac\x8d\x47\x21\xab\xe0\x19\x3d\x4b\xf1\xf1\xe3\xab\x5c\x9b\xbd\xa8\x2c\x10\x15\x32\x86\xf7\xb2\x7c\x25\x84\x10\xf3\xd5\x2a\xd8\xcc\xe9\xec\x72\x23\x12\x45\x6e\xa2\x0e\x94\x5d\x6e\x46\xf9\x87\x67\x0e\x37\x0d\x78\xb4\xb3\xdd\x53\x09\x36\x6c\xf1\x81\x44\x2f\xb5\xdb\x94\xd7\x60\x6c\xae\x76\x9b\x85\xdd\xb9\x67\x16\x21\xd6\xe6\x20\xcb\x5c\x69\xb3\x7f\x60\x6c\x61\xe9\x13\xfb\x13\x0a\xa7\x36\xba\x4e\x98\x5a\x5c\x60\x8c\x21\x26\x8c\xd6\x7c\x00\x8b\x91\x45\xff\x9f\x69\xf0\xb7\x18\x27\xc6\x90\x33\x44\xb0\x5d\x0c\xb2\x57\xb3\x6d\x99\x83\x17\xfc\x77\x83\x85\x1c\x18\x79\x1f\x5b\x20\x94\x42\x03\xc3\xa4\x6a\x34\x26\x05\x44\x03\xd9\xce\x68\x8d\xbe\x90\x1c\x5b\x94\xe5\x37\x6c\x1c\xd2\x4f\xb9\x1a\xd4\x2c\x1b\xec\xba\xb5\xa0\x4e\xf1\x1a\xcf\xa0\xd7\xe9\xc0\x39\x98\x1c\x12\xc1\x2d\x3e\x05\x28\xe3\xeb\xf0\xb2\x61\x5a\x0b\xea\xc9\x40\xe5\x75\x88\x6e\xf2\x38\xd1\xd9\x2e\x44\xf3\x21\x78\x06\x2b\x7a\xde\xc2\x16\x6d\x66\xb1\x66\x29\x62\xb0\x38\x88\x49\xe1\x90\x77\x41\x17\xb2\x09\xc4\x52\x18\x5d\x48\x42\xaf\x33\x07\xc6\x4a\x01\x15\x9b\xe0\x0b\xa9\x12\xab\xd2\x86\x92\xc2\x87\x3d\x58\xa3\x81\xf1\x0c\x9a\xb3\x94\x18\x46\x37\xd8\xbf\x8d\xa1\x6d\xce\xe0\xdf\x9f\xea\x1d\x4c\xb2\x85\xe4\x70\x8f\x7e\xf0\x1c\x83\x1d\xdc\x17\x63\xa3\xb8\x9a\xfa\xc4\xd5\x62\x9b\x58\xfa\xbd\xfb\x4d\xe4\xd4\x80\x3f\x36\x22\xfc\xab\x35\x11\xb5\x2c\xbf\xcf\x55\xda\x58\xf1\x4c\xf5\xc6\x57\x04\x4e\x5b\xd9\xeb\xc9\xc3\xd7\x8f\xf6\x30\x37\xbe\x69\x79\xac\x41\xc6\x03\xcb\x4f\xf2\x39\x02\x31\xa4\x28\x01\xe4\xc1\xe1\x40\x35\x16\x2a\xdc\x05\xab\x31\x16\x12\x0f\xe0\x1a\x8b\x97\x3f\xeb\xe0\xc0\xf8\x8b\x2a\xb8\x1f\xc4\xb8\xb8\x99\x2d\x4a\xb1\x07\xdb\x62\x21\xa5\x98\xb0\x98\xa3\xb2\x82\xc6\x62\x6d\x7e\x6e\xeb\x3f\xd7\x04\xb5\xdb\x3b\xac\xf8\xd9\x0b\xe3\xed\xa0\xf7\x6b\xca\xfe\x11\x8a\xa1\x04\x8e\xec\x94\xd0\x97\x97\xbc\x14\xd6\xb3\x67\xee\x97\xe1\xeb\xda\x63\xf6\xc5\xd3\x47\x68\xb1\xe2\xa5\x9c\x89\x61\x6b\x93\xda\xee\x7b\x2a\xe4\x8f\xc7\x57\xb7\x07\xa5\x7f\x9d\x13\xb5\x6e\xa0\x37\x12\x9a\xd4\x8e\xa7\x3c\x37\x16\x8c\x97\xe5\xef\xe9\x21\x52\xc9\xe4\x6a\x10\x78\xb2\xa6\x1d\x3b\x2b\xcb\x5f\xdf\x5d\xbf\x79\x9c\x8a\x5c\x0d\x31\xbd\xbc\x42\x1b\x3f\xaa\xcf\x5e\x6b\xd7\x83\xde\x2f\x5e\x66\x29\xcd\x10\x11\x16\x0b\x2d\x22\x99\x0f\x69\xcc\xb9\x99\xc4\x4e\x6a\xee\x88\x4f\x2a\xbb\x89\x29\x73\x35\x1d\xf8\x3f\x33\x6a\xfd\x0d\x05\x6b\xf4\xe2\x2c\xbd\x74\xe0\x71\xd9\x3f\x07\xac\xd3\x59\xa8\x6b\x42\xce\xae\x3e\x87\xea\x38\xfe\x4d\xc3\x8f\x1c\xdb\x30\xb5\x5b\x67\xee\x1b\xf1\x96\xbd\xd8\xb2\xcf\xa8\xad\x2a\x24\x92\xe5\x5b\xf4\x7a\x7d\xce\xfb\x77\xc0\xe5\x2a\x45\xbe\x7a\xd7\x98\xb1\x23\x39\x3e\x66\x33\xe2\xec\x3a\x76\x47\xfd\x4d\xac\xeb\x04\x31\xb0\xa9\xd2\xab\x2e\xbe\x1d\xe8\x3f\xff\x78\x23\xa4\xd2\x40\xbb\x6d\x80\xa8\x15\x10\x21\x93\xda\xa3\xd7\x21\x92\x1a\x67\xbd\x10\xd5\xdd\x8c\xb9\x70\xc6\x5f\x24\xad\x35\x58\xc2\xef\x46\xe5\x83\xe5\x7f\x02\x00\x00\xff\xff\xc9\xdd\xea\x90\x07\x0e\x00\x00")

func templatesViewsSendHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsSendHtml,
		"templates/views/send.html",
	)
}

func templatesViewsSendHtml() (*asset, error) {
	bytes, err := templatesViewsSendHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/send.html", size: 3591, mode: os.FileMode(420), modTime: time.Unix(1507221864, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/send.html": templatesViewsSendHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"send.html": &bintree{templatesViewsSendHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
