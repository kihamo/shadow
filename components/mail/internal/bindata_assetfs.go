// Code generated by go-bindata.
// sources:
// templates/views/send.html
// locales/ru/LC_MESSAGES/config.mo
// locales/ru/LC_MESSAGES/mail.mo
// locales/ru/LC_MESSAGES/send.mo
// DO NOT EDIT!

package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsSendHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x56\x4f\x6f\xdb\x3e\x0c\xbd\xf7\x53\x10\x3a\xfd\x7e\xc3\x1c\x21\xe9\x50\xec\x60\x07\x03\x76\xd9\xa1\xc5\x86\xb5\x3b\x17\xb2\xc5\xd4\x2a\xf4\xc7\x93\xe4\x34\xab\x91\xef\x3e\xc8\xb2\x5d\x37\xf1\xb2\x16\x5b\x80\x2c\x97\x90\x12\x25\x52\xef\x3d\xc9\x6c\x1a\xe0\xb8\x12\x1a\x81\x14\x46\x7b\xd4\x9e\xc0\x76\x7b\x96\x72\xb1\x86\x42\x32\xe7\x32\x62\xcd\x03\x59\x9e\x01\x00\x8c\x47\x0b\x23\x13\xc5\x93\xf9\x02\x82\xe5\x54\x6f\x6d\x5c\x32\x5f\x74\xf1\xbb\x6b\x36\xb7\x15\xd3\x28\x47\xb3\xfb\x11\x5e\x78\x89\x3b\x11\x6d\x54\xb9\x58\x36\x0d\x88\xf9\x7b\x0d\xe4\x8a\x09\x49\x60\x06\xdb\x6d\x4a\xcb\xc5\x44\xf0\xb8\x50\x89\xcc\xae\xc4\x86\x2c\x53\xca\xc5\x7a\x27\xf7\xc4\xd0\xb3\x72\x7a\x50\x26\x72\xac\x8c\x55\x7d\x60\xb0\x93\xd2\x58\xf1\x68\xb4\x67\x12\x5a\x5f\xb2\x1c\x65\x22\x71\xe5\x09\x58\x23\x31\x86\x11\x50\xe8\x4b\xc3\x33\x52\x19\xe7\x09\x08\x9e\x11\x87\x9a\x27\xaa\x3d\x14\x2b\xbc\x30\x3a\x23\x34\xb8\x34\x4c\x50\x02\xda\xac\x99\x14\x9c\x79\xdc\xaf\x63\xb7\x66\xe1\x51\xc5\xfc\x77\xd6\xd4\xd5\x44\xe5\xc3\xaa\xb6\xc0\x10\x9b\x11\x6f\xc8\x13\xb3\xda\x5b\x23\x63\xf9\xd0\xf1\x7c\xde\xd3\x7c\x3e\xc9\xf2\xd4\x6f\x60\xeb\xe6\x73\xe4\x0a\x52\x57\x31\x3d\xc8\x0a\xbf\xd7\xc2\x22\x27\xcb\x37\x29\x0d\x13\x07\x0a\xa5\x6d\x2d\x07\x02\xf6\x85\x79\xd1\x17\x7c\xf1\xe2\x82\x53\xa1\xab\xda\x83\xff\x51\x61\x46\x3c\x6e\x3c\x79\x46\x6f\x87\x4b\x64\x2c\xe0\xa5\x99\xc2\x68\x55\x92\x15\x58\x1a\xc9\xd1\x66\x04\x37\x4c\x55\x12\xe7\x1f\xb8\x51\x4c\xe8\x59\x61\xd4\x5b\xe8\x06\x17\xa3\x41\x02\x6b\x26\x6b\xcc\x08\x81\x1e\x8b\x31\x2a\x07\xd0\xd8\xd3\xec\x4b\xa6\xfe\x58\x22\xae\xce\xef\xb1\xf0\xc7\xd3\xc9\x75\x9f\x20\x88\xe5\x5f\x12\xc3\x80\x4c\x54\xc4\xe0\xf6\xfc\x9e\x1e\x97\xe1\x58\xc7\x23\xf2\x63\x7c\x34\x21\x66\x39\x09\x36\x1d\x4a\x2c\xfc\x14\x85\x10\xa7\x16\xe1\x8d\x7e\x70\x19\x79\x37\x5c\xec\xb6\xfa\xf6\xb2\x07\xeb\x70\x82\x36\x89\xa9\xc2\xdb\xdd\xd3\x5e\x49\x26\x34\x79\xfa\x68\x7d\x09\x3e\x44\x29\xc5\x4f\x57\x8c\x7f\xf5\xc6\xa5\x57\x72\xb4\xef\xa7\x9b\xab\xcb\xd7\xec\x98\xd2\x78\xe2\xd3\x53\xa5\x42\xe7\xd8\xdd\x11\x85\x79\xd5\x27\x38\x09\x4d\x06\x29\x30\x8b\x6c\x52\x95\x16\x9d\x78\x64\xb9\xc4\xdb\x3e\x6c\x4f\xa0\x03\x5c\x41\xa3\xbd\xb3\x4c\x69\xbf\xe0\x98\x04\x4b\x7d\xeb\x8c\x14\x7c\xb2\xab\x9a\x5a\xf0\x32\x31\xfc\x0a\x58\xc5\x13\xb3\x5a\x39\xf4\xc9\xf9\xef\x50\xcd\x6b\xef\x8d\x1e\xda\x2a\xd2\x3d\xe1\xae\xce\x95\x78\x7a\xc4\x73\xaf\x21\xf7\x3a\x71\x75\x51\xa0\x73\xa3\xeb\x74\xdd\x2e\x8a\xd7\x29\xee\xf5\x37\x71\x4c\x69\x00\xe2\x60\x13\x3a\x72\x3b\xb3\xfb\x6b\x1a\x40\xcd\x83\x72\xcf\x46\x6d\xfb\xbd\x6b\x3b\xf6\xa6\x01\xe7\x99\x17\x45\x78\x0e\xe0\xbf\x68\x7f\xfb\x7a\x09\x84\x72\xe6\xca\xdc\x30\xcb\x29\x73\x0e\xbd\xa3\x6b\xd4\xdc\x58\x47\xbb\xa6\xd2\x58\x7a\x3f\x72\x66\x4a\xe8\x59\xd8\x75\xc5\xa4\xc3\xff\xbb\xcd\x63\xe6\x9f\x01\x00\x00\xff\xff\x8e\x6a\xf5\xf6\x2f\x0c\x00\x00"

func templatesViewsSendHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsSendHtml,
		"templates/views/send.html",
	)
}

func templatesViewsSendHtml() (*asset, error) {
	bytes, err := templatesViewsSendHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/send.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesConfigMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x52\x4d\x6b\x1b\x57\x14\x3d\xd3\x51\xbf\xe4\x96\x7e\x40\x4b\x17\x2d\x7d\x2e\xd4\xb4\x94\x71\x67\xa4\x1a\xcc\xc8\x63\x97\xba\x36\x36\xb5\xa8\x70\xe5\x6e\xc3\x8b\xf5\x2c\x4f\x22\xcd\x13\xef\x8d\xf2\x41\xbc\x90\xb5\x71\x16\x06\x67\x63\x92\x55\xbc\x08\x21\xab\x80\x30\x31\x31\xb1\x2d\x2f\xb2\xcd\xe2\xbe\x3f\x90\xdf\x12\x46\x33\xf2\x07\x21\xe4\x2e\xe6\x9e\x73\xee\xb9\x67\xee\xe2\xbd\xfe\x3a\xb7\x0b\x00\x23\x00\xbe\x07\x10\x03\xf8\x0a\xc0\x2b\xa4\xf5\xa5\x05\xe4\x12\xcd\x4a\x3d\xdf\x5a\xc0\xe7\x00\x7e\xb2\x80\xef\x00\xb8\x16\xf0\x0d\x80\x45\x0b\xf8\x02\xc0\x95\xcc\x27\xb3\x7e\x27\xd3\xb7\xb2\x7e\xdf\x02\xd6\x2d\xe0\x89\x05\x8c\x26\xf9\x36\xf0\x09\x80\x82\x0d\x7c\x06\xa0\x64\xa7\xfa\x82\x0d\xfc\x00\xe0\x5a\xa6\xdf\xcd\x7c\xbb\x76\x7a\xcf\x43\x1b\xf8\x11\xc0\xa3\xcc\xff\xd2\x06\x2c\x00\x1f\x21\xf5\xe5\x01\x7c\x08\xe0\x53\x00\x1f\x00\xb0\x71\xb9\x72\x17\xf0\x48\xd6\x3f\x4e\x3e\x65\x1e\x36\xb0\x2a\xa3\xb5\xb0\x9e\x5b\x90\x3a\x1e\xe2\x25\x11\xc7\x42\x0d\x59\xe2\x62\x6b\x4a\x36\x19\xaf\xd5\x94\xd0\xfa\xed\x41\xc4\x9b\x62\xa8\x56\xb8\xd6\x37\xa5\xaa\x9d\x71\xa9\xce\x82\xff\x2b\x57\x2b\x43\xbc\xa2\x85\xba\xb0\xe7\xc4\xfc\x6a\xae\x99\x1c\xb4\x2c\x5a\x52\xc5\x4e\x59\xd7\xc3\x9a\xf3\x57\xbb\xae\x9d\xaa\xf4\x59\x4d\xdc\xf8\xf3\x7a\xb8\xce\x9b\x72\x5c\xb5\xf3\x95\x7f\xab\xce\xac\x12\x3c\x0e\x65\xe4\xfc\xcd\x63\xe1\xb3\x82\xeb\x4d\x3a\x6e\xd1\x29\x14\x59\xa1\xe8\x4f\x4c\xfc\xe6\x16\x5d\x37\xbf\xc4\x75\xec\x54\x15\x8f\x74\x83\xc7\x52\xf9\xec\x9f\x41\x06\x2b\xb7\x15\x6f\xca\x9a\x64\x53\x97\x82\xa7\xf3\x4b\x3c\xaa\xb7\x79\x5d\x38\x55\xc1\x9b\x3e\x3b\xe3\x3e\x5b\x6e\x6b\x1d\xf2\x28\x5f\x5e\x2c\xcf\x39\xff\x0b\xa5\x43\x19\xf9\xcc\x1b\x77\xf3\xb3\x32\x8a\x45\x14\x3b\xd5\xdb\x2d\xe1\xb3\x58\xdc\x8a\x7f\x6f\x35\x78\x18\x95\xd8\xea\x3a\x57\x5a\xc4\xc1\x4a\x75\xde\x99\x3c\xf7\x25\xf7\xac\x09\xe5\xcc\x45\xab\xb2\x16\x46\x75\x9f\xe5\x2b\x8d\xb6\xe2\x0d\x67\x5e\xaa\xa6\xf6\x59\xd4\x1a\x50\x1d\x14\x4b\x2c\x85\x41\xf4\xb3\xe7\x06\x81\xc7\xc6\xc6\x58\x02\xdd\xd1\xc0\xf3\xd8\x0c\x73\x99\x3f\xe0\xd3\x41\x61\x38\x9a\x0a\xfe\x48\xe0\x2f\x03\xdb\x94\xe7\xb2\x8d\x8d\x74\x65\x3a\x28\xb8\xbf\xb2\x19\xe6\x31\x9f\x15\x4a\xa0\xa7\x74\x44\x07\xf4\xc2\x74\x4d\x87\xfa\x74\x42\x27\xd4\x33\x3b\x8c\x4e\xa9\x6f\xb6\x4c\x97\x7a\xa0\xc7\xd4\x37\x9b\xa6\x0b\xda\xa3\x43\xb3\x69\xb6\xe9\x98\xfa\xa0\x7b\xf4\xcc\x74\xe8\xc0\x6c\x32\xea\x9b\x2e\x9d\x9a\x0e\xf5\x68\x9f\x0e\x4d\x97\x0e\xe8\xc8\xec\x80\x1e\xd0\x71\x92\xf4\x8e\xe9\x1e\xf5\x06\x7f\x3c\x32\xdb\x09\xe9\x9b\x8e\xe9\x62\xf0\x36\x86\x8b\xa7\xe9\x94\x9e\x53\x9f\xf6\xa9\x77\xbe\xfa\xde\x93\xdf\x04\x00\x00\xff\xff\x06\x8a\x90\x18\xe5\x03\x00\x00"

func localesRuLc_messagesConfigMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesConfigMo,
		"locales/ru/LC_MESSAGES/config.mo",
	)
}

func localesRuLc_messagesConfigMo() (*asset, error) {
	bytes, err := localesRuLc_messagesConfigMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/config.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesMailMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\xbd\x6e\x14\x31\x14\x85\xcf\x46\xa1\x99\x92\x9a\xe2\xa6\x20\x02\x81\x83\x67\x86\x48\x91\x77\xbd\x41\x84\x44\x42\x64\xc4\x12\x0d\xe9\xad\xac\x99\x1d\x31\x6b\xaf\x6c\x0f\x02\x29\x05\x4a\x43\x49\xc5\x63\x20\xa5\xa1\x01\x25\xfb\x0a\x9e\x17\xe0\x59\xd0\xce\xf2\x97\x53\x9d\x4f\xfe\x7c\x74\x7f\xde\xde\xfc\x02\x00\x1b\x00\xee\x00\x78\x08\xe0\x16\x80\x11\xd6\x99\x00\xd8\x04\xf0\x0a\xc0\x6c\x00\x9c\x02\xd8\x02\xb0\x1c\x00\x83\xdf\xce\x06\xfe\x4b\xa1\xea\x06\x27\x7a\x61\x5d\x60\x85\xaf\xea\x29\x7b\xda\x56\x9e\x95\x56\xd0\x54\xbf\x7b\xf2\xb6\x9e\xa9\xb9\xdd\x71\x6d\x32\x79\x59\xb2\x03\xa7\x55\xa8\xad\x61\xcf\x54\xd0\x82\x32\x9e\xee\x31\x9e\xb3\x2c\xa7\x2c\x17\xbb\xbb\x0f\x78\xce\x79\x72\xac\x7c\x60\xa5\x53\xc6\x37\x2a\x58\x27\xe8\x45\xbf\x41\x45\xeb\xd4\xdc\x4e\x2d\x8d\x6e\x0c\x8f\x93\x63\x65\xaa\x56\x55\x9a\x95\x5a\xcd\x05\xfd\x65\x41\x27\xad\xf7\xb5\x32\x49\xf1\xbc\x38\x64\xa7\xda\xf9\xda\x1a\x41\xe9\x0e\x4f\x0e\xac\x09\xda\x04\x56\x7e\x58\x68\x41\x41\xbf\x0f\x8f\x16\x8d\xaa\xcd\x90\xce\x66\xca\x79\x1d\xe4\xeb\xf2\x88\xed\xfd\xf3\x56\xf7\xbc\xd1\x8e\x1d\x9a\x33\x3b\xad\x4d\x25\x28\x99\x34\xad\x53\x0d\x3b\xb2\x6e\xee\x05\x99\x45\x8f\x5e\xe6\x43\x5a\x57\x69\xee\xa6\x5c\xca\x94\xb6\xb7\x69\x55\xf9\x96\x4c\x53\xda\x27\x4e\xa2\xe7\xb1\xcc\xfe\x3c\x8d\xe4\xe3\x55\xbd\xd7\x6b\xa3\x94\xd3\xf9\xf9\xfa\xcb\x58\x66\xfc\x3e\xed\x53\x4a\x82\xb2\x21\xe2\xd7\xf8\x23\x7e\x8b\xdf\xbb\x8b\xee\x63\xbc\x8e\x57\xf1\x2a\x5e\x76\x9f\x29\x2e\xe3\x75\xf7\xa9\xbb\x88\x97\xf8\x15\x00\x00\xff\xff\x8c\xc9\x8f\x42\xe1\x01\x00\x00"

func localesRuLc_messagesMailMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesMailMo,
		"locales/ru/LC_MESSAGES/mail.mo",
	)
}

func localesRuLc_messagesMailMo() (*asset, error) {
	bytes, err := localesRuLc_messagesMailMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/mail.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesSendMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x51\xcf\x4f\xd4\x5a\x14\xfe\x66\xe0\xbd\x07\x93\xf7\x92\x17\xa2\x31\x46\x17\xc7\x85\x04\x43\x8a\xed\x8c\x18\x52\x28\x18\x11\xa2\x91\x09\x04\xaa\xfb\xeb\xcc\x75\xa8\xce\xdc\x4e\x7a\x5b\x23\x09\x0b\x18\x36\x9a\xb8\xd4\x8d\x0b\x8d\xae\x59\x80\xc9\x24\x88\x50\x36\xfe\x01\xa7\xff\x80\xd1\x7f\xc0\x8d\x4b\x37\xa6\xed\x20\x9a\x78\x16\xf7\x7c\xdf\x39\xdf\xf9\x95\xfb\x69\xa8\xff\x05\x00\x0c\x02\x38\x0f\xa0\x0e\xe0\x3f\x00\xdb\xc8\xed\x33\x80\x7f\x01\x7c\x01\xd0\x0f\xe0\x2b\x80\x7f\x00\x7c\x03\x70\x0a\xc0\x77\x00\x25\x00\xff\x17\xf2\xfc\xb9\x42\x9e\xa7\x02\x50\x04\x30\x52\x00\x56\x0b\xc0\x68\x01\x38\x03\xe0\x79\x31\xd7\x6d\x17\x81\x21\x00\xbb\x45\xe0\x2a\x80\x8f\x45\xe0\x6c\xda\xaf\x17\x3f\xdd\x07\x0c\xa4\xf5\x3d\x6f\xf5\x01\x05\x00\x7f\xf7\xe6\xff\x05\xa0\x0f\xf9\x8c\xc1\xde\xae\xfd\x38\xb1\x81\x63\x30\xeb\xab\x50\xaa\x90\xc2\xb5\xb6\xc4\x4d\xb7\xba\x80\xaa\xd4\x5a\x34\xe4\xb1\x27\x2d\x55\x9d\x74\x54\xab\x49\xad\xb1\xd4\x14\x9e\xa2\x50\x3e\x0e\xb1\x22\x55\x1d\x2b\xd1\xbd\x07\xb2\x16\xc2\x5d\xc4\xb2\x6c\xfb\x41\x68\x54\x75\xc3\xab\x1b\xd7\xa3\x86\x36\x5c\xdf\xa6\xba\x7c\x74\xed\xa1\xb7\x2a\x5a\xfe\x58\x10\x95\x96\x16\x5d\x63\x36\x90\x22\xf4\x7c\x65\xdc\x10\xa1\xb4\xa9\x6c\x5a\x13\x86\x59\x31\xca\x15\x2a\x57\xec\xf1\xf1\x51\xb3\x62\x9a\xa5\x05\xa1\x43\xc3\x0d\x84\xd2\x4d\x11\xfa\x81\x4d\xb7\xb3\x1e\x54\x8d\x02\xd1\xf2\xeb\x3e\x4d\xfd\xd6\x78\xba\xb4\x20\x54\x23\x12\x0d\x69\xb8\x52\xb4\x6c\xfa\xc9\x6d\x5a\x8e\xb4\xf6\x84\x2a\x55\x6f\x55\xe7\x8c\xbb\x32\xd0\x9e\xaf\x6c\xb2\xc6\xcc\x52\xef\x76\xc3\x5d\x6b\x4b\x3b\x3b\xea\x72\x3b\xbd\x6f\x92\x6a\xab\x22\xd0\x32\x74\xee\xb8\xf3\xc6\xc4\x89\x2e\xdd\xe7\xbe\x0c\x8c\x39\x55\xf3\xeb\x9e\x6a\xd8\x54\x5a\x6a\x46\x81\x68\x1a\xf3\x7e\xd0\xd2\x36\xa9\x76\x46\xb5\x53\x99\xa4\x1c\x3a\xea\xa2\x65\x3a\x8e\x45\xc3\xc3\x94\x42\xf3\x82\x63\x59\x34\x43\x26\xd9\x19\x9f\x76\xca\xc7\xa9\x29\xe7\x4a\x0a\x47\x32\xd9\x94\x65\xd2\xfa\x7a\x5e\x32\xed\x94\xcd\x4b\x34\x43\x16\xd9\x54\x9e\x04\xbf\xe5\x3d\x3e\x22\xde\xe7\x98\x0f\x93\x0e\x77\xb3\x77\x27\xff\x3d\x7e\xc3\x31\xc7\xbc\x9b\x3c\x4d\xe3\xbc\xc7\xdd\x3f\x84\x28\xd9\x4a\x36\xf9\x88\xbb\xc9\x13\x3e\xe4\x98\x38\x4e\x3a\x7c\x94\x6c\xf0\x0e\xbf\xe3\x0f\x99\x2a\x06\xbf\x4e\x36\x38\x4e\x36\x93\x0e\xc7\xfc\x9e\xb2\x41\xfb\x29\x05\xbf\xfa\x45\xbe\x97\x74\x92\x67\xe9\x4e\x5d\x3e\xe0\x1d\xf0\x4b\x8e\xf9\x20\xd9\xc2\x8f\x00\x00\x00\xff\xff\x38\x92\x03\x7b\x3a\x03\x00\x00"

func localesRuLc_messagesSendMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesSendMo,
		"locales/ru/LC_MESSAGES/send.mo",
	)
}

func localesRuLc_messagesSendMo() (*asset, error) {
	bytes, err := localesRuLc_messagesSendMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/send.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/send.html":        templatesViewsSendHtml,
	"locales/ru/LC_MESSAGES/config.mo": localesRuLc_messagesConfigMo,
	"locales/ru/LC_MESSAGES/mail.mo":   localesRuLc_messagesMailMo,
	"locales/ru/LC_MESSAGES/send.mo":   localesRuLc_messagesSendMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"config.mo": &bintree{localesRuLc_messagesConfigMo, map[string]*bintree{}},
				"mail.mo":   &bintree{localesRuLc_messagesMailMo, map[string]*bintree{}},
				"send.mo":   &bintree{localesRuLc_messagesSendMo, map[string]*bintree{}},
			}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"send.html": &bintree{templatesViewsSendHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
