// Code generated by go-bindata.
// sources:
// templates/views/index.html
// DO NOT EDIT!

package workers

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x58\x5b\x6f\xdb\x36\x14\x7e\xcf\xaf\x20\xbc\x00\x92\xb7\xfa\x92\xb6\x19\xb0\xc4\xf6\x30\x2c\xc3\x50\x20\xd8\x4b\x83\xe5\x61\x18\x0a\x46\xa2\x2c\xd6\x0a\x25\x90\x94\x1d\xc3\xf5\x7f\x2f\x49\x51\x17\x4b\xd4\xcd\x49\x0b\x07\xa8\x1e\x7c\xe1\xb9\xf0\xf0\x9c\xef\x23\x8f\xb8\xdb\x01\x17\x79\x98\x20\x30\x70\x42\xc2\x11\xe1\x03\xb0\xdf\x9f\xcd\x5c\xbc\x06\x4e\x00\x19\x9b\x0f\x68\xb8\x19\x2c\xce\x80\x78\x8a\xa3\x4e\x18\x8c\x82\xe5\xe8\xe2\xad\x96\x29\xb9\x7f\x91\x8a\x23\xb8\x44\x23\x1f\x41\x17\xd1\xc1\xe2\x3e\xa4\x2b\x44\xd9\x6c\xe2\x5f\x68\x47\x13\xe1\x69\x71\xa6\xbf\x3a\xce\xf6\xc4\x4a\xb3\x55\xe5\xef\x0b\xe2\xb2\x4a\x04\x09\x0a\x80\xfa\x1c\x2d\x29\x42\xa4\xa4\x6b\xd4\x57\x4b\xc0\x64\x69\xd0\x2d\xeb\xe7\x81\xb7\x69\xea\x60\xdf\x35\xa8\x2b\x13\x9c\x1a\x78\x10\x78\x70\xe4\x22\xe8\xc9\xef\xcb\xa7\xc1\x62\x36\xc1\x0d\x73\x25\x69\xed\x11\xca\x6f\x80\xa3\x27\x3e\xa2\x78\xe9\xf3\xb6\xa8\x0a\xd6\x7e\xbc\x44\x03\x80\xdd\xf9\x20\xc0\x4c\x60\x47\xd4\x78\xe4\x84\xb1\xc0\xd0\x62\xda\x12\x44\xea\x6a\x71\x9b\x5a\xb6\x45\x5d\x2f\xae\x11\xd5\x0d\x43\xe0\x53\xe4\xcd\x07\x3f\x65\x41\x77\xa8\x6e\x82\x06\x2f\x0c\xb9\x04\x74\x7d\x94\x4c\x28\x66\x36\x71\x20\x38\x82\x3c\x91\x8e\x7f\x31\xda\x80\x1b\xc4\x21\x0e\xc4\x42\xa5\x52\x1f\x1f\xba\x2e\x65\x40\x40\x2a\x30\x37\x72\x30\x75\x02\x94\xe9\x08\x60\xb4\x4e\x50\x04\x40\x80\x20\xf5\xb0\x82\x54\xff\x04\xc3\x12\xdd\x0e\xf5\xca\x7f\x8f\xe7\xeb\x16\x05\x81\x91\x5e\x27\x4d\xd8\x98\x09\x6c\x9d\x2a\x63\x37\xc9\x9e\xdc\x9b\xaf\xd9\x5e\xfe\xbd\xd9\xaa\x03\xfe\xc1\xd5\x13\xe7\x2a\x45\xee\x6b\x23\x2a\x87\x6c\x75\xb2\x44\x55\xc1\x8d\x36\x10\xf3\xfe\x5c\x15\x46\x40\xd9\x7f\x7f\xba\xaa\x69\x7f\x90\xf5\x5b\x93\xb5\xa1\x93\x2e\x92\x92\xc5\x8e\x83\x18\x2b\x35\x6b\x86\x46\xbb\xc4\x4d\x53\x77\x56\x55\x7f\x08\xdd\x6d\x4d\x63\xce\xe1\x83\xcc\x21\x62\x51\x48\x18\x5e\xa3\xf2\x26\xa2\xe4\x07\xca\x20\x31\xf1\xc3\xb5\x11\x10\x33\x2e\x83\x33\x8d\xd3\x9a\x1c\x73\x7f\xf1\x0f\x7c\x44\xb3\x89\xf8\x61\x48\xb5\xc9\x4e\xea\xd6\xcc\x22\xd7\x6a\x34\xa8\x0a\xc4\xa0\x5c\xca\x73\xea\xb6\x81\x94\xc8\x42\x14\x8f\xec\xf6\xaa\x55\xcf\xe8\x57\x58\xb3\x0f\x37\xe6\x8a\xa5\xf2\x3f\x29\x82\x1c\xb9\xcd\x4a\x77\x62\x17\x02\x6d\x9e\x94\x12\xa9\x85\xc8\x81\x1a\xe3\x90\xc7\xac\x83\xa2\xd3\x14\xde\x89\xa3\xce\x85\x64\x29\x0a\x99\x1f\x3f\x1d\x20\x67\x3a\x6a\x5e\x21\xea\x5e\x1c\x30\xaf\x00\x07\xbb\x1d\x40\xc4\x95\xd7\x3e\x67\x85\xeb\xa0\xcf\x2c\xb9\x09\x62\x0e\xc5\x11\x4f\xec\xd6\x90\x2a\x06\xb0\x9b\x90\xc4\xfc\x5a\x8d\x79\x31\x71\x38\x0e\x09\x58\x22\x2e\x57\xfc\x51\x31\x44\xee\xb8\x76\x42\x96\x21\xd8\x65\x31\xb0\x0d\xe6\x8e\x6f\x10\xc8\xc7\x81\x0c\x81\xe9\x55\x65\x79\x14\xf1\x98\x12\x60\xc9\x1e\xc8\xba\xae\x88\x1f\x44\x86\x57\xd7\x55\x4f\x17\xf5\x9e\x22\x1a\xca\xe3\xb0\x87\xb3\xb7\xf5\xce\xf4\xd9\xda\xc3\xd9\xbb\x7a\x67\x9e\x68\x64\x7a\x78\x7a\xdf\xec\x09\x3c\x6c\x01\xc7\x8f\x28\x8c\xfb\x24\xee\xb2\xde\xe9\x0a\x07\x7d\xc2\xfb\xb5\xb9\x98\xe2\x4f\x24\xd8\xd1\xcd\xa1\xc0\x25\x8c\x03\x5e\xef\x31\x26\x2b\x12\x6e\x48\xbb\xb7\xfd\x59\xfe\x99\xa1\x37\x8e\x5c\xc1\x53\xbb\x88\xc9\xf3\x31\xfc\x0c\x9f\xec\x43\x90\xf2\x6d\x84\xae\x80\xf5\xf7\x5f\x77\xd6\x9b\x03\x41\x4c\x03\x31\x3e\xd1\x87\xf4\x44\x9a\x4e\x4a\x2a\x1a\x29\x57\xd9\xac\x36\x1d\xee\x2a\xd1\x4a\x92\xf1\x5b\x30\x07\xe7\xb6\x95\xdf\x51\x01\x45\x71\x6b\x38\x46\x8f\x11\xdf\xda\xc3\xea\x2a\x95\xdd\xbd\xb6\xd3\x61\x74\xb4\xba\xd3\x56\xc9\x8b\x50\xc5\xc6\x68\x94\x47\x36\x07\x74\x9c\xfd\xfb\xa4\x5e\x52\xc0\x97\x2f\x60\x6a\x9e\x2c\x8d\x4c\x5a\xe9\xdf\xad\x36\x2a\xae\x4f\x0a\x32\x73\xa9\x53\x51\xc2\x1e\xb0\xff\xa0\x14\x6e\xc7\x98\xa9\x6f\xbb\x10\xd2\xb0\xbc\xd1\xa4\x8f\x17\x52\x60\x4b\xff\x18\x60\x52\x5c\x44\x9d\x41\x79\xed\x87\x4b\xff\x0f\xff\x5f\x0d\x3f\x7d\xf8\xed\x18\x46\x91\xd8\x67\x6d\x4b\x1e\x40\x56\xe3\xdb\x9b\x7c\x7e\x01\x42\xd1\x5d\x58\xe2\x47\x3a\xc3\x58\x9e\x39\x4a\x30\x91\x92\x4e\x2e\xe4\x09\x63\x19\xea\x2e\x9f\xbd\x71\xb4\xa6\xb0\xe3\x00\x91\x25\xf7\x2b\x26\xfb\x6e\xd5\xd0\xa5\xee\x5c\x8b\x54\xbf\xa5\x12\x89\x5a\x11\x4c\x8d\x55\x48\xc1\x24\x0c\x12\xf5\xb1\xfc\xd7\x50\xb5\xfb\xe3\xab\xa6\x27\xc0\x6e\xcf\x8a\x69\x73\x22\x5f\x6c\xe5\x96\xa4\xfd\xe8\x46\x62\x38\xe6\xe1\x6d\xe8\xc0\x00\x7d\xe4\x54\xb4\x5e\x62\xc7\x3a\xca\xbd\xad\xd2\xf0\xbb\xca\x86\x8c\x51\xec\x5d\xd6\x4b\xb8\x52\x10\x7d\x01\x67\xd5\x6e\x42\xb9\x4f\x3b\x87\x17\x98\x21\x4b\xb0\x72\x5c\x9f\xde\x63\xa6\xea\xcf\x3a\xc3\xb6\xf8\x4c\xc6\xe5\x9b\x66\x67\xd2\x15\x4c\x5a\x78\xa7\x49\x54\x34\x69\xde\xfe\xee\x8e\x27\x52\x0a\xd1\xa3\xaa\x9d\x83\xf2\x79\x2c\x6c\x01\xc9\xb7\x86\xc7\xc1\x09\x58\xcc\x7a\x0f\x90\x1c\xf4\x13\xc9\x65\xa2\x38\xe5\xe5\xf5\xa4\x9d\x9f\x7c\xd5\xa0\x0a\xed\xc4\xa1\x51\xba\x45\x9b\x4d\x92\x7b\x4b\x8e\x79\x80\x52\x83\xc2\x22\x44\x16\xc0\x26\x7b\x67\x34\xe5\x22\xf7\x91\xdf\x7d\x56\x1d\x95\x0c\xf3\xe4\xed\xb5\x24\x19\x39\xb7\xb3\x96\xab\x88\xec\xb4\xe9\xcb\x9d\x30\xc4\x3f\x10\x8e\xe8\x1a\x06\x76\x22\x7d\x03\x2e\xa6\xd3\x29\xf8\x19\x5c\xa6\x1e\xc5\xf7\x6c\x92\xbe\x16\x65\x2f\x4f\x5f\x03\x00\x00\xff\xff\x4d\x0b\xaa\x4d\x4a\x1f\x00\x00")

func templatesViewsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsIndexHtml,
		"templates/views/index.html",
	)
}

func templatesViewsIndexHtml() (*asset, error) {
	bytes, err := templatesViewsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/index.html", size: 8010, mode: os.FileMode(420), modTime: time.Unix(1494422421, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/index.html": templatesViewsIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"index.html": &bintree{templatesViewsIndexHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: AssetInfo, Prefix: k}
	}
	panic("unreachable")
}
