// Code generated by go-bindata.
// sources:
// templates/views/index.html
// public/js/dashboard.js
// DO NOT EDIT!

package workers

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5a\xdd\x8e\xdb\xb6\x12\xbe\xdf\xa7\x20\x74\x80\x93\xe4\x42\xeb\xec\x39\x29\xd0\x26\xb6\x83\x6d\x02\xb4\x45\x82\xa0\x48\x8a\xe6\x9a\x96\x46\x16\x77\x29\x51\x20\x29\xff\x60\xb1\xef\xde\x21\x45\xc9\xb2\x4d\xfd\xb8\xeb\x26\x9b\x22\xbe\xd8\x95\xc9\xe1\x70\x38\x33\xdf\x70\x66\xac\xbb\x3b\x12\x43\xc2\x72\x20\x41\x24\x72\x0d\xb9\x0e\xc8\xfd\xfd\xc5\x34\x66\x2b\x12\x71\xaa\xd4\x2c\x90\x62\x1d\xcc\x2f\x08\x7e\xda\xa3\x91\xe0\x21\x5f\x86\x57\xff\x73\x73\x76\x3e\xbd\xaa\xa7\x0b\xba\x84\x30\x05\x1a\x83\x6c\x11\x98\xcf\x67\x21\x6f\x41\xaa\xbd\xb1\x36\xe3\x85\xce\xc3\xa5\x14\x65\x41\x8a\x92\xf3\x50\xb2\x65\xaa\x0f\x58\xd8\x25\x8b\x52\x6b\x91\x13\xbd\x2d\x00\x17\xd9\x2f\x41\x8b\x07\x31\x7c\x58\x9e\x08\xfb\xa0\xb2\x80\x28\xbd\xe5\x48\x9a\x51\xb9\x64\x79\xa8\x45\xf1\x92\xfc\x58\x6c\x02\xc2\xe2\x59\x40\x4b\x2d\x24\x24\x12\x54\x1a\x90\x98\x6a\x8a\xf3\xcb\x25\x6f\x71\xa6\x92\xd1\xb0\x40\x02\x05\x48\xaf\x65\x09\x38\x86\xab\x22\x91\x15\x1c\x34\x52\x8a\x24\xf1\xc8\x69\x3e\xd7\x3b\xee\xc7\xe7\x98\x54\x3b\xec\xaf\x9c\x4e\x50\x23\x2d\xc5\x4e\xd2\x2b\x67\x82\x6a\xc2\xfd\x1b\x69\xa7\x8d\x3a\xb0\xd3\xf1\xfc\x8b\x03\xd1\xdb\x24\x05\xcd\x81\x13\xfb\x17\x2d\x03\x90\xfb\xcc\x71\x48\x6f\x8d\xcf\xf2\x65\x87\x4a\xfc\x82\x0f\x51\x3a\x61\xff\xdf\x43\x6e\x97\xb0\x7a\x41\x42\x49\x42\xc3\x18\x68\x62\xfe\xff\xb0\x09\xe6\xd3\x09\xeb\xd9\x6b\x5f\xed\x23\x44\xf9\x89\x68\xd8\xe8\x4e\x2f\xed\x5a\x9d\x96\x4b\xa8\x3c\x8f\x33\x85\xa8\x43\x40\x84\x91\x28\x11\x7d\xf3\xe7\x03\x42\xd4\xac\xe6\xef\xeb\x95\x43\x52\x77\x4f\x77\x4c\x75\x0d\x53\x92\xa2\x1b\xcf\x82\xff\x34\x42\x8f\xb0\x6e\xe5\x0d\x89\x10\xfa\x28\x14\xec\x2d\x51\x48\xd8\xac\x31\xc8\xe7\x90\xa0\x3a\xfe\x64\xb0\x26\x6f\x41\x53\xc6\xf1\xa0\x86\xe8\x14\x1e\xce\x2e\x87\x0e\x41\x25\xfa\x5c\x18\x31\x19\x71\x68\x68\xd0\x31\x06\x37\x68\x3b\x00\x07\x2a\x13\x66\x5d\xea\x74\x05\xd3\x01\xbc\xef\x7f\xfd\xfb\x78\xdd\x02\xe7\x5e\x78\x3d\x6a\xc0\x96\x0a\x7d\xeb\xb1\x22\x76\x5d\x5d\x60\x27\xe3\xd5\x5d\x7c\x5f\x1e\xad\x4e\xe0\xef\x58\x7d\xe4\x58\x95\x10\x7f\x6b\x40\xd5\x54\xdd\x3e\x5a\xa0\x5a\xe1\xc2\x35\x65\xfa\x74\xac\xe2\x22\x62\xd7\x7f\x79\xb8\xda\x6d\xbf\x83\xf5\x9f\x06\x6b\x4f\x26\xdd\x06\xa5\x2a\xa3\x08\x93\xfe\x83\x64\xcd\x93\x68\x77\x61\xb3\x49\xd3\xbc\x21\x62\x44\xb5\x33\xaa\xd2\xc1\x22\x8e\x96\x5c\xdb\xe7\x8d\x22\xb1\x14\x45\x2c\xd6\xb9\x2b\x63\x0e\x6a\x9a\x7a\xd6\x55\x35\xb0\x41\xd9\x63\x53\xd6\x24\x94\x2b\xf0\xf8\xd2\x75\xa4\x99\xc8\xd5\xb1\xba\xdb\x7e\x11\x51\x09\xd6\xdc\xc7\xa6\xee\x28\x72\x4a\x5e\xaf\x6d\xe4\xcd\x20\x2f\x89\xe2\x0c\xc5\x31\x02\x7a\x2c\xcc\x3b\x82\x4c\x03\xa0\x1b\xba\xa2\x2a\x92\xac\xd0\x2f\x57\x82\xc5\x4f\x9f\x3f\x3b\x38\x7e\x26\x62\xca\xeb\x31\xac\x06\x41\x23\xea\xda\x83\xf6\x39\xd4\x4c\x1b\xea\x37\x22\x4f\x98\xcc\x88\x84\x4c\xac\x80\x50\xce\xc9\xce\x0d\xda\xf4\x0b\x11\x6f\x67\xc1\x67\x86\x04\x0b\xf0\x92\x13\xd8\x44\x50\x68\x52\x1b\xab\x9e\xb8\x24\xd7\x12\xc8\x56\xe0\xc9\x4b\x09\xaf\xf7\xb8\x46\xc8\x61\x41\xa3\xdb\x96\xf3\x7d\xb4\xac\x9f\x3e\x7b\xd5\x87\xfa\x06\x98\x4b\xbe\x2d\x52\x86\xc5\x3d\x69\x9e\x42\x2d\x29\x16\xba\x16\x99\xe4\x63\x23\x68\x07\xd0\xa8\x0f\x66\x87\x56\x98\x4e\x4a\xde\x07\x33\xfb\x78\x84\x16\xa3\xb2\x8e\xba\x54\xd3\x85\x09\x21\xa0\x0a\x74\x3c\xb6\x3a\xf4\xca\xa9\x9d\xdf\x23\x26\xd5\x92\x14\x4f\xe3\x8b\x87\x53\x6d\xb0\xe9\x1b\x97\x1d\x0e\xa5\xd3\xf9\x07\x9a\xc1\x74\x82\x0f\x9d\x14\x6f\x24\x50\x0d\xf1\x00\x91\xb9\x7e\x88\x0b\x25\xfd\xa4\xef\xa9\x1a\x49\x59\x31\x4d\x30\x7e\x0f\x6d\x6f\x79\x8e\x21\x74\x38\xf7\x13\xe1\xa8\x47\x53\x86\xb6\x43\xaf\xc6\xba\xde\x05\xc7\x13\x38\x68\x8c\xf7\x90\x40\xbd\xa6\x32\x37\x91\xb7\x9d\xa3\x9f\x10\xa6\x0f\xdb\x52\xdf\x83\xb4\x1b\xfd\x72\x41\xba\x5d\x5c\xa9\xb4\x3f\x75\xed\x0d\x6f\xb0\x85\x50\x14\xa6\x4f\x65\x23\xdc\x27\xe4\x65\x03\xb1\xcd\xac\x1e\x12\xe5\xce\x73\xb6\x14\x15\xf7\xa0\xb3\x45\x5c\x18\x0f\xb0\x87\xfb\x15\x99\x9d\xf5\x70\x8d\xb5\xd9\x8a\xd9\xee\xed\x39\xd5\x70\x96\x7b\x58\x81\xb6\x27\xae\x41\xee\xbf\x2e\xdd\xec\x47\x43\xfe\x90\xbb\xb2\x6e\x0b\xd7\xb7\xa5\xdb\xfd\xeb\xb8\xd1\x19\xf4\x77\x6b\x12\x14\x0c\x25\xed\x0c\x65\x94\x26\xdf\xe1\xc2\x73\x25\x1d\xef\xac\x10\x67\xd1\xe2\x57\xf6\xd7\x1a\xd4\x34\xf6\x15\xef\xe3\x34\x53\xf0\x52\x39\xc5\x5c\xc7\xb1\xb3\xc6\x37\x9e\x8d\x9d\x2b\x03\xfb\xed\xed\x19\xf2\xaf\x4f\x9a\xea\x72\x20\x9d\xfa\x03\xe3\xe7\xbf\x37\x3b\x8a\x69\xbe\x44\x70\xec\xfa\x22\xc3\xa9\x91\xb7\x07\xf2\x0d\xe6\xf0\x43\x1e\x34\x9c\xe3\x8f\x71\x9f\xdf\x25\x13\x92\xe9\xed\x80\x0b\x69\x0d\x59\xa1\xc7\xd4\x00\x20\xa5\x90\x0f\xf0\xfd\x47\xe8\x90\x36\x80\x62\x21\x12\x1f\x74\xd2\x4d\xec\x34\x96\x67\x98\xe0\x6e\x66\x41\x78\x15\x10\x29\x6c\x0e\xcc\x28\x17\x4b\x97\x01\x63\xda\x14\x43\xee\x7e\x7b\x3d\xf6\xc6\xea\xd6\x72\x2b\xfc\xfe\xe8\x2e\x36\xf7\x3b\x77\x77\x53\xb6\xa2\xf3\xfe\x7a\x6d\x49\xfb\x72\xfd\x2a\x37\xab\x2e\x89\x98\xa9\x8c\x35\x0c\xbd\xc7\xf8\xaf\x66\x19\xa8\x57\xfe\xdc\xdb\x6e\x96\xbe\xd8\x17\xcb\x5e\xe7\xc1\x7c\x77\x51\xa0\x33\xa5\x2f\x7a\xbb\x5e\xfe\xf3\x1d\x00\xb7\x21\x4c\x84\xcc\x86\xbb\x8f\x86\xaa\x2a\x8a\xfa\xae\x3d\x4e\x17\x18\x82\x90\x76\xcf\xd8\xae\x1d\xbb\xeb\xf7\xe6\x5a\x9a\xd7\x09\x0c\x71\x30\xff\x50\x66\x0b\x90\x24\x87\x75\x7d\xc0\x97\x78\xc3\x99\xb9\xbe\xfb\x35\x2f\x4a\xed\x2c\x92\x5b\x06\x01\xc9\x18\xaa\xf9\x2a\xd8\x93\xd8\xed\x75\xe4\x7f\x75\x87\xf8\xb4\x66\xe3\xb1\xaa\x46\x69\xbe\xb3\x67\x7b\x4a\x15\xe9\xf7\xb1\xf9\x1b\xe3\x7f\x3d\xee\xb4\xb7\x83\x2a\x17\x19\xd3\x47\x3b\x34\x3d\x4f\xef\x0e\xe8\x79\x23\x5f\x5a\xe8\x88\x09\x77\x77\x04\x30\xff\xbc\xbf\xbf\xb8\x68\xbd\x7e\x72\xa3\xaa\x37\x4f\xaa\x14\xcc\x09\x48\x8b\x82\xb3\x88\x9a\x7b\x77\xb2\xcb\xcf\x9c\xe6\x56\x54\xd6\xad\xb4\xba\xc9\x6a\x62\x39\x99\x91\x27\xc8\xf7\xd2\x37\x75\x7f\xff\xe4\x15\x8a\x51\xb1\x99\x37\x9b\x29\x19\xcd\x82\x89\x73\x87\xc9\x8d\x9a\xc4\x98\xaa\x2e\x04\x95\xf1\xe5\x8d\x7a\xbd\x9a\x19\x76\xd7\x3b\x51\x2e\x7f\x01\xfd\x73\xc9\xb8\x39\x83\xad\xa5\x1d\xbb\xe6\x60\x7f\x05\x00\x00\xff\xff\x46\xc5\x16\x06\x56\x23\x00\x00")

func templatesViewsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsIndexHtml,
		"templates/views/index.html",
	)
}

func templatesViewsIndexHtml() (*asset, error) {
	bytes, err := templatesViewsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/index.html", size: 9046, mode: os.FileMode(420), modTime: time.Unix(1500319749, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _publicJsDashboardJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x59\x6f\x6f\xdb\x36\x13\x7f\x9f\x4f\xc1\xc7\x2d\x1e\xc9\x6b\x2d\xa7\xdb\xba\x17\x76\x9c\xa2\x48\x87\xa1\x58\xb0\x15\x6d\x80\xbe\x68\x8b\x80\x96\x68\x9b\xb3\x2c\x19\x14\x15\xd7\x68\xf3\xdd\x77\x47\x89\xfa\x4b\xc9\x8c\x97\x60\xc1\x04\x04\x91\xa9\xbb\xe3\xef\xc8\xbb\xdf\xe9\xa8\x45\x1a\xf9\x92\xc7\x11\x59\x32\xf9\x31\x16\x6b\x26\x3e\x48\x2a\xd3\xe4\x0f\xba\x61\x6e\xa2\x6e\x87\xe4\xdb\x09\x81\x2b\xd9\x71\xe9\xaf\x1a\x83\x78\xf9\x34\x61\xe4\x74\x52\xfc\xc6\x4b\x30\x99\x8a\x88\x38\x3b\xca\xa5\x33\xad\x3d\x9a\x0b\x46\xd7\xd3\xba\xf6\x0b\xb3\xf6\x56\xc4\x3e\x4b\x12\x0b\x03\x3f\x9a\x0d\xcc\xd3\x64\xdf\xaf\x1d\xb0\x05\x4d\x43\x69\x56\x4f\xa3\x75\x14\xef\xa2\x6e\x0b\xb7\x27\xb7\x27\x27\xd5\x35\xbc\xa2\xc9\xfa\x3f\xb5\x82\x49\xea\x5b\x1a\xf8\xc9\x6c\x60\x41\x79\x68\xa1\xfd\x73\xb7\x36\x99\xef\x89\xe4\x1b\x16\xa7\x36\x0b\xf1\xd2\x6c\x68\xcd\x43\x1b\x18\xbf\x74\x6f\x02\xfc\xd8\x32\x7a\x00\xc2\x7d\x86\x53\xba\x0d\xa8\x64\xae\x0e\x94\xa7\x1e\xfd\x8b\x7e\x75\xcb\xa8\x91\xfb\x2d\x9b\x10\xe7\xb7\x5f\xaf\x9c\xe7\xc5\x60\x2a\x42\x18\x1b\xef\x54\x2e\x27\x63\x54\x19\xbf\xa2\xca\xe0\x0c\x03\x2f\xa9\xc8\xe6\x7b\x3b\x21\x7a\x4a\x57\x0c\xbf\xd5\xb0\xdd\x50\x41\xe4\x25\x99\x91\xa7\xae\xf3\x24\xe4\x89\x64\x11\x58\x25\x72\x1e\x07\x7b\x67\xe8\xb1\xcd\x56\xee\xdd\xe1\xb4\xad\xf3\x31\xd7\xc9\x71\x58\x68\x5c\xe5\x1a\x12\x32\xc8\x20\xdf\x52\x28\xd1\xcc\x88\xf0\x8a\x5f\xd7\x7e\x9c\x46\x92\x7c\xff\x4e\x4e\xdb\x93\x68\x34\xa8\x91\xdf\xf7\xca\x2b\x2c\xd7\x6a\xf3\x67\xf8\xbc\x26\xc0\x17\xc4\x7d\x2d\x04\xdd\x7b\x3c\x51\xff\xdd\x0a\x8c\x61\x35\xbd\xf5\xb5\x88\x05\x71\xd1\x2e\x27\x3c\xaa\x82\x36\x09\x37\xfd\xac\xbb\xf9\x89\x7f\x69\xc0\xa9\xe9\x5c\x80\xb4\x73\x26\xc5\xb9\x63\x94\x79\x86\x0f\x83\x73\x07\x6e\xb4\x45\x2f\x02\xbe\x52\x0f\xc6\xf8\xe4\x90\x1a\x46\xe6\x55\xfc\x41\x0a\x1e\x2d\xdd\xc2\x86\x0f\xa1\x2c\x59\x70\x4d\xe5\xd0\xde\x54\xa9\x8d\x3b\x71\x8d\x6b\x7e\x9d\x47\xa6\xbd\x91\x12\x43\x48\x93\xba\x11\x40\x43\x5e\x75\x00\x36\x09\x0f\x09\x24\x90\x53\x71\x80\x1c\xe3\x01\x12\x17\x0b\xfe\x99\x03\x99\x0d\x3b\xfc\x85\x6c\x0b\xbe\x71\xe6\xa9\x71\xd4\x38\x88\x71\x5e\x8f\x92\xff\xcd\x34\xcf\x5d\xe6\xe3\x58\xec\xba\x82\x18\x2f\x08\xc8\x67\xb3\xcc\xd9\xb3\x80\xdf\x10\x1f\x80\x27\xb3\xc1\x5c\x46\xa3\xa5\x88\xd3\x2d\x29\xee\x46\xc9\x66\xd0\x81\xb9\xba\x6a\xf3\x54\x4a\xa0\x48\xa4\x40\x30\xa3\x7e\x0c\x2a\x56\x95\xbd\x80\x46\x4b\xc8\x1b\xbc\xe5\x3e\x08\x6b\x27\x46\x82\x6d\xe2\x1b\x36\xc0\x35\xa5\x23\x19\x2f\x97\x21\x18\xd9\xc4\x01\x0d\xf5\x18\x15\x50\xcb\x67\x83\x27\xd5\x41\x75\x3f\x92\x5c\xa2\xf4\x45\x1c\x2d\xb8\xd8\x90\xcc\x54\x99\xa4\xc6\x94\xaa\x19\xf0\x69\x18\xce\xa9\xbf\x9e\x0d\x8a\x64\x7e\xaf\x8c\xb8\x9f\x1d\xa3\xf6\x67\x67\x38\x1d\x9c\x9f\x71\xed\xde\x32\xdc\x6f\x57\xca\xa1\xe2\x6e\x24\x05\x4d\x56\x03\x92\x83\xcb\xec\x81\xce\x98\xc3\x5f\xb6\x3a\x16\x6b\x3a\x86\x9d\x39\xef\x89\x99\x5b\xc2\x42\x28\x91\x76\xbb\xac\xcc\x98\xa3\xec\xd6\x3e\xf6\xb4\xc5\x31\x52\xd9\x1d\x62\x56\x5e\x7a\x74\xbb\x65\x51\xe0\x86\x17\xc3\xb6\x5e\x1b\x41\x47\x35\xf1\x42\x16\x2d\xe5\xea\xa4\xae\x7c\xb0\x0c\xe4\xb5\xc5\xaa\x08\x68\xd9\x9e\x12\x90\x89\x54\xab\x96\xa2\xff\x2e\x71\xe4\x03\x10\xce\x44\x3d\xfc\xd5\x2d\xbb\x83\x4a\xd1\x53\x28\xf0\xaa\x90\x54\x6e\x92\x1f\xe2\xb5\x86\x5a\x8d\xbb\x72\x1b\x79\xa9\x38\xc4\x53\x0d\x4b\xa6\x2e\x25\x37\xa8\xdf\xaa\x0b\x7b\x1d\xf5\x11\xf7\x0b\xd7\xa4\x8f\xae\x76\x95\x40\xb6\x61\x1a\x5d\xae\xf0\xde\xe7\xc2\x0f\x99\xda\x84\x51\xb2\x8a\x77\x05\xa5\x24\x90\xf2\xe8\x03\x57\x94\x70\x20\xa1\xd9\x9e\x8d\x62\x08\xe0\x46\x12\xf7\xa6\xd5\xa1\xf4\xdc\xd9\xa6\xa7\x71\x78\x77\x5f\x14\x6e\x4b\xdf\x3c\x5a\xc4\x25\x79\x67\xbb\x0c\xd4\x9d\x30\x79\x4f\xcc\x0d\x96\x74\x6a\x3d\x69\x45\x77\x07\x67\xe7\xf9\xf7\x1e\x95\x73\xc2\xae\xa9\xd9\x90\xb5\x60\x0b\x98\xbc\x4a\xd7\xe8\x93\x2d\x5b\x1f\x5b\xfd\xf2\x05\xc4\x3e\xe8\x5e\xd6\x0f\x0d\x1d\xbb\x7c\xbf\x83\xee\xb1\xab\x57\x2f\x75\x68\xe9\x4e\x4b\x77\xa8\xc8\x15\x72\x59\xc5\x31\x57\x97\x8f\xba\xba\xec\x2e\x9a\xad\x89\xbe\x6c\x68\xa6\xb4\xd3\x5b\x9b\x91\x9f\x49\x22\xf7\xe8\x6f\xc0\x93\x6d\x48\xf7\x93\x28\x8e\xe0\x05\x86\x07\xb3\x81\x22\x9a\x0a\xaf\x1c\xae\xf3\x32\x20\x7e\x1c\x26\x5b\x1a\xcd\x06\x2f\x6d\x14\xd2\x50\x6f\x08\x16\xc6\x2c\xc9\x6d\xf4\x42\xde\xd6\x1b\x71\xc9\x80\x1e\xce\x70\x7a\xfd\x74\x9b\x86\xe1\x48\xf0\xe5\x4a\x12\xc9\xbe\xca\xd1\x26\x85\xca\x40\x92\x0d\x55\x7b\xcb\x36\x8a\xfa\xd1\xcf\xa2\xf2\xc0\xd8\xd9\x18\x4d\x80\x21\x29\xe2\x68\x79\xfe\xf6\x0d\x0c\x64\xb7\x67\x73\x41\xc6\xf0\x3c\xe4\xff\x0a\xc6\xb2\x91\x6a\xa3\xc4\x82\xf5\x08\x70\xb6\x0f\xaa\x14\xf2\x5a\x09\x6d\x83\xcf\xc4\x1f\x01\x7c\x05\x76\x2b\x78\x2c\xb8\xdc\x77\xa1\x7d\x97\x3f\x7f\x2c\x78\xa9\x94\x78\x98\x91\x74\xe1\x7d\x9d\x3f\x7f\x04\x78\xb3\x68\x50\xbd\x25\x13\x02\xde\x57\x5f\x91\xe6\x08\xf4\x98\xff\xdf\x04\xc0\xc4\x53\xa7\x33\x5e\x2e\x41\x9c\x28\xf1\x47\xe0\x53\xc4\x76\xe4\x0d\x1e\xa7\x29\x4f\xf4\xdb\xa7\x27\xe3\xcb\x18\xca\x13\xcb\x5f\x4e\x3b\x7d\xb9\xc8\x14\x8e\x73\x64\x9c\x86\x36\x52\xbd\x35\xa9\x94\xea\x7b\x57\x1f\x5a\x36\x5c\xed\x11\xc3\xd1\xd8\x91\xcd\x4f\x79\x68\x66\xd5\xff\x54\xc4\x7b\x5a\xa0\xbc\xa7\xa9\x8a\x77\xf6\x40\xf2\x4a\x97\x55\xfb\xce\xa6\x56\x5d\x6c\xbb\x91\x06\xdd\xdf\xa1\x89\x39\xc8\xbe\x77\x82\x50\xa7\xc2\x3b\xa9\xd6\x59\xc9\x56\xf5\x28\x82\x38\xaa\x5b\xac\x65\xab\xa5\x1d\x95\x22\x56\x5d\x7f\xed\x7c\xb7\x1a\x5b\x16\xa1\x5f\x3b\x11\x1f\xa9\x93\x3f\x07\xf8\x04\x08\xc8\x2d\xcf\x75\xa7\x2d\x95\x3c\xb7\xea\x0a\xfa\x0c\xa0\x2d\xae\x20\x65\xaf\xde\x5a\xb8\x02\x1a\xbc\x25\xea\x46\x8d\x35\x7d\x2e\xf5\x51\xa6\x3e\x63\x25\xeb\xa6\x6d\xbf\x34\x19\x78\x45\x17\x0b\x7a\x7e\xc8\xfd\xb5\x5b\x7c\x9d\x70\x4d\xe9\x8a\xa9\xca\xd4\x41\xbe\x5c\xf1\xa6\x3f\x5a\x60\x0e\x02\xcc\x5b\x70\x4c\x50\x6e\xda\xa8\x8c\x1d\x50\x08\x9b\x08\xd7\x41\x14\x26\xb9\xd6\x00\xd2\xd1\xdc\x5b\xd1\xe4\x02\x2b\x83\xeb\xb4\xfb\x69\xc7\xc8\x49\x78\xcd\xbd\xec\x2c\xaf\x47\xd5\x4c\x37\x73\x8f\x06\x81\x51\xcb\x0f\xe3\x84\x75\xa9\xe9\xdd\xc9\xde\xdd\x87\x1e\xae\xb2\xeb\x2c\x20\x83\x8c\xb1\xdb\xd7\xdc\xf7\x42\xef\x05\xd1\x8d\xbd\xcf\xe3\x26\xf4\x15\x0f\x58\x0f\xf4\x7a\x16\x55\x24\xb2\x27\x38\x52\xfd\xec\x55\xed\x11\x79\x70\xe8\xeb\xd7\xbb\x3f\x3f\xd8\x7e\xfe\xd2\xa9\xa7\x3e\x05\x96\x2a\x18\x63\x93\xc6\xca\xf2\x60\x02\x7f\x25\x50\xc3\x37\xb3\xec\xeb\x5c\x9f\x07\xd9\x21\xc1\x83\xb8\xa0\x0e\x2f\x1e\xd4\x87\xe6\xe1\xf4\xbd\xba\x51\xf2\x66\x16\xb8\x0f\xe1\xc9\xd3\x82\xaa\xca\x2f\xa8\x15\xfe\xb5\x20\x35\x33\x13\x4e\x80\x5e\x5c\xee\xb5\xb3\x65\x58\x98\xcb\x43\xfc\x56\x53\x6b\x75\x5e\xcc\x95\xfb\x9b\x57\x25\xb7\xdd\xc4\x90\xe8\x24\x3b\x21\xf9\xa4\xce\x8d\x92\x74\xbe\xe1\xf2\xcb\x21\x2c\xcd\xcd\xee\xde\x70\xdb\xd8\x05\x20\x0d\x2d\xd3\x9e\xe3\xa5\x2a\xd6\xa4\xe9\x45\x51\xc8\x6e\x68\xe8\xd6\x5f\x78\x6f\xeb\x76\x4d\xd1\xa1\xd7\xa7\xb6\x4e\xfa\x4b\x7b\x36\x8c\xe5\x87\xa6\x32\xce\xcf\xe9\xf0\x28\x1d\x6a\x55\xbc\xf3\x20\xe7\xde\x46\x92\x09\x9c\x38\x53\x79\x4e\x5e\x9c\x9e\x9e\x92\x1f\xe0\x5f\xae\x8c\x60\x2b\xca\xad\xe5\xad\xad\x2e\xd6\xab\xda\x4c\xb3\x19\x89\xa0\x9b\x69\xd6\xa8\x3a\x3e\x7d\x1d\x8d\x51\xf9\x6e\x2a\x28\xb9\x0d\x3f\x64\x54\x14\x56\x2a\xd3\xf4\x02\x40\xe0\x46\x6e\x1f\x4e\xff\x0e\x00\x00\xff\xff\xb4\xea\x3b\xce\x66\x24\x00\x00")

func publicJsDashboardJsBytes() ([]byte, error) {
	return bindataRead(
		_publicJsDashboardJs,
		"public/js/dashboard.js",
	)
}

func publicJsDashboardJs() (*asset, error) {
	bytes, err := publicJsDashboardJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "public/js/dashboard.js", size: 9318, mode: os.FileMode(420), modTime: time.Unix(1500319922, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/index.html": templatesViewsIndexHtml,
	"public/js/dashboard.js": publicJsDashboardJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"public": &bintree{nil, map[string]*bintree{
		"js": &bintree{nil, map[string]*bintree{
			"dashboard.js": &bintree{publicJsDashboardJs, map[string]*bintree{}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"index.html": &bintree{templatesViewsIndexHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: AssetInfo, Prefix: k}
	}
	panic("unreachable")
}
