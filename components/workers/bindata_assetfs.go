// Code generated by go-bindata.
// sources:
// templates/views/index.html
// assets/js/index.js
// assets/js/index.min.js
// DO NOT EDIT!

package workers

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x59\x5d\x8f\xd3\x38\x17\xbe\x9f\x5f\x61\xe5\x95\x5e\xe0\x22\x13\x60\xd9\x1b\x98\x16\x8d\xd8\x8b\x45\x20\xb4\x82\x95\xd0\x5e\x8d\x9c\xe4\xb4\xf1\x8c\x13\x47\xb6\xd3\x76\x34\xea\x7f\xdf\x63\xc7\xf9\x6a\x9d\x4e\x80\x76\x77\x60\x19\xa9\x1a\x27\x3e\xe7\xd8\x7e\x7c\x3e\x1e\xc7\x77\x77\x24\x85\x05\x2b\x80\x04\x89\x28\x34\x14\x3a\x20\xdb\xed\xd9\x45\xca\x56\x24\xe1\x54\xa9\x59\x50\xd2\x25\x84\x9a\x69\x0e\xc1\xfc\x8c\xe0\x5f\xbf\xd3\xbe\xbf\xe2\xb0\xd0\xae\xd3\x0a\x64\xbf\xcc\x3f\x0b\x79\x03\x52\x5d\x44\xd8\xae\xb5\x22\x54\x9b\x9f\x8d\x58\x90\x6c\x99\x0d\x4c\xf4\x24\x16\x42\xe6\xe1\x52\x8a\xaa\x24\x65\xc5\x79\xb8\x2b\xbb\x2b\xcf\x8a\xb2\xd2\xb5\xc2\x8e\x94\x95\xe4\x34\x06\xbe\xff\xde\xf6\x59\x55\xa2\x6f\x4b\x98\x05\x49\x06\xc9\x4d\x2c\x36\x41\x63\xf7\x5a\x85\x6a\xcd\x74\x92\x05\x84\xa5\xb3\x80\x56\x5a\x48\x58\x48\x50\xf8\x22\x9a\x93\xcb\xee\x79\x7f\xd0\xc8\x33\xaa\x43\xc4\xf3\xe8\x9a\x0d\x64\xfd\xc5\x25\x1c\xa8\x5c\xb0\x4d\x30\xf7\xf5\x4a\xb1\x26\x5a\x94\x57\x9a\x71\x50\x9e\xed\xa2\x05\xcb\xa9\x86\x94\x2c\x38\x2b\xdf\x16\x7f\x91\x44\xf0\x90\x2f\xc3\x17\xb6\x91\xa7\xae\xa1\x72\xd7\xd8\xa8\xf0\xd9\xf3\x91\x6d\x31\x63\x84\x4a\x53\xad\x0e\xed\x05\x7a\x15\x4e\x95\xb5\x7b\x49\xc9\x82\x86\x29\xd0\x85\xf9\xff\xab\x5d\x06\x9b\xef\x20\xb1\x6b\x24\x11\x95\xf1\x4b\x03\x3a\x67\x0a\x9d\x14\x1d\x2b\xac\x5f\xce\x9f\xfa\x74\xd1\xe7\xde\x37\x82\x9d\x07\xfa\x41\x7e\xa0\x10\x55\x0a\xe7\xfe\x75\x18\xad\xeb\xd0\xbb\x0f\xa1\xbd\x08\xfd\xae\xf0\xd1\x54\xdd\x7c\x25\x3e\x56\x35\x5c\x53\xa6\xef\x85\x08\x65\x88\x15\xbf\x0f\xa5\x41\x30\x0e\x1c\xd5\x13\x85\x9b\xab\x92\x16\xc0\x47\x40\xd9\x5c\xf5\x93\x6d\x37\x9d\xe7\xde\x30\xaa\x17\x4f\xfa\xee\xfe\x7c\x47\xb3\xe2\x8d\x5a\x41\x57\x04\x7f\x31\x95\x75\x12\x25\x76\x1e\x57\x5a\x08\x6e\x12\x9d\x2f\x59\x22\xb0\xb4\xc3\x90\x73\x5a\x2a\x08\x39\x2b\x6e\xf6\xb7\x04\x13\xe6\x4a\x8a\x22\x34\x69\xb7\xde\x11\x8a\x3f\xb4\xe0\x33\xdb\xa8\xa6\x52\x94\xa9\x58\x17\x9e\xc1\xad\x24\x25\x19\x26\xd5\x59\xf0\xbf\x60\x57\x23\xd4\x62\xb9\x44\x9c\x48\x4a\x35\x75\x0f\x3d\x7b\x44\x0a\xf3\x1c\x57\x5a\xa3\xff\x10\x2a\x19\x0d\x61\x83\x0b\x4e\x21\x35\x33\xe6\x0a\xf6\x97\xb0\x96\x50\x60\x7e\x6f\xa7\xef\x9f\x53\x07\x68\x3b\x97\x1c\x8a\xaa\x19\xd2\xb6\xfd\xaa\x0d\xa6\xa3\x9d\x83\x35\x5f\xd3\x15\x55\x89\x64\xa5\x7e\xb9\x12\x2c\x7d\xfc\xf4\xc9\xce\x62\x73\x91\x52\xde\xbc\xa3\x72\x09\x1a\x81\xea\xbf\xb4\xed\xba\x78\xcf\x82\x37\xa2\x58\x30\x99\x13\x09\xb9\x58\x01\xa1\x9c\x93\xce\x4b\xfb\xf2\xb1\x48\x6f\x67\xc1\x67\x86\x02\x31\x78\xc5\x09\x6c\x12\x28\xb5\xe1\x0e\xb4\xe2\xba\xed\x38\x27\x97\x12\xc8\xad\xa8\x88\xaa\x24\xbc\x1e\x58\x4d\xd0\x42\x4c\x93\x9b\x5e\x6c\x7c\xb4\xa6\x1f\x3f\x79\x75\x00\xae\x16\x95\x76\xab\x96\xfc\xb6\xcc\x4c\x56\x20\x6d\x2b\xd4\x92\x2a\xb7\x6f\xe4\x63\x3b\xe1\xc3\x30\x8f\xed\x6f\xdd\x39\xb6\x4b\x17\x51\xe5\x61\x0f\xfb\xf2\xfb\x72\x07\xcb\x78\xa7\x36\x7c\x1c\x24\x86\x86\xa2\x8d\xdb\xd5\x34\xc6\x94\x8a\x1c\xa4\x14\x85\x62\xab\xdd\x2c\x62\xc5\xad\xcc\x40\x81\xd4\x6a\x19\xc2\x26\xc7\x02\x51\x67\x40\xd3\xb1\x3e\x79\x00\x49\x9d\xcd\x3f\xd0\x1c\x2e\x22\x6c\x1c\x94\x7a\x23\xc1\x14\x96\x09\x82\x26\x6b\xa3\x87\x25\x09\x28\x75\xbf\xf8\x7b\xaa\xbe\x40\xba\x36\xbe\xa0\x58\x9a\x26\x4c\xc5\xda\x9e\x2a\x7c\x99\x68\x86\xdb\x32\x2e\x88\x3d\x23\x48\x1a\x9d\x03\xf8\x9b\x88\x1d\x55\xf4\x77\x62\x87\xd9\xf4\x6f\xa1\xa4\x3d\xb2\x71\xc2\x2a\x67\x99\x90\x0b\xed\x8e\xb3\xfc\x2c\x72\x3f\x70\x91\xeb\xb3\x58\x95\x89\xf5\x37\x97\x07\xb8\x85\x50\x94\x50\x38\x37\xfa\x84\x36\x6d\x41\xb3\xdc\xee\x14\x55\xe2\xb8\x18\x64\x2c\xf5\x65\xf2\x2f\xc7\x20\xe1\xc2\x7a\x84\x01\xe1\x77\x34\xfa\x8f\x80\xd0\xfa\x11\x5b\xe1\x90\x32\x18\x89\x97\x9e\xc6\xbf\xcd\x8f\x14\x68\x8b\x4c\x93\xdc\xfc\x34\xc6\xf5\x7e\x34\xe2\xc7\xe0\x30\xcd\xc7\x84\x86\xc5\xb8\x59\x3c\x4c\xf7\x3c\x02\xce\x37\x86\x60\x62\xaa\xea\x33\xcc\x49\x88\xbf\x43\xc5\x63\x93\xc6\x77\x76\x32\x27\x45\xfb\x81\xc5\x41\x93\x5c\x68\x9a\x7e\x33\x92\x25\xaf\x9a\x12\x7d\x99\xa6\x6e\x17\x7f\xb2\xef\x69\xec\xfb\x14\x8c\xfb\xed\x6f\x47\xe4\xdb\x9f\x34\xd5\xd5\x04\xea\xfc\x27\x16\x92\xff\x26\x0b\xb6\x25\xf4\x84\x1c\xd8\xd9\xaf\x39\x70\xff\xa3\xd4\xc3\xa6\xc1\xdf\x53\x14\x9e\xfa\x0c\x3c\x25\x22\xa7\x9d\x93\xa7\x86\xe3\x1f\x92\x09\xc9\xf4\xed\x84\x90\xd4\x1a\xf2\x52\x4f\x3d\x4b\x83\x94\x42\x1e\x31\xbf\xfc\x68\x19\xc1\xb9\x95\xad\xba\x18\x2c\xc8\xdd\x07\x6c\xde\x14\x5c\xe3\x6d\x0c\x4f\x69\x9b\x59\x10\x3e\x6b\xce\x54\x29\xa3\x5c\x2c\xdd\x31\x0e\x39\x7f\x0a\x05\x3a\xa7\xac\x7c\x17\x6f\x35\x35\x72\x1a\xfe\x58\x71\xec\xe9\xde\x78\xa9\xe5\x0c\x8c\x5e\xcf\xbf\xa8\x4f\x97\xee\x56\xac\x39\x6a\xb6\x31\x6c\x0e\x14\x35\xb3\x48\x99\xca\x59\x6b\xd0\xbb\x8c\xff\x6b\x96\x83\x7a\x75\x11\xd5\x66\x3c\x83\x65\x2f\x86\xd3\x72\x19\xb2\x63\x15\x26\xeb\xbd\x38\xb8\x3b\xfe\xf5\x99\xdd\xf6\xad\xce\xdc\x2e\x8e\xb8\x88\xf7\x0e\xf2\xe0\xa1\xd7\x5c\xf2\x11\x94\x1d\x6c\xb6\xbb\x65\xe8\x32\x6b\xa1\xa5\xb9\x33\x31\xc2\xc1\xfc\x43\x95\xc7\x20\x49\x01\xeb\x66\x81\x2f\xbd\xb7\x85\x83\x81\xfa\xf7\x94\x85\x35\x10\x90\x9c\x21\xcc\xcf\x82\xc1\x8c\xdd\x58\x7b\xfe\xd7\x5c\x7c\x8c\x84\xc6\x1e\x9c\xf5\xeb\x7d\xa8\x26\x21\xbf\x10\x42\x7f\xb9\x67\xc5\xba\x20\xf8\x0b\xdd\x27\x66\xbf\x8f\xcd\xdf\x18\xff\x3b\xe0\x4e\x83\x11\x54\x15\xe7\x4c\xef\x8d\xe0\x3e\x0d\x8e\x8c\x80\x9e\xe7\xb7\x3f\x35\x27\xdc\xdd\x11\xc0\x43\xce\x76\x7b\x76\xd6\xbb\x6d\xbf\x56\xf5\x45\x7b\xcd\xdb\xdd\x04\x69\x59\x72\x96\x50\x93\x0d\xa3\x8e\xd4\x3b\xe4\x56\x54\x36\xdf\xdb\x9b\xdb\x1e\x53\x2f\xc8\x8c\x3c\x42\xbb\xe7\xbe\xae\xed\xf6\xd1\x2b\x9c\x46\x6d\x66\xde\x0e\xa6\x64\x32\x0b\x22\xe7\x0e\x11\x62\x01\x5a\x45\xd7\x2a\xb2\x09\xe9\x1c\xfd\xe8\xfc\x5a\xbd\x5e\xcd\x8c\xd5\xcb\x6e\x46\xe7\x71\xc5\xb8\x59\x87\xa9\xd7\x8d\xc9\x76\x71\x7f\x07\x00\x00\xff\xff\x54\x63\x48\xe5\x49\x20\x00\x00")

func templatesViewsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsIndexHtml,
		"templates/views/index.html",
	)
}

func templatesViewsIndexHtml() (*asset, error) {
	bytes, err := templatesViewsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/index.html", size: 8265, mode: os.FileMode(420), modTime: time.Unix(1502718209, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsJsIndexJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x5a\x6d\x6f\xdb\xb6\x13\x7f\x9f\x4f\xc1\x3a\xc5\x5f\xf2\xbf\xb5\x9c\x6e\xeb\x5e\xd8\x71\x8a\x22\x1d\x86\x62\xc1\x56\xb4\x01\xfa\xa2\x2d\x02\x5a\xa2\x6d\xce\x7a\x30\x28\x2a\xae\xd1\xe6\xbb\x8f\x47\x3d\x91\x12\x25\x33\x9e\xb3\x05\x13\x50\x44\xa6\xee\x8e\xbf\x3b\xde\xfd\x4e\xa4\xba\xc8\x62\x9f\xd3\x24\x46\x4b\xc2\x3f\x26\x6c\x4d\xd8\x07\x8e\x79\x96\xfe\x8e\x23\xe2\xa6\xf2\x76\x88\xbe\x9d\x20\x71\xa5\x5b\xca\xfd\x55\x63\x10\x2e\x1f\xa7\x04\x9d\x4d\xaa\xdf\x70\x31\xc2\x33\x16\x23\x67\x8b\x29\x77\xa6\xda\xa3\x39\x23\x78\x3d\xd5\xb5\x5f\x98\xb5\x37\x2c\xf1\x49\x9a\x5a\x18\xf8\xc1\x6c\x60\x9e\xa5\xbb\x7e\xed\x80\x2c\x70\x16\x72\xb3\x7a\x16\xaf\xe3\x64\x1b\x77\x5b\xb8\x3b\xb9\x3b\x39\x51\x63\x78\x8d\xd3\xf5\x7f\x2a\x82\x69\xe6\x5b\x1a\xf8\xd1\x6c\x60\x81\x69\x68\xa1\xfd\x53\xb7\x36\x9a\xef\x10\xa7\x11\x49\x32\x9b\x40\xbc\x34\x1b\x5a\xd3\xd0\x06\xc6\xcf\xdd\x8b\x20\x7e\x6c\x08\xde\x03\xe1\x98\xe9\x94\x6d\x02\xcc\x89\x5b\x26\xca\x53\x0f\xff\x89\xbf\xba\x75\xd6\xf0\xdd\x86\x4c\x90\xf3\xeb\x2f\xd7\xce\xf3\x6a\x30\x63\xa1\x18\x1b\x6f\x65\x2d\xa7\x63\x50\x19\xbf\xc2\xd2\xe0\x0c\x12\x2f\x55\x64\x8b\xb5\x9d\xa0\x72\x4a\x97\x0d\xbf\x69\xd8\x6e\x31\x43\xfc\x0a\xcd\xd0\x53\xd7\x39\x0d\x69\xca\x49\x2c\xac\x22\x3e\x4f\x82\x9d\x33\xf4\x48\xb4\xe1\x3b\x77\x38\x6d\xeb\x7c\x2c\x74\x0a\x1c\x16\x1a\xd7\x85\x06\x17\x15\x64\x90\x6f\x29\xd4\x68\x66\x88\x79\xd5\xaf\x1b\x3f\xc9\x62\x8e\xbe\x7f\x47\x67\xed\x49\x4a\x34\xa0\x51\xdc\xf7\xca\x4b\x2c\x37\x72\xf1\x67\xf0\x5c\x13\xa0\x0b\xe4\xbe\x66\x0c\xef\x3c\x9a\xca\xbf\xae\x02\x63\xa8\x96\x77\x79\x2d\x12\x86\x5c\xb0\x4b\x11\x8d\x55\xd0\x26\xe1\xa6\x9f\xba\x9b\x9f\xe8\x97\x06\x1c\x4d\xe7\x52\x48\x3b\xe7\x9c\x5d\x38\x46\x99\x67\xf0\x30\xb8\x70\xc4\x4d\x69\xd1\x8b\x05\x5f\xc9\x07\x63\x78\xb2\x4f\x0d\x32\xf3\x3a\xf9\xc0\x19\x8d\x97\x6e\x65\xc3\x17\xa9\xcc\x49\x70\x83\xf9\xd0\xde\x54\xad\x0d\x2b\x71\x03\x31\xbf\x29\x32\xd3\xde\x48\x8d\x21\xc4\xa9\x6e\x44\xa0\x41\xaf\x3a\x00\x9b\x84\x87\x48\x14\x90\xa3\x38\x80\x0e\xf1\x00\x88\x8b\x04\x7f\xcf\x81\xdc\x86\x1d\xfe\x4a\xb6\x05\xdf\x38\xf3\xd4\x38\x6a\x1c\x84\x3c\xd7\xb3\xe4\xc9\xac\xe4\xb9\xab\x62\x1c\x9a\x5d\x57\x12\xc3\x25\x12\xf2\xd9\x2c\x77\xf6\x3c\xa0\xb7\xc8\x17\xc0\xd3\xd9\x60\xce\xe3\xd1\x92\x25\xd9\x06\x55\x77\xa3\xaf\xe9\xa0\x03\xb3\x1a\xb5\x79\xc6\xb9\xa0\x48\xa0\x40\x61\x46\xfe\x18\x28\x56\xa5\xbd\x00\xc7\x4b\x51\x37\x70\x4b\x7d\x21\x5c\x3a\x31\x62\x24\x4a\x6e\xc9\x00\x62\x8a\x47\x3c\x59\x2e\x43\x61\x24\x4a\x02\x1c\x96\x63\x98\x89\x5e\x3e\x1b\x9c\xaa\x83\xf2\x7e\xc4\x29\x07\xe9\xcb\x24\x5e\x50\x16\xa1\xdc\x54\x5d\xa4\xc6\x92\xd2\x0c\xf8\x38\x0c\xe7\xd8\x5f\xcf\x06\x55\x31\xbf\x97\x46\xdc\xcf\x8e\x51\xfb\xb3\x33\x9c\x0e\x2e\xce\x69\xe9\xde\x32\xdc\x6d\x56\xd2\xa1\xea\x6e\xc4\x19\x4e\x57\x03\x54\x80\xcb\xed\x09\x9d\x31\x15\xff\xf2\xe8\x58\xc4\x74\x2c\x56\xe6\xa2\x27\x67\xee\x10\x09\x45\x8b\xb4\x5b\x65\x69\xc6\x9c\x65\x77\xf6\xb9\x57\x5a\x1c\x03\x95\xdd\x23\x67\xf9\x95\x87\x37\x1b\x12\x07\x6e\x78\x39\x6c\xeb\xb5\x11\x74\x74\x13\x2f\x24\xf1\x92\xaf\x4e\x74\xe5\xbd\x6d\xa0\xe8\x2d\x56\x4d\xa0\x94\xed\x69\x01\xb9\x88\xda\xb5\x24\xfd\x77\x89\x03\x1f\x08\xe1\x5c\xd4\x83\x5f\xdd\xb2\x5b\xd1\x29\x7a\x1a\x05\x5c\x0a\x49\x15\x26\xe9\x3e\x5e\x6b\xa8\x69\xdc\x55\xd8\x28\x5a\xc5\x3e\x9e\x6a\x58\x32\xed\x52\x0a\x83\xe5\x5b\x75\x65\xaf\xa3\x3f\xc2\x7a\x41\x4c\xfa\xe8\x6a\xab\x24\xb2\x0d\xd3\x94\xed\x0a\xee\x7d\xca\xfc\x90\xc8\x45\x18\xa5\xab\x64\x5b\x51\x4a\x2a\x4a\x1e\x7c\xa0\x92\x12\xf6\x14\x34\xd9\x91\x51\x22\x12\xb8\x51\xc4\xbd\x65\xb5\xaf\x3c\xb7\xb6\xe5\x69\x1c\xde\x1e\x8b\xc2\x6d\xe9\x9b\xc6\x8b\xa4\x26\xef\x7c\x95\x05\x75\xa7\x84\x1f\x89\xb9\x85\xa5\xb2\xb4\x4e\x5b\xd9\xdd\xc1\xd9\x45\xfd\xbd\x07\xe5\x82\xb0\x35\x35\x1b\xb2\x66\x64\x21\x26\x57\xe9\x1a\x7c\xb2\x65\xeb\x43\xbb\x5f\x11\x40\xd8\x07\x1d\x25\x7e\x60\xe8\xd0\xf0\xfd\x26\x74\x0f\x8d\x9e\xde\xea\xc0\xd2\xbd\x42\xb7\xaf\xc9\x55\x72\x79\xc7\x31\x77\x97\x8f\x65\x77\xd9\x5e\x36\xb7\x26\xe5\x65\x43\x33\xb5\x9d\xde\xde\x0c\xfc\x8c\x52\xbe\x03\x7f\x03\x9a\x6e\x42\xbc\x9b\xc4\x49\x2c\x5e\x60\x68\x30\x1b\x48\xa2\x51\x78\x65\x7f\x9f\xe7\x01\xf2\x93\x30\xdd\xe0\x78\x36\x78\x69\xa3\x90\x85\xe5\x82\x40\x63\xcc\x8b\xdc\x46\x2f\xa4\x6d\xbd\x11\xe5\x24\x12\x2b\x06\xd3\x97\x4f\x37\x59\x18\x8e\x18\x5d\xae\x38\xe2\xe4\x2b\x1f\x45\x99\xe8\x0c\x28\x8d\xb0\x5c\x5b\x12\x49\xea\x07\x3f\xab\xce\x23\xc6\xce\xc7\x60\x42\x18\xe2\x2c\x89\x97\x17\x6f\xdf\x88\x81\xfc\xf6\x7c\xce\xd0\x58\x3c\x0f\xe9\xbf\x82\xb1\xde\x48\xb5\x51\x42\xc3\x7a\x04\x38\xdb\x07\x55\x12\xb9\xd6\x42\xdb\xe0\x73\xf1\x47\x00\x5f\x82\xdd\x30\x9a\x30\xca\x77\x5d\x68\xdf\x15\xcf\x1f\x0b\x5e\xcc\x39\x1c\x66\xa4\x5d\x78\x5f\x17\xcf\x1f\x01\xde\x3c\x1b\xe4\xde\x92\x30\x26\xde\x57\x5f\xa1\xe6\x88\xd8\x63\xfe\x2f\x0a\x04\x13\x4f\x9d\xce\x7c\xb9\x12\xe2\x48\x8a\x3f\x02\x9f\x62\xb2\x45\x6f\xe0\x38\x4d\x7a\x52\xbe\x7d\x7a\x3c\xb9\x4a\x44\x7b\x22\xc5\xcb\x69\xa7\x2f\x97\xb9\xc2\x61\x8e\x8c\xb3\xd0\x46\xaa\xb7\x27\xd5\x52\x7d\xef\xea\x43\xcb\x0d\x57\x7b\xc4\x70\x34\x76\xe0\xe6\xa7\x3e\x34\xb3\xda\xff\x28\xe2\x3d\x5b\xa0\x62\x4f\xa3\x8a\x77\xee\x81\xf8\x75\xd9\x56\xed\x77\x36\x5a\x77\xb1\xdd\x8d\x34\xe8\xfe\x1e\x9b\x98\xbd\xec\x7b\x2f\x08\x3a\x15\xde\x4b\x55\x67\x25\x5b\xd5\x83\x08\xe2\xa0\xdd\xa2\x56\xad\xf6\x76\xf6\xed\x50\xd2\xe8\xf8\x3b\x14\xf9\x22\x76\xfc\xa3\x25\x99\xf9\xa7\x8d\x1c\xed\x78\xbd\x06\x09\xed\x30\x49\x51\x79\xf0\x63\xa4\x7b\xbf\x5d\x5b\x1d\xcc\x68\x47\xf0\x6a\xf9\x5b\xb0\x93\xf6\xd1\x62\x24\x0f\x67\x1d\x41\xf9\xa2\x47\xb8\xf5\xd1\xfb\xb4\xa5\x52\xd0\x9f\xae\x50\x1e\xd3\xb4\xc5\x25\xa4\x7c\xf1\x4a\x61\x05\xb4\xf0\x16\xc9\x1b\x39\xd6\xf4\xb9\xd6\x07\x19\x7d\x46\x85\x18\xa7\x6d\xbf\x4a\xbe\xf6\xaa\x83\x06\xa1\xe7\x87\xd4\x5f\xbb\xd5\x07\x24\xd7\xc4\xa8\xc0\xa6\x44\x7e\x6b\xe1\x2b\xda\xf4\xa7\x14\x98\x0b\x01\xe2\x2d\x28\x70\x28\x35\x2d\x54\x4e\xe0\x20\x04\x89\xe8\x3a\x80\xc2\x24\xd7\x1a\x80\x8e\x31\xf7\x56\x38\xbd\x84\x34\x74\x9d\xf6\x91\x87\x63\x6c\x1b\x70\xcd\xbd\xbc\x26\x7a\x54\xcd\x1d\x61\xee\xe1\x20\x30\x6a\xf9\x61\x92\x92\x2e\xb5\x72\x75\xf2\xed\xd5\xd0\x83\x28\xbb\xce\x42\x90\x9c\x31\x77\xfb\xce\x5f\x7a\xa1\xf7\x82\xe8\xc6\xde\xe7\x71\x13\xfa\x8a\x06\xa4\x07\xba\x5e\x45\x8a\x44\xfe\x04\x46\xd4\x2f\x93\xcd\x93\x6b\x1a\xec\xfb\x48\xf9\xee\x8f\x0f\xb6\x5f\x29\xeb\x8a\xcd\x43\xa6\xa8\x41\xae\x4d\x1a\x11\xa6\xc1\x44\xfc\xab\x01\x1b\x3e\x6f\xe6\x1f\x52\x8d\x9e\x28\x8c\x79\x54\x27\x94\x66\xf0\xa0\xf8\xd5\x03\x95\xa3\x3a\x50\x92\xa0\xfc\x6e\xfe\x0f\x78\x90\x9f\xa8\x3d\x88\x0b\xf2\xa4\xef\x21\x7c\x78\xea\x06\x89\x9f\x45\x24\xe6\x43\x51\xde\x38\xd8\x19\xa8\x57\x6d\x28\x16\x2c\x6d\xa6\xf6\x89\xe0\x4b\x97\x7a\xed\xf2\x1f\x56\xe6\x8a\x9a\xbd\x2b\x7b\x85\x3a\x2f\x14\xff\xf1\xe6\x95\x6c\x65\x37\xb1\x60\x2e\x94\xbf\x37\x7c\x92\x2f\x52\x69\x36\x8f\x28\xff\xb2\x0f\x4b\x73\xe9\xbb\x97\xdf\x36\x05\x04\x90\x86\x96\x29\x09\xe0\x92\x2d\x78\xd2\xf4\xa2\xea\xcc\xb7\x38\x74\xf5\x4d\xd6\x9d\x6e\xd7\x94\x2e\x65\x7c\xb4\x38\x95\xff\xbb\x23\x1f\x86\x7e\x8a\x33\x9e\x14\x67\xc3\xa2\xb3\xc6\x62\x57\x3b\xad\x22\xaa\x3c\x6b\x45\x4f\x0b\x9e\x3c\x77\x14\x8d\xdd\xf3\x57\xc4\x5f\x93\xa0\xd9\x4b\xe1\xb9\x36\xd1\x2c\x9f\xca\xd4\x73\x75\x88\xea\xa5\x43\xdd\x8a\xf7\x84\x64\xeb\x89\x2a\x7b\x1b\x73\xc2\x20\x46\xb9\xea\x73\xf4\xe2\xec\xec\x0c\xfd\x5f\xfc\x69\x18\xa9\x3b\x4e\xd1\x36\x9b\xb8\x9e\x74\xe0\x2a\xe6\xf2\x43\x82\x59\x35\x9b\xa2\xd8\x98\xa7\x2b\xa6\x35\x06\x59\xcb\xc3\xe9\x5f\x01\x00\x00\xff\xff\x0e\x31\xd2\x7d\x09\x27\x00\x00")

func assetsJsIndexJsBytes() ([]byte, error) {
	return bindataRead(
		_assetsJsIndexJs,
		"assets/js/index.js",
	)
}

func assetsJsIndexJs() (*asset, error) {
	bytes, err := assetsJsIndexJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/js/index.js", size: 9993, mode: os.FileMode(420), modTime: time.Unix(1502491043, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsJsIndexMinJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x58\x71\x6f\xdb\xb8\x0e\xff\x2a\x9e\x36\x34\x36\xea\x38\xdb\x7b\xdb\xfb\x23\x89\x5b\x0c\xdd\xc3\x61\xb8\xe2\x6e\xd8\x0a\xec\x8f\x6d\x28\x14\x5b\x49\x74\x95\xad\x40\x92\x9b\x05\x5d\xbe\xfb\x51\xb2\xe4\xc8\xb1\xd3\x76\x5d\x3b\xa0\x45\x24\x92\x22\x29\x8a\x3f\x8a\xf2\xbc\x2a\x33\x45\x79\x19\x2c\x88\xfa\xcc\xc5\x15\x11\x9f\x14\x56\x95\xfc\x0b\x17\x24\x94\x66\x18\xdd\xc8\x35\x55\xd9\xb2\x99\x66\x58\x92\xe0\xe5\x58\x10\x55\x89\x12\xad\x31\x55\x68\x62\x68\xaf\x1c\x6d\x25\x78\x46\xa4\xb4\xe4\xff\x38\xf2\xac\x92\x1b\x34\xc9\xc9\x1c\x57\x4c\x39\x62\x55\x5e\x95\x7c\x5d\xa2\xed\xd6\xf7\xe5\x02\xcb\xab\x27\xf4\x44\x56\x99\x47\xfe\xaf\x23\xcf\x31\x65\x96\xf6\xda\xa7\x05\xb3\x4d\xa0\x68\x41\x78\xe5\x0c\xbc\x71\xec\x2b\xca\xdc\x92\xff\xf9\x8e\x04\x82\xac\x08\x56\xf7\xd9\x6e\xb5\xca\xb1\x22\x61\x74\xf3\x22\xc1\xff\xe0\xef\xe1\x8d\xda\xac\xc8\x18\xfd\xf1\xff\x0b\x14\x57\x82\x8d\xd1\x68\x6d\x4e\x46\x8e\x34\x7b\x74\x8a\xcd\xb2\x54\x07\x41\xa2\xd8\x6e\x65\xec\xd4\x85\x22\xba\xb9\xc6\x22\x50\xe7\xe9\x8b\x10\x3d\x67\x54\x2a\x52\xc2\xe2\x40\xcd\x78\xbe\x41\x51\x42\x8a\x95\xda\x84\x51\xac\x3e\x1b\x01\xab\xbb\xcb\xbe\x30\x6c\x05\x07\xd1\x65\x36\x5a\x53\x91\x34\xe3\xcb\x8c\x57\xa5\xfa\xf1\xe3\x65\x6c\x75\x02\xd3\x8e\x76\x2c\xa3\xef\x52\x47\x28\x7d\x39\xa1\xf3\xf0\xad\x10\x78\x93\x50\x69\x7e\x43\x4f\x5b\x14\xdd\xcc\xb9\x08\xf5\x56\x68\x40\xcb\xc0\x67\x99\x0d\xba\xa9\xef\xc2\x17\xfa\x2d\x66\x67\x29\x9a\x2a\x71\x32\x55\xf9\x09\x3a\x76\xac\xa4\x84\x3c\x3a\x46\xd3\x11\x50\x6b\x8e\x0e\xfa\x05\xff\xa4\x04\x2d\x17\x61\x23\x96\x09\x38\x35\x92\x5f\x62\x15\xb5\xa4\x77\x02\x7a\x27\x97\x7a\x1b\x97\x36\xf4\x2d\xb9\x9d\x26\x86\x65\x5b\x0e\x74\x9e\xf6\x1b\xed\x13\x8d\xc6\x08\xdd\xed\x82\xce\x4e\x92\xdf\xe9\x41\x2d\x76\x1f\x07\x1a\x49\xdf\x3e\x9a\xb4\xc2\xf8\x2c\xb5\x49\x7d\x6e\xa9\x1a\xa3\xa7\xec\xec\x38\x1d\x68\x17\xa6\x39\xbd\x0e\x32\x50\x29\x53\x34\x53\xe5\x70\x21\x78\xb5\x0a\x9a\xd1\xf0\xbb\x44\x27\xd3\x59\xa5\x14\xe4\xbe\x4e\x75\x90\x32\x13\xe4\x2d\x32\xe2\x39\x2e\x17\x44\x98\x21\xcd\x40\xd8\x39\x31\x14\xa4\xe0\xd7\x04\x05\xb0\x19\x3c\x54\x7c\xb1\x60\xa0\xa4\xe0\x39\x66\x8e\x86\x05\x14\x91\x14\x3d\xf7\x89\x66\x3c\x54\x54\x69\xe9\x33\x5e\xce\xa9\x28\x82\x5a\x55\xa3\x3a\x18\xec\x65\xcc\xa0\xb5\x38\xc3\x8c\xcd\x70\x76\x95\xa2\x26\xe5\x3e\x1a\x05\xe1\xd7\x41\x67\xe5\xd7\x41\x34\x81\x9d\x52\xb7\xad\x05\xdb\xac\x96\x66\x23\xcd\x68\xa8\x04\x96\x4b\x14\x58\xa7\x6a\x5d\xb0\x66\x44\xe1\xbf\x8e\x0a\x0c\x20\x9e\x27\xe6\x1c\x06\x63\x1d\x64\x64\x82\x6c\xce\x25\xae\xe7\x23\x48\x77\x14\xab\xf3\x04\xaf\x56\xa4\xcc\x43\x76\x16\x6d\x7b\x21\x9a\x30\x52\x2e\xd4\x72\xdb\x03\x3c\x8b\xd4\x2e\xec\x1c\xc3\x80\xae\x9e\xec\x80\xad\x01\xa7\xf3\x26\xad\xe7\x89\x1e\xc7\xeb\x16\x02\x2d\x87\xe6\x87\xd1\x67\x45\x2c\xf6\xda\x59\xdf\x77\x31\x59\x79\x7b\x0d\x34\x49\xba\x86\x60\x68\x07\x4e\xeb\x34\xbc\x4f\x8a\x59\xbc\x99\x71\x46\x45\xc6\x48\xa0\x35\x0c\xe5\x92\xaf\x9b\x5c\x82\xed\xa1\xc1\x31\x85\x5c\xb8\xe3\x34\xc9\x86\x0c\x39\x9c\x40\xe7\x04\xcd\xd9\xf9\xe7\xb6\x7e\x74\xb0\xd0\x72\xce\x77\x50\xa9\x23\x04\x40\x91\x44\x3d\x12\x4e\x40\x93\x55\x1b\x3c\x1f\x78\xa7\x7a\x08\x21\x36\x43\x3e\xea\x85\x06\x1e\xde\x92\xfb\x40\x43\x90\x39\x18\xf5\xc1\xa1\xf7\xb2\x17\xd9\x87\x94\x11\x1b\x1b\x73\x73\x3f\x46\x68\xb4\xa2\x87\x44\xe6\x4f\x58\xf7\x90\xc0\xb4\x6b\x86\xd6\x72\xb8\x62\x98\xd2\x30\x80\xbb\xde\x95\x86\xf5\x59\x64\x00\x7b\x74\xb4\xa3\x41\x22\x8a\x40\xaa\x8d\x56\x97\x53\xb9\x62\x78\x33\x2e\x79\x09\x05\x96\xe6\x29\x32\x78\x70\xe9\xaf\xf2\x20\xe3\x4c\xae\x70\x99\xa2\x37\x30\xaf\x98\xf3\x54\xd7\x98\x3a\x67\x81\xcc\x68\x97\x3c\xa4\x8a\x14\xc0\xd3\x8b\x1d\x77\x55\x31\x36\x14\x74\xb1\x54\x81\x22\xdf\xd5\xb0\xa8\x00\xff\x81\x2c\xb0\xd9\x13\x29\x4e\x06\xc7\xda\xbc\x09\xcd\x74\x04\xf3\xe9\x48\x2f\x07\x25\x4a\xf0\x72\x71\xf2\xfe\x1d\x10\xea\xe1\x74\x26\x82\x11\xf0\x19\x7d\x7c\xf3\x75\x3d\xef\x73\x40\x97\xa3\xa7\x76\xa1\xdb\x0e\x1b\xa7\x5c\xf5\xeb\xf5\xab\x16\xfe\x2d\xc1\x59\x09\xca\x05\x55\x9b\x7e\x47\x3e\x58\xee\x6f\x71\x05\x2b\xa5\x3b\x54\xd9\xef\xca\x5b\xcb\x7d\x6a\x57\xea\xe3\x31\x2d\x15\x11\x82\x8b\xd3\xbd\xf9\x18\x1d\x15\x39\x40\x78\x82\x0e\x1c\xde\x39\x88\x06\x46\xf4\xa9\x5d\x2d\xc9\x3a\x78\xa7\x1f\x1f\xc6\x45\x77\xff\x26\x8a\x9f\x73\x28\x57\xc4\x5e\xcf\xe6\x86\xed\xba\x79\x56\x8b\xf7\xfa\x38\xaa\x98\x57\x80\x50\xb4\xed\x3c\x09\x6e\x69\x45\x76\x6f\x84\x6e\x37\xe2\xf1\x6e\xcc\xcd\xec\x93\xa0\x1b\x99\xa8\x0b\x57\xd6\xbc\x1e\xc4\x15\x11\xbf\xb1\xd8\x21\x7b\xaf\xdd\xb8\x0d\x6c\x1d\x05\x4d\xf6\x77\x38\x4d\x32\xb6\x9a\xf3\x9f\xc8\x8d\x83\xed\x52\xeb\xb0\x74\x0a\x59\xb1\xbb\x7a\x09\x59\x3c\xa8\x97\x30\x17\xc0\xe3\xb7\xdc\x5a\xad\xbe\x2f\x9b\x02\x7f\xe0\xb6\xd4\x7c\xaf\xc9\x6e\xc4\x1f\xbf\xbd\xae\x2f\xcb\x68\xeb\xbd\x51\xfd\xec\x72\x19\xdb\x7a\x56\x0f\xcd\x63\x0c\x9e\xc6\x1a\x62\xe1\xee\x89\x1a\x7b\x6f\xeb\xb6\x8c\xeb\xa7\xe3\xe6\x79\x5d\x07\xc8\xf1\x77\x06\x8f\x51\x60\x3e\x25\x18\x0a\xf2\x17\x68\x72\x5b\xab\x87\x0b\xdf\x74\x90\xec\xda\xd9\x28\xc9\x18\xcd\xae\xc2\xe6\x4b\x41\xdd\xd2\x13\x78\xe7\xab\x25\x05\x87\x66\x29\x49\xe6\x54\x23\x87\x82\x35\x0a\x33\x7d\x20\xa1\x39\x01\x14\x4d\x66\xc9\x12\xcb\x33\x1d\xec\x10\xf5\xf4\xbc\xd1\x69\x38\x4b\xea\xb3\xbd\x45\x28\x9e\x25\x38\xcf\x7b\x05\x32\xc6\x25\xf1\xb6\x39\x44\xc7\x34\x4a\xb4\xeb\x21\x9a\x03\x42\x50\x14\x8d\x6f\x37\xe1\x34\x1c\xb6\x61\x9d\x68\x9b\x58\xd2\x9c\x34\x26\xb6\xd1\x16\xfe\x9a\x8f\x33\xfb\xef\x3c\x9a\xef\x7f\xa7\xf9\xf0\xf7\xa7\xdb\x3f\xd4\xec\x72\xc5\x82\x28\xd6\x61\x1d\xdf\xd0\x7c\x4c\xf3\x6d\xf3\x01\xa7\xfe\x0c\xe4\xdb\xf6\x32\xff\x01\x66\x7d\xd8\xde\xd7\xa2\xdf\x99\x3e\xc0\xa4\xcb\x77\xd3\x5a\xff\xa4\xcd\xfa\x9d\xf0\x0b\x46\xeb\xb7\xce\x1d\x56\x5f\x84\x39\xcf\xaa\x82\x94\x2a\x82\x44\xc2\xf9\xc6\x47\x83\x0f\xd9\x43\x88\xe9\xc7\xd6\x18\x90\x11\xd2\xa4\x9b\x6b\x51\xa3\x03\x12\xab\x55\x13\x74\xd2\xfd\xa2\x01\x93\xee\x87\x2d\x00\x06\x82\xba\xc8\x7d\x31\xd5\x5e\x56\xb3\x82\xaa\x6f\xbd\x46\x1f\x16\x72\xb0\xe0\x02\x6e\x8a\xd1\x78\xcf\x7c\x53\xa2\xae\x31\x03\xf7\xba\xc7\x11\xc5\xee\xe3\xe7\x44\x97\x22\x5c\x29\x6e\x9f\x7d\x69\x09\xdd\xcb\x44\xeb\xf3\x88\x7d\xae\xeb\xd2\x95\x64\x4b\x92\x5d\x91\xfc\x54\x2f\x4a\xd3\xd4\x5b\x72\x74\x14\x3a\x13\xb1\xaf\x7e\x0d\x75\x8e\xaf\x13\x48\x99\xf7\xa5\x22\x42\x3b\x58\xcb\xc5\xaf\xc8\x6b\x28\x34\x5a\xd3\xb3\x7d\x4d\x76\x51\xc6\x08\x16\xcd\x32\x4f\xa4\x6d\x42\xab\xd0\xe5\x24\x9a\xfc\x1b\x00\x00\xff\xff\xd3\xd5\xb7\x48\x66\x17\x00\x00")

func assetsJsIndexMinJsBytes() ([]byte, error) {
	return bindataRead(
		_assetsJsIndexMinJs,
		"assets/js/index.min.js",
	)
}

func assetsJsIndexMinJs() (*asset, error) {
	bytes, err := assetsJsIndexMinJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/js/index.min.js", size: 5990, mode: os.FileMode(420), modTime: time.Unix(1502719057, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/index.html": templatesViewsIndexHtml,
	"assets/js/index.js": assetsJsIndexJs,
	"assets/js/index.min.js": assetsJsIndexMinJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"js": &bintree{nil, map[string]*bintree{
			"index.js": &bintree{assetsJsIndexJs, map[string]*bintree{}},
			"index.min.js": &bintree{assetsJsIndexMinJs, map[string]*bintree{}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"index.html": &bintree{templatesViewsIndexHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: AssetInfo, Prefix: k}
	}
	panic("unreachable")
}
