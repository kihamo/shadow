// Code generated by go-bindata.
// sources:
// templates/views/index.html
// public/js/dashboard.js
// DO NOT EDIT!

package workers

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5a\x4d\x8f\xdb\x36\x13\xbe\xef\xaf\x20\xf4\x02\x6f\x92\x83\xd6\xd9\x36\x3d\x34\xb1\x1d\x6c\x13\xa0\x2d\x12\x04\x45\x52\x34\x67\x5a\x1c\x5b\xdc\xa5\x45\x81\xa4\xfc\x81\xc5\xfe\xf7\x0e\x29\x4a\x96\x65\x4a\xb2\xbb\x6e\xb2\x29\x92\x43\x56\x16\x87\xc3\x99\xe1\xf3\x0c\x87\x63\xdf\xdd\x11\x06\x73\x9e\x01\x89\x12\x99\x19\xc8\x4c\x44\xee\xef\x2f\xc6\x8c\xaf\x48\x22\xa8\xd6\x93\x48\xc9\x75\x34\xbd\x20\xf8\xaf\xf9\x36\x91\x22\x16\x8b\xf8\xea\x07\x3f\xe6\xc6\xd3\xab\x6a\x38\xa7\x0b\x88\x53\xa0\x0c\x54\x34\xfd\x2c\xd5\x2d\x28\x3d\x1e\xa5\x57\x5e\xd1\x08\x35\x4d\x2f\xfc\x9f\x23\x57\xdb\xe8\xd6\x6a\x87\xe3\x2f\x1a\xc3\x6d\x91\x9c\x66\x20\x88\xfb\x3f\x5e\x28\x80\xac\x25\x1b\x94\x77\x2e\xf0\x6c\x11\x90\x6d\xcb\xef\x0c\x1f\x92\xf4\xc6\xfe\xd8\x23\xee\xa6\xf0\x6a\xc2\x9c\x92\x39\x8d\x19\xd0\xb9\xfd\xfb\xd3\x26\x9a\x8e\x47\xbc\x67\xad\x32\xac\x27\x98\xf2\x33\x31\xb0\x31\xb1\xe2\x8b\xd4\x0c\x59\xd5\x98\x9d\x16\x0b\x88\x08\x67\x93\x48\x70\x8d\xd8\xc1\x3d\x8e\x13\x59\x20\x86\xa6\xcf\x07\x8c\xa8\x54\x4d\xdf\x57\x33\x87\xac\xee\x1e\xee\x18\xea\x7a\x4d\x49\xaa\x60\x3e\x89\xfe\x57\x1b\x7d\xc4\xee\x96\x68\x98\x4b\x69\x2c\xa0\xbb\xad\xd4\x28\x58\xcf\x29\x04\x72\x04\xe6\x18\x8e\xbf\x38\xac\xc9\x5b\x30\x94\x0b\x74\xd4\x0a\x9d\xa2\xc3\xef\x4b\x1b\x10\x54\x21\xe6\xe2\x84\xab\x44\x40\x2d\x83\xc0\x18\x5c\xa0\x09\x00\x01\x54\xcd\xb9\x83\xd4\xe9\x01\xa6\x2d\xba\xed\xcb\xb5\x3f\xfe\x73\xbe\x6e\x41\x88\x20\xbd\x1e\x35\x61\x0b\x8d\xd8\x7a\xac\x8c\x5d\x97\x39\xf9\x64\xbe\xd6\xb9\xfc\x4b\xb3\xd5\x1b\xfc\x9d\xab\x8f\x9c\xab\x0a\xd8\xb7\x46\x54\x43\xf5\xed\xa3\x25\xaa\x33\x2e\x5e\x53\x6e\x4e\xe7\x2a\x4e\x22\x6e\xfe\x97\xa7\xab\x5b\xf6\x3b\x59\xff\x6d\xb2\xf6\x54\xd2\x4d\x52\xea\x22\x49\x40\xeb\x56\xb1\x16\x28\xb4\xbb\xb8\x59\x97\x69\xc1\x14\x31\x33\x19\xd6\xd4\xb2\xc8\x49\x33\xac\xfb\x2e\xcc\x0a\x63\x64\x46\xcc\x36\x07\x9c\xe0\x3e\x44\x8d\xf9\xc4\xea\xc0\xab\x08\x2d\x84\x71\xcf\x1b\x4d\x98\x92\x39\x93\xeb\x2c\x36\x72\xb1\x10\xc8\x07\x46\x0d\xf5\x1f\x26\x51\x35\x1a\x11\xaa\x38\x8d\x61\x83\xb6\x33\x60\x76\x13\x85\x86\x00\x96\xae\x13\xc3\x65\xa6\x0f\xc3\xdd\xc4\x45\x42\x15\xb8\xed\x3e\xdc\xea\xf1\xa8\x34\xbb\xf5\xb6\x10\xd5\xdc\xda\xde\x25\x64\x05\xd1\x82\xa3\x39\xd6\xc0\xc0\x0e\x8b\x8e\x24\x53\x13\xe8\x86\xae\xa8\x4e\x14\xcf\xcd\xcb\x95\xe4\xec\xe9\xf3\x67\x2d\xf7\x97\x92\x51\x51\xbd\xa3\x6a\x01\x06\x59\xd7\x7c\xe9\x9e\x63\xc3\x8d\x95\x7e\x23\xb3\x39\x57\x4b\xa2\x60\x29\x57\x40\xa8\x10\x64\x07\x83\xa6\xfc\x4c\xb2\xed\x24\xfa\xcc\x51\x60\x06\x41\x71\x02\x9b\x04\x72\x43\xaa\xcd\xaa\x06\x2e\xc9\xb5\x02\xb2\x95\xe8\x79\xa1\xe0\xf5\x9e\xd6\x04\x35\xcc\x68\x72\xdb\x00\xdf\x47\xa7\xfa\xe9\xb3\x57\x7d\xac\xaf\x89\xb9\x10\xdb\x3c\xe5\x78\x45\x25\xf5\x53\x6c\x14\xd5\x69\xc9\x4c\xf2\xb1\x36\xb4\x83\x68\x34\x44\xb3\xf6\x2e\x8c\x47\x85\xe8\xa3\x99\x7b\x3c\x60\x8b\x0d\x59\xc7\xbd\xd4\xd0\x99\x4d\x21\xa0\x73\x04\x1e\x5f\xb5\x51\x39\x76\xe3\x7b\xc2\xa4\x9c\x92\xa2\x37\xa1\x7c\x38\x36\x96\x9b\xa1\xf7\xaa\x03\x50\x26\x9d\x7e\xa0\x4b\x18\x8f\xf0\xa1\x53\xe2\x8d\x02\x6a\x80\x0d\x08\xd9\xe3\x87\xf8\x54\xd2\x2f\xfa\x9e\xea\x23\x25\x4b\xa5\x73\xcc\xdf\x43\xcb\x3b\x9d\xc7\x08\x7a\x9e\x87\x85\xf0\x6d\x20\x52\x56\xb6\x23\xae\x76\x77\x83\x13\x0e\x07\xf0\xa5\xdd\xbc\x87\x24\xea\x35\x55\x99\xcd\xbc\xcd\x1a\xfd\x84\x34\xed\xab\xf3\xef\x49\xfa\xeb\x25\xe9\xe6\xe5\x4a\xa7\xfd\xa5\x6b\x6f\x7a\x83\x2d\xc4\x32\xb7\x7d\x2a\x97\xe1\x3e\xa1\x2e\x97\x88\x5d\x65\xf5\x90\x2c\x77\x1e\xdf\x52\x0c\xdc\x83\x7c\x4b\x84\xb4\x08\x70\xce\xfd\x86\xca\xce\xea\x5c\xbd\xdb\x7c\xc5\x5d\x0f\xf2\x9c\x61\x38\xcb\x39\xac\xc1\x38\x8f\x2b\x92\x87\x8f\x4b\x3f\xfa\xd1\x8a\x3f\xe4\xac\x44\x5f\x70\xc9\xdd\x69\xe9\x57\xff\x3a\x30\x3a\x43\xfc\x6e\x6d\x81\x82\xa9\xa4\x59\xa1\x1c\x15\xc9\x77\x38\xf1\x5c\x45\xc7\x3b\x67\xc4\x59\xa2\xf8\x95\xf1\x5a\x91\x9a\xb2\xd0\xe5\xfd\xb8\xc8\xe4\xa2\xd0\x3e\x30\xd7\x8c\xf9\xdd\xf8\xc6\xab\xb1\x73\x55\x60\xbf\xbf\x3d\x43\xfd\xf5\xc9\x50\x53\x0c\x94\x53\x7f\x62\xfe\xfc\xef\x56\x47\x8c\x66\x0b\x24\xc7\xae\x2f\x32\x5c\x1a\x05\x7b\x20\xdf\x60\x0d\x3f\x84\xa0\xe1\x1a\xff\x18\xf8\xfc\xa1\xb8\x54\xdc\x6c\x07\x20\x64\x0c\x2c\x73\x73\xcc\x1d\x00\x94\x92\xea\x01\xd8\x7f\x84\x80\x74\x09\x14\x2f\x22\xac\xd5\x49\xb7\xb9\xd3\xee\x3c\xc7\x02\x77\x33\x89\xe2\xab\x88\x28\xe9\x6a\x60\x4e\x85\x5c\xf8\x0a\x18\xcb\x26\x06\x19\x02\x45\x15\x10\x40\x6f\x79\x6a\xf9\x19\x61\x3c\xfa\x83\xcd\x7f\x5b\xdb\xdd\x94\x2d\xe5\xaa\xef\x60\x0f\x43\xd2\x57\xeb\x97\xb5\x59\x79\x48\x30\xae\x97\xbc\x56\x18\x74\xe3\xff\x86\x2f\x41\xbf\x0a\xd7\xde\x6e\xb1\xf4\xc5\xbe\x59\xee\x38\x8f\xa6\xbb\x83\xc2\x7e\x3b\xfc\xa2\xb7\xeb\x15\xf6\xaf\x45\xdc\x5a\x70\x2e\xd5\x72\xb8\xfb\x68\xa5\xca\x4b\x51\xdf\xb1\x27\xe8\x0c\x53\x10\xca\xee\x6d\xb6\x6f\xc7\xee\xfa\xbd\x99\x51\xf6\x4b\x71\x2b\x1c\x4d\x3f\x14\xcb\x19\x28\x92\xc1\xba\x72\xf0\x25\x9e\x70\x76\xac\xef\x7c\xcd\xf2\xc2\xf8\x1d\xc9\x9c\x82\x88\x2c\x39\x86\xf9\x2a\xda\xb3\xd8\xaf\x75\x80\xbf\xaa\x43\x7c\x5a\xb3\xf1\x30\x54\x47\x45\xbe\xb3\x67\x7b\xca\x2d\x32\x8c\xb1\xe9\x1b\x8b\xbf\x1e\x38\xed\xad\xa0\x8b\xd9\x92\x9b\x83\x15\xea\x9e\x67\x70\x05\x44\x5e\xc7\x55\xf1\xc8\x5e\xeb\xdd\x1d\x01\xac\x3f\xef\xef\x2f\x2e\x1a\x3f\xa2\xb8\xd1\xe5\xef\x27\xca\x12\xcc\x1b\x48\xf3\x5c\xf0\x84\xda\x73\x77\xb4\xab\xcf\x7c\xe4\x56\x54\x55\xad\xb4\xaa\xc9\x6a\x73\x39\x99\x90\x27\xa8\xf7\x32\x34\x74\x7f\xff\xe4\x15\x9a\x51\xaa\x99\xd6\x8b\x69\x95\x4c\xa2\x91\x87\xc3\xe8\x46\x8f\x18\x96\xaa\x33\x49\x15\xbb\xbc\xd1\xaf\x57\x13\xab\xee\x7a\x67\xca\xe5\xaf\x60\x7e\x29\xb8\xb0\x3e\xb8\xbb\xb4\x57\x57\x3b\xf6\x77\x00\x00\x00\xff\xff\xa0\xc6\x18\x98\x1c\x22\x00\x00")

func templatesViewsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsIndexHtml,
		"templates/views/index.html",
	)
}

func templatesViewsIndexHtml() (*asset, error) {
	bytes, err := templatesViewsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/index.html", size: 8732, mode: os.FileMode(420), modTime: time.Unix(1500316332, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _publicJsDashboardJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x59\x5f\x6f\xdb\x38\x12\x7f\xcf\xa7\xe0\xb9\xc5\x49\xbe\xd6\x72\x7a\x77\xdd\x07\x3b\x4e\x51\xa4\x8b\x45\xb1\xc1\x6e\xd1\x06\xe8\x43\x5b\x04\xb4\x44\xdb\xdc\xc8\x92\x41\x52\x71\x8d\x36\xdf\x7d\x67\x28\x51\xd6\x1f\x4a\x66\xbc\x29\x36\x58\x01\x6d\x64\x6a\x66\xf8\x1b\x72\xe6\x37\x1a\x6a\x91\x25\xa1\xe2\x69\x42\x96\x4c\x7d\x4c\xc5\x0d\x13\x1f\x14\x55\x99\xfc\x8d\xae\x99\x2f\xf5\xed\x90\x7c\x3b\x21\x70\xc9\x2d\x57\xe1\xaa\x31\x88\x57\x48\x25\x23\xa7\x93\xf2\x37\x5e\x82\xa9\x4c\x24\xc4\xdb\x52\xae\xbc\x69\xed\xd1\x5c\x30\x7a\x33\xad\x6b\xbf\xb0\x6b\x6f\x44\x1a\x32\x29\x1d\x0c\xfc\xd7\x6e\x60\x9e\xc9\x5d\xbf\x76\xc4\x16\x34\x8b\x95\x5d\x3d\x4b\x6e\x92\x74\x9b\x74\x5b\xb8\x3b\xb9\x3b\x39\xa9\xae\xe1\x15\x95\x37\xff\xa8\x15\x94\x59\xe8\x68\xe0\x7f\x76\x03\x0b\xca\x63\x07\xed\xff\x77\x6b\x93\xf9\x8e\x28\xbe\x66\x69\xe6\xb2\x10\x2f\xed\x86\x6e\x78\xec\x02\xe3\xa7\xee\x4d\x80\x1f\x1b\x46\x0f\x40\x78\xc8\x70\xca\x36\x11\x55\xcc\x37\x81\xf2\x34\xa0\x7f\xd0\xaf\xfe\x3e\x6a\xd4\x6e\xc3\x26\xc4\xfb\xe5\xe7\x2b\xef\x79\x39\x98\x89\x18\xc6\xc6\x5b\x9d\xcb\x72\x8c\x2a\xe3\x57\x54\x1b\x9c\x61\xe0\xc9\x8a\x6c\xb1\xb7\x13\x62\xa6\xf4\xc5\xf0\x5b\x0d\xdb\x2d\x15\x44\x5d\x92\x19\x79\xea\x7b\x4f\x62\x2e\x15\x4b\xc0\x2a\x51\xf3\x34\xda\x79\xc3\x80\xad\x37\x6a\xe7\x0f\xa7\x6d\x9d\x8f\x85\x4e\x81\xc3\x41\xe3\xaa\xd0\x50\x90\x41\x16\xf9\x96\xc2\x1e\xcd\x8c\x88\xa0\xfc\x75\x1d\xa6\x59\xa2\xc8\xf7\xef\xe4\xb4\x3d\x89\x41\x83\x1a\xc5\x7d\xaf\xbc\xc6\x72\xad\x37\x7f\x86\xcf\x6b\x02\x7c\x41\xfc\xd7\x42\xd0\x5d\xc0\xa5\xfe\xeb\x57\x60\x0c\xab\xe9\x6d\xae\x45\x2a\x88\x8f\x76\x39\xe1\x49\x15\xb4\x4d\xb8\xe9\x67\xdd\xcd\x4f\xfc\x4b\x03\x4e\x4d\xe7\x02\xa4\xbd\x33\x25\xce\x3d\xab\xcc\x33\x7c\x18\x9d\x7b\x70\x63\x2c\x06\x09\xf0\x95\x7e\x30\xc6\x27\x87\xd4\x30\x32\xaf\xd2\x0f\x4a\xf0\x64\xe9\x97\x36\x42\x08\x65\xc5\xa2\x6b\xaa\x86\xee\xa6\xf6\xda\xb8\x13\xd7\xb8\xe6\xd7\x45\x64\xba\x1b\xd9\x63\x88\xa9\xac\x1b\x01\x34\xe4\x55\x07\x60\x9b\xf0\x90\x40\x02\x79\x15\x07\xc8\x31\x1e\x20\x71\xb1\xe8\xaf\x39\x90\xdb\x70\xc3\x5f\xca\xb6\xe0\x5b\x67\x9e\x5a\x47\xad\x83\x18\xe7\xf5\x28\xf9\xd7\xcc\xf0\xdc\x65\x31\x8e\xc5\xae\x2b\x88\xf1\x82\x80\x7c\x36\xcb\x9d\x3d\x8b\xf8\x2d\x09\x01\xb8\x9c\x0d\xe6\x2a\x19\x2d\x45\x9a\x6d\x48\x79\x37\x92\xeb\x41\x07\xe6\xea\xaa\xcd\x33\xa5\x80\x22\x91\x02\xc1\x8c\xfe\x31\xa8\x58\xd5\xf6\x22\x9a\x2c\x21\x6f\xf0\x96\x87\x20\x6c\x9c\x18\x09\xb6\x4e\x6f\xd9\x00\xd7\x94\x8e\x54\xba\x5c\xc6\x60\x64\x9d\x46\x34\x36\x63\x54\x40\x2d\x9f\x0d\x9e\x54\x07\xf5\xfd\x48\x71\x85\xd2\x17\x69\xb2\xe0\x62\x4d\x72\x53\xfb\x24\xb5\xa6\x54\xcd\x40\x48\xe3\x78\x4e\xc3\x9b\xd9\xa0\x4c\xe6\xf7\xda\x88\xff\xd9\xb3\x6a\x7f\xf6\x86\xd3\xc1\xf9\x19\x37\xee\x2d\xe3\xdd\x66\xa5\x1d\x2a\xef\x46\x4a\x50\xb9\x1a\x90\x02\x5c\x6e\x0f\x74\xc6\x1c\xfe\xe5\xab\xe3\xb0\xa6\x63\xd8\x99\xf3\x9e\x98\xb9\x23\x2c\x86\x12\xe9\xb6\xcb\xda\x8c\x3d\xca\xee\xdc\x63\xcf\x58\x1c\x23\x95\xdd\x23\x66\xd5\x65\x40\x37\x1b\x96\x44\x7e\x7c\x31\x6c\xeb\xb5\x11\x74\x54\x93\x20\x66\xc9\x52\xad\x4e\xea\xca\x07\xcb\x40\x51\x5b\x9c\x8a\x80\x91\xed\x29\x01\xb9\x48\xb5\x6a\x69\xfa\xef\x12\x47\x3e\x00\xe1\x5c\x34\xc0\x5f\xdd\xb2\x5b\xa8\x14\x3d\x85\x02\xaf\x0a\x49\x15\x26\xf9\x21\x5e\x6b\xa8\xd5\xb8\xab\xb0\x51\x94\x8a\x43\x3c\xd5\xb0\x64\xeb\x52\x0a\x83\xe6\xad\xba\xb4\xd7\x51\x1f\x71\xbf\x70\x4d\xfa\xe8\x6a\x5b\x09\x64\x17\xa6\x31\xe5\x0a\xef\x43\x2e\xc2\x98\xe9\x4d\x18\xc9\x55\xba\x2d\x29\x45\x42\xca\xa3\x0f\x5c\x53\xc2\x81\x84\x66\x3b\x36\x4a\x21\x80\x1b\x49\xdc\x9b\x56\x87\xd2\x73\xeb\x9a\x9e\xd6\xe1\xed\x43\x51\xb8\x2b\x7d\xf3\x64\x91\xee\xc9\x3b\xdf\x65\xa0\x6e\xc9\xd4\x03\x31\x37\x58\x32\xa9\xf5\xa4\x15\xdd\x1d\x9c\x5d\xe4\xdf\x7b\x54\x2e\x08\xbb\xa6\xe6\x42\xd6\x82\x2d\x60\xf2\x2a\x5d\xa3\x4f\xae\x6c\x7d\x6c\xf5\x2b\x16\x10\xfb\xa0\x07\x59\x3f\x34\x74\xec\xf2\xfd\x0a\xba\xc7\xae\x5e\xbd\xd4\xa1\xa5\x7b\x2d\xdd\xa1\x22\x57\xca\xe5\x15\xc7\x5e\x5d\x3e\x9a\xea\xb2\xbd\x68\xb6\x26\xe6\x72\xa1\x99\xbd\x9d\xde\xda\x8c\xfc\x4c\xa4\xda\xa1\xbf\x11\x97\x9b\x98\xee\x26\x49\x9a\xc0\x0b\x0c\x8f\x66\x03\x4d\x34\x15\x5e\x39\x5c\xe7\x55\x44\xc2\x34\x96\x1b\x9a\xcc\x06\x2f\x5d\x14\xb2\xd8\x6c\x08\x16\xc6\x3c\xc9\x5d\xf4\x62\xde\xd6\x1b\x71\xc5\x80\x1e\xce\x70\x7a\xf3\x74\x93\xc5\xf1\x48\xf0\xe5\x4a\x11\xc5\xbe\xaa\xd1\x3a\x83\xca\x40\xe4\x9a\xea\xbd\x65\x6b\x4d\xfd\xe8\x67\x59\x79\x60\xec\x6c\x8c\x26\xc0\x90\x12\x69\xb2\x3c\x7f\xfb\x06\x06\xf2\xdb\xb3\xb9\x20\x63\x78\x1e\xf3\xbf\x05\xe3\xbe\x91\x6a\xa3\xc4\x82\xf5\x08\x70\xb6\x0f\xaa\x34\xf2\x5a\x09\x6d\x83\xcf\xc5\x1f\x01\x7c\x0d\x76\x23\x78\x2a\xb8\xda\x75\xa1\x7d\x57\x3c\x7f\x2c\x78\xa9\x52\x78\x98\x21\xbb\xf0\xbe\x2e\x9e\x3f\x02\xbc\x79\x34\xe8\xde\x92\x09\x01\xef\xab\xaf\x48\x73\x04\x7a\xcc\x7f\xaf\x23\x60\xe2\xa9\xd7\x19\x2f\x97\x20\x4e\xb4\xf8\x23\xf0\x29\x61\x5b\xf2\x06\x8f\xd3\xb4\x27\xe6\xed\x33\x50\xe9\x65\x0a\xe5\x89\x15\x2f\xa7\x9d\xbe\x5c\xe4\x0a\xc7\x39\x32\xce\x62\x17\xa9\xde\x9a\xb4\x97\xea\x7b\x57\x1f\x3a\x36\x5c\xed\x11\xcb\xd1\xd8\x91\xcd\xcf\xfe\xd0\xcc\xa9\xff\xa9\x88\xf7\xb4\x40\x45\x4f\x53\x15\xef\xec\x81\xd4\x95\x29\xab\xee\x9d\x4d\xad\xba\xb8\x76\x23\x0d\xba\xbf\x47\x13\x73\x90\x7d\xef\x05\xa1\x4e\x85\xf7\x52\xad\xb3\x92\xab\xea\x51\x04\x71\x54\xb7\x58\xcb\x56\x47\x3b\x3a\x45\x9c\xba\xfe\xda\xf9\x6e\x35\xb6\x1c\x42\xbf\x76\x22\x3e\xd2\x27\x7f\x1e\xf0\x09\x10\x90\xbf\x3f\xd7\x9d\xb6\x54\x8a\xdc\xaa\x2b\x98\x33\x80\xb6\xb8\x86\x94\xbf\x7a\x1b\xe1\x0a\x68\xf0\x96\xe8\x1b\x3d\xd6\xf4\x79\xaf\x8f\x32\xf5\x19\x2b\x59\x37\x6d\xfb\x65\xc8\x20\x28\xbb\x58\xd0\x0b\x63\x1e\xde\xf8\xe5\xd7\x09\xdf\x96\xae\x98\xaa\x4c\x1f\xe4\xab\x15\x6f\xfa\x63\x04\xe6\x20\xc0\x82\x05\xc7\x04\xe5\xb6\x8d\xca\xd9\x01\x85\xb0\x89\xf0\x3d\x44\x61\x93\x6b\x0d\x20\x1d\xcd\x83\x15\x95\x17\x58\x19\x7c\xaf\xdd\x4f\x7b\x56\x4e\xc2\x6b\x1e\xe4\x67\x79\x3d\xaa\x76\xba\x99\x07\x34\x8a\xac\x5a\x61\x9c\x4a\xd6\xa5\x66\x76\x27\x7f\x77\x1f\x06\xb8\xca\xbe\xb7\x80\x0c\xb2\xc6\x6e\x5f\x73\xdf\x0b\xbd\x17\x44\x37\xf6\x3e\x8f\x9b\xd0\x57\x3c\x62\x3d\xd0\xeb\x59\x54\x91\xc8\x9f\xe0\x48\xf5\xb3\x57\xb5\x47\xe4\xd1\xa1\xaf\x5f\xef\x7e\xff\xe0\xfa\xf9\xcb\xa4\x9e\xfe\x14\xb8\x57\xc1\x18\x9b\x34\x56\x96\x47\x13\xf8\xb7\x07\x6a\xf9\x66\x96\x7f\x9d\xeb\xf3\x20\x3f\x24\xf8\x21\x2e\xe8\xc3\x8b\x1f\xea\x43\xf3\x70\xfa\x41\xdd\xd8\xf3\x66\x1e\xb8\x3f\xc2\x93\xa7\x25\x55\x95\x4c\x65\x3e\xa8\xe6\x11\x98\x3b\x53\xa1\x64\x07\x9e\xb3\x93\xe3\x04\x18\xc7\xe7\x41\x3b\x81\x86\xa5\xb9\x62\xce\x3b\xc3\xb6\xd5\x79\x31\x7d\x1e\x6e\x5e\x9d\xef\x6e\x13\x43\xee\x93\xfc\xd0\xe4\x93\x3e\x4a\x92\xd9\x7c\xcd\xd5\x97\x43\x58\x9a\xfb\xdf\x1d\x03\xae\xe1\x0c\x40\x1a\x5a\xb6\x30\xc0\x4b\x17\xb1\x49\xd3\x8b\xb2\xb6\xdd\xd2\xd8\xaf\xbf\x03\xdf\xd5\xed\xda\x02\xc6\xac\x4f\xf5\xaf\xfe\x6f\x3c\x26\x2f\x4e\x89\x64\xb0\xb4\x91\xd4\x23\x90\x75\x6f\x13\xc5\x04\xce\x93\x5b\x78\x0e\x22\xa7\xa7\xe4\x3f\xf0\x07\xe3\x6e\x38\xfd\x33\x00\x00\xff\xff\x47\x6c\xea\xc0\x52\x23\x00\x00")

func publicJsDashboardJsBytes() ([]byte, error) {
	return bindataRead(
		_publicJsDashboardJs,
		"public/js/dashboard.js",
	)
}

func publicJsDashboardJs() (*asset, error) {
	bytes, err := publicJsDashboardJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "public/js/dashboard.js", size: 9042, mode: os.FileMode(420), modTime: time.Unix(1500317224, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/index.html": templatesViewsIndexHtml,
	"public/js/dashboard.js": publicJsDashboardJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"public": &bintree{nil, map[string]*bintree{
		"js": &bintree{nil, map[string]*bintree{
			"dashboard.js": &bintree{publicJsDashboardJs, map[string]*bintree{}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"index.html": &bintree{templatesViewsIndexHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: AssetInfo, Prefix: k}
	}
	panic("unreachable")
}
