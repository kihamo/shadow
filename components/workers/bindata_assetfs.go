// Code generated by go-bindata.
// sources:
// templates/views/index.html
// DO NOT EDIT!

package workers

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x58\xdf\x6f\xea\x36\x14\x7e\xe7\xaf\xb0\x58\xa5\x84\xed\x06\xe8\xbd\xed\xa4\xb5\xc0\x34\xad\xd3\xd5\x95\xa6\xbd\xdc\x6a\x7d\x98\xa6\x2b\x93\x9c\x80\x2f\xa9\x13\xd9\x0e\x14\xf5\xf2\xbf\xcf\x76\x7e\x92\xc4\x81\x30\x56\xb5\xd2\xf2\x00\xe4\xf8\x7c\x9f\x8f\xed\xf3\xd9\xc7\x3c\x3f\x23\x0f\x7c\x42\x01\xf5\xdd\x90\x0a\xa0\xa2\x8f\x76\xbb\xde\xc4\x23\x6b\xe4\x06\x98\xf3\x69\x9f\x85\x9b\xfe\xac\x87\xe4\x53\xb6\xba\x61\xe0\x3c\x71\xe7\xf2\x7d\xda\x66\x68\xbf\x2a\x35\x57\x5d\x22\x4c\x21\x40\xfa\xd3\x59\x30\x00\x5a\xf1\x6d\xf4\x77\x96\x80\x3d\x42\x17\x0d\xbe\x55\xff\x22\xf0\x43\x9e\x69\xb0\x1f\x5a\xdc\x35\x84\x64\x00\x1f\x23\x1f\x3b\x31\x07\xc6\xd5\x8f\xeb\xa7\xfe\x6c\x32\x22\x2d\x9d\x8d\x64\x6f\x9d\x62\xf9\x09\x09\x78\x12\x0e\x23\x8b\xa5\x38\x14\x56\x09\xbd\x8c\x17\xd0\x47\xc4\x9b\xf6\x37\x21\x5b\xc9\xf0\x1c\x37\x8c\xe5\xa2\xce\xc6\x07\x42\xc8\x88\x66\x0f\x09\xee\x50\xc4\xe6\x66\x43\x93\xc9\x8c\xd1\x92\x81\x3f\xed\x7f\x97\x06\x7c\xc4\xc2\x26\x89\xe0\x87\xa1\x00\xd6\xb6\xc2\x5c\x3a\xe6\x98\x38\x08\x9c\x00\x7c\x39\x15\x7f\x12\xd8\xa0\x3b\x10\x98\x04\x72\x98\xca\xa9\x0b\x47\xba\x22\xd5\x5c\xc0\x4c\xa6\x9b\xe3\x12\xe6\x06\x90\xfb\xc8\x94\x38\xd8\x41\x79\xe9\x03\xc0\xcc\x27\x3a\x99\xba\x4f\x2f\xae\x28\x6d\xdf\xaf\xfa\x7a\xba\x54\x19\x78\x6f\x4d\xa8\x02\xf3\xd5\xab\x15\xaa\x0e\xce\xd9\x60\x22\xba\x6b\x55\x82\x90\xc6\xbf\xbc\x5c\x75\xb7\xff\x8b\xf5\x95\x8b\x75\x0b\x41\xd0\xa8\xae\x57\xad\x57\x4e\x04\x3c\xe2\xe8\xb5\x2a\x76\x11\xb2\x30\x16\xb2\x68\xe2\x1d\xb4\xfa\x31\x07\xbd\x98\x56\x4d\x2a\x44\x5c\x6c\x03\x90\x23\x02\x35\x05\x37\x57\x97\x51\x73\x16\x9b\xb3\x32\xfd\x99\x7e\xf5\x4c\xd9\x27\x4b\x4b\x1c\x07\x62\xaf\x20\x69\xa8\x25\x2b\xf9\x57\xaf\x40\xea\xce\xf3\xd0\xdb\x1a\x2a\x4f\x81\xe7\x4a\xd5\xc0\xa3\x90\x72\xb2\x86\xaa\x52\x74\xfb\x9e\x33\x4a\x20\xcb\x70\xdd\xb8\x45\x4d\x84\x0a\xad\xc9\xce\x0c\xcb\x24\x96\xb3\x4f\x77\x93\x91\xfc\x32\xb6\xff\xca\x00\x0b\xf0\xda\x9d\xee\xe5\x1e\x8b\x0e\x31\x69\x27\x8a\x1f\xe1\x08\x37\x2e\xb0\x88\xf9\x11\x8e\x6e\x5b\x78\xd2\xda\x30\x72\xe5\x6b\x98\x27\xb5\x5a\x8d\x80\x7a\x83\x34\xaa\xc5\x38\x5b\xd6\x95\x8f\xa9\xb6\x9c\x6b\x3a\x49\xdf\x60\xda\x9d\x3d\x63\xde\x40\x22\xc8\x3b\x2c\x50\x4f\x5d\x5b\x7b\xa5\xeb\xec\x57\x9e\xdc\x64\xb9\xcb\x48\x24\x12\xdc\x1a\x33\x2d\x01\x7e\x17\xd2\x58\xdc\x6a\x9b\x1f\x53\x57\x90\x90\xa2\x05\x08\x35\xe2\xcf\x5a\x22\x7f\xc8\xd9\xb1\x13\xb5\x0c\xd0\x73\x1e\x03\xdf\x10\xe1\x2e\x1b\x1a\xd4\xe3\x62\x0e\x68\x7c\x53\x1b\x1e\x03\x11\x33\x8a\x2c\x55\xe2\x59\xb7\xb5\xe6\xb9\x9c\xe1\xd5\x6d\x9d\xe9\xd2\xcc\x14\xb1\xd0\x05\xce\x3b\x90\xbd\x37\x93\xf1\xd8\xed\x48\xf6\xc1\x4c\xe6\xcb\x3a\xad\x03\xd3\x55\x3b\x13\x9a\x6f\x91\x20\x8f\x20\x0f\xce\x0e\xa4\xd7\x66\xd2\x15\x09\xba\x84\xf7\x63\xfb\x62\xca\x97\x48\xaa\xe3\x38\xc2\x74\x57\x32\x33\xc6\x74\x45\xc3\x0d\x3d\xcc\xb6\xeb\x15\x9f\x79\xf6\xc6\x91\x27\x75\x6a\x97\x73\xf2\x62\x88\xbf\xe2\x27\x7b\x3f\x49\xc5\x36\x82\x1b\x64\x7d\xfc\xed\xde\x7a\xb7\xd7\x10\xb3\x40\xda\x47\xe9\x29\x3d\x52\xd0\x51\xc5\x25\xcd\x94\x9b\xbc\x57\x9b\x0d\x9e\x6b\xd1\x2a\x91\x89\x07\x34\x45\x17\xb6\x95\x5d\xea\x91\x16\xb8\x35\x18\xc2\x63\x24\xb6\xf6\xa0\x3e\x46\x8d\xba\x4f\x51\xc9\x7d\xed\x28\x4c\xd6\xc1\x14\xb1\x61\xfa\xfb\x8b\xbe\x46\xa1\x6f\xdf\xd0\xd8\xd0\x8f\xa2\xff\xa2\x57\x70\x6a\xf2\xc9\xb8\x52\xaf\x82\x5c\x1b\xcc\xdc\x99\xdb\x3c\xe6\xdb\x3d\x9c\x36\x98\x71\x45\x4d\xa9\x51\xa5\x57\x85\xa9\x41\x88\x8f\xec\x5f\x18\xc3\xdb\x21\xe1\xfa\xdb\xce\x7b\x1a\x54\xf7\xa5\xec\xf1\x43\x86\x6c\xd5\x17\x41\x84\x16\x91\x99\xdc\xf7\x47\x54\x1e\xcb\x5f\xe4\xef\xfa\x20\xaa\x13\x2c\x01\x89\xfb\x50\xbd\x99\xfd\xc5\xc3\x10\x47\x91\xdc\xc0\x6d\x4b\x9d\x6c\x56\x6b\x25\xad\x9e\x1f\x90\x74\xf4\x66\x96\xfc\x91\x76\x40\x3c\x6d\x1c\x29\x6b\x17\x38\x55\x57\x4b\xa5\x9a\x94\x27\x3d\xeb\x06\x43\x11\xfe\x1e\xba\x38\x80\xcf\x82\xc9\xea\x40\x8a\xea\x24\x7a\x5b\x4f\xc3\xcf\x7a\x36\x54\x8c\x52\x5e\xd6\x39\xa8\xd4\xc9\x7d\x0e\xb2\xfa\x81\xa7\xe9\xb3\xc3\xed\x0c\x3d\xe4\x13\xac\x89\xcd\xd3\x7b\x4a\x57\xaa\xf4\xb0\x1a\x36\x05\xf5\xec\x1a\xad\x0d\x5b\xc5\x30\x00\xba\x10\xcb\x9a\x7b\x9d\xa0\x49\x70\xc5\x3e\x72\xb4\xe6\x4a\x90\x03\xb2\x4b\x35\x54\x86\xb4\xea\x4e\xdc\x9f\xae\xa3\x2c\x43\x4f\x5a\xec\x22\x27\xff\x9d\x08\x0f\xe4\xc8\x7f\x9d\x1d\x7b\x87\x42\x79\xd6\x8f\xcf\x91\xfc\xe8\x72\x04\x11\x01\xc8\xa3\x4b\xfd\xd1\x60\x97\x98\x65\x68\x68\x93\x5f\x35\x9a\x02\x54\x1c\xc5\xe6\x9f\x51\x14\x16\x03\x64\xef\xdf\xfe\x0c\x95\x6d\xf0\xcd\x90\xea\xff\x8e\xf5\x70\x2b\xc0\x62\xc0\xbb\xb4\x25\xb1\x5c\xd8\x79\x3d\x50\x4e\xea\xac\x22\x29\x48\x38\x88\x4f\x54\x00\x5b\xe3\xc0\x4e\x5a\xdf\xa1\xcb\xf1\x78\x8c\xbe\x47\xd7\x19\xa3\xfc\x9e\x8c\xb2\x9a\x3d\xaf\xec\xff\x09\x00\x00\xff\xff\x05\x83\x63\xe3\xa7\x1a\x00\x00")

func templatesViewsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsIndexHtml,
		"templates/views/index.html",
	)
}

func templatesViewsIndexHtml() (*asset, error) {
	bytes, err := templatesViewsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/index.html", size: 6823, mode: os.FileMode(420), modTime: time.Unix(1484479889, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/index.html": templatesViewsIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"index.html": &bintree{templatesViewsIndexHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: AssetInfo, Prefix: k}
	}
	panic("unreachable")
}
