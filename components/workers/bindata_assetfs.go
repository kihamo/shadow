// Code generated by go-bindata.
// sources:
// templates/views/index.html
// public/js/dashboard.js
// DO NOT EDIT!

package workers

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5a\x5f\x6f\xdb\x36\x10\x7f\xcf\xa7\x20\x34\x60\x6d\x1f\x14\x37\x5b\xf7\xb0\xd6\x76\x91\xb5\xc0\x36\xb4\xe8\x43\x3b\xac\xcf\xb4\x78\xb6\x98\xd0\xa2\x40\x52\xb6\x83\xc0\xdf\x7d\x47\x8a\x92\x65\x99\x92\xec\xc5\x6b\xd3\xa1\x79\x88\x65\xf2\x78\xbc\x7f\xbf\xe3\xf1\xe4\xfb\x7b\xc2\x60\xce\x33\x20\x51\x22\x33\x03\x99\x89\xc8\x76\x7b\x31\x66\x7c\x45\x12\x41\xb5\x9e\x44\x4a\xae\xa3\xe9\x05\xc1\xbf\xe6\x68\x22\x45\x2c\x16\xf1\xd5\x4f\x7e\xce\xcd\xa7\x57\xd5\x74\x4e\x17\x10\xa7\x40\x19\xa8\x68\xfa\x59\xaa\x5b\x50\x7a\x3c\x4a\xaf\x3c\xa3\x11\x72\x9a\x5e\xf8\x8f\x23\x77\xdb\xe8\xd6\x6e\x87\xf3\x2f\x1a\xd3\x6d\x92\x9c\x66\x20\x88\xfb\x1f\x2f\x14\x40\xd6\xa2\x0d\xd2\x3b\x15\x78\xb6\x08\xd0\xb6\xe9\x77\x82\x0f\x51\x7a\x61\x7f\xee\x21\x77\x4b\x78\xb5\x60\x4e\xc9\x9c\xc6\x0c\xe8\xdc\x7e\xfe\xb2\x89\xa6\xe3\x11\xef\xd9\xab\x34\xeb\x09\xa2\xfc\x4a\x0c\x6c\x4c\xac\xf8\x22\x35\x43\x52\x35\x56\xa7\xc5\x02\x22\xc2\xd9\x24\x12\x5c\x63\xec\xa0\x8f\xe3\x44\x16\x18\x43\xd3\xe7\x03\x42\x54\xac\xa6\xef\xab\x95\x43\x52\x77\x4f\x77\x4c\x75\x0d\x53\x92\x2a\x98\x4f\xa2\x1f\x6a\xa1\x8f\xf0\x6e\x19\x0d\x73\x29\x8d\x0d\xe8\x6e\x29\x35\x12\xd6\x6b\x0a\x81\x18\x81\x39\x9a\xe3\x6f\x0e\x6b\xf2\x16\x0c\xe5\x02\x15\xb5\x44\xa7\xf0\xf0\x7e\x69\x07\x04\x55\x18\x73\x71\xc2\x55\x22\xa0\xa6\xc1\xc0\x18\xdc\xa0\x19\x00\x02\xa8\x9a\x73\x17\x52\xa7\x1b\x98\xb6\xe0\xb6\x4f\xd7\xfe\xfa\xef\xf1\x7a\x07\x42\x04\xe1\xf5\xa8\x01\x5b\x68\x8c\xad\xc7\x8a\xd8\x75\x99\x93\x4f\xc6\x6b\x9d\xcb\xbf\x34\x5a\xbd\xc0\xdf\xb1\xfa\xc8\xb1\xaa\x80\x7d\x6b\x40\x35\x54\xdf\x3e\x5a\xa0\x3a\xe1\xe2\x35\xe5\xe6\x74\xac\xe2\x22\xe2\xd6\x7f\x79\xb8\xba\x6d\xbf\x83\xf5\xbf\x06\x6b\x4f\x25\xdd\x04\xa5\x2e\x92\x04\xb4\x6e\x15\x6b\x81\x42\xbb\x0b\x9b\x75\x99\x16\x4c\x11\x33\x93\x61\x4d\x2d\x8b\x9c\x34\xcd\xba\xaf\xc2\xac\x30\x46\x66\xc4\xdc\xe5\x80\x0b\xdc\x97\xa8\xb1\x9e\x58\x1e\x78\x15\xa1\x85\x30\xee\x79\xa3\x09\x53\x32\x67\x72\x9d\xc5\x46\x2e\x16\x02\xf1\xc0\xa8\xa1\xfe\xcb\x24\xaa\x66\x23\x42\x15\xa7\x31\x6c\x50\x76\x06\xcc\x3a\x51\x68\x08\xc4\xd2\x75\x62\xb8\xcc\xf4\xa1\xb9\x9b\x71\x91\x50\x05\xce\xdd\x87\xae\x1e\x8f\x4a\xb1\x5b\xa3\x85\xa8\xd6\xd6\xf2\x2e\x21\x2b\x88\x16\x1c\xc5\xb1\x02\x06\x3c\x2c\x3a\x92\x4c\x0d\xa0\x1b\xba\xa2\x3a\x51\x3c\x37\x2f\x57\x92\xb3\xa7\xcf\x9f\xb5\xd4\x5f\x4a\x46\x45\x35\x46\xd5\x02\x0c\xa2\xae\x39\xe8\x9e\x63\xc3\x8d\xa5\x7e\x23\xb3\x39\x57\x4b\xa2\x60\x29\x57\x40\xa8\x10\x64\x17\x06\x4d\xfa\x99\x64\x77\x93\xe8\x33\x47\x82\x19\x04\xc9\x09\x6c\x12\xc8\x0d\xa9\x9c\x55\x4d\x5c\x92\x6b\x05\xe4\x4e\xa2\xe6\x85\x82\xd7\x7b\x5c\x13\xe4\x30\xa3\xc9\x6d\x23\xf8\x3e\x3a\xd6\x4f\x9f\xbd\xea\x43\x7d\x0d\xcc\x85\xb8\xcb\x53\x8e\x57\x54\x52\x3f\xc5\x46\x51\x9d\x96\xc8\x24\x1f\x6b\x41\x3b\x80\x46\x43\x30\x6b\x7b\x61\x3c\x2a\x44\x1f\xcc\xdc\xe3\x01\x5a\xac\xc9\x3a\xee\xa5\x86\xce\x6c\x0a\x01\x9d\x63\xe0\xf1\x55\x3b\x2a\xc7\x6e\x7e\x8f\x98\x94\x4b\x52\xd4\x26\x94\x0f\xc7\xc6\x62\x33\x34\xae\x3a\x02\xca\xa4\xd3\x0f\x74\x09\xe3\x11\x3e\x74\x52\xbc\x51\x40\x0d\xb0\x01\x22\x7b\xfc\x10\x9f\x4a\xfa\x49\xdf\x53\x7d\x24\x65\xc9\x74\x8e\xf9\x7b\x68\x7b\xc7\xf3\x18\x42\x8f\xf3\x30\x11\x8e\x06\x2c\x65\x69\x3b\xec\x6a\xbd\x1b\x5c\x70\x38\x81\x83\xd6\x79\x0f\x49\xd4\x6b\xaa\x32\x9b\x79\x9b\x35\xfa\x09\x69\xda\x57\xe7\xdf\x93\xf4\xd7\x4b\xd2\xcd\xcb\x95\x4e\xfb\x4b\xd7\xde\xf4\x06\x77\x10\xcb\xdc\xf6\xa9\x5c\x86\xfb\x84\xbc\x5c\x22\x76\x95\xd5\x43\xb2\xdc\x79\x74\x4b\xd1\x70\x0f\xd2\x2d\x11\xd2\x46\x80\x53\xee\x0f\x64\x76\x56\xe5\x6a\x6f\xf3\x15\x77\x3d\xc8\x73\x9a\xe1\x2c\xe7\xb0\x06\xe3\x34\xae\x40\x1e\x3e\x2e\xfd\xec\x47\x4b\xfe\x90\xb3\x12\x75\xc1\x2d\x77\xa7\xa5\xdf\xfd\xeb\x84\xd1\x19\xec\x77\x6b\x0b\x14\x4c\x25\xcd\x0a\xe5\x28\x4b\xbe\xc3\x85\xe7\x2a\x3a\xde\x39\x21\xce\x62\xc5\xaf\x1c\xaf\x15\xa8\x29\x0b\x5d\xde\x8f\xb3\x4c\x2e\x0a\xed\x0d\x73\xcd\x98\xf7\xc6\x37\x5e\x8d\x9d\xab\x02\xfb\xf3\xed\x19\xea\xaf\x4f\x86\x9a\x62\xa0\x9c\xfa\x0b\xf3\xe7\xff\xb7\x3a\x62\x34\x5b\x20\x38\x76\x7d\x91\xe1\xd2\x28\xd8\x03\xf9\x06\x6b\x78\xeb\x58\x32\x14\x46\x8e\x28\x1b\xac\xf6\x1d\x59\xd2\x17\x72\x8f\x30\x0e\x5c\xde\xc2\xfa\x9f\xb5\x1a\xd8\x36\x65\x59\x83\x73\xac\x2b\x37\x93\x28\xbe\x8a\x88\x92\xae\xf4\xe4\x54\xc8\x85\x2f\x3c\xb1\x5a\x61\x90\xa1\x7f\x54\x01\x81\xa0\x29\x0f\x0b\xbf\x22\x1c\x06\xfe\x3c\xf1\x2f\x49\xbb\x7b\xa1\x25\x5d\xf5\xea\xf3\xd0\x24\x7d\x25\x76\x59\x12\x95\xb9\x99\x71\xbd\xe4\x35\xc3\xa0\x1a\x3f\x1a\xbe\x04\xfd\x2a\x5c\xf2\xba\xcd\xd2\x17\xfb\x62\xb9\x53\x34\x9a\xee\xf2\xb3\x7d\x29\xfb\xa2\xb7\xd9\x14\xd6\xaf\x85\x97\x9a\x70\x2e\xd5\x72\xb8\xe9\x67\xa9\xca\xbb\x48\xdf\x69\x23\xe8\x0c\x91\x8f\xb4\x7b\xce\xf6\x5d\xd0\x5d\x9b\x35\x33\xca\xbe\x8b\xb6\xc4\xd1\xf4\x43\xb1\x9c\x81\x22\x19\xac\x2b\x05\x5f\xe2\xc1\x62\xe7\xfa\x8e\xb5\x2c\x2f\x8c\xf7\x48\xe6\x18\x44\x64\xc9\xd1\xcc\x57\xd1\x9e\xc4\x7e\xaf\x83\xf8\xab\x1a\xb3\xa7\xf5\xf8\x0e\x4d\x75\x94\xe5\x3b\x5b\xa5\xa7\x5c\xde\xc2\x31\x36\x7d\x63\xe3\xaf\x27\x9c\xf6\x76\xd0\xc5\x6c\xc9\xcd\xc1\x0e\x75\xab\x31\xb8\x03\x46\x5e\xc7\x0d\xed\xc8\x16\xe7\xfd\x3d\x01\x2c\xfb\xb6\xdb\x8b\x8b\xc6\x6f\x17\x6e\x74\xf9\xb3\x85\xb2\xf2\xf1\x02\xd2\x3c\x17\x3c\xa1\xf6\xb8\x1b\xed\xca\x22\x6f\xb9\x15\x55\x55\x07\xab\xea\x6d\xda\x36\x09\x99\x90\x27\xc8\xf7\x32\x34\xb5\xdd\x3e\x79\x85\x62\x94\x6c\xa6\xf5\x66\x5a\x25\x93\x68\xe4\xc3\x61\x74\xa3\x47\x0c\x2b\xc4\x99\xa4\x8a\x5d\xde\xe8\xd7\xab\x89\x65\x77\xbd\x13\xe5\xf2\x77\x30\xbf\x15\x5c\x58\x1d\xdc\x15\xd6\xb3\xab\x15\xfb\x27\x00\x00\xff\xff\xc1\x3d\x92\xd9\x93\x21\x00\x00")

func templatesViewsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsIndexHtml,
		"templates/views/index.html",
	)
}

func templatesViewsIndexHtml() (*asset, error) {
	bytes, err := templatesViewsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/index.html", size: 8595, mode: os.FileMode(420), modTime: time.Unix(1499959754, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _publicJsDashboardJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x59\x6d\x6f\xdb\x38\x12\xfe\x9e\x5f\xc1\x73\x0b\x48\xbe\xd6\x72\x7a\x77\xbd\x0f\x7e\x49\xb1\x48\x17\x8b\x62\x83\xdd\x45\x1b\xa0\x1f\xda\x22\xa0\x24\xda\xe6\x5a\x96\x0c\x91\x8a\x6b\xb4\xf9\xef\x3b\x43\x89\x7a\xa5\x64\xd6\x48\xb1\xc5\x0a\x48\x2c\x53\x33\x8f\x66\x86\x33\xcf\x90\xf4\x2a\x8b\x03\xc9\x93\x98\xac\x99\x7c\x9f\xa4\x5b\x96\xbe\x93\x54\x66\xe2\x37\xba\x63\xae\x50\xb7\x63\xf2\xe5\x82\xc0\x25\x0e\x5c\x06\x9b\xd6\x20\x5e\x01\x15\x8c\x5c\xce\xca\xef\x78\xa5\x4c\x66\x69\x4c\x9c\x03\xe5\xd2\x99\x37\x1e\xf9\x29\xa3\xdb\x79\x53\xfb\x85\x59\x7b\x9f\x26\x01\x13\xc2\x02\xe0\x3f\x66\x00\x3f\x13\xc7\x61\xed\x90\xad\x68\x16\x49\xb3\x7a\x16\x6f\xe3\xe4\x10\xf7\x23\x3c\x5c\x3c\x5c\x5c\xd4\x63\x78\x4b\xc5\xf6\x1f\x15\x41\x91\x05\x96\x00\xff\x35\x03\xac\x28\x8f\x2c\xb4\xff\xd7\xaf\x4d\xfc\x23\x91\x7c\xc7\x92\xcc\x26\x10\x2f\xcd\x40\x5b\x1e\xd9\x98\xf1\xff\xfe\x49\x80\x2f\x7b\x46\x4f\x98\xf0\x98\xe9\x94\xed\x43\x2a\x99\xab\x13\xe5\xa9\x47\xff\xa4\x9f\xdd\x2a\x6b\xe4\x71\xcf\x66\xc4\xf9\xe5\xe7\x5b\xe7\x79\x39\x98\xa5\x11\x8c\x4d\x0f\xaa\x96\xc5\x14\x55\xa6\xaf\xa8\x02\x5c\x62\xe2\x89\x9a\x6c\x31\xb7\x33\xa2\x5f\xe9\xa6\xe3\x2f\x0d\xdb\xee\x69\x4a\xe4\x0d\x59\x92\xa7\xae\xf3\x24\xe2\x42\xb2\x18\x50\x89\xf4\x93\xf0\xe8\x8c\x3d\xb6\xdb\xcb\xa3\x3b\x9e\x77\x75\xde\x17\x3a\x85\x1d\x16\x1a\xb7\x85\x86\x84\x0a\x32\xc8\x77\x14\x2a\x6b\x96\x24\xf5\xca\x6f\x77\x41\x92\xc5\x92\x7c\xfd\x4a\x2e\xbb\x2f\xd1\xd6\xa0\x46\x71\x3f\x28\xaf\x6c\xb9\x53\x93\xbf\xc4\xe7\x0d\x01\xbe\x22\xee\x4f\x69\x4a\x8f\x1e\x17\xea\xd3\xad\x99\x31\xae\x97\xb7\xbe\x56\x49\x4a\x5c\xc4\xe5\x84\xc7\x75\xa3\x4d\xc2\x6d\x3f\x9b\x6e\x7e\xe0\x9f\x5a\xe6\x34\x74\xae\x41\xda\x59\xc8\xf4\xca\x31\xca\x3c\xc3\x87\xe1\x95\x03\x37\x1a\xd1\x8b\x81\xaf\xd4\x83\x29\x3e\x39\xa5\x86\x99\x79\x9b\xbc\x93\x29\x8f\xd7\x6e\x89\x11\x40\x2a\x4b\x16\xde\x51\x39\xb6\x87\xaa\xb4\x71\x26\xee\x30\xe6\x77\x45\x66\xda\x83\x54\x36\x44\x54\x34\x41\xc0\x1a\xf2\xaa\xc7\x60\x93\xf0\x98\x40\x01\x39\x35\x07\xc8\x39\x1e\x20\x71\xb1\xf0\x1c\x07\xba\x20\x7d\xd6\x77\x24\x3b\xa6\x1b\xdf\x3a\x37\x8e\x1a\x07\x31\xc7\x9b\x19\xf2\xaf\xa5\xe6\xb8\x9b\x62\x1c\x1b\x5d\x5f\x02\xe3\x05\xc9\xf8\x6c\x99\x3b\xba\x08\xf9\x3d\x09\x20\xe8\x62\x39\xf2\x65\x3c\x59\xa7\x49\xb6\x27\xe5\xdd\x44\xec\x46\x3d\x36\xd7\x23\xe6\x67\x52\x02\x3d\x22\xfd\x01\x8c\xfa\x32\xaa\xa1\x2a\xbc\x90\xc6\x6b\xa8\x19\xbc\xe5\x01\x08\x6b\x27\x26\x29\xdb\x25\xf7\x6c\x84\x11\xa5\x13\x99\xac\xd7\x11\x80\xec\x92\x90\x46\x7a\x8c\xa6\xd0\xc7\x97\xa3\x27\xf5\x41\x75\x3f\x91\x5c\xa2\xf4\x75\x12\xaf\x78\xba\x23\x39\x54\x55\xa0\xc6\x72\x6a\x00\x04\x34\x8a\x7c\x1a\x6c\x97\xa3\xb2\x90\xdf\x2a\x10\xf7\xa3\x63\xd4\xfe\xe8\x8c\xe7\xa3\xab\x05\xd7\xee\xad\xa3\xe3\x7e\xa3\x1c\x2a\xef\x26\x32\xa5\x62\x33\x22\x85\x71\x39\x1e\xe8\x4c\x39\xfc\xe5\xd1\xb1\x88\xe9\x14\x66\xe6\x6a\x20\x67\x1e\x08\x8b\xa0\x3d\xda\xcd\xb2\x82\x31\x67\xd9\x83\x7d\xee\x69\xc4\x29\xd2\xd8\x37\xe4\xac\xbc\xf1\xe8\x7e\xcf\xe2\xd0\x8d\xae\xc7\x5d\xbd\xae\x05\x3d\x9d\xc4\x8b\x58\xbc\x96\x9b\x8b\xa6\xf2\xc9\x16\x50\xf4\x15\xab\x06\xa0\x65\x07\xe8\x3f\x17\xa9\x77\x2c\x45\xfd\x7d\xe2\x48\x06\x20\x9c\x8b\x7a\xf8\xad\x5f\xf6\x00\x5d\x62\xa0\x49\xe0\x55\x23\xa8\x02\x92\x9f\xe2\xb4\x96\x5a\x83\xb9\x0a\x8c\xa2\x4d\x9c\xe2\xa9\x16\x92\x69\x87\x52\x00\xea\x15\x75\x89\xd7\xd3\x1b\x71\xbe\x30\x26\x43\x74\x75\xa8\x25\xb2\x0d\xd3\xe8\x56\x85\xf7\x01\x4f\x83\x88\xa9\x49\x98\x88\x4d\x72\x28\x29\x45\x40\xc9\xa3\x0f\x78\x57\x84\xf0\x54\x59\xb3\x23\x9b\x24\x90\xc6\xad\x52\x1e\x2c\xae\x53\x45\x7a\xb0\x2d\x52\xe3\xf0\xe1\xb1\x88\xdc\x96\xc4\x79\xbc\x4a\x2a\x0a\xcf\xe7\x1a\x08\x5c\x30\xf9\x48\xfc\x0d\x48\xba\xc0\x9e\x74\x72\xbc\x87\xb9\x8b\x2a\x7c\x8b\xca\x05\x6d\x37\xd4\x6c\x28\x3b\x65\x2b\x78\x79\x9d\xb4\xd1\x27\x5b\xce\x3e\xb7\x07\x16\x01\xc4\x9d\xd0\xa3\xc4\x0f\x81\xce\x0d\xdf\xaf\xa0\x7b\x6e\xf4\x9a\x0d\x0f\x91\xbe\x29\x74\xa7\x5a\x5d\x29\x97\xf7\x1d\x73\x8f\x79\xaf\x7b\xcc\xe1\xba\xbd\x39\xd1\x97\x0d\xd9\x54\x38\x83\x1d\xfa\x04\x4b\x6b\x8b\x65\x48\x82\x24\x12\x7b\x1a\x2f\x47\x2f\x47\x44\xc8\x23\x06\x28\xe4\x62\x1f\xd1\xe3\x2c\x4e\x62\x58\xf7\xf0\x70\x39\x52\xfc\x84\xa1\xe7\x39\x11\x9d\x46\xce\x22\x3d\x21\xd8\x1e\xf3\x22\xb7\xd1\x8b\x78\x57\x6f\xc2\x25\x03\x7a\x58\xa0\x9d\xfa\xe9\x3e\x8b\xa2\x49\xca\xd7\x1b\x49\x24\xfb\x2c\x27\xbb\x0c\xfa\x03\x11\x3b\xaa\xe6\x96\xed\xae\x5a\xe4\xb9\x98\xc2\xd8\x62\x8a\x10\x00\x24\xd3\x24\x5e\x5f\xbd\x79\x0d\x03\xf9\xed\xc2\x4f\xc9\x14\x9e\x47\xfc\x6f\xb1\xb1\xda\x4a\x75\xad\xc4\xb6\xf5\x03\xd8\xd9\x3d\xaa\x52\x96\x37\x1a\x69\xd7\xf8\x5c\xfc\x07\x30\x3f\x66\x07\xf2\x1a\x0f\x47\x94\xd5\x7a\x3d\xe1\xc9\xe4\x26\x01\xaa\x61\xc5\x72\xa3\xd7\x0f\x54\x3d\xcf\x8b\x69\x16\xd9\x48\x0d\x92\x4b\x25\x35\x54\xd4\x63\xcb\xf5\x73\x77\xc4\x70\xca\x71\xe6\x5a\xb6\x3a\xff\xb0\x5a\xce\xd6\xc4\x07\x56\xb4\xc5\x12\xb5\x2e\xde\xbb\xa4\x95\xb7\x9a\x1f\xed\x17\xaa\x0d\x9a\xb0\x5d\x5c\xb6\xea\xf6\xac\xd5\x6d\x23\x17\x2d\x71\x54\x0e\x58\xed\x52\x1a\x67\x51\xf5\xe0\x59\xcc\x6d\xe3\xf4\x6e\xa2\x8e\x0d\x1c\xa8\x16\x28\x2f\xb7\x3a\x83\x9a\x77\x54\x8a\xe4\x69\x2a\xe8\x3d\x4b\x57\x5c\x99\x94\x2f\x12\xb4\x70\xcd\x68\xf0\x96\xa8\x1b\x35\xd6\xf6\xb9\xd2\x47\x99\xe6\x1b\x6b\x69\x35\xef\xfa\xa5\xb3\xdd\x2b\x57\xdd\xa0\x17\x44\x3c\xd8\xba\xe5\x49\xaa\x6b\xca\x47\xcc\x45\xa6\x0e\x1d\xe5\x86\xb7\xfd\xd1\x02\x3e\x08\x30\x6f\xc5\x31\x03\xb9\x69\xa2\xf2\xf4\x47\x21\x5c\xee\xb8\x0e\x5a\x61\x92\xeb\x0c\x60\xbd\xf9\xde\x86\x8a\x6b\xe4\x3d\xd7\xe9\xae\xfc\x1d\x63\xd1\xe1\xe5\x7b\xf9\xd9\xc3\x80\xaa\xb9\x9e\x7c\x8f\x86\xa1\x51\x2b\x88\x12\xc1\xfa\xd4\xf4\xec\xe4\x8b\x86\xb1\x87\x51\x76\x9d\x15\x15\xd2\x98\xbb\x43\xdb\x90\x41\xd3\x07\x8d\xe8\xb7\x7d\xc8\xe3\xb6\xe9\x1b\x1e\xb2\x01\xd3\x9b\x55\x54\x93\xc8\x9f\xe0\x48\xfd\x88\xbe\xbe\x9a\xe5\xe1\xa9\x93\xfa\x3f\x7e\x7f\x67\x7b\x54\xaf\x4b\x4f\xfd\x6c\x51\xa9\x60\x8e\xcd\x5a\x91\xe5\xe1\x0c\xfe\x2a\x43\x0d\xe7\xfb\xf9\x2f\x09\x43\x1e\xe4\xdb\x99\xef\xe2\x82\xda\x66\x7d\x57\x1f\xda\x87\x69\x8f\xea\x46\xc5\x9b\x79\xe2\x7e\x0f\x4f\x9e\x96\x54\x55\x32\x95\xfe\xf1\x27\xcf\xc0\xdc\x99\x1a\x25\x5b\xf0\x9c\x99\x1c\x67\xc0\x38\x2e\xf7\xba\x05\x34\x2e\xe1\x8a\x77\x3e\x68\xb6\xad\xbf\x17\xcb\xe7\xf1\xde\xab\xea\xdd\xee\xc5\x50\xfb\x24\xdf\xde\x7d\x50\x9b\x5e\x91\xf9\x3b\x2e\x3f\x9d\xb2\xa5\x3d\xff\xfd\x39\x60\x9b\xce\x60\x48\x4b\xcb\x94\x06\x78\xa9\x26\x36\x6b\x7b\x51\xf6\xb6\x7b\x1a\xb9\xcd\x45\xde\x43\x13\xd7\x94\x30\x3a\x3e\xf5\x4f\xf5\x6f\x3a\x25\x2f\x2e\x89\x60\x10\xda\x50\xa8\x11\xa8\xba\x37\xb1\x64\x29\xbe\x27\x47\x78\x0e\x22\x97\x97\xe4\xdf\xf0\x81\x79\x37\x9e\xff\x15\x00\x00\xff\xff\xd2\xe1\x21\xf5\xfe\x1f\x00\x00")

func publicJsDashboardJsBytes() ([]byte, error) {
	return bindataRead(
		_publicJsDashboardJs,
		"public/js/dashboard.js",
	)
}

func publicJsDashboardJs() (*asset, error) {
	bytes, err := publicJsDashboardJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "public/js/dashboard.js", size: 8190, mode: os.FileMode(420), modTime: time.Unix(1499959907, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/index.html": templatesViewsIndexHtml,
	"public/js/dashboard.js": publicJsDashboardJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"public": &bintree{nil, map[string]*bintree{
		"js": &bintree{nil, map[string]*bintree{
			"dashboard.js": &bintree{publicJsDashboardJs, map[string]*bintree{}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"index.html": &bintree{templatesViewsIndexHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: AssetInfo, Prefix: k}
	}
	panic("unreachable")
}
