// Code generated by go-bindata.
// sources:
// templates/views/index.html
// public/js/dashboard.js
// DO NOT EDIT!

package workers

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5a\x51\x6f\xdb\x36\x10\x7e\xcf\xaf\x20\x34\x60\x6d\x1f\x14\x37\x5b\xf7\xb0\xd6\x76\x91\xb5\xc0\x36\x74\xe8\x43\xbb\xad\xcf\xb4\x78\x96\x98\xd0\xa2\x40\x52\xb6\x83\xc0\xff\x7d\x47\x8a\x92\x65\x99\x92\xed\xc5\x6b\xd3\xa1\x7d\x68\x64\xf1\x78\xbc\x3b\x7e\xdf\xf1\x78\xf6\xfd\x3d\x61\x30\xe7\x39\x90\x28\x91\xb9\x81\xdc\x44\x64\xb3\xb9\x18\x33\xbe\x24\x89\xa0\x5a\x4f\x22\x25\x57\xd1\xf4\x82\xe0\xbf\xf6\xdb\x44\x8a\x58\xa4\xf1\xd5\x0f\x7e\xcc\x8d\x67\x57\xf5\x70\x41\x53\x88\x33\xa0\x0c\x54\x34\xfd\x24\xd5\x2d\x28\x3d\x1e\x65\x57\x5e\xd1\x08\x35\x4d\x2f\xfc\x9f\x23\x57\x5b\xeb\xce\x6a\xfb\xe3\x2f\x5a\xc3\x5d\x91\x82\xe6\x20\x88\xfb\x3f\x4e\x15\x40\xde\x91\x0d\xca\x3b\x17\x78\x9e\x06\x64\xbb\xf2\x5b\xc3\x0f\x49\x7a\x63\x7f\x1c\x10\x77\x53\x78\x3d\x61\x4e\xc9\x9c\xc6\x0c\xe8\xdc\xfe\xfd\x69\x1d\x4d\xc7\x23\x3e\xb0\x56\x15\xd6\x13\x4c\xf9\x99\x18\x58\x9b\x58\xf1\x34\x33\x87\xac\x6a\xcd\xce\xca\x14\x22\xc2\xd9\x24\x12\x5c\x23\x76\x70\x8f\xe3\x44\x96\x88\xa1\xe9\xf3\x03\x46\xd4\xaa\xa6\x7f\xd4\x33\x0f\x59\xdd\x3f\xdc\x33\xd4\xf7\x9a\x92\x4c\xc1\x7c\x12\x7d\xd7\x18\x7d\xc4\xee\x56\x68\x98\x4b\x69\x2c\xa0\xfb\xad\xd4\x28\xd8\xcc\x29\x05\x72\x04\xe6\x18\x8e\xbf\x39\xac\xc8\x5b\x30\x94\x0b\x74\xd4\x0a\x9d\xa2\xc3\xef\x4b\x17\x10\x54\x21\xe6\xe2\x84\xab\x44\x40\x23\x83\xc0\x38\xb8\x40\x1b\x00\x02\xa8\x9a\x73\x07\xa9\xd3\x03\x4c\x3b\x74\xdb\x95\xeb\x7e\xfc\xf7\x7c\xbd\x03\x21\x82\xf4\x7a\xd4\x84\x2d\x35\x62\xeb\xb1\x32\x76\x55\xe5\xe4\x93\xf9\xda\xe4\xf2\xcf\xcd\x56\x6f\xf0\x37\xae\x3e\x72\xae\x2a\x60\x5f\x1b\x51\x0d\xd5\xb7\x8f\x96\xa8\xce\xb8\x78\x45\xb9\x39\x9d\xab\x38\x89\xb8\xf9\x9f\x9f\xae\x6e\xd9\x6f\x64\xfd\xaf\xc9\x3a\x50\x49\xb7\x49\xa9\xcb\x24\x01\xad\x3b\xc5\x5a\xa0\xd0\xee\xe3\x66\x53\xa6\x05\x53\xc4\xcc\xe4\x58\x53\xcb\xb2\x20\xed\xb0\xee\xba\x30\x2b\x8d\x91\x39\x31\x77\x05\xe0\x04\xf7\x21\x6a\xcd\x27\x56\x07\x5e\x45\x68\x29\x8c\x7b\x5e\x6b\xc2\x94\x2c\x98\x5c\xe5\xb1\x91\x69\x2a\x90\x0f\x8c\x1a\xea\x3f\x4c\xa2\x7a\x34\x22\x54\x71\x1a\xc3\x1a\x6d\x67\xc0\xec\x26\x0a\x0d\x01\x2c\x5d\x27\x86\xcb\x5c\xef\x87\xbb\x8d\x8b\x84\x2a\x70\xdb\xbd\xbf\xd5\xe3\x51\x65\x76\xe7\x6d\x29\xea\xb9\x8d\xbd\x0b\xc8\x4b\xa2\x05\x47\x73\xac\x81\x81\x1d\x16\x3d\x49\xa6\x21\xd0\x0d\x5d\x52\x9d\x28\x5e\x98\x97\x4b\xc9\xd9\xd3\xe7\xcf\x3a\xee\x2f\x24\xa3\xa2\x7e\x47\x55\x0a\x06\x59\xd7\x7e\xe9\x9e\x63\xc3\x8d\x95\x7e\x23\xf3\x39\x57\x0b\xa2\x60\x21\x97\x40\xa8\x10\x64\x0b\x83\xb6\xfc\x4c\xb2\xbb\x49\xf4\x89\xa3\xc0\x0c\x82\xe2\x04\xd6\x09\x14\x86\xd4\x9b\x55\x0f\x5c\x92\x6b\x05\xe4\x4e\xa2\xe7\xa5\x82\xd7\x3b\x5a\x13\xd4\x30\xa3\xc9\x6d\x0b\x7c\x1f\x9c\xea\xa7\xcf\x5e\x0d\xb1\xbe\x21\x66\x2a\xee\x8a\x8c\xe3\x15\x95\x34\x4f\xb1\x51\x54\x67\x15\x33\xc9\x87\xc6\xd0\x1e\xa2\xd1\x10\xcd\xba\xbb\x30\x1e\x95\x62\x88\x66\xee\x71\x8f\x2d\x36\x64\x3d\xf7\x52\x43\x67\x36\x85\x80\x2e\x10\x78\x7c\xd9\x45\xe5\xd8\x8d\xef\x08\x93\x6a\x4a\x86\xde\x84\xf2\xe1\xd8\x58\x6e\x86\xde\xab\x1e\x40\x99\x6c\xfa\x9e\x2e\x60\x3c\xc2\x87\x5e\x89\x37\x0a\xa8\x01\x36\x2c\xf4\x57\xc1\x0e\x0b\x79\x92\x85\x85\xf0\x6d\xc0\x4c\x2b\xdb\xe3\x94\x0d\x6d\x70\xc2\xfe\x00\xbe\xb4\x91\x7b\x48\x96\x5c\x51\x95\xdb\xb4\xd7\x2e\x90\x4f\xc8\x91\xbe\x34\xfe\x96\x21\xbf\x5c\x86\x6c\xdf\x6c\x74\x36\x5c\x37\x0e\xe6\x16\xb8\x83\x58\x16\xb6\x49\xe4\xd2\xcb\x47\xd4\xe5\xb2\xa0\x2b\x6b\x1e\x92\x62\xce\xe3\x5b\x86\x81\x7b\x90\x6f\x89\x90\x16\x01\xce\xb9\xdf\x50\xd9\x59\x9d\x6b\x76\x9b\x2f\xb9\x6b\x00\x9e\x33\x0c\x67\x39\x04\x35\x18\xe7\x71\x4d\xf2\xf0\x59\xe5\x47\x3f\x58\xf1\x87\x1c\x54\xe8\x0b\x2e\xb9\x3d\xaa\xfc\xea\x5f\x06\x46\x67\x88\xdf\xad\xad\x0e\x30\x95\xb4\xcb\x83\xa3\x22\xf9\x0e\x27\x9e\xeb\xc4\x7f\xe7\x8c\x38\x4b\x14\xbf\x30\x5e\x6b\x52\x53\x16\xba\x39\x1f\x17\x99\x42\x94\xda\x07\xe6\x9a\x31\xbf\x1b\x5f\x79\x29\x74\xae\xf2\xe7\xf7\xb7\x67\x28\x7e\x3e\x1a\x6a\xca\x9e\xb2\xa6\x96\xf9\x13\xf3\xe7\xff\xb7\x3a\x62\x34\x4f\x91\x1c\xdb\xa6\xc4\xe1\xd2\x28\xd8\x80\xf8\x0a\x0b\x68\xbb\xb1\xe4\x10\x8c\x9c\x50\x7e\xb0\xd4\x76\x62\xc9\x10\xe4\x1e\x21\x0e\x5c\xde\x22\x73\xca\x3a\xdd\x63\x9b\xb2\x6c\xc0\x39\xd6\x95\xeb\x49\x14\x5f\x45\x44\x49\x57\x7a\x72\x2a\x64\xea\x0b\x4f\xac\x56\x18\xe4\xb8\x3f\xaa\x84\x00\x68\xaa\xc3\xc2\xcf\x08\xc3\xc0\x9f\x27\xfe\x1b\xca\xfe\x46\x64\x25\x57\x7f\xef\xb8\x1f\x92\xa1\x12\xbb\x2a\x89\xaa\xdc\xcc\xb8\x5e\xf0\x46\x61\xd0\x8d\xef\x0d\x5f\x80\x7e\x15\x2e\x79\xdd\x62\xd9\x8b\x5d\xb3\xdc\x29\x1a\x4d\xb7\xf9\xd9\x7e\x23\xfa\x62\xb0\xd3\x13\xf6\xaf\xc3\x97\x46\x70\x2e\xd5\xe2\x70\xc7\xcd\x4a\x55\x77\x91\xa1\xd3\x46\xd0\x19\x32\x1f\x65\x77\x36\xdb\xb7\x20\xb7\x3d\xce\xdc\x28\xfb\x45\xb0\x15\x8e\xa6\xef\xcb\xc5\x0c\x14\xc9\x61\x55\x3b\xf8\x12\x0f\x16\x3b\x36\x74\xac\xe5\x45\x69\xfc\x8e\xe4\x4e\x41\x44\x16\x1c\xc3\x7c\x15\xed\x58\xec\xd7\xda\xc3\x5f\xdd\x15\x3d\xad\xc1\xb6\x1f\xaa\xa3\x22\xdf\xdb\xa7\x3c\xe5\xf2\x16\xc6\xd8\xf4\x8d\xc5\xdf\x00\x9c\x76\x56\xd0\xe5\x6c\xc1\xcd\xde\x0a\x4d\x9f\x2f\xb8\x02\x22\xaf\xe7\x86\x76\x64\x7f\xf1\xfe\x9e\x00\x96\x7d\x9b\xcd\xc5\x45\xeb\x87\x03\x37\xba\xfa\xcd\x40\x55\xf9\x78\x03\x69\x51\x08\x9e\x50\x7b\xdc\x8d\xb6\x65\x91\x8f\xdc\x92\xaa\xba\x7d\x54\x37\x16\x6d\x8f\x82\x4c\xc8\x13\xd4\x7b\x19\x1a\xda\x6c\x9e\xbc\x42\x33\x2a\x35\xd3\x66\x31\xad\x92\x49\x34\xf2\x70\x18\xdd\xe8\x11\xc3\x0a\x71\x26\xa9\x62\x97\x37\xfa\xf5\x72\x62\xd5\x5d\x6f\x4d\xb9\xfc\x15\xcc\x2f\x25\x17\xd6\x07\x77\x85\xf5\xea\x1a\xc7\xfe\x09\x00\x00\xff\xff\xe1\xa6\x2b\x59\x10\x21\x00\x00")

func templatesViewsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsIndexHtml,
		"templates/views/index.html",
	)
}

func templatesViewsIndexHtml() (*asset, error) {
	bytes, err := templatesViewsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/index.html", size: 8464, mode: os.FileMode(420), modTime: time.Unix(1499778544, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _publicJsDashboardJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x59\x6f\x6f\xdb\x36\x13\x7f\x9f\x4f\xc1\xc7\x2d\x20\xf9\x69\x2d\xa5\xdb\xba\x17\x76\x9c\x61\x48\x87\xa1\x58\xb0\x0d\x6d\x80\xbe\x68\x8b\x82\x92\x68\x9b\x33\x2d\x19\x24\x15\xd7\x68\xf3\xdd\xc7\xa3\x44\xfd\xa5\x64\x36\x4b\xb1\x62\x02\x52\x53\xd4\xdd\x4f\x77\xc7\xbb\x1f\x4f\xec\x2a\x4f\x63\x49\xb3\x14\xad\x89\x7c\x93\xf1\x2d\xe1\xaf\x25\x96\xb9\xf8\x1d\xef\x88\x2f\xf4\x70\x8a\x3e\x9d\x21\x75\x89\x03\x95\xf1\xa6\x33\x09\x57\x8c\x05\x41\xe7\xf3\xea\x1e\x2e\x4e\x64\xce\x53\xe4\x1d\x30\x95\xde\xa2\xf5\x28\xe2\x04\x6f\x17\x6d\xed\x67\x76\xed\x3d\xcf\x62\x22\x84\x03\xc0\x77\x76\x80\x28\x17\xc7\x71\xed\x84\xac\x70\xce\xa4\x5d\x3d\x4f\xb7\x69\x76\x48\x87\x11\xee\xce\xee\xce\xce\x9a\x31\xbc\xc1\x62\xfb\x9f\x8a\xa0\xc8\x63\x47\x80\xef\xed\x00\x2b\x4c\x99\x83\xf6\x0f\xc3\xda\x28\x3a\x22\x49\x77\x24\xcb\x5d\x02\xf1\xdc\x0e\xb4\xa5\xcc\xc5\x8c\x1f\x87\x17\x41\xdd\xec\x09\x3e\x61\xc2\x43\xa6\x53\xbe\x4f\xb0\x24\xbe\x49\x94\xc7\x01\xfe\x0b\x7f\xf4\xeb\xac\x91\xc7\x3d\x99\x23\xef\xd7\x5f\x6e\xbc\xa7\xd5\x64\xce\x99\x9a\x0b\x0f\xba\x96\x45\x08\x2a\xe1\x4f\x58\x03\x2e\x21\xf1\x44\x43\xb6\x5c\xdb\x39\x32\xaf\xf4\xf9\xf4\x53\xcb\xb6\x5b\xcc\x91\xbc\x46\x4b\xf4\xd8\xf7\x1e\x31\x2a\x24\x49\x15\x2a\x92\x51\x96\x1c\xbd\x69\x40\x76\x7b\x79\xf4\xa7\x8b\xbe\xce\x9b\x52\xa7\xb4\xc3\x41\xe3\xa6\xd4\x90\xaa\x82\x2c\xf2\x3d\x85\xda\x9a\x25\xe2\x41\x75\xf7\x21\xce\xf2\x54\xa2\xcf\x9f\xd1\x79\xff\x25\xc6\x1a\xd0\x28\xc7\xa3\xf2\xda\x96\x0f\x7a\xf1\x97\xf0\xbc\x25\x40\x57\xc8\xff\x99\x73\x7c\x0c\xa8\xd0\xbf\x7e\xc3\x8c\x69\xb3\xbc\xcd\xb5\xca\x38\xf2\x01\x97\x22\x9a\x36\x8d\xb6\x09\x77\xfd\x6c\xbb\xf9\x96\xbe\xef\x98\xd3\xd2\xb9\x52\xd2\xde\x85\xe4\x97\x9e\x55\xe6\x09\x3c\x4c\x2e\x3d\x35\x30\x88\x41\xaa\xf8\x4a\x3f\x08\xe1\xc9\x29\x35\xc8\xcc\x9b\xec\xb5\xe4\x34\x5d\xfb\x15\x46\xac\x52\x59\x92\x64\xfa\x4f\x71\x8a\xcc\x6f\xe2\x2c\xac\x40\xd6\x49\x58\x97\xb6\x57\xff\x5b\x9a\xba\xbc\x2e\xe7\x81\x9c\x87\x82\x0e\x97\x0a\xe0\x93\x65\x61\xe5\x45\x42\x6f\x51\xcc\xb0\x10\xcb\x49\x24\xd3\xd9\x9a\x67\xf9\x1e\x55\xa3\x99\xd8\x4d\x06\xdc\x6c\xba\x1b\xe5\x52\xaa\x92\x86\x92\x55\x30\xfa\x66\xd2\x40\xd5\x78\x09\x4e\xd7\x6a\x9d\x61\x48\x63\x25\x6c\x9c\x98\x71\xb2\xcb\x6e\xc9\x04\x82\x85\x67\x32\x5b\xaf\x99\x02\xd9\x65\x09\x66\x66\x0e\x73\xb5\xf7\x2c\x27\x8f\x9a\x93\x7a\x3c\x93\x54\x82\xf4\x55\x96\xae\x28\xdf\xa1\x02\xaa\x4e\x2a\x6b\x0a\xb4\x00\x62\xcc\x58\x84\xe3\xed\x72\x52\x25\xdf\x2b\x0d\xe2\xbf\xf3\xac\xda\xef\xbc\xe9\x62\x72\x79\x41\x8d\x7b\x6b\x76\xdc\x6f\xb4\x43\xd5\x68\x26\x39\x16\x9b\x09\x2a\x8d\x2b\xf0\x94\x4e\x48\xd5\x5f\x11\x1d\x87\x98\x86\x6a\x65\x2e\x47\xd2\xec\x0e\x11\xa6\x28\xdd\x6d\x95\x47\xb2\xec\xce\x3d\xf7\x0c\x62\x08\xa5\xf7\x05\x39\x2b\xaf\x03\xbc\xdf\x93\x34\xf1\xd9\xd5\xb4\xaf\xd7\xb7\x60\x80\xfd\x02\x46\xd2\xb5\xdc\x9c\xb5\x95\x4f\xd2\x56\xc9\x85\x4e\xa4\x65\x64\x47\x28\xab\x10\x69\xb2\xac\xa6\xab\x21\x71\x60\x59\x25\x5c\x88\x06\x70\x37\x2c\x7b\x50\xcc\x36\x42\x6c\x70\x35\xd8\xa5\x84\xa4\xc9\x09\x42\xea\xa8\xb5\x48\xa9\xc4\x70\xa4\xb6\x0e\x92\xad\xab\x2e\x01\x4d\x17\xd8\xa0\xb8\x41\x3a\x83\x98\x8c\xd1\xd5\xa1\x91\xc8\x2e\x4c\x53\x6e\xfc\x7a\x1c\x53\x1e\x33\xa2\x17\x61\x26\x36\xd9\xa1\xa2\x14\xa1\x4a\x1e\x7c\x80\x51\x19\xc2\x53\x65\x4d\x8e\x64\x96\xa9\x34\xee\x94\xf2\x68\x71\x9d\x2a\xd2\x83\x6b\x91\x5a\xa7\x0f\x0f\x45\xe4\xae\x24\x4e\xd3\x55\x56\x53\x78\xb1\xd6\x8a\xc0\x05\x91\x0f\xc4\xdf\x0a\xc9\x14\xd8\xa3\x5e\x8e\x0f\x30\x77\x59\x85\xaf\x40\xb9\xa4\xed\x96\x9a\x0b\x65\x73\xb2\x52\x2f\x6f\x92\x36\xf8\xe4\xca\xd9\xf7\xdd\x03\xcb\x00\x42\xf7\xfe\x20\xf1\x03\xa0\xfb\x86\xef\x37\xa5\x7b\xdf\xe8\xb5\x37\x3c\x40\xfa\xa2\xd0\x9d\xda\xea\x2a\xb9\x62\xdf\xb1\xef\x31\x6f\xcc\x1e\x73\xb8\xea\x36\xd4\xe6\x72\x21\x9b\x1a\x67\x74\x87\x3e\xc1\xd2\xc6\x62\x99\xa0\x38\x63\x62\x8f\xd3\xe5\xe4\xf9\x04\x09\x79\x84\x00\x25\x54\xec\x19\x3e\xce\xd3\x2c\x55\x7d\x0f\x4d\x96\x13\xcd\x4f\x10\x7a\x5a\x10\xd1\x69\xe4\x9c\x99\x05\x81\xed\xb1\x28\x72\x17\x3d\x46\xfb\x7a\x33\x2a\x89\xa2\x87\x0b\xb0\xd3\x3c\xdd\xe7\x8c\xcd\x38\x5d\x6f\x24\x92\xe4\xa3\x9c\xed\x72\xb5\x3f\x20\xb1\xc3\x7a\x6d\xc9\xee\xb2\x43\x9e\x17\xa1\x9a\xbb\x08\x01\x42\x01\x49\x9e\xa5\xeb\xcb\x97\x2f\xd4\x44\x31\xbc\x88\x38\x0a\xd5\x73\x46\xff\x15\x1b\xeb\xf6\xbf\x6f\x25\x6c\x5b\xdf\x80\x9d\xfd\xe3\x15\x6d\x79\x6b\x23\xed\x1b\x5f\x88\x7f\x03\xe6\xa7\xe4\x80\x5e\xc0\x07\xbd\xb6\xda\xf4\x13\x81\xcc\xae\x33\x45\x35\xa4\x6c\x37\x06\xfd\x00\xd5\xfb\x79\x11\xe6\xcc\x45\x6a\x94\x5c\x6a\xa9\xb1\xa2\x9e\x3a\xf6\xcf\xfd\x19\xcb\x97\xf9\x3d\x7b\xd9\xfa\x9b\xdd\xa9\x9d\x6d\x88\x8f\x74\xb4\x65\x8b\xda\x14\x1f\x6c\x69\xe5\x8d\xe1\x47\xf7\x46\xb5\x45\x13\xae\xcd\x65\xa7\x6e\xef\xd5\xdd\xb6\x72\xd1\x11\x47\xe7\x80\xd3\x57\x4a\xeb\xfc\xa4\x19\x3c\x87\xb5\x6d\x9d\x38\xcd\xf4\x29\x8d\xa7\xaa\x45\x95\x97\x5f\x9f\x9b\x2c\x7a\x2a\x65\xf2\xb4\x15\xcc\x37\x4b\x5f\x5c\x9b\x54\x34\x09\x46\xb8\x61\xb4\xf2\x16\xe9\x81\x9e\xeb\xfa\x5c\xeb\x83\x4c\xfb\x8d\x8d\xb4\x5a\xf4\xfd\x32\xd9\x1e\x54\x5d\xb7\xd2\x8b\x19\x8d\xb7\x7e\x75\xfa\xe7\xdb\xf2\x11\x72\x91\xe8\x83\x32\xb9\xa1\x5d\x7f\x8c\x40\xa4\x04\x48\xb0\xa2\x90\x81\xd4\xb6\x50\x45\xfa\x83\x10\xb4\x3b\xbe\x07\x56\xd8\xe4\x7a\x13\x50\x6f\x51\xb0\xc1\xe2\x0a\x78\xcf\xf7\xfa\x9d\xbf\x67\x2d\x3a\xb8\xa2\xa0\x38\x7b\x18\x51\xb5\xd7\x53\x14\xe0\x24\xb1\x6a\xc5\x2c\x13\x64\x48\xcd\xac\x4e\xd1\x34\x4c\x03\x88\xb2\xef\xad\xb0\x90\xd6\xdc\x1d\xfb\x0c\x19\x35\x7d\xd4\x88\x61\xdb\xc7\x3c\xee\x9a\xbe\xa1\x09\x19\x31\xbd\x5d\x45\x0d\x89\xe2\x09\xcc\x34\x8f\x95\x9b\xdd\x2c\x4d\x4e\x9d\x2e\xff\xf9\xc7\x6b\xd7\xe3\x65\x53\x7a\xfa\xa8\xbd\x56\x81\x1c\x9b\x77\x22\x4b\x93\xb9\xfa\xab\x0d\xb5\x9c\x49\x17\x67\x80\x63\x1e\x14\x9f\x33\x5f\xc5\x05\xfd\x99\xf5\x55\x7d\xe8\x1e\xa6\x3d\xa8\x1b\x35\x6f\x16\x89\xfb\x35\x3c\x79\x5c\x51\x55\xc5\x54\xe6\x3f\x2c\x8a\x0c\x2c\x9c\x69\x50\xb2\x03\xcf\xd9\xc9\x71\xae\x18\xc7\xa7\x41\xbf\x80\xa6\x15\x5c\xf9\xce\x3b\xc3\xb6\xcd\xf7\x42\xf9\x3c\xdc\x7b\x75\xbd\xbb\xbd\x58\xd5\x3e\x2a\x3e\xef\xde\xea\x8f\x5e\x91\x47\x3b\x2a\xdf\x9f\xb2\xa5\xbb\xfe\xc3\x39\xe0\x9a\xce\xca\x90\x8e\x96\x2d\x0d\xe0\xd2\x9b\xd8\xbc\xeb\x45\xb5\xb7\xdd\x62\xe6\xb7\x9b\xbc\xbb\x36\xae\x2d\x61\x4c\x7c\x9a\xbf\xfa\x9f\x30\x44\xcf\xce\x91\x20\x2a\xb4\x89\xd0\x33\xaa\xea\x5e\xa6\x92\x70\x78\x4f\x81\xf0\x54\x89\x9c\x9f\xa3\xff\xab\x1f\xc8\xbb\xe9\xe2\xef\x00\x00\x00\xff\xff\x46\x8b\xea\x36\xb2\x1e\x00\x00")

func publicJsDashboardJsBytes() ([]byte, error) {
	return bindataRead(
		_publicJsDashboardJs,
		"public/js/dashboard.js",
	)
}

func publicJsDashboardJs() (*asset, error) {
	bytes, err := publicJsDashboardJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "public/js/dashboard.js", size: 7858, mode: os.FileMode(420), modTime: time.Unix(1499801112, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/index.html": templatesViewsIndexHtml,
	"public/js/dashboard.js": publicJsDashboardJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"public": &bintree{nil, map[string]*bintree{
		"js": &bintree{nil, map[string]*bintree{
			"dashboard.js": &bintree{publicJsDashboardJs, map[string]*bintree{}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"index.html": &bintree{templatesViewsIndexHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: AssetInfo, Prefix: k}
	}
	panic("unreachable")
}
