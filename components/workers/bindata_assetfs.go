// Code generated by go-bindata.
// sources:
// templates/views/index.html
// assets/js/index.min.js
// DO NOT EDIT!

package workers

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\xcd\x6e\xdb\x38\x10\xbe\xe7\x29\x08\x15\xd8\xb6\x07\x45\xfd\xdb\x4b\x6b\xab\x08\xba\x87\x2d\x5a\x14\x8b\x76\x81\x62\x4f\xc1\x48\x1c\x59\x8c\x29\x52\x20\x29\xdb\x41\x90\x77\x5f\x90\xa2\x6c\xc9\xa6\x1c\xb7\xb1\x17\x69\xb7\x27\xcb\xe2\xcc\x90\xfc\xe6\xef\xa3\x78\x73\x43\x28\x16\x4c\x20\x89\x72\x29\x0c\x0a\x13\x91\xdb\xdb\xb3\x09\x65\x0b\x92\x73\xd0\x7a\x1a\xd5\x30\xc3\xd8\x30\xc3\x31\x4a\xcf\x08\x21\xa4\x3f\xe8\xde\x5f\x72\x2c\x8c\x1f\x74\x02\xe5\xcb\xf4\xab\x54\x73\x54\x7a\x92\x94\x2f\xbd\x56\x42\xd9\x22\x3d\x1b\xb1\xa0\xd8\xac\x1c\x98\xe8\x49\x14\x52\x55\xf1\x4c\xc9\xa6\x26\x75\xc3\x79\xbc\x2d\xbb\x2d\xcf\x44\xdd\x98\x56\x61\x4b\xca\x49\x72\xc8\x90\xef\xbe\x77\x63\x4e\x95\x98\xeb\x1a\xa7\x51\x5e\x62\x3e\xcf\xe4\x2a\xea\xec\x5e\xe9\x58\x2f\x99\xc9\xcb\x88\x30\x3a\x8d\xa0\x31\x52\x61\xa1\x50\x97\x11\x49\x52\x72\xb1\xf9\xbf\x3b\x69\x12\x98\xd5\x23\x12\xf8\xeb\x1f\x3b\xc8\xfa\x9b\xcb\x39\x82\x2a\xd8\x2a\x4a\x43\xa3\x4a\x2e\x89\x91\xf5\xa5\x61\x1c\x75\xc0\x5d\x20\x58\x05\x06\x29\x29\x38\xab\xdf\x8b\x7f\x48\x2e\x79\xcc\x67\xf1\x2b\xf7\x50\x51\xff\xa0\x2b\xff\xb0\xd2\xf1\xf3\x17\x23\x6e\xb1\x73\xc4\xda\x80\xd1\xfb\x7c\x91\x4b\x11\xa5\x13\xb6\xf6\x25\x90\x02\x62\x8a\x50\xd8\xdf\xdf\xdd\x36\x58\xba\x85\xc4\xb6\x91\x5c\x36\x36\x2e\x2d\xe8\x9c\x69\x83\x02\x95\x8e\xdb\x97\xe9\xb3\x90\x6e\xf9\x32\xfd\xd8\x09\x6e\x22\x30\x0c\xf2\x03\x85\xa8\xd1\xa8\xf4\xf7\x61\xb4\x6c\x53\xef\x2e\x84\x76\x32\xf4\x87\xc2\xc7\x80\x9e\x7f\x27\x3e\x4e\x35\x5e\x02\x33\x77\x42\x04\xcc\x10\x27\x7e\x17\x4a\x83\x64\x1c\x04\x6a\x20\x0b\x57\x97\x35\x08\xe4\x23\xa0\xac\x2e\xfb\xc5\x76\xb3\x9c\x17\xc1\x34\x6a\x37\x4f\xfa\xe1\xfe\x62\x4b\xb3\xe1\x9d\x9a\x80\x05\x11\xb0\xc8\x40\xb5\x45\x94\xb8\x75\x5c\x1a\x29\xb9\x2d\x74\xa1\x62\xc9\xd2\x09\x6c\x30\xe4\x1c\x6a\x8d\x31\x67\x62\xbe\xeb\x92\xbc\xc4\x85\x92\x22\xb6\x65\xb7\xf5\x08\xa4\x93\x84\xb3\xa0\xd9\x4e\x95\x2a\x59\x53\xb9\x14\x81\xc9\x9d\x24\x90\x52\x61\x31\x8d\x1e\x45\xdb\x1a\xb1\x91\xb3\x19\xc7\x88\x50\x30\xe0\xff\xf4\xec\x11\x25\xed\xff\xac\x31\x46\x8a\x88\x80\x62\x10\xe3\xaa\x06\x41\x91\xda\x15\x73\x8d\xbb\x5b\x58\x2a\x14\x79\xb9\x59\x7e\x78\x4d\x1b\x40\xd7\x6b\xa9\x50\x34\xdd\x94\xee\x39\xac\xda\x61\x3a\x3a\x38\xd8\xf3\x15\x2c\x40\xe7\x8a\xd5\xe6\xf5\x42\x32\xfa\xe4\xd9\xd3\xad\xcd\x56\x92\x02\xef\xde\x81\x9a\xa1\x99\x46\x8f\xfa\x2f\xdd\x73\xdb\xbc\xa7\xd1\x3b\x29\x0a\xa6\x2a\xa2\xb0\x92\x0b\x24\xc0\x39\xd9\x44\x69\x5f\x3e\x93\xf4\x7a\x1a\x7d\x65\x9c\x93\x0c\x83\xe2\x04\x57\x39\xd6\xc6\x72\x07\x68\xb8\x59\x0f\x9c\x93\x0b\x85\xe4\x5a\x36\x44\x37\x0a\xdf\x0e\xac\xe6\xc0\x79\x06\xf9\xbc\x97\x1b\x9f\x9d\xe9\x27\x4f\xdf\xec\x81\x6b\x8d\xca\xda\x55\x33\x7e\x5d\x97\xb6\x2a\x90\xf5\x53\x6c\x14\x68\xef\x37\xf2\x79\xbd\xe0\xfd\x30\x8f\xf9\xb7\x1d\x1c\xf3\xd2\x24\x69\x02\xec\x61\x57\x7e\x57\x6e\x6f\x1b\xdf\xa8\x0d\xff\x0e\x0a\x43\x47\xd1\xc6\xed\x1a\xc8\x38\xc6\x0a\x75\x2d\x85\x66\x8b\xed\x2a\xe2\xc4\x9d\xcc\x40\x81\xb4\x6a\xa5\x5c\xa0\x1a\x4b\x44\x53\x22\xd0\xb1\x31\xb5\x07\x49\x53\xa6\x9f\xa0\xc2\x49\x62\xca\xfd\x52\xef\x14\xda\xc6\x72\x80\xa0\xad\xda\x44\x37\x79\x8e\x5a\xdf\x2d\xfe\x11\xf4\x37\x48\xb7\xc6\x0b\x60\xfc\x90\xa5\x38\xdb\x87\x0a\x5f\xe4\x86\x49\xb1\x67\x0d\x93\x64\x0c\x49\xab\xb3\x07\x7f\x9b\xb1\xa3\x8a\xe1\xc1\x49\xe2\x9c\x7e\x1f\x4a\xda\x23\x1b\x27\xec\x72\x8e\x09\xf9\xd4\xde\x70\x96\x5f\x4d\xee\x27\x6e\x72\x7d\x16\xab\x4b\xb9\xbc\x77\x7b\xc0\x6b\x8c\x65\x8d\xc2\x87\xd1\x97\x52\x2e\x5d\x43\x73\xdc\xee\x14\x5d\xe2\xb8\x18\x94\x8c\x86\x2a\xf9\xb7\x63\x90\x73\xe9\x22\xc2\x82\xf0\x27\xa3\xf8\x9f\x80\xb0\x8e\x23\xb6\x60\xd4\x36\x98\x53\xc2\x76\x14\x7e\xa4\xd1\x38\x64\xba\xe2\x16\xa6\x31\x7e\xf4\xb3\x15\x3f\x06\x87\xe9\x3e\x26\x74\x2c\xc6\xaf\xe2\x61\x86\xe7\x11\x70\x9e\x5b\x82\x09\x82\xf6\x19\xe6\x41\x88\x7f\x60\x9c\x1f\x9b\x34\x7e\x70\x8b\x39\x29\xda\x0f\x2c\x0f\xba\xe2\x02\x94\xde\x1b\xc9\x9a\x37\x5d\x8b\xbe\xa0\xd4\x7b\xf1\x17\xfb\x3e\x8c\x7d\x9f\x82\x71\xbf\xff\xe3\x88\x7c\xfb\x8b\x01\xd3\x1c\x40\x9d\xff\x06\x3d\xff\x7f\xb2\x60\xd7\x42\x4f\xc8\x81\xbd\xfd\x96\x03\xf7\x3f\x4a\x3d\x6c\x1a\xfc\x23\x65\xe1\xa9\xcf\xc0\x87\x64\xe4\x61\xe7\xe4\x43\xd3\xf1\x2f\xc5\xa4\x62\xe6\xfa\x80\x94\x34\x06\xab\xda\x1c\x7a\x96\x46\xa5\xa4\x3a\x62\x7d\xf9\xd9\x2a\x82\x0f\x2b\xd7\x75\x49\x01\x14\x87\x6c\xde\x36\x5c\x1b\x6d\x4c\x50\x5c\x4d\xa3\xf8\x79\x77\xa6\xa2\x0c\xb8\x9c\xf9\x63\x5c\xc9\x28\x45\x31\x8d\x8c\x6a\x42\x17\x6f\x2d\x35\xf2\x1a\xe1\x5c\xf1\xec\xe9\xce\x7c\x69\xe5\x2c\x8c\xc1\xc8\x9f\xb4\xa7\x4b\x7f\x2b\xd6\x1d\x35\xd7\x39\x6c\x0f\x14\x2d\xb3\xa0\x4c\x57\x6c\x6d\x30\xb8\x8d\xdf\x0c\xab\x50\xbf\x99\x24\xad\x99\xc0\x64\xe5\xab\xe1\xb2\x7c\x85\xdc\xb0\x0a\x5b\xf5\x5e\xed\xf5\x4e\x78\x7f\xd6\xdb\xa1\xdd\x15\x52\x55\x23\x21\x12\xbc\x83\xdc\x7b\xe8\x85\x0c\x39\x29\xa4\x1a\x38\xdb\xdf\x32\x6c\x2a\xab\x30\x4a\xf2\xd8\x09\x47\xe9\xa7\xa6\xca\x50\x11\x81\xcb\x6e\x83\xaf\x83\xb7\x85\x83\x89\xfa\xf7\x94\xc2\x19\x88\x48\xc5\xc4\x34\x7a\x1e\x0d\x56\xec\xe7\xda\x89\xbf\xee\xe2\x63\x24\x35\x76\xe0\x6c\x5f\xef\x42\x75\x10\xf2\x85\x94\xe6\xdb\x23\x2b\x33\x82\x64\x46\xc4\xfe\x13\x73\x38\xc6\xd2\x77\x36\xfe\xf6\x84\xd3\x60\x06\xdd\x64\x15\x33\x3b\x33\xf8\x4f\x83\x23\x33\x5c\x50\x1a\xb6\x7f\x68\x4d\xb8\xb9\x21\x28\x28\xb9\xbd\x3d\x3b\xeb\xdd\xb6\x5f\xe9\xf6\xa2\xbd\xe5\xed\x7e\x81\x50\xd7\x9c\xe5\x60\xab\x61\xb2\x21\xf5\x1e\xb9\x05\xa8\xee\x7b\x7b\x77\xdb\x63\xfb\x05\x99\x92\xc7\x37\x37\xe4\x3c\x34\x74\x7b\xfb\xf8\xcd\xd9\x24\x69\xcd\xa4\xeb\xc9\xb4\xca\xa7\x51\xe2\xc3\x21\x01\xad\xd1\xe8\xe4\x4a\x27\xae\x20\x9d\x57\x4c\x9c\x5f\xe9\xb7\x8b\xa9\xb5\x7a\xb1\x59\xd1\x79\xd6\x30\x6e\xf7\x61\xfb\x75\x67\x72\xbd\xb9\x7f\x03\x00\x00\xff\xff\x54\x63\x48\xe5\x49\x20\x00\x00")

func templatesViewsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsIndexHtml,
		"templates/views/index.html",
	)
}

func templatesViewsIndexHtml() (*asset, error) {
	bytes, err := templatesViewsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/index.html", size: 8265, mode: os.FileMode(420), modTime: time.Unix(1502718209, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsJsIndexMinJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x58\x51\x6f\xdb\x38\x0c\xfe\x2b\x9e\x56\x34\x16\xe2\x38\xdb\xdd\x76\x0f\x89\xed\x62\xc8\x0e\x87\xe1\x8a\xbb\x61\x2b\xb0\x87\x6d\x28\x14\x4b\x49\x74\x91\xed\x40\xa2\x9b\x05\x5d\xfe\xfb\x41\xb2\xec\xc8\x89\xd3\x76\x59\xbb\xa7\x28\x24\x45\x52\x24\x3f\x8a\xf2\xac\xcc\x53\xe0\x45\xee\xcd\x19\x7c\x2a\xe4\x92\xc9\x8f\x40\xa0\x54\xff\x90\x8c\xf9\xca\x2c\xf1\xad\x5a\x73\x48\x17\xcd\xdf\x94\x28\xe6\xbd\x18\x49\x06\xa5\xcc\xd1\x9a\x70\x40\x63\x43\x7b\x59\xd3\x56\xb2\x48\x99\x52\x96\xfc\x5b\x4d\x9e\x96\x6a\x83\xc6\x94\xcd\x48\x29\xa0\x26\x96\xf9\x32\x2f\xd6\x39\xda\x6e\x5d\x5f\xae\x88\x5a\x3e\xa1\x27\xaa\x4c\x1d\xf2\xef\x35\x79\x46\xb8\xb0\xb4\x57\x2e\xcd\x9b\x6e\x3c\xe0\x19\x2b\xca\xda\xc0\xeb\x9a\xbd\xe4\xa2\xde\xf2\x87\xeb\x88\x27\xd9\x8a\x11\x78\xc8\x71\xcb\x15\x25\xc0\x7c\x7c\x7b\x16\x92\xff\xc8\x37\xff\x16\x36\x2b\x36\x42\x7f\xfd\x79\x85\x82\x52\x8a\x11\x1a\xae\x4d\x66\xd4\x50\xb3\x87\x17\xc4\x6c\x8b\x75\x10\x14\x0a\xec\x51\x46\xb5\x3a\x5f\xe2\xdb\x1b\x22\x3d\xb8\x8c\xcf\x7c\xf4\x5c\x70\x05\x2c\x67\x52\x79\x30\x2d\xe8\x06\xe1\x90\x65\x2b\xd8\xf8\x38\x80\x4f\x46\xc0\xea\x3e\x64\x5f\x19\x36\x10\xb5\x3c\x64\x36\x5a\x63\x19\x36\xeb\xeb\xb4\x28\x73\xf8\xfe\xfd\x45\x60\x75\xc6\x32\xb4\xab\x1d\xcb\xe8\xbb\xd6\x11\x8a\x5f\x8c\xf9\xcc\x7f\x23\x25\xd9\x84\x5c\x99\x5f\xdf\xd1\x86\xf1\xed\xac\x90\xbe\x3e\x0a\xf7\x78\xee\xb9\x2c\x73\xc0\xfa\xaf\xeb\xc2\x67\xfe\x35\x10\x93\x18\x45\x20\x93\x08\x68\x82\xfa\x35\x2b\xcc\x49\xc6\xfa\x28\x1a\x02\xb5\x1c\x1d\xf4\xab\xe2\x23\x48\x9e\xcf\xfd\x46\x2c\x95\x8c\x00\xa3\xd7\x04\x70\x4b\x7a\x27\xa0\x4f\x72\xad\x8f\x71\x6d\x43\xdf\x92\xdb\x69\x12\x44\xb5\xe5\xae\x09\x5c\x74\x1b\xed\x12\xc5\x23\x84\xee\x77\x41\x57\x27\xa3\xf7\x7a\x50\x89\x3d\xc4\x81\x46\xd2\xb5\x8f\xc6\xad\x30\x3e\x8b\x6d\x51\x5f\x5a\xaa\xc6\xe8\x85\x98\xf4\xe3\x9e\x76\x21\xa2\xfc\xc6\x4b\x05\x51\x2a\x46\x53\xc8\x07\x73\x59\x94\x2b\xaf\x59\x0d\xbe\x29\x94\x44\xd3\x12\xa0\xc8\x3d\x5d\xea\x31\xaa\xfe\x20\x67\x93\x11\xa7\x24\x9f\x33\x69\x96\x3c\x2d\xf2\x26\xe3\x03\xc9\xb2\xe2\x86\x21\x8f\x12\x20\x03\x28\xe6\x73\xc1\x62\x94\x15\x94\x88\x9a\x46\xe4\x9c\x41\x8c\x9e\xbb\x44\xb3\x1e\x00\x07\x2d\x3d\x29\xf2\x19\x97\x99\x57\xa9\x6a\x54\x7b\xbd\xbd\x8a\xe9\xb5\x36\xa7\x44\x88\x29\x49\x97\x31\x6a\x4a\xee\x83\x51\xe0\x7f\xe9\x1d\xec\xfc\xd2\xc3\x63\x94\x44\xbc\x3e\xd6\x5c\x6c\x56\x0b\x73\x90\x66\x35\x00\x49\xd4\x02\x79\xd6\xa9\x4a\x17\x4a\xa2\x21\x4f\xa2\x61\x15\x95\x24\x1a\x52\x7e\x93\x98\x3c\xf4\x46\x3a\xc8\xc8\x04\xd9\xe4\x25\xa8\xfe\x0f\x41\x26\x28\x80\xcb\x90\xac\x56\x2c\xa7\xbe\x98\xe0\x6d\x27\x44\x43\xc1\xf2\x39\x2c\xb6\x1d\xc0\xb3\x48\x3d\x84\x5d\xcd\x30\xa0\xab\xfe\xec\x80\xad\x01\xa7\xeb\x26\xae\xfe\x87\x7a\x1d\xac\x5b\x08\xb4\x1c\x4e\x8f\xa3\xcf\x8a\x58\xec\xb5\xab\xbe\xeb\x62\xb2\xf2\xf6\x1a\x68\x8a\x74\x3d\xe9\xc7\xda\x81\x8b\xaa\x0c\x1f\x52\x62\x16\x6f\x66\x9d\x72\x99\x0a\xe6\x69\x0d\x03\xb5\x28\xd6\x4d\x2d\xa9\x65\x8c\x7a\x7d\xde\xef\xdd\x97\x4d\xb6\x61\x83\x62\xc5\xf2\x83\x0c\x9a\xdc\xb9\x79\x5b\x3f\x3a\x58\x78\x3e\x2b\x76\x50\xa9\x22\x34\x90\x4c\x31\x78\x24\x9c\x28\x06\x56\xad\xf7\xbc\xe7\x64\xf5\x18\x42\x6c\x85\x7c\xd0\x1b\x0d\x3c\x9c\x2d\x0f\x81\x86\x64\x33\xc9\x5a\xe0\xd0\x67\xd9\x8b\xec\x29\x6d\xc4\xc6\xc6\xdc\xdc\x8f\x11\x1a\xad\xe8\x94\xc8\xfc\xcd\x85\x38\x25\x30\xed\x9e\xa1\xb5\x1c\xef\x18\xa6\x35\xf4\x02\xf8\x54\xb7\x86\xf5\x04\x1b\xc0\x9e\x9f\xef\x68\xbd\x08\xa4\xa7\x60\xa3\xd5\x51\xae\x56\x82\x6c\x46\x79\x91\x33\xe4\x71\x1a\x23\x83\x87\xba\xfc\x81\x7a\x69\x21\xd4\x8a\xe4\x31\x7a\x8d\x92\xa8\x14\xb5\xa7\xba\xc7\x54\x35\x8b\x92\x48\xf0\x43\xf2\x80\x03\xcb\x50\x12\xe9\xcd\x35\x77\x55\x0a\x31\x90\x7c\xbe\x00\x0f\xd8\x37\x18\x64\x25\x30\xea\xa9\x8c\x98\x33\xb1\x2c\xe9\xf5\xb5\x79\x13\x9a\x68\xc8\xb2\x24\x1a\xea\xed\x49\xa4\x40\x16\xf9\x3c\x79\xf7\x36\x1a\xda\x65\x34\x95\xde\x30\x89\x86\x82\x3f\xbe\xf9\xaa\x9f\x77\x39\xa0\xdb\xd1\x53\xbb\x70\x38\x0e\x1b\xa7\xea\xee\xd7\xe9\x57\x25\xfc\x4b\x82\xb3\x92\xbc\x90\x1c\x36\xdd\x8e\xbc\xb7\xdc\x5f\xe2\x0a\x01\xd0\x13\xaa\xea\x76\xe5\x8d\xe5\x3e\xb5\x2b\x55\x7a\xcc\x48\xc5\xa4\x2c\xe4\xc5\xde\xff\x11\x3a\xcf\x28\x51\x8b\x31\x3a\x92\xbc\x4b\xa2\xc0\x33\xa2\x4f\xed\x6a\xce\xd6\xde\x5b\xfd\xf8\x30\x2e\xd6\xf7\x6f\x08\xc5\x65\x91\x12\xc1\xec\xf5\x6c\x6e\xd8\x43\x37\x27\x95\x78\xa7\x8f\xc3\x52\x38\x0d\x08\xe1\xed\xc1\x93\xe0\x8e\x51\x64\xf7\x46\x38\x9c\x46\x1c\xde\xad\xb9\x99\x5d\xd2\x67\xfe\x75\x0c\x57\x75\x5b\x73\x66\x90\xba\x89\xb8\x83\xc5\x0e\xd9\x7b\xe3\xc6\x5d\x60\x3b\x50\xd0\x54\xff\x01\xa7\x29\xc6\xd6\x70\xfe\x03\xb5\x71\x74\x5c\x6a\x25\x4b\x97\x90\x15\xbb\x6f\x96\x50\xd9\x49\xb3\x84\xb9\x00\x1e\x7f\xe4\xd6\x6a\xf5\x7d\xd9\x34\xf8\x23\xb7\xa5\xe6\x3b\x43\x76\x23\xfe\xf8\xe3\x75\x75\x59\xe2\xad\xf3\x46\x75\xab\xab\xae\xd8\xd6\xb3\x7a\x60\x1e\x63\x08\x87\x1a\x62\xfe\xee\x89\x1a\x38\x6f\xeb\xb6\x4c\x3d\x4f\x07\xcd\xf3\xba\x0a\x50\xcd\xdf\x19\xec\x23\xcf\x7c\x4a\x30\x14\xe4\x6e\xd0\xe4\xb6\x56\x07\x17\xae\x69\x2f\xdc\x8d\xb3\x38\x4c\x05\x4f\x97\x7e\xf3\xa5\xa0\x1a\xe9\x59\x7c\xe6\xc3\x82\x2b\x1c\x4c\x63\x16\xce\xb8\x46\x0e\x47\x38\xe0\x31\x0b\x75\x42\x7c\x93\x01\x84\xc7\xd3\x70\x41\xd4\x44\x07\xdb\x47\x1d\x33\x2f\xbe\xf0\xa7\x61\x95\xdb\x3b\x84\x82\x69\x48\x28\xed\x14\x48\x45\xa1\x98\x73\xcc\x01\xea\x73\x1c\x6a\xd7\x7d\x34\x23\x0a\x10\xc6\xa3\xbb\x4d\xd4\x1a\x8e\xdb\xb0\x4e\xb4\x4d\x2c\x38\x65\x8d\x89\x2d\xde\x6e\xf1\xee\xe3\xcc\xfe\x3b\x8f\xd3\xfd\xef\x34\xef\xff\xfd\x78\xf7\x87\x9a\x5d\xad\x58\x10\x05\x3a\xac\xa3\x5b\x4e\x47\x9c\x6e\x9b\x0f\x38\xd5\x67\x20\xd7\xb6\x53\xf9\x27\x98\x75\x61\xfb\x50\x8b\xee\x64\x7a\x82\xc9\xba\xde\xcd\x68\xfd\x83\x36\xab\x77\xc2\x4f\x18\xad\xde\x3a\xf7\x58\x3d\xf3\x69\x91\x96\x19\xcb\x01\x87\x92\x11\xba\x71\xd1\xe0\x42\xf6\x18\x62\xba\xb1\x35\x5a\x10\xe5\xf3\xf0\xb0\xd6\x70\xa3\x03\x6f\xdb\x3d\x41\x17\xdd\x4f\x1a\x30\xe5\x7e\xdc\x02\xa1\xd4\xab\x9a\xdc\x67\xd3\xed\x55\x39\xcd\x38\x7c\xed\x34\x7a\x5a\xc8\x09\xa5\x75\xc0\x4d\x33\x1a\xed\x99\x6f\x5a\xd4\x0d\x11\x3e\xee\x48\x07\x0e\xea\x8f\x9f\x63\xdd\x8a\x48\x09\x85\x7d\xf6\xc5\x79\x29\xc4\x58\xeb\x73\x88\x5d\xae\xeb\xd6\x15\xa6\x0b\x96\x2e\x19\xbd\xd0\x9b\xe2\x38\x76\xb6\x9c\x9f\xfb\xb5\x89\xc0\x55\xbf\xe6\x39\x2d\xd6\xa1\x62\xf0\x2e\x07\x26\xb5\x83\x95\x5c\xf0\x92\xbd\xc2\x78\xa4\x35\x3d\xdb\xd7\x64\x37\xa5\x82\x11\xd9\x6c\x73\x44\xda\x26\xb4\x0a\xdd\x4e\xf0\xf8\xff\x00\x00\x00\xff\xff\xd3\xd5\xb7\x48\x66\x17\x00\x00")

func assetsJsIndexMinJsBytes() ([]byte, error) {
	return bindataRead(
		_assetsJsIndexMinJs,
		"assets/js/index.min.js",
	)
}

func assetsJsIndexMinJs() (*asset, error) {
	bytes, err := assetsJsIndexMinJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/js/index.min.js", size: 5990, mode: os.FileMode(420), modTime: time.Unix(1502793921, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/index.html": templatesViewsIndexHtml,
	"assets/js/index.min.js": assetsJsIndexMinJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"js": &bintree{nil, map[string]*bintree{
			"index.min.js": &bintree{assetsJsIndexMinJs, map[string]*bintree{}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"index.html": &bintree{templatesViewsIndexHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: AssetInfo, Prefix: k}
	}
	panic("unreachable")
}
