// Code generated by go-bindata.
// sources:
// templates/views/index.html
// DO NOT EDIT!

package workers

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x58\xdd\x6e\xe3\x36\x13\xbd\xcf\x53\x10\xfe\x02\x48\xfe\xba\xb2\x9d\xdd\xa4\x40\x93\xd8\x45\xd1\x14\x8b\x05\x8a\xde\x6c\xd0\x5c\x14\xc5\x82\x96\x46\x36\x6b\x85\x14\x48\xca\x8e\xe1\xf5\xbb\x97\xa4\xf5\x67\x49\x94\x2d\xd7\x5d\x24\x40\x75\x61\x49\x9c\x39\x87\x43\x72\x0e\x39\xf2\x66\x83\x02\x08\x09\x05\xd4\xf3\x19\x95\x40\x65\x0f\x6d\xb7\x17\xf7\x01\x59\x22\x3f\xc2\x42\x8c\x7b\x9c\xad\x7a\x93\x0b\xa4\xae\x72\xab\xcf\x22\xef\x45\x78\x57\xef\x53\x9b\xc5\x7e\x5d\x32\x57\x5d\x62\x4c\x21\x42\xe6\xd7\x9b\x71\x00\x5a\xf1\x6d\xf4\xf7\xe6\x80\x03\x42\x67\x0d\xbe\x55\xff\x22\xf0\x43\x9e\x69\xb0\x1f\x5a\xdc\x0d\x84\x64\x80\x10\xa3\x10\x7b\x89\x00\x2e\xf4\xc3\xcd\x4b\x6f\x72\x3f\x24\x2d\x9d\x0d\x55\x6f\x9d\x62\xf9\x01\x49\x78\x91\x1e\x27\xb3\xb9\x3c\x14\x56\x09\x3d\x4f\x66\xd0\x43\x24\x18\xf7\x56\x8c\x2f\x54\x78\x9e\xcf\x12\xb5\xa8\x93\xd1\x81\x10\x32\xa2\xc9\xd3\x0e\x77\x28\x62\xbb\xd9\x62\xb2\x35\x63\x34\xe7\x10\x8e\x7b\xff\x4b\x03\x3e\x62\x61\x77\x89\x10\x32\x26\x81\xb7\xad\xb0\x50\x8e\x39\x26\x89\x22\x2f\x82\x50\x4d\xc5\xef\x04\x56\xe8\x01\x24\x26\x91\x1a\xa6\x76\xea\xc2\x91\xae\x48\x35\x17\x30\x57\xe9\xe6\xf9\x84\xfb\x11\xe4\x3e\x2a\x25\x0e\x76\x50\x5e\xfa\x08\x30\x0f\x89\x49\xa6\xee\xd3\x8b\x2b\x4a\xdb\xf7\xab\xbe\x9e\x2e\x55\x0e\xc1\x5b\x13\xaa\xc4\x62\xf1\x6a\x85\x6a\x82\xf3\x56\x98\xc8\xee\x5a\x55\x20\x64\xf0\xdf\x5e\xae\xa6\xdb\xff\xc4\xfa\xca\xc5\xba\x86\x28\x6a\x54\xd7\xab\xd6\xab\x20\x12\x9e\x71\xfc\x5a\x15\x3b\x63\x9c\x25\x52\x15\x4d\xa2\x83\x56\x3f\xe6\xa0\x6f\xa6\x55\x9b\x0a\x91\x90\xeb\x08\xd4\x88\x40\x4f\xc1\xed\xf5\x55\xdc\x9c\xc5\xf6\xac\x4c\x1f\xd3\xdb\x85\x2d\xfb\x54\x69\x89\x93\x48\xee\x15\x24\x0d\xb5\x64\x25\xff\xea\x15\x48\xdd\x79\xca\x82\xb5\xa5\xf2\x94\x78\xaa\x55\x0d\x22\x66\x54\x90\x25\x54\x95\x62\xec\x7b\xce\x68\x07\x99\xb3\x65\xe3\x16\x75\x2f\x75\x68\x4d\xed\xdc\xb2\x4c\x72\x3e\xf9\xf4\x70\x3f\x54\x37\xab\xfd\x67\x0e\x58\x42\xd0\xee\xf4\xa8\xf6\x58\x74\x88\xc9\x38\x51\xfc\x0c\x47\xb8\x09\x89\x65\x22\x8e\x70\xf4\xdb\xc2\x53\xad\x0d\x23\xd7\xbe\x96\x79\xd2\xab\xd5\x08\xa8\x1b\x54\xa3\x5e\x8c\xb3\x65\x5d\xf9\x98\x6a\xcb\xb9\xa6\x93\xf4\x0d\xa6\xdd\xd9\x33\xe6\x4d\x24\x82\xf0\x39\x89\xe5\xce\xb6\xc4\xdc\xa4\xb9\x78\x60\x34\x91\x77\xa6\x2d\x4c\xa8\x2f\x09\xa3\x68\x06\x52\x8f\xea\xb3\x91\xc1\x6f\x6a\x06\xdc\x9d\x22\xfa\x68\x93\xf7\x23\x56\x44\xfa\xf3\x06\x83\xbe\x7c\x2c\x00\x8d\x6e\x6b\x43\xe0\x20\x13\x4e\x91\xa3\xcb\x38\xe7\xae\x66\x9e\xaa\x59\x5c\xdc\xd5\x99\xae\xec\x4c\x31\x67\x3e\x08\xd1\x81\xec\xbd\x9d\x4c\x24\x7e\x47\xb2\x0f\x76\xb2\x50\xd5\x62\x1d\x98\xae\xdb\x99\xd0\x74\x8d\x24\x79\x06\x75\x38\x76\x20\xbd\xb1\x93\x2e\x48\xd4\x25\xbc\xef\xdb\x17\x53\xbd\xc4\x4a\x01\xc7\x11\xa6\x3b\x8f\x9d\x31\xa1\x0b\xca\x56\xf4\x30\xdb\xf6\xa2\xf8\xcd\xb3\x37\x89\x03\xa5\x45\xb7\x9c\x93\x97\x03\xfc\x17\x7e\x71\xf7\x93\x54\xae\x63\xb8\x45\xce\xc7\x5f\x1e\x9d\x77\x7b\x86\x84\x47\xaa\x7d\x98\x9e\xc4\x43\x0d\x1d\x56\x5c\xd2\x4c\xb9\xcd\x7b\x75\x79\x7f\x53\x8b\x56\x8b\x4c\x3e\xa1\x31\xba\x74\x9d\xec\xc3\x1d\x19\x11\x3b\xfd\x01\x3c\xc7\x72\xed\xf6\xeb\x63\x34\xa8\xc7\x14\xb5\xfb\x26\x3b\x0a\x93\x75\x30\x46\x7c\x90\x3e\x7f\x31\x9f\x4a\xe8\xeb\x57\x34\xb2\xf4\xa3\xe9\xbf\x98\x15\x1c\xdb\x7c\x32\xae\xd4\xab\x20\x37\x0d\x76\xee\xcc\x6d\x9a\x88\xf5\x1e\xce\x34\xd8\x71\x45\xdd\x68\x50\xa5\x57\x8d\xa9\x41\x48\x88\xdc\x9f\x38\xc7\xeb\x01\x11\xe6\xee\xe6\x3d\xf5\xab\xfb\x52\x76\x85\x8c\x23\x57\xf7\x45\x10\xa1\x45\x64\x36\xf7\xfd\x11\x95\xc7\xf2\x07\xf9\xb3\x3e\x88\xea\x04\x2b\xc0\xce\x7d\xa0\xdf\xec\xfe\xf2\x69\x80\xe3\x18\x68\xe0\x3a\xfa\xf4\x72\x5a\xab\x65\x7d\x7d\x87\x94\x63\x30\x71\xd4\x43\xda\x01\x09\x4c\xe3\x50\xb7\x76\x81\x53\xfd\xf9\xa8\x55\x93\xf2\xa4\xe7\x59\x7f\x20\xd9\xaf\xcc\xc7\x11\x7c\x96\x5c\x55\x00\x4a\x54\x27\xd1\xbb\x66\x1a\x7e\x34\xb3\xa1\x63\x54\xf2\x72\xce\x41\xa5\x4f\xe7\x73\x90\xd5\x0f\x3c\x43\x9f\x1d\x6e\x67\xe8\x21\x9f\x60\x43\x6c\x9f\xde\x53\xba\xd2\xe5\x85\xd3\xb0\x29\xe8\x6b\xdb\xd8\xda\xb0\x55\x0c\x22\xa0\x33\x39\xaf\xb9\xd7\x09\x9a\x04\x57\xec\x23\x47\x6b\xae\x04\x39\x20\xbb\x54\x43\x65\x48\xab\xee\xe4\xe3\xe9\x3a\xca\x32\xf4\xa4\xc5\x2e\x72\xf2\x9f\x89\xf0\x40\x8e\xfc\xdb\xd9\xb1\x77\x28\x94\x67\xfd\xf8\x1c\xc9\x8f\x2e\x4f\x12\x19\x81\x3a\xba\xf4\x9f\x09\x6e\x89\x59\x85\x86\x56\xf9\xe7\x44\x53\x80\x9a\xa3\xd8\xfc\x33\x8a\xa2\xc5\x02\xd9\xfb\x47\x3f\x43\x65\x1b\x7c\x33\xa4\xfa\xdf\x62\x3d\xdc\x0a\xb0\x18\xf0\x36\xb5\xec\x5a\x2e\xdd\xbc\x1e\x28\x27\x75\x56\x91\x14\x24\x02\xe4\x27\x2a\x81\x2f\x71\xe4\xee\xac\xef\xd0\xd5\x68\x34\x42\xff\x47\x37\x19\xa3\xba\xdf\x0f\xb3\x9a\x7d\xb3\x41\x2a\xa1\xd1\x76\xfb\x77\x00\x00\x00\xff\xff\xae\xf6\x61\x7d\x8b\x1a\x00\x00")

func templatesViewsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsIndexHtml,
		"templates/views/index.html",
	)
}

func templatesViewsIndexHtml() (*asset, error) {
	bytes, err := templatesViewsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/index.html", size: 6795, mode: os.FileMode(420), modTime: time.Unix(1484431328, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/index.html": templatesViewsIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"index.html": &bintree{templatesViewsIndexHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: AssetInfo, Prefix: k}
	}
	panic("unreachable")
}
