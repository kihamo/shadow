// Code generated by go-bindata.
// sources:
// templates/views/index.html
// public/js/dashboard.js
// DO NOT EDIT!

package workers

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x59\x5b\x6f\xdb\x36\x14\x7e\xcf\xaf\x20\x34\x60\x68\x1f\x14\x37\x5b\xf6\xb0\xd6\xf6\x90\xa5\xc0\x36\x74\xe8\x43\xbb\xcb\x33\x2d\x1e\x4b\x4c\x28\x51\x20\x29\xdb\x41\x90\xff\xde\x43\xea\x12\x59\xa6\x24\xbb\x71\x5b\x07\x68\x1e\x62\x89\x3c\x87\x3c\xfc\xf8\x9d\x0b\xa9\xfb\x7b\xc2\x60\xc9\x33\x20\x41\x24\x33\x03\x99\x09\xc8\xc3\xc3\xd9\x94\xf1\x15\x89\x04\xd5\x7a\x16\x28\xb9\x0e\xe6\x67\x04\xff\xda\xad\x91\x14\xa1\x88\xc3\x8b\x9f\xaa\x3e\xd7\x9f\x5c\xd4\xdd\x39\x8d\x21\x4c\x80\x32\x50\xc1\xfc\x7f\xa9\x6e\x41\xe9\xe9\x24\xb9\xa8\x06\x9a\xe0\x48\xf3\xb3\xea\x67\xcf\xd9\x36\xba\x33\xdb\x6e\xff\x65\xab\xbb\x2b\x92\xd3\x0c\x04\x71\xff\xc3\x58\x01\x64\x1d\x59\xaf\xbc\x5b\x02\xcf\x62\x8f\x6c\x57\xfe\xd1\xf0\x31\xc9\xca\xd8\x9f\x07\xc4\x9d\x0a\xaf\x15\x96\x94\x2c\x69\xc8\x80\x2e\xed\xef\x2f\x9b\x60\x3e\x9d\xf0\x81\xb9\x4a\x58\x0f\x30\xe5\x57\x62\x60\x63\x42\xc5\xe3\xc4\x8c\x59\xd5\xd2\x4e\x8a\x18\x02\xc2\xd9\x2c\x10\x5c\x23\x77\x70\x8f\xc3\x48\x16\xc8\xa1\xf9\xab\x11\x23\xea\xa1\xe6\x7f\xd7\x9a\x63\x56\xf7\x77\xf7\x74\xf5\x35\x53\x92\x28\x58\xce\x82\x1f\x1a\xa3\xf7\xd8\xdd\x92\x0d\x4b\x29\x8d\x25\x74\xbf\x95\x1a\x05\x1b\x9d\x42\xa0\x8f\xc0\x12\xe1\xf8\x8f\xc3\x9a\xbc\x05\x43\xb9\xc0\x85\x5a\xa1\x43\xc6\xa8\xf6\xa5\x4b\x08\xaa\x90\x73\x61\xc4\x55\x24\xa0\x91\x41\x62\x8c\x4e\xd0\x26\x80\x00\xaa\x96\xdc\x51\xea\x70\x80\x69\xc7\xdd\xb6\xe5\xba\xaf\x9f\xef\xaf\x77\x20\x84\xd7\xbd\x4e\xda\x61\x0b\x8d\xdc\x3a\x55\x8f\x5d\x97\x31\xf9\x60\x7f\x6d\x62\xf9\xd7\xf6\xd6\xca\xe0\xef\xbe\x7a\xe2\xbe\xaa\x80\x3d\x37\x47\x35\x54\xdf\x9e\xac\xa3\x3a\xe3\xc2\x35\xe5\xe6\x70\x5f\x45\x25\xe2\xf4\xbf\xbe\xbb\xba\x69\xbf\x3b\xeb\x97\x76\xd6\x81\x4a\xba\xed\x94\xba\x88\x22\xd0\xba\x53\xac\x79\x0a\xed\x8e\x6f\xfa\xaa\xb3\x5d\xf1\x85\x64\x77\x3d\x85\xb9\xa1\x0b\x8b\x21\xe8\x5c\x66\x9a\xaf\xa0\x1b\x44\x5c\xff\x96\x30\x29\x55\x12\xb9\xf2\x12\x62\x6a\xac\x71\xbe\x76\xd5\x83\xb1\x49\xe6\xef\x69\x0a\xd3\x09\x3e\xf4\x4a\x5c\x2b\xa0\x06\xd8\xb0\xd0\xbf\x39\xeb\x17\xc2\x56\x8f\x05\x56\xb6\xc7\x5e\x8b\x9a\x57\x61\xb7\x03\x1b\x2d\x28\x4f\x61\xc0\x9a\xaa\xcc\x6e\x69\x3b\xf9\x8f\xef\x7f\x33\x61\x95\xf6\xbd\x7b\xbc\x30\x19\x9e\xa8\x64\x91\x93\xb6\x53\x6d\x2f\x60\x51\x18\x23\x33\x62\xee\x72\x40\x05\xf7\x12\xb4\xf4\x89\x1d\x03\x0f\xa2\xb4\x10\xc6\x3d\x6f\x34\x61\x4a\xe6\x4c\xae\xb3\xd0\xc8\x38\x16\x18\x0d\x11\x7c\x5a\xbd\xcc\x82\xba\x37\x20\x54\x71\x1a\xc2\x06\x2d\x67\xc0\xac\x0b\x0b\xdd\xa5\x99\xfd\xbb\x8a\x0c\x47\x0e\xee\x02\xde\x8e\x0a\x11\x55\xe0\x9c\x7d\xd7\xd1\xa7\x93\xd2\xec\x4e\x6b\x21\x6a\xdd\xc6\xde\x14\xb2\x82\x68\xc1\xd1\x1c\x6b\xa0\x67\x8f\x45\x4f\x8a\x69\xc2\xe7\x0d\x5d\x51\x1d\x29\x9e\x9b\xd7\x2b\xc9\xd9\x8b\x57\x2f\xb7\xab\x36\x9d\x0c\xe7\xc4\x26\xa0\xc5\xe2\x2e\x4f\x38\x1e\xed\x49\xf3\x14\xc2\x1d\x84\x32\xb7\x07\x60\x1b\xd4\xc8\x47\x1c\x8b\x50\x21\xca\x4c\xd1\x13\xa7\xa8\x8f\xa9\xbe\x65\x3c\x7d\x6d\x09\x02\xf7\xa4\xb5\x45\x42\x5a\x06\xb8\xc5\xfd\x89\x83\x1d\x75\x71\xcd\x6e\xf3\x15\x77\x97\x1b\xc7\x84\x61\x8b\xe1\xa9\x64\x54\xd4\x6d\x54\xc5\x60\x30\xad\xb6\x1b\xdd\x73\x68\xb8\xb1\xd2\xd7\x32\x5b\x72\x95\x12\x0c\xb5\x60\xdc\x8a\x6b\x27\x6f\x0b\x47\xd8\xb1\xa0\xd1\x6d\x83\xf6\x07\x2b\xfe\xe2\xe5\x9b\xcf\x06\x1c\xd7\x82\x53\x26\x15\xdc\x1f\xea\xd9\xbf\x0d\x8d\x8e\x80\xdf\x2d\x47\xe8\x30\x94\x20\x90\x29\xa6\xa0\xfd\x91\x7c\x87\x8a\x4f\x01\xd2\x28\xda\xc0\xf8\xce\x19\x71\x14\x14\xbf\x31\x5f\x6b\xa7\xa6\xcc\x77\x2a\xd8\x0f\x99\x5c\x14\xba\x02\xe6\x8a\xb1\x6a\x37\x9e\x02\xcd\x74\x52\x88\xa1\x5c\xea\x1e\xbf\x6c\x95\x73\xac\xca\xe6\xaf\xb7\x47\xa8\x6b\x3e\x1a\x6a\x0a\x3d\x2c\xf3\x0f\xc6\xcf\x61\x89\x2a\xc1\x3e\xcb\xea\x88\xd1\x2c\x46\xe7\x78\x3c\x70\x8d\x97\x46\xde\xc3\xd5\x33\xac\x8d\xed\xc6\x92\x31\x1a\x39\xa1\x6c\xb4\x8a\x76\x62\xd1\x10\xe5\x4e\x90\x07\x2e\x6e\xe1\xb1\x8f\x75\x6e\xc6\x6c\xc8\xb2\x80\x73\xac\x2b\x37\xb3\x20\xbc\x08\x88\x92\xae\xf4\xe4\x54\xc8\xb8\x2a\x3c\xb1\x5a\x61\x90\xe1\xfe\xa8\x02\x3c\xa4\x29\x93\x45\xa5\xe1\xa7\x41\x95\x4f\xaa\xaf\x2f\xfd\x97\x2c\xa5\x5c\xfd\x4d\x65\x17\x92\xa1\x12\xbb\x2c\x89\xca\xd8\xcc\xb8\x4e\x79\x33\xa0\x77\x19\x3f\x1a\x9e\x82\x7e\xe3\x2f\x79\xdd\x64\xc9\xe5\xb6\x59\x2e\x8b\x06\xf3\xc7\xf8\x6c\xbf\xf6\x5c\x0e\x9e\x62\xfd\xeb\xeb\xf8\x4b\x23\xb8\x94\x2a\x1d\xbf\x4d\xb0\x52\xe5\x59\x64\x28\xdb\x08\xba\x40\xcf\x47\xd9\xad\xcd\xae\xae\x57\x1e\xef\x6f\x32\xa3\xec\x47\x2e\x2b\x1c\xcc\xdf\x17\xe9\x02\x14\xc9\x60\x5d\x2f\xf0\x35\x26\x16\xdb\x37\x94\xd6\xb2\xbc\x30\xd5\x8e\x64\x6e\x80\x80\xa4\x1c\x61\xbe\x08\xb6\x2c\xae\xe6\xda\xe1\x5f\x7d\xe3\x73\xd8\xe5\xc1\x2e\x54\x7b\x21\xdf\x7b\x07\x73\xc8\xe1\xcd\xcf\xb1\xf9\xb5\xe5\xdf\x00\x9d\xb6\x66\xd0\xc5\x22\xe5\x66\x67\x86\xe6\x0e\xc3\x3b\x03\x32\xaf\xe7\x84\xb6\xe7\xdd\xc9\xfd\x3d\x01\x2c\xfb\x1e\x1e\xce\xce\x5a\x1f\x45\x6f\x74\xf9\x3d\xb4\xac\x7c\x88\x56\xd1\x2c\x98\x54\x3b\x34\xb9\xd1\x13\x86\x45\xdb\x42\x52\xc5\xce\x6f\xf4\x6f\xab\x19\x6a\x9e\x5f\xe5\xb9\xe0\x11\xb5\xc9\xf0\xfc\x0f\x30\xbf\x17\x5c\xd8\x61\xdd\xa9\xd2\x8d\xd2\x9a\xeb\x53\x00\x00\x00\xff\xff\xa9\x06\xf9\x97\x7f\x1d\x00\x00")

func templatesViewsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsIndexHtml,
		"templates/views/index.html",
	)
}

func templatesViewsIndexHtml() (*asset, error) {
	bytes, err := templatesViewsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/index.html", size: 7551, mode: os.FileMode(420), modTime: time.Unix(1499773237, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _publicJsDashboardJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x58\x6d\x8f\x9c\xb6\x13\x7f\x7f\x9f\xc2\x22\x91\x60\xff\x09\x70\xf9\xb7\xe9\x8b\x7d\xaa\xaa\x4b\x55\x45\x8d\xda\xaa\x39\x29\x2f\x92\x28\x32\xe0\xdd\x75\xcf\x0b\xc8\x36\xb7\x59\x25\xf7\xdd\xeb\x31\x98\xe5\xc1\xb0\xe4\x72\x55\xa3\x5a\xba\x5b\x63\x66\xc6\xe3\x99\xdf\x0c\x33\xde\x14\x69\x2c\x69\x96\xa2\x2d\x91\x6f\x32\x7e\x43\xf8\x6b\x89\x65\x21\x7e\xc3\x7b\xe2\x09\x3d\x9d\xa1\x4f\x17\x48\x0d\x71\xa0\x32\xde\x75\x16\x61\xc4\x58\x10\x74\x39\xaf\x9f\x61\x70\x22\x0b\x9e\x22\xf7\x80\xa9\x74\x17\xad\x57\x11\x27\xf8\x66\xd1\xe6\x7e\x66\xe7\xce\x79\x16\x13\x21\x26\x08\xf8\xbf\x5d\x40\x54\x88\xe3\x38\x77\x42\x36\xb8\x60\xd2\xce\x5e\xa4\x37\x69\x76\x48\x87\x25\xdc\x5d\xdc\x5d\x5c\x34\x6d\x78\x8d\xc5\xcd\x7f\xca\x82\xa2\x88\x27\x0a\xf8\xce\x2e\x60\x83\x29\x9b\xc0\xfd\xfd\x30\x37\x8a\x8e\x48\xd2\x3d\xc9\x8a\x29\x86\x78\x6e\x17\x74\x43\xd9\x14\x35\x7e\x18\x76\x82\x7a\xc8\x09\x3e\xa3\xc2\x43\xc2\xa9\xc8\x13\x2c\x89\x67\x80\xf2\x38\xc0\x7f\xe1\x8f\xde\x09\x35\xf2\x98\x93\x39\x72\x7f\xf9\xf9\xda\x7d\x5a\x2f\x16\x9c\xa9\xb5\xf0\xa0\x63\x59\x84\xc0\x12\xfe\x88\xb5\xc0\x15\x00\x4f\x34\x68\x2b\xdf\xce\x91\xd9\xd2\xe3\xb3\x4f\x2d\xdd\x6e\x31\x47\xf2\x15\x5a\xa1\xc7\x9e\xfb\x88\x51\x21\x49\xaa\xa4\x22\x19\x65\xc9\xd1\x9d\x05\x64\x9f\xcb\xa3\x37\x5b\xf4\x79\xde\x54\x3c\x95\x1e\x13\x38\xae\x2b\x0e\xa9\x22\xc8\x42\xdf\x63\x38\x69\xb3\x42\x3c\xa8\x9f\x3e\xc4\x59\x91\x4a\xf4\xf9\x33\xba\xec\x6f\x62\xb4\x01\x8e\x6a\x3e\x4a\xaf\x75\xf9\xa0\x9d\xbf\x82\xf7\x2d\x02\xba\x41\xde\x4f\x9c\xe3\x63\x40\x85\xfe\xf5\x1a\x6a\xcc\x9a\xe1\x6d\xc6\x26\xe3\xc8\x03\xb9\x14\xd1\xb4\xa9\xb4\x8d\xb8\x7b\xce\xf6\x31\xdf\xd2\xf7\x0b\x2b\x8b\x7c\x15\xe0\x3c\x27\x69\xe2\xb9\x4b\xc9\xd7\xae\x95\x08\xc6\x13\xa4\x08\x92\xb5\xab\x26\x46\x6a\x90\xaa\x9c\xa5\x5f\x84\xf0\x66\x0a\x6b\x4a\x0e\xe8\x05\xa0\xb4\x96\x11\x2b\x38\x4b\x92\xcc\x02\x99\xbd\xca\x62\xcc\xc8\x6b\xc9\x69\xba\x55\x30\xfe\x4a\xc1\x65\x38\xdc\x5f\x70\x08\xe6\x98\xf5\xad\x76\xd7\x5b\x19\x80\x56\xc0\x48\xba\x95\xbb\x8b\x36\xf3\x59\x4c\x54\x40\x9b\x84\x08\x43\x3b\x82\x87\x92\xa4\x09\xe1\x41\x2c\x18\x08\x2b\xe2\x92\x34\x80\xa7\x61\xda\xc3\x15\x5a\x4d\x47\x4d\x25\x92\x26\xf7\x74\x6c\xc5\xff\x40\x78\xb1\xd5\x2f\xd5\x0e\xe6\x7b\x5b\xcb\xeb\x04\xb2\x19\xe0\x3c\x30\xd0\x90\xf5\x61\x28\x13\x3d\x59\x95\xbb\x2e\xa3\x42\x4a\x95\xa6\x21\x0d\xaf\x9c\xf2\xc1\x41\x31\xc3\x42\xa8\x47\x99\x22\xf5\xe7\x57\x29\x56\xcf\x63\xca\x63\x46\xb4\x47\x7c\xb1\xcb\x0e\x0e\x52\x80\xc6\x3e\x3c\xaf\x1c\x38\x03\xcc\x2a\x7b\x3a\xeb\x25\x35\xb2\xb6\xec\x98\xef\x68\x0c\x05\x86\x99\xf9\xe4\x48\xfc\x4c\x85\xb9\xa2\x0b\xa9\xfa\x2b\xb7\x5f\x9b\xf3\xd9\x54\xbf\x43\x84\xa9\x2f\xdc\xb4\xb3\x8d\xc9\xb1\x5b\xaf\xc9\x9d\xd0\xdb\x86\x21\xfc\x2d\xcf\x8a\x1c\xd5\x33\x5f\xec\x9d\x33\x4e\x9d\x62\x5a\x9a\x6e\xb2\x72\x02\xa6\x29\x7d\xed\x73\x22\x88\x34\x86\xcd\xb6\x5b\xa6\xf8\xf7\x59\x82\x59\x6d\x6c\xae\x90\xb2\x72\x1e\x35\x17\xf5\xdc\x97\x54\x02\xf5\x55\x96\x6e\x28\xdf\x23\x2d\xc9\x44\xdb\xa3\x1e\xe0\x5b\xac\x0a\xb6\x2c\xc2\xb1\x72\x63\x15\x92\x7f\x02\xb3\xf7\xce\xed\xb1\xbd\x53\x19\xe8\x9c\x6f\x39\xd9\xa8\xcd\x77\x0e\xaa\x34\xd2\xc2\x3a\x8e\xfe\x7a\xf3\x25\x38\xdd\xaa\x93\x75\x0d\x08\x75\xd2\x83\xd8\x0f\x04\xdd\xd7\x7c\xbf\x2a\xde\xfb\x5a\x4f\x72\xdc\xb0\x1d\x48\xfa\x22\xd3\x85\x0a\xbb\xeb\xa9\x5f\x93\x81\x44\x22\xdf\x98\x6f\xf0\xe1\xaa\x5b\xba\x98\x31\x25\xd9\x9c\xe4\x0c\x92\xc0\x38\x93\xb2\x8d\xc6\x32\x41\x71\xc6\x44\x8e\xd3\x95\xf3\xdc\x41\x42\x1e\xc1\x40\x09\x15\x39\xc3\xc7\x79\x9a\xa5\xc4\x41\x34\x59\x39\x3a\x3f\x81\xe9\x69\x99\x88\xce\x4b\x2e\x98\x71\x08\x7c\x2b\xcb\x20\x9f\xc2\xc7\x68\x9f\xcf\xa7\x92\xa8\xf4\xb0\x04\x3d\xcd\xdb\xbc\x60\xcc\xe7\x74\xbb\x93\x48\x92\x8f\xd2\xdf\x17\xea\x83\x81\xc4\x1e\x6b\xdf\x92\xfd\xba\x93\x3c\x97\xa1\x5a\x5b\x86\x20\x42\x09\x92\x3c\x4b\xb7\xeb\x97\x2f\xd4\x42\x39\x5d\x46\x1c\x85\xea\x3d\xa3\xff\x8a\x8e\xa7\x22\xab\xaf\x25\x7c\xb6\xbe\x01\x3d\xfb\x8d\xac\xd6\xbc\xf5\x21\xed\x2b\x5f\x92\x7f\x03\xea\xd7\x25\x86\xd6\xfa\x4c\x81\xd1\x3f\x07\xb0\xde\xef\x14\x61\xc1\xa6\x50\x8d\x26\x97\x13\xd5\x58\x50\xcf\x06\x3e\xcd\xe7\x57\x2c\x3d\xd0\x3d\x0b\xdb\x53\x77\x34\xa9\xb6\x6d\x90\x8f\x94\xb7\x55\xbd\xda\x24\x1f\xee\x75\xae\xbf\xbc\xd7\x69\xa5\x89\xa9\xc5\x65\x27\x6e\xbf\xb8\xd4\x9d\x82\xc3\x07\xec\x5f\x5a\x6d\x6b\xd3\x92\x13\x1c\xdd\x6a\xf4\x7d\xdd\x1c\xab\x36\x1c\x62\xcd\x3b\xb5\xab\x8b\x1e\x4b\x85\xa4\x36\x83\xe9\x66\xfa\xe4\x5a\xa5\xb2\x62\x30\xc4\x0d\xa5\xd5\x69\x91\x9e\xe8\xb5\xee\x99\x4f\xfc\x40\xd3\xde\xb1\x81\xb1\x45\xff\x5c\x06\xfa\x41\x5d\x82\x2b\xbe\x98\xd1\xf8\xc6\xab\x2f\x5d\x3c\x1b\x38\x01\x98\x44\xdf\x4f\xc8\x1d\xed\x9e\xc7\x10\x44\x8a\x80\x04\x1b\x0a\x70\xa4\x36\x47\x95\xb1\x00\x44\x50\xfb\x78\x2e\x68\x61\xa3\xeb\x2d\x40\xf0\x45\xc1\x0e\x8b\x2b\x48\x82\x9e\xdb\x6f\x03\x5c\x6b\x04\xc2\x88\x02\x4e\xf6\xd9\x2d\x19\x61\xb5\x07\x57\x14\xe0\x24\xb1\x72\xc5\x2c\x13\x64\x88\xcd\x78\xa7\xac\x20\x66\x01\x58\xd9\x73\x37\x58\x48\x2b\x76\xc7\x7a\x92\x51\xd5\x47\x95\x18\xd6\x7d\xec\xc4\x5d\xd5\x77\x34\x21\x23\xaa\xb7\xa3\xa8\x41\x51\xbe\x81\x95\xe6\x6d\x5e\xb3\xb4\xa5\xc9\xb9\x4b\xbd\x3f\x7e\x7f\x3d\xf5\x56\x4f\xdf\x6c\x9e\x48\x01\x5b\xf3\x8e\x45\x69\x32\x57\x7f\x27\x05\x2d\x57\x80\xe5\xed\xca\x98\xe6\x65\x4f\xf3\xa0\xaa\xeb\x1e\xeb\x9f\xd0\xfd\x71\x1d\xd0\x75\x3c\x9b\xdb\xd4\xd2\x4f\x17\xc6\xe1\x26\x71\x4d\xc8\x06\xf6\x14\x32\x57\x71\xe9\xd1\xa0\x0f\xb3\x59\x2d\xae\xda\xf3\xce\xe4\xa4\xe6\xbe\x00\xb2\x87\xdb\x57\x47\xc5\xb4\x8d\x55\x84\xa0\xb2\x23\x7a\xab\xfb\x44\x51\x44\x7b\x2a\xdf\x9f\xd3\xa5\xeb\xf4\x61\xc7\x9f\x73\xbe\x52\xa0\x43\x6d\x73\x3f\x0c\x9d\xe2\xe7\x5d\xed\xeb\xcc\x7f\x8b\x99\xd7\xae\x87\xee\xda\x72\x6d\x40\x31\x76\x69\xfe\xea\x7f\x61\x88\x9e\x5d\x22\x41\x94\x49\x13\xa1\x57\x14\x46\x5f\xa6\x92\x70\xd8\xa7\x94\xf0\x54\x91\x5c\x5e\xa2\xff\xa9\x1f\xc0\xdb\x6c\xf1\x77\x00\x00\x00\xff\xff\x94\x01\x4f\x5f\x47\x1b\x00\x00")

func publicJsDashboardJsBytes() ([]byte, error) {
	return bindataRead(
		_publicJsDashboardJs,
		"public/js/dashboard.js",
	)
}

func publicJsDashboardJs() (*asset, error) {
	bytes, err := publicJsDashboardJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "public/js/dashboard.js", size: 6983, mode: os.FileMode(420), modTime: time.Unix(1499773367, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/index.html": templatesViewsIndexHtml,
	"public/js/dashboard.js": publicJsDashboardJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"public": &bintree{nil, map[string]*bintree{
		"js": &bintree{nil, map[string]*bintree{
			"dashboard.js": &bintree{publicJsDashboardJs, map[string]*bintree{}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"index.html": &bintree{templatesViewsIndexHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: AssetInfo, Prefix: k}
	}
	panic("unreachable")
}
