// Code generated by go-bindata.
// sources:
// templates/views/index.html
// public/js/dashboard.js
// DO NOT EDIT!

package workers

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5a\x51\x6f\xdb\x36\x10\x7e\xcf\xaf\x20\x34\x60\x6d\x1f\x14\x37\x5b\xf7\xb0\xd6\x76\x91\xb5\xc0\x36\x74\xe8\x43\xbb\xad\xcf\xb4\x78\x96\x98\xd0\xa2\x40\x52\xb6\x83\xc0\xff\x7d\x47\x8a\x92\x65\x99\x92\xed\xc5\x6b\xd3\xa1\x7d\x68\x64\xf1\x78\xbc\x3b\x7e\xdf\xf1\x78\xf6\xfd\x3d\x61\x30\xe7\x39\x90\x28\x91\xb9\x81\xdc\x44\x64\xb3\xb9\x18\x33\xbe\x24\x89\xa0\x5a\x4f\x22\x25\x57\xd1\xf4\x82\xe0\xbf\xf6\xdb\x44\x8a\x58\xa4\xf1\xd5\x0f\x7e\xcc\x8d\x67\x57\xf5\x70\x41\x53\x88\x33\xa0\x0c\x54\x34\xfd\x24\xd5\x2d\x28\x3d\x1e\x65\x57\x5e\xd1\x08\x35\x4d\x2f\xfc\x9f\x23\x57\x5b\xeb\xce\x6a\xfb\xe3\x2f\x5a\xc3\x5d\x91\x82\xe6\x20\x88\xfb\x3f\x4e\x15\x40\xde\x91\x0d\xca\x3b\x17\x78\x9e\x06\x64\xbb\xf2\x5b\xc3\x0f\x49\x7a\x63\x7f\x1c\x10\x77\x53\x78\x3d\x61\x4e\xc9\x9c\xc6\x0c\xe8\xdc\xfe\xfd\x69\x1d\x4d\xc7\x23\x3e\xb0\x56\x15\xd6\x13\x4c\xf9\x99\x18\x58\x9b\x58\xf1\x34\x33\x87\xac\x6a\xcd\xce\xca\x14\x22\xc2\xd9\x24\x12\x5c\x23\x76\x70\x8f\xe3\x44\x96\x88\xa1\xe9\xf3\x03\x46\xd4\xaa\xa6\x7f\xd4\x33\x0f\x59\xdd\x3f\xdc\x33\xd4\xf7\x9a\x92\x4c\xc1\x7c\x12\x7d\xd7\x18\x7d\xc4\xee\x56\x68\x98\x4b\x69\x2c\xa0\xfb\xad\xd4\x28\xd8\xcc\x29\x05\x72\x04\xe6\x18\x8e\xbf\x39\xac\xc8\x5b\x30\x94\x0b\x74\xd4\x0a\x9d\xa2\xc3\xef\x4b\x17\x10\x54\x21\xe6\xe2\x84\xab\x44\x40\x23\x83\xc0\x38\xb8\x40\x1b\x00\x02\xa8\x9a\x73\x07\xa9\xd3\x03\x4c\x3b\x74\xdb\x95\xeb\x7e\xfc\xf7\x7c\xbd\x03\x21\x82\xf4\x7a\xd4\x84\x2d\x35\x62\xeb\xb1\x32\x76\x55\xe5\xe4\x93\xf9\xda\xe4\xf2\xcf\xcd\x56\x6f\xf0\x37\xae\x3e\x72\xae\x2a\x60\x5f\x1b\x51\x0d\xd5\xb7\x8f\x96\xa8\xce\xb8\x78\x45\xb9\x39\x9d\xab\x38\x89\xb8\xf9\x9f\x9f\xae\x6e\xd9\x6f\x64\xfd\xaf\xc9\x3a\x50\x49\xb7\x49\xa9\xcb\x24\x01\xad\x3b\xc5\x5a\xa0\xd0\xee\xe3\x66\x53\xa6\x05\x53\xc4\xcc\xe4\x58\x53\xcb\xb2\x20\xed\xb0\xee\xba\x30\x2b\x8d\x91\x39\x31\x77\x05\xe0\x04\xf7\x21\x6a\xcd\x27\x56\x07\x5e\x45\x68\x29\x8c\x7b\x5e\x6b\xc2\x94\x2c\x98\x5c\xe5\xb1\x91\x69\x2a\x90\x0f\x8c\x1a\xea\x3f\x4c\xa2\x7a\x34\x22\x54\x71\x1a\xc3\x1a\x6d\x67\xc0\xec\x26\x0a\x0d\x01\x2c\x5d\x27\x86\xcb\x5c\xef\x87\xbb\x8d\x8b\x84\x2a\x70\xdb\xbd\xbf\xd5\xe3\x51\x65\x76\xe7\x6d\x29\xea\xb9\x8d\xbd\x0b\xc8\x4b\xa2\x05\x47\x73\xac\x81\x81\x1d\x16\x3d\x49\xa6\x21\xd0\x0d\x5d\x52\x9d\x28\x5e\x98\x97\x4b\xc9\xd9\xd3\xe7\xcf\x3a\xee\x2f\x24\xa3\xa2\x7e\x47\x55\x0a\x06\x59\xd7\x7e\xe9\x9e\x63\xc3\x8d\x95\x7e\x23\xf3\x39\x57\x0b\xa2\x60\x21\x97\x40\xa8\x10\x64\x0b\x83\xb6\xfc\x4c\xb2\xbb\x49\xf4\x89\xa3\xc0\x0c\x82\xe2\x04\xd6\x09\x14\x86\xd4\x9b\x55\x0f\x5c\x92\x6b\x05\xe4\x4e\xa2\xe7\xa5\x82\xd7\x3b\x5a\x13\xd4\x30\xa3\xc9\x6d\x0b\x7c\x1f\x9c\xea\xa7\xcf\x5e\x0d\xb1\xbe\x21\x66\x2a\xee\x8a\x8c\xe3\x15\x95\x34\x4f\xb1\x51\x54\x67\x15\x33\xc9\x87\xc6\xd0\x1e\xa2\xd1\x10\xcd\xba\xbb\x30\x1e\x95\x62\x88\x66\xee\x71\x8f\x2d\x36\x64\x3d\xf7\x52\x43\x67\x36\x85\x80\x2e\x10\x78\x7c\xd9\x45\xe5\xd8\x8d\xef\x08\x93\x6a\x4a\x86\xde\x84\xf2\xe1\xd8\x58\x6e\x86\xde\xab\x1e\x40\x99\x6c\xfa\x9e\x2e\x60\x3c\xc2\x87\x5e\x89\x37\x0a\xa8\x01\x36\x2c\xf4\x57\xc1\x0e\x0b\x79\x92\x85\x85\xf0\x6d\xc0\x4c\x2b\xdb\xe3\x94\x0d\x6d\x70\xc2\xfe\x00\xbe\xb4\x91\x7b\x48\x96\x5c\x51\x95\xdb\xb4\xd7\x2e\x90\x4f\xc8\x91\xbe\x34\xfe\x96\x21\xbf\x5c\x86\x6c\xdf\x6c\x74\x36\x5c\x37\x0e\xe6\x16\xb8\x83\x58\x16\xb6\x49\xe4\xd2\xcb\x47\xd4\xe5\xb2\xa0\x2b\x6b\x1e\x92\x62\xce\xe3\x5b\x86\x81\x7b\x90\x6f\x89\x90\x16\x01\xce\xb9\xdf\x50\xd9\x59\x9d\x6b\x76\x9b\x2f\xb9\x6b\x00\x9e\x33\x0c\x67\x39\x04\x35\x18\xe7\x71\x4d\xf2\xf0\x59\xe5\x47\x3f\x58\xf1\x87\x1c\x54\xe8\x0b\x2e\xb9\x3d\xaa\xfc\xea\x5f\x06\x46\x67\x88\xdf\xad\xad\x0e\x30\x95\xb4\xcb\x83\xa3\x22\xf9\x0e\x27\x9e\xeb\xc4\x7f\xe7\x8c\x38\x4b\x14\xbf\x30\x5e\x6b\x52\x53\x16\xba\x39\x1f\x17\x99\x42\x94\xda\x07\xe6\x9a\x31\xbf\x1b\x5f\x79\x29\x74\xae\xf2\xe7\xf7\xb7\x67\x28\x7e\x3e\x1a\x6a\xca\x9e\xb2\xa6\x96\xf9\x13\xf3\xe7\xff\xb7\x3a\x62\x34\x4f\x91\x1c\xdb\xa6\xc4\xe1\xd2\x28\xd8\x80\xf8\x0a\x0b\x68\xbb\xb1\xe4\x10\x8c\x9c\x50\x7e\xb0\xd4\x76\x62\xc9\x10\xe4\x1e\x21\x0e\x5c\xde\x22\x73\xca\x3a\xdd\x63\x9b\xb2\x6c\xc0\x39\xd6\x95\xeb\x49\x14\x5f\x45\x44\x49\x57\x7a\x72\x2a\x64\xea\x0b\x4f\xac\x56\x18\xe4\xb8\x3f\xaa\x84\x00\x68\xaa\xc3\xc2\xcf\x08\xc3\xc0\x9f\x27\xfe\x1b\xca\xfe\x46\x64\x25\x57\x7f\xef\xb8\x1f\x92\xa1\x12\xbb\x2a\x89\xaa\xdc\xcc\xb8\x5e\xf0\x46\x61\xd0\x8d\xef\x0d\x5f\x80\x7e\x15\x2e\x79\xdd\x62\xd9\x8b\x5d\xb3\xdc\x29\x1a\x4d\xb7\xf9\xd9\x7e\x23\xfa\x62\xb0\xd3\x13\xf6\xaf\xc3\x97\x46\x70\x2e\xd5\xe2\x70\xc7\xcd\x4a\x55\x77\x91\xa1\xd3\x46\xd0\x19\x32\x1f\x65\x77\x36\xdb\xb7\x20\xb7\x3d\xce\xdc\x28\xfb\x45\xb0\x15\x8e\xa6\xef\xcb\xc5\x0c\x14\xc9\x61\x55\x3b\xf8\x12\x0f\x16\x3b\x36\x74\xac\xe5\x45\x69\xfc\x8e\xe4\x4e\x41\x44\x16\x1c\xc3\x7c\x15\xed\x58\xec\xd7\xda\xc3\x5f\xdd\x15\x3d\xad\xc1\xb6\x1f\xaa\xa3\x22\xdf\xdb\xa7\x3c\xe5\xf2\x16\xc6\xd8\xf4\x8d\xc5\xdf\x00\x9c\x76\x56\xd0\xe5\x6c\xc1\xcd\xde\x0a\x4d\x9f\x2f\xb8\x02\x22\xaf\xe7\x86\x76\x64\x7f\xf1\xfe\x9e\x00\x96\x7d\x9b\xcd\xc5\x45\xeb\x87\x03\x37\xba\xfa\xcd\x40\x55\xf9\x78\x03\x69\x51\x08\x9e\x50\x7b\xdc\x8d\xb6\x65\x91\x8f\xdc\x92\xaa\xba\x7d\x54\x37\x16\x6d\x8f\x82\x4c\xc8\x13\xd4\x7b\x19\x1a\xda\x6c\x9e\xbc\x42\x33\x2a\x35\xd3\x66\x31\xad\x92\x49\x34\xf2\x70\x18\xdd\xe8\x11\xc3\x0a\x71\x26\xa9\x62\x97\x37\xfa\xf5\x72\x62\xd5\x5d\x6f\x4d\xb9\xfc\x15\xcc\x2f\x25\x17\xd6\x07\x77\x85\xf5\xea\x1a\xc7\xfe\x09\x00\x00\xff\xff\xe1\xa6\x2b\x59\x10\x21\x00\x00")

func templatesViewsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsIndexHtml,
		"templates/views/index.html",
	)
}

func templatesViewsIndexHtml() (*asset, error) {
	bytes, err := templatesViewsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/index.html", size: 8464, mode: os.FileMode(420), modTime: time.Unix(1499778544, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _publicJsDashboardJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x59\x6f\x6f\xdb\x36\x13\x7f\x9f\x4f\xc1\xc7\x2d\x20\xf9\x69\x2d\xa5\xdb\xba\x17\x76\x9c\x61\x48\x87\xa1\x58\xb0\x0d\x6d\x80\xbe\x68\x8b\x82\x92\x68\x9b\x33\x2d\x19\x24\x15\xd7\x68\xf3\xdd\xc7\xa3\x44\xfd\xa5\x64\x36\x4b\xb1\x62\x04\x52\x53\xe4\xdd\xf1\xee\x78\xf7\xe3\x91\x5d\xe5\x69\x2c\x69\x96\xa2\x35\x91\x6f\x32\xbe\x25\xfc\xb5\xc4\x32\x17\xbf\xe3\x1d\xf1\x85\xee\x4e\xd1\xa7\x33\xa4\x9a\x38\x50\x19\x6f\x3a\x83\xd0\x62\x2c\x08\x3a\x9f\x57\xdf\xd0\x38\x91\x39\x4f\x91\x77\xc0\x54\x7a\x8b\xd6\x54\xc4\x09\xde\x2e\xda\xdc\xcf\xec\xdc\x7b\x9e\xc5\x44\x08\x07\x01\xdf\xd9\x05\x44\xb9\x38\x8e\x73\x27\x64\x85\x73\x26\xed\xec\x79\xba\x4d\xb3\x43\x3a\x2c\xe1\xee\xec\xee\xec\xac\xe9\xc3\x1b\x2c\xb6\xff\x29\x0f\x8a\x3c\x76\x14\xf0\xbd\x5d\xc0\x0a\x53\xe6\xc0\xfd\xc3\x30\x37\x8a\x8e\x48\xd2\x1d\xc9\x72\x17\x47\x3c\xb7\x0b\xda\x52\xe6\xa2\xc6\x8f\xc3\x9b\xa0\x3e\xf6\x04\x9f\x50\xe1\x21\xc3\x29\xdf\x27\x58\x12\xdf\x04\xca\xe3\x00\xff\x85\x3f\xfa\x75\xd4\xc8\xe3\x9e\xcc\x91\xf7\xeb\x2f\x37\xde\xd3\x6a\x30\xe7\x4c\x8d\x85\x07\x9d\xcb\x22\x04\x96\xf0\x27\xac\x05\x2e\x21\xf0\x44\x83\xb6\xdc\xdb\x39\x32\x4b\xfa\x7c\xfa\xa9\xa5\xdb\x2d\xe6\x48\x5e\xa3\x25\x7a\xec\x7b\x8f\x18\x15\x92\xa4\x4a\x2a\x92\x51\x96\x1c\xbd\x69\x40\x76\x7b\x79\xf4\xa7\x8b\x3e\xcf\x9b\x92\xa7\xd4\xc3\x81\xe3\xa6\xe4\x90\x2a\x83\x2c\xf4\x3d\x86\x5a\x9b\x25\xe2\x41\xf5\xf5\x21\xce\xf2\x54\xa2\xcf\x9f\xd1\x79\x7f\x11\xa3\x0d\x70\x94\xfd\x51\x7a\xad\xcb\x07\xbd\xf9\x4b\x98\x6f\x11\xd0\x15\xf2\x7f\xe6\x1c\x1f\x03\x2a\xf4\xaf\xdf\x50\x63\xda\x4c\x6f\xd3\x56\x19\x47\x3e\xc8\xa5\x88\xa6\x4d\xa5\x6d\xc4\x5d\x3b\xdb\x66\xbe\xa5\xef\x3b\xea\xb4\x78\xae\x14\xb5\x77\x21\xf9\xa5\x67\xa5\x79\x02\x93\xc9\xa5\xa7\x3a\x46\x62\x90\x2a\xbc\xd2\x13\x21\xcc\x9c\x62\x4b\xc9\x01\xbd\x80\xe8\xac\xf8\x63\x15\xc6\x92\x24\xd3\x40\x66\xd7\x59\x8c\x19\x79\x2d\x39\x4d\xd7\x2a\x7c\xff\x81\xd0\x22\x05\x46\x85\x2e\xac\x52\xad\x83\xb0\x63\x6d\x7b\xff\xb7\x34\x19\x7b\x5d\x8e\x03\x6c\x0f\x6d\x07\x34\xe5\xda\x27\xcb\x42\xe5\x8b\x84\xde\xa2\x98\x61\x21\x96\x93\x48\xa6\xb3\x35\xcf\xf2\x3d\xaa\x7a\x33\xb1\x9b\x0c\xd8\xdc\xb4\x3d\xca\xa5\x54\xc9\x0e\xc9\xac\xc4\xe8\x8f\x49\x43\xaa\x96\x97\xe0\x74\xad\x22\x00\xba\x34\x56\xc4\xc6\x88\x19\x27\xbb\xec\x96\x4c\x90\xf2\x12\x9e\xc9\x6c\xbd\x66\x4a\xc8\x2e\x4b\x30\x33\x63\x98\xab\x53\x69\x39\x79\xd4\x1c\xd4\xfd\x99\xa4\x12\xa8\xaf\xb2\x74\x45\xf9\x0e\x15\xa2\xea\x70\xb3\x06\x47\x4b\x80\xda\x0f\x16\xe1\x78\xbb\x9c\x54\x61\xf9\x4a\x0b\xf1\xdf\x79\x56\xee\x77\xde\x74\x31\xb9\xbc\xa0\xc6\xbc\x35\x3b\xee\x37\xda\xa0\xaa\x37\x93\x1c\x8b\xcd\x04\x95\xca\x15\xf2\x14\x4f\x48\xd5\x5f\xe1\x1d\x07\x9f\x86\x6a\x67\x2e\x47\x62\xee\x0e\x11\xa6\xc0\xde\x6d\x97\x47\xa2\xec\xce\x3d\xf6\x8c\xc4\x10\x92\xf2\x0b\x62\x56\x5e\x07\x78\xbf\x27\x69\xe2\xb3\xab\x69\x9f\xaf\xaf\xc1\x00\x2e\x06\x8c\xa4\x6b\xb9\x39\x6b\x33\x9f\x04\xb4\x12\x25\x9d\xe0\xcc\xd0\x8e\x80\x59\x41\xd2\xc4\x5f\x0d\x64\x43\xe4\x80\xbf\x8a\xb8\x20\x0d\xe0\x6b\x98\xf6\xa0\x30\x6f\x04\xf2\xa0\x35\xa0\xa6\x14\x49\x93\x13\xe8\xd4\x61\xab\x10\xaa\xe4\xbf\x2f\xe8\x75\xc4\xda\x8a\xef\x72\x05\x53\x2c\x36\xf0\x6e\x10\xdb\xc0\x41\x63\xd8\x75\x68\x44\xb5\x0b\xec\x94\xf5\x81\xee\xc7\x94\xc7\x8c\xe8\x1d\x99\x89\x4d\x76\xa8\xf0\x45\xa8\xfc\x07\x1b\xa0\x57\xfa\xf3\x54\x8e\x93\x23\x99\x65\x2a\xa6\x3b\x79\x3d\x9a\x69\xa7\x32\xf6\xe0\x9a\xb1\xd6\xe1\xc3\x43\xa1\xba\x2b\xa2\xd3\x74\x95\xd5\x78\x5e\xec\xb5\x42\x73\x41\xe4\x03\x81\xb9\x92\x64\xb2\xed\x51\x2f\xe0\x07\x60\xbc\x4c\xc9\x57\xc0\x5c\x62\x78\x8b\xcd\x05\xbf\x39\x59\xa9\xc5\x9b\x08\x0e\x36\xb9\x02\xf8\x7d\x0f\xc4\xd2\x81\x50\xe4\x3f\x88\xff\x40\xd0\x7d\xdd\xf7\x9b\xe2\xbd\xaf\xf7\xda\xa7\x1f\x48\xfa\x22\xd7\x9d\x3a\xf7\x2a\xba\xe2\x10\xb2\x1f\x38\x6f\xcc\x81\x73\xb8\xea\xd6\xdd\xa6\xb9\x80\x4d\x2d\x67\xf4\xb8\x3e\x01\xd9\x46\x63\x99\xa0\x38\x63\x62\x8f\xd3\xe5\xe4\xf9\x04\x09\x79\x04\x07\x25\x54\xec\x19\x3e\xce\xd3\x2c\x55\x45\x10\x4d\x96\x13\x8d\x4f\xe0\x7a\x5a\x00\xd1\x69\xc9\x39\x33\x1b\x02\x67\x65\x91\xe4\x2e\x7c\x8c\xf6\xf9\x66\x54\x12\x05\x0f\x17\xa0\xa7\x99\xdd\xe7\x8c\xcd\x38\x5d\x6f\x24\x92\xe4\xa3\x9c\xed\x72\x75\x60\x20\xb1\xc3\x7a\x6f\xc9\xee\xb2\x03\x9e\x17\xa1\x1a\xbb\x08\x41\x84\x12\x24\x79\x96\xae\x2f\x5f\xbe\x50\x03\x45\xf7\x22\xe2\x28\x54\xf3\x8c\xfe\x2b\x3a\xd6\xb7\x84\xbe\x96\x70\x6c\x7d\x03\x7a\xf6\x5f\x61\xb4\xe6\xad\x83\xb4\xaf\x7c\x41\xfe\x0d\xa8\x5f\x95\x18\x5a\xeb\x13\x05\x46\xdf\x0e\x60\xbd\x9f\x15\x61\xce\x5c\xa8\x46\xc1\xa5\xa6\x1a\x4b\xea\xa9\x63\x31\xdd\x1f\xb1\x5c\xe0\xef\x59\xd8\xd6\x57\x7b\xa7\xda\xb6\x41\x3e\x52\xde\x96\xf5\x6a\x93\x7c\xb0\xbe\x95\x37\x06\x1f\xdd\xab\xd6\x16\x4c\xb8\x16\x97\x9d\xbc\xfd\xe2\x52\xd7\x25\x0e\xdd\x4e\x1c\xa7\xfb\x4b\xeb\xcd\xa5\xe9\x49\x87\x8d\x6e\xbd\x52\xcd\xf4\xcb\x8e\xa7\x54\x56\xb9\xe6\xd7\x6f\x2d\x8b\x1e\x4b\x19\x49\x6d\x06\x73\x9b\xe9\x93\x6b\x95\x8a\x8a\xc1\x10\x37\x94\x56\xd6\x22\xdd\xd1\x63\x5d\x9b\x6b\x7e\xa0\x69\xaf\xd8\x88\xb1\x45\xdf\x2e\x13\xfa\x41\x55\x82\x2b\xbe\x98\xd1\x78\xeb\x57\x2f\x86\xbe\x2d\x38\x21\x30\x89\x7e\x5c\x93\x1b\xda\xb5\xc7\x10\x44\x8a\x80\x04\x2b\x0a\xe1\x48\x6d\x1b\x55\xe4\x02\x10\x41\xed\xe3\x7b\xa0\x85\x8d\xae\x37\x00\xc9\x17\x05\x1b\x2c\xae\x00\x04\x7d\xaf\x7f\x0d\xf0\xac\x19\x08\x2d\x0a\x8a\x57\x89\x11\x56\x7b\x72\x45\x01\x4e\x12\x2b\x57\xcc\x32\x41\x86\xd8\xcc\xee\x14\x15\xc4\x34\x00\x2f\xfb\xde\x0a\x0b\x69\x8d\xdd\xb1\x3b\xc9\xa8\xea\xa3\x4a\x0c\xeb\x3e\x66\x71\x57\xf5\x0d\x4d\xc8\x88\xea\xed\x2c\x6a\x50\x14\x33\x30\xd2\x7c\x8a\x6e\x96\xb6\x34\x39\xf5\x22\xfd\xe7\x1f\xaf\x5d\x9f\xa4\x4d\xea\xe9\xe7\xf9\x9a\x05\x62\x6c\xde\xf1\x2c\x4d\xe6\xea\xaf\x56\xd4\xf2\x8e\x5d\x3c\x17\x8e\x59\x50\xdc\x6d\xbe\x8a\x09\xfa\xce\xf5\x55\x6d\xe8\x3e\xb3\x3d\xa8\x19\x35\x6e\x16\x81\xfb\x35\x2c\x79\x5c\x41\x55\x85\x54\xe6\x3f\x39\x8a\x08\x2c\x8c\x69\x40\xb2\x03\xce\xd9\xc1\x71\xae\x10\xc7\xa7\x41\x3f\x81\xa6\x95\xb8\x72\xcd\x3b\x83\xb6\xcd\x75\x21\x7d\x1e\x6e\x5d\x9d\xef\x6e\x0b\xab\xdc\x47\xc5\x5d\xef\xad\xbe\x01\x8b\x3c\xda\x51\xf9\xfe\x94\x2e\xdd\xfd\x1f\x8e\x01\xd7\x70\x56\x8a\x74\xb8\x6c\x61\x00\x4d\x1f\x62\xf3\xae\x15\xd5\xd9\x76\x8b\x99\xdf\xae\xf8\xee\xda\x72\x6d\x01\x63\xfc\xd3\xfc\xd5\xff\x84\x21\x7a\x76\x8e\x04\x51\xae\x4d\x84\x1e\x51\x59\xf7\x32\x95\x84\xc3\x3a\x85\x84\xa7\x8a\xe4\xfc\x1c\xfd\x5f\xfd\x40\xdc\x4d\x17\x7f\x07\x00\x00\xff\xff\x6e\xf6\x88\x0d\xe6\x1e\x00\x00")

func publicJsDashboardJsBytes() ([]byte, error) {
	return bindataRead(
		_publicJsDashboardJs,
		"public/js/dashboard.js",
	)
}

func publicJsDashboardJs() (*asset, error) {
	bytes, err := publicJsDashboardJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "public/js/dashboard.js", size: 7910, mode: os.FileMode(420), modTime: time.Unix(1499778904, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/index.html": templatesViewsIndexHtml,
	"public/js/dashboard.js": publicJsDashboardJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"public": &bintree{nil, map[string]*bintree{
		"js": &bintree{nil, map[string]*bintree{
			"dashboard.js": &bintree{publicJsDashboardJs, map[string]*bintree{}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"index.html": &bintree{templatesViewsIndexHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: AssetInfo, Prefix: k}
	}
	panic("unreachable")
}
