// Code generated by go-bindata.
// sources:
// templates/views/index.html
// public/js/dashboard.js
// DO NOT EDIT!

package workers

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5a\x5f\x6f\xdb\x36\x10\x7f\xcf\xa7\x20\x34\x60\x6d\x1f\x14\x37\x5b\xf7\xb0\xd6\x76\x91\xb5\xc0\x36\xb4\xe8\x43\x3b\xac\xcf\xb4\x78\xb6\x98\xd0\xa2\x40\x52\xb6\x83\xc0\xdf\x7d\x47\x8a\x92\x65\x99\x92\xec\xc5\x6b\xd3\xa1\x79\x88\x65\xf2\x78\xbc\x7f\xbf\xe3\xf1\xe4\xfb\x7b\xc2\x60\xce\x33\x20\x51\x22\x33\x03\x99\x89\xc8\x76\x7b\x31\x66\x7c\x45\x12\x41\xb5\x9e\x44\x4a\xae\xa3\xe9\x05\xc1\xbf\xe6\x68\x22\x45\x2c\x16\xf1\xd5\x4f\x7e\xce\xcd\xa7\x57\xd5\x74\x4e\x17\x10\xa7\x40\x19\xa8\x68\xfa\x59\xaa\x5b\x50\x7a\x3c\x4a\xaf\x3c\xa3\x11\x72\x9a\x5e\xf8\x8f\x23\x77\xdb\xe8\xd6\x6e\x87\xf3\x2f\x1a\xd3\x6d\x92\x9c\x66\x20\x88\xfb\x1f\x2f\x14\x40\xd6\xa2\x0d\xd2\x3b\x15\x78\xb6\x08\xd0\xb6\xe9\x77\x82\x0f\x51\x7a\x61\x7f\xee\x21\x77\x4b\x78\xb5\x60\x4e\xc9\x9c\xc6\x0c\xe8\xdc\x7e\xfe\xb2\x89\xa6\xe3\x11\xef\xd9\xab\x34\xeb\x09\xa2\xfc\x4a\x0c\x6c\x4c\xac\xf8\x22\x35\x43\x52\x35\x56\xa7\xc5\x02\x22\xc2\xd9\x24\x12\x5c\x63\xec\xa0\x8f\xe3\x44\x16\x18\x43\xd3\xe7\x03\x42\x54\xac\xa6\xef\xab\x95\x43\x52\x77\x4f\x77\x4c\x75\x0d\x53\x92\x2a\x98\x4f\xa2\x1f\x6a\xa1\x8f\xf0\x6e\x19\x0d\x73\x29\x8d\x0d\xe8\x6e\x29\x35\x12\xd6\x6b\x0a\x81\x18\x81\x39\x9a\xe3\x6f\x0e\x6b\xf2\x16\x0c\xe5\x02\x15\xb5\x44\xa7\xf0\xf0\x7e\x69\x07\x04\x55\x18\x73\x71\xc2\x55\x22\xa0\xa6\xc1\xc0\x18\xdc\xa0\x19\x00\x02\xa8\x9a\x73\x17\x52\xa7\x1b\x98\xb6\xe0\xb6\x4f\xd7\xfe\xfa\xef\xf1\x7a\x07\x42\x04\xe1\xf5\xa8\x01\x5b\x68\x8c\xad\xc7\x8a\xd8\x75\x99\x93\x4f\xc6\x6b\x9d\xcb\xbf\x34\x5a\xbd\xc0\xdf\xb1\xfa\xc8\xb1\xaa\x80\x7d\x6b\x40\x35\x54\xdf\x3e\x5a\xa0\x3a\xe1\xe2\x35\xe5\xe6\x74\xac\xe2\x22\xe2\xd6\x7f\x79\xb8\xba\x6d\xbf\x83\xf5\xbf\x06\x6b\x4f\x25\xdd\x04\xa5\x2e\x92\x04\xb4\x6e\x15\x6b\x81\x42\xbb\x0b\x9b\x75\x99\x16\x4c\x11\x33\x93\x61\x4d\x2d\x8b\x9c\x34\xcd\xba\xaf\xc2\xac\x30\x46\x66\xc4\xdc\xe5\x80\x0b\xdc\x97\xa8\xb1\x9e\x58\x1e\x78\x15\xa1\x85\x30\xee\x79\xa3\x09\x53\x32\x67\x72\x9d\xc5\x46\x2e\x16\x02\xf1\xc0\xa8\xa1\xfe\xcb\x24\xaa\x66\x23\x42\x15\xa7\x31\x6c\x50\x76\x06\xcc\x3a\x51\x68\x08\xc4\xd2\x75\x62\xb8\xcc\xf4\xa1\xb9\x9b\x71\x91\x50\x05\xce\xdd\x87\xae\x1e\x8f\x4a\xb1\x5b\xa3\x85\xa8\xd6\xd6\xf2\x2e\x21\x2b\x88\x16\x1c\xc5\xb1\x02\x06\x3c\x2c\x3a\x92\x4c\x0d\xa0\x1b\xba\xa2\x3a\x51\x3c\x37\x2f\x57\x92\xb3\xa7\xcf\x9f\xb5\xd4\x5f\x4a\x46\x45\x35\x46\xd5\x02\x0c\xa2\xae\x39\xe8\x9e\x63\xc3\x8d\xa5\x7e\x23\xb3\x39\x57\x4b\xa2\x60\x29\x57\x40\xa8\x10\x64\x17\x06\x4d\xfa\x99\x64\x77\x93\xe8\x33\x47\x82\x19\x04\xc9\x09\x6c\x12\xc8\x0d\xa9\x9c\x55\x4d\x5c\x92\x6b\x05\xe4\x4e\xa2\xe6\x85\x82\xd7\x7b\x5c\x13\xe4\x30\xa3\xc9\x6d\x23\xf8\x3e\x3a\xd6\x4f\x9f\xbd\xea\x43\x7d\x0d\xcc\x85\xb8\xcb\x53\x8e\x57\x54\x52\x3f\xc5\x46\x51\x9d\x96\xc8\x24\x1f\x6b\x41\x3b\x80\x46\x43\x30\x6b\x7b\x61\x3c\x2a\x44\x1f\xcc\xdc\xe3\x01\x5a\xac\xc9\x3a\xee\xa5\x86\xce\x6c\x0a\x01\x9d\x63\xe0\xf1\x55\x3b\x2a\xc7\x6e\x7e\x8f\x98\x94\x4b\x52\xd4\x26\x94\x0f\xc7\xc6\x62\x33\x34\xae\x3a\x02\xca\xa4\xd3\x0f\x74\x09\xe3\x11\x3e\x74\x52\xbc\x51\x40\x0d\xb0\x01\x22\x7b\xfc\x10\x9f\x4a\xfa\x49\xdf\x53\x7d\x24\x65\xc9\x74\x8e\xf9\x7b\x68\x7b\xc7\xf3\x18\x42\x8f\xf3\x30\x11\x8e\x06\x2c\x65\x69\x3b\xec\x6a\xbd\x1b\x5c\x70\x38\x81\x83\xd6\x79\x0f\x49\xd4\x6b\xaa\x32\x9b\x79\x9b\x35\xfa\x09\x69\xda\x57\xe7\xdf\x93\xf4\xd7\x4b\xd2\xcd\xcb\x95\x4e\xfb\x4b\xd7\xde\xf4\x06\x77\x10\xcb\xdc\xf6\xa9\x5c\x86\xfb\x84\xbc\x5c\x22\x76\x95\xd5\x43\xb2\xdc\x79\x74\x4b\xd1\x70\x0f\xd2\x2d\x11\xd2\x46\x80\x53\xee\x0f\x64\x76\x56\xe5\x6a\x6f\xf3\x15\x77\x3d\xc8\x73\x9a\xe1\x2c\xe7\xb0\x06\xe3\x34\xae\x40\x1e\x3e\x2e\xfd\xec\x47\x4b\xfe\x90\xb3\x12\x75\xc1\x2d\x77\xa7\xa5\xdf\xfd\xeb\x84\xd1\x19\xec\x77\x6b\x0b\x14\x4c\x25\xcd\x0a\xe5\x28\x4b\xbe\xc3\x85\xe7\x2a\x3a\xde\x39\x21\xce\x62\xc5\xaf\x1c\xaf\x15\xa8\x29\x0b\x5d\xde\x8f\xb3\x4c\x2e\x0a\xed\x0d\x73\xcd\x98\xf7\xc6\x37\x5e\x8d\x9d\xab\x02\xfb\xf3\xed\x19\xea\xaf\x4f\x86\x9a\x62\xa0\x9c\xfa\x0b\xf3\xe7\xff\xb7\x3a\x62\x34\x5b\x20\x38\x76\x7d\x91\xe1\xd2\x28\xd8\x03\xf9\x06\x6b\x78\xeb\x58\x32\x14\x46\x8e\x28\x1b\xac\xf6\x1d\x59\xd2\x17\x72\x8f\x30\x0e\x5c\xde\xc2\xfa\x9f\xb5\x1a\xd8\x36\x65\x59\x83\x73\xac\x2b\x37\x93\x28\xbe\x8a\x88\x92\xae\xf4\xe4\x54\xc8\x85\x2f\x3c\xb1\x5a\x61\x90\xa1\x7f\x54\x01\x81\xa0\x29\x0f\x0b\xbf\x22\x1c\x06\xfe\x3c\xf1\x2f\x49\xbb\x7b\xa1\x25\x5d\xf5\xea\xf3\xd0\x24\x7d\x25\x76\x59\x12\x95\xb9\x99\x71\xbd\xe4\x35\xc3\xa0\x1a\x3f\x1a\xbe\x04\xfd\x2a\x5c\xf2\xba\xcd\xd2\x17\xfb\x62\xb9\x53\x34\x9a\xee\xf2\xb3\x7d\x29\xfb\xa2\xb7\xd9\x14\xd6\xaf\x85\x97\x9a\x70\x2e\xd5\x72\xb8\xe9\x67\xa9\xca\xbb\x48\xdf\x69\x23\xe8\x0c\x91\x8f\xb4\x7b\xce\xf6\x5d\xd0\x5d\x9b\x35\x33\xca\xbe\x8b\xb6\xc4\xd1\xf4\x43\xb1\x9c\x81\x22\x19\xac\x2b\x05\x5f\xe2\xc1\x62\xe7\xfa\x8e\xb5\x2c\x2f\x8c\xf7\x48\xe6\x18\x44\x64\xc9\xd1\xcc\x57\xd1\x9e\xc4\x7e\xaf\x83\xf8\xab\x1a\xb3\xa7\xf5\xf8\x0e\x4d\x75\x94\xe5\x3b\x5b\xa5\xa7\x5c\xde\xc2\x31\x36\x7d\x63\xe3\xaf\x27\x9c\xf6\x76\xd0\xc5\x6c\xc9\xcd\xc1\x0e\x75\xab\x31\xb8\x03\x46\x5e\xc7\x0d\xed\xc8\x16\xe7\xfd\x3d\x01\x2c\xfb\xb6\xdb\x8b\x8b\xc6\x6f\x17\x6e\x74\xf9\xb3\x85\xb2\xf2\xf1\x02\xd2\x3c\x17\x3c\xa1\xf6\xb8\x1b\xed\xca\x22\x6f\xb9\x15\x55\x55\x07\xab\xea\x6d\xda\x36\x09\x99\x90\x27\xc8\xf7\x32\x34\xb5\xdd\x3e\x79\x85\x62\x94\x6c\xa6\xf5\x66\x5a\x25\x93\x68\xe4\xc3\x61\x74\xa3\x47\x0c\x2b\xc4\x99\xa4\x8a\x5d\xde\xe8\xd7\xab\x89\x65\x77\xbd\x13\xe5\xf2\x77\x30\xbf\x15\x5c\x58\x1d\xdc\x15\xd6\xb3\xab\x15\xfb\x27\x00\x00\xff\xff\xc1\x3d\x92\xd9\x93\x21\x00\x00")

func templatesViewsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsIndexHtml,
		"templates/views/index.html",
	)
}

func templatesViewsIndexHtml() (*asset, error) {
	bytes, err := templatesViewsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/index.html", size: 8595, mode: os.FileMode(420), modTime: time.Unix(1499959754, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _publicJsDashboardJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x59\x5f\x6f\xdb\x36\x10\x7f\xcf\xa7\xe0\xdc\x02\x92\xd7\x5a\x4e\xb7\x75\x0f\x76\x9c\x62\x48\x87\xa1\x58\xb0\x0d\x6d\x80\x3e\xb4\x45\x40\x49\xb4\xcd\x59\x96\x0c\x91\x8a\x6b\xb4\xf9\xee\xbb\xa3\x44\xfd\xa5\x64\xd6\x4b\xb1\x62\x02\x12\xcb\xd4\xdd\x4f\x77\xc7\xbb\xdf\x91\xf4\x32\x8b\x03\xc9\x93\x98\xac\x98\x7c\x9b\xa4\x1b\x96\xbe\x91\x54\x66\xe2\x0f\xba\x65\xae\x50\xb7\x63\xf2\xe9\x8c\xc0\x25\xf6\x5c\x06\xeb\xd6\x20\x5e\x01\x15\x8c\x9c\xcf\xca\xef\x78\xa5\x4c\x66\x69\x4c\x9c\x3d\xe5\xd2\x99\x37\x1e\xf9\x29\xa3\x9b\x79\x53\xfb\x99\x59\x7b\x97\x26\x01\x13\xc2\x02\xe0\x07\x33\x80\x9f\x89\xc3\xb0\x76\xc8\x96\x34\x8b\xa4\x59\x3d\x8b\x37\x71\xb2\x8f\xfb\x11\xee\xcf\xee\xcf\xce\xea\x31\xbc\xa1\x62\xf3\xbf\x8a\xa0\xc8\x02\x4b\x80\x1f\xcd\x00\x4b\xca\x23\x0b\xed\x9f\xfa\xb5\x89\x7f\x20\x92\x6f\x59\x92\xd9\x04\xe2\xb9\x19\x68\xc3\x23\x1b\x33\x7e\xee\x9f\x04\xf8\xb2\x63\xf4\x88\x09\x0f\x99\x4e\xd9\x2e\xa4\x92\xb9\x3a\x51\x1e\x7b\xf4\x6f\xfa\xd1\xad\xb2\x46\x1e\x76\x6c\x46\x9c\xdf\x7e\xbd\x71\x9e\x96\x83\x59\x1a\xc1\xd8\x74\xaf\x6a\x59\x4c\x51\x65\xfa\x82\x2a\xc0\x05\x26\x9e\xa8\xc9\x16\x73\x3b\x23\xfa\x95\x6e\x3a\xfe\xd4\xb0\xed\x8e\xa6\x44\x5e\x93\x05\x79\xec\x3a\x8f\x22\x2e\x24\x8b\x01\x95\x48\x3f\x09\x0f\xce\xd8\x63\xdb\x9d\x3c\xb8\xe3\x79\x57\xe7\x6d\xa1\x53\xd8\x61\xa1\x71\x53\x68\x48\xa8\x20\x83\x7c\x47\xa1\xb2\x66\x41\x52\xaf\xfc\x76\x1b\x24\x59\x2c\xc9\xe7\xcf\xe4\xbc\xfb\x12\x6d\x0d\x6a\x14\xf7\x83\xf2\xca\x96\x5b\x35\xf9\x0b\x7c\xde\x10\xe0\x4b\xe2\xfe\x92\xa6\xf4\xe0\x71\xa1\x3e\xdd\x9a\x19\xe3\x7a\x79\xeb\x6b\x99\xa4\xc4\x45\x5c\x4e\x78\x5c\x37\xda\x24\xdc\xf6\xb3\xe9\xe6\x3b\xfe\xa1\x65\x4e\x43\xe7\x0a\xa4\x9d\x0b\x99\x5e\x3a\x46\x99\x27\xf8\x30\xbc\x74\xe0\x46\x23\x7a\x31\xf0\x95\x7a\x30\xc5\x27\xc7\xd4\x30\x33\x6f\x92\x37\x32\xe5\xf1\xca\x2d\x31\x02\x48\x65\xc9\xc2\x5b\x2a\xc7\xf6\x50\x95\x36\xce\xc4\x2d\xc6\xfc\xb6\xc8\x4c\x7b\x90\xca\x86\x88\x8a\x26\x08\x58\x43\x5e\xf4\x18\x6c\x12\x1e\x13\x28\x20\xa7\xe6\x00\x39\xc5\x03\x24\x2e\x16\xfe\x3b\x07\x72\x0c\x3b\xfb\x4b\xd9\x8e\xf9\xc6\x37\xcf\x8d\xa3\xc6\x41\xcc\xf3\x66\x96\x7c\xb7\xd0\x3c\x77\x5d\x8c\x63\xb3\xeb\x4b\x62\xbc\x20\x21\x9f\x2c\x72\x67\x2f\x42\x7e\x47\x02\x30\x5c\x2c\x46\xbe\x8c\x27\xab\x34\xc9\x76\xa4\xbc\x9b\x88\xed\xa8\xc7\xe6\x7a\xd4\xfc\x4c\x4a\xa0\x48\xa4\x40\x80\x51\x5f\x46\x35\x54\x85\x17\xd2\x78\x05\x75\x83\xb7\x3c\x00\x61\xed\xc4\x24\x65\xdb\xe4\x8e\x8d\x30\xa6\x74\x22\x93\xd5\x2a\x02\x90\x6d\x12\xd2\x48\x8f\xd1\x14\x7a\xf9\x62\xf4\xa8\x3e\xa8\xee\x27\x92\x4b\x94\xbe\x4a\xe2\x25\x4f\xb7\x24\x87\xaa\x8a\xd4\x58\x52\x0d\x80\x80\x46\x91\x4f\x83\xcd\x62\x54\x16\xf3\x6b\x05\xe2\xbe\x77\x8c\xda\xef\x9d\xf1\x7c\x74\x79\xc1\xb5\x7b\xab\xe8\xb0\x5b\x2b\x87\xca\xbb\x89\x4c\xa9\x58\x8f\x48\x61\x5c\x8e\x07\x3a\x53\x0e\x7f\x79\x74\x2c\x62\x3a\x85\x99\xb9\x1c\xc8\x99\x7b\xc2\x22\x68\x91\x76\xb3\xac\x60\xcc\x59\x76\x6f\x9f\x7b\x1a\x71\x8a\x54\xf6\x05\x39\x2b\xaf\x3d\xba\xdb\xb1\x38\x74\xa3\xab\x71\x57\xaf\x6b\x41\x4f\x37\xf1\x22\x16\xaf\xe4\xfa\xac\xa9\x7c\xb4\x0d\x14\xbd\xc5\xaa\x09\x68\xd9\x81\x16\x90\x8b\xd4\xbb\x96\xa2\xff\x3e\x71\xe4\x03\x10\xce\x45\x3d\xfc\xd6\x2f\xbb\x87\x4e\x31\xd0\x28\xf0\xaa\x91\x54\x01\xc9\x8f\xf1\x5a\x4b\xad\xc1\x5d\x05\x46\xd1\x2a\x8e\xf1\x54\x0b\xc9\xb4\x4b\x29\x00\xf5\xaa\xba\xc4\xeb\xe9\x8f\x38\x5f\x18\x93\x21\xba\xda\xd7\x12\xd9\x86\x69\x74\xbb\xc2\xfb\x80\xa7\x41\xc4\xd4\x24\x4c\xc4\x3a\xd9\x97\x94\x22\xa0\xe4\xd1\x07\xbc\x2b\x42\x78\xac\xac\xd9\x81\x4d\x12\x48\xe3\x56\x29\x0f\x16\xd7\xb1\x22\xdd\xdb\x16\xa9\x71\x78\xff\x50\x44\x6e\x4b\xe2\x3c\x5e\x26\x15\x85\xe7\x73\x0d\x04\x2e\x98\x7c\x20\xfe\x06\x24\x5d\x60\x8f\x3a\x39\xde\xc3\xdc\x45\x15\xbe\x46\xe5\x82\xb6\x1b\x6a\x36\x94\x9d\xb2\x25\xbc\xbc\x4e\xda\xe8\x93\x2d\x67\x9f\xda\x03\x8b\x00\xe2\x6e\xe8\x41\xe2\x87\x40\xa7\x86\xef\x77\xd0\x3d\x35\x7a\xcd\x86\x87\x48\x5f\x14\xba\x63\xad\xae\x94\xcb\xfb\x8e\xb9\xc7\xbc\xd5\x3d\x66\x7f\xd5\xde\xa0\xe8\xcb\x86\x6c\x2a\x9c\xc1\x0e\x7d\x84\xa5\xb5\xc5\x32\x24\x41\x12\x89\x1d\x8d\x17\xa3\xe7\x23\x22\xe4\x01\x03\x14\x72\xb1\x8b\xe8\x61\x16\x27\x31\xac\x7b\x78\xb8\x18\x29\x7e\xc2\xd0\xf3\x9c\x88\x8e\x23\x67\x91\x9e\x10\x6c\x8f\x79\x91\xdb\xe8\x45\xbc\xab\x37\xe1\x92\x01\x3d\x5c\xa0\x9d\xfa\xe9\x2e\x8b\xa2\x49\xca\x57\x6b\x49\x24\xfb\x28\x27\xdb\x0c\xfa\x03\x11\x5b\xaa\xe6\x96\x6d\x2f\x5b\xe4\x79\x31\x85\xb1\x8b\x29\x42\x00\x90\x4c\x93\x78\x75\xf9\xea\x25\x0c\xe4\xb7\x17\x7e\x4a\xa6\xf0\x3c\xe2\xff\x89\x8d\xd5\x76\xaa\x6b\x25\xb6\xad\x6f\xc0\xce\xee\x71\x95\xb2\xbc\xd1\x48\xbb\xc6\xe7\xe2\xdf\x80\xf9\x31\xdb\x93\x97\x78\x40\xa2\xac\xd6\xeb\x09\x4f\x26\xd7\x09\x50\x0d\x2b\x96\x1b\xbd\x7e\xa0\xea\x69\x5e\x4c\xb3\xc8\x46\x6a\x90\x5c\x2a\xa9\xa1\xa2\x1e\x5b\xae\x9f\xbb\x23\x86\x93\x8e\x13\xd7\xb2\xd5\x19\x88\xd5\x72\xb6\x26\x3e\xb0\xa2\x2d\x96\xa8\x75\xf1\xde\x25\xad\xbc\xd1\xfc\x68\xbf\x50\x6d\xd0\x84\xed\xe2\xb2\x55\xb7\x27\xad\x6e\x1b\xb9\x68\x89\xa3\x72\xc0\x6a\x97\xd2\x38\x8f\xaa\x07\xcf\x62\x6e\x1b\x27\x78\x13\x75\x52\xe1\x40\xb5\x40\x79\xb9\xd5\x39\xd4\xbc\xa3\x52\x24\x4f\x53\x41\xef\x59\xba\xe2\xca\xa4\x7c\x91\xa0\x85\x6b\x46\x83\xb7\x44\xdd\xa8\xb1\xb6\xcf\x95\x3e\xca\x34\xdf\x58\x4b\xab\x79\xd7\x2f\x9d\xed\x5e\xb9\xea\x06\xbd\x20\xe2\xc1\xc6\x2d\x4f\x53\x5d\x53\x3e\x62\x2e\x32\x75\xf0\x28\xd7\xbc\xed\x8f\x16\xf0\x41\x80\x79\x4b\x8e\x19\xc8\x4d\x13\x95\xa7\x3f\x0a\xe1\x72\xc7\x75\xd0\x0a\x93\x5c\x67\x00\xeb\xcd\xf7\xd6\x54\x5c\x21\xef\xb9\x4e\x77\xe5\xef\x18\x8b\x0e\x2f\xdf\xcb\xcf\x1e\x06\x54\xcd\xf5\xe4\x7b\x34\x0c\x8d\x5a\x41\x94\x08\xd6\xa7\xa6\x67\x27\x5f\x34\x8c\x3d\x8c\xb2\xeb\x2c\xa9\x90\xc6\xdc\x1d\xda\x86\x0c\x9a\x3e\x68\x44\xbf\xed\x43\x1e\xb7\x4d\x5f\xf3\x90\x0d\x98\xde\xac\xa2\x9a\x44\xfe\x04\x47\xea\xc7\xf4\xf5\xd5\x2c\x0f\x8f\x9d\xd6\xff\xf5\xe7\x1b\xdb\xe3\x7a\x5d\x7a\xea\xa7\x8b\x4a\x05\x73\x6c\xd6\x8a\x2c\x0f\x67\xf0\x57\x19\x6a\x38\xe3\xcf\x7f\x4d\x18\xf2\x20\xdf\xce\x7c\x15\x17\xd4\x36\xeb\xab\xfa\xd0\x3e\x4c\x7b\x50\x37\x2a\xde\xcc\x13\xf7\x6b\x78\xf2\xb8\xa4\xaa\x92\xa9\xf4\x0f\x40\x79\x06\xe6\xce\xd4\x28\xd9\x82\xe7\xcc\xe4\x38\x03\xc6\x71\xb9\xd7\x2d\xa0\x71\x09\x57\xbc\xf3\x5e\xb3\x6d\xfd\xbd\x58\x3e\x0f\xf7\x5e\x55\xef\x76\x2f\x86\xda\x27\xf9\xf6\xee\x9d\xda\xf4\x8a\xcc\xdf\x72\xf9\xe1\x98\x2d\xed\xf9\xef\xcf\x01\xdb\x74\x06\x43\x5a\x5a\xa6\x34\xc0\x4b\x35\xb1\x59\xdb\x8b\xb2\xb7\xdd\xd1\xc8\x6d\x2e\xf2\xee\x9b\xb8\xa6\x84\xd1\xf1\xa9\x7f\xaa\x7f\xd3\x29\x79\x76\x4e\x04\x83\xd0\x86\x42\x8d\x40\xd5\xbd\x8a\x25\x4b\xf1\x3d\x39\xc2\x53\x10\x39\x3f\x27\xdf\xc3\x07\xe6\xdd\x78\xfe\x4f\x00\x00\x00\xff\xff\x56\x7e\xbb\xa2\x02\x20\x00\x00")

func publicJsDashboardJsBytes() ([]byte, error) {
	return bindataRead(
		_publicJsDashboardJs,
		"public/js/dashboard.js",
	)
}

func publicJsDashboardJs() (*asset, error) {
	bytes, err := publicJsDashboardJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "public/js/dashboard.js", size: 8194, mode: os.FileMode(420), modTime: time.Unix(1500035360, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/index.html": templatesViewsIndexHtml,
	"public/js/dashboard.js": publicJsDashboardJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"public": &bintree{nil, map[string]*bintree{
		"js": &bintree{nil, map[string]*bintree{
			"dashboard.js": &bintree{publicJsDashboardJs, map[string]*bintree{}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"index.html": &bintree{templatesViewsIndexHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: AssetInfo, Prefix: k}
	}
	panic("unreachable")
}
