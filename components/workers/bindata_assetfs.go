// Code generated by go-bindata.
// sources:
// templates/views/index.html
// DO NOT EDIT!

package workers

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x58\x5b\x6f\xdb\x36\x14\x7e\xcf\xaf\x20\xbc\x02\x92\xb7\xca\x97\x36\x19\xb0\xc4\xf6\x30\x2c\x43\x51\x60\xd8\x4b\x83\xe5\x61\x18\x0a\x46\x3a\xb2\x58\x2b\x94\x40\x52\x76\x8c\xd4\xff\x7d\x24\x75\xb5\x24\xca\x96\xe7\x15\x09\x30\x3d\xd8\xd6\xb9\x7c\x3c\x3c\x3c\x1f\x79\xe8\xe7\x67\xe4\x81\x4f\x28\xa0\x81\x1b\x51\x01\x54\x0c\xd0\x6e\x77\x31\xf3\xc8\x1a\xb9\x21\xe6\x7c\x3e\x60\xd1\x66\xb0\xb8\x40\xf2\xa9\x4a\xdd\x28\x74\xc2\xa5\x33\x7d\x97\xe9\xb4\x3e\x98\xe6\xea\x18\x2f\xc1\x09\x00\x7b\xc0\x06\x8b\xfb\x88\xad\x80\xf1\xd9\x38\x98\x66\x40\x63\x89\xb4\xb8\xc8\xbe\x8e\x1c\xed\x89\xd7\x46\x6b\xea\x2f\x2b\xea\xba\x49\x8c\x29\x84\x48\x7f\x3a\x4b\x06\x40\x6b\xb6\xad\xf6\x7a\x0a\x84\x2e\x5b\x6c\xeb\xf6\x65\xe0\x87\x2c\xb3\x60\xdf\x77\x98\x6b\x17\x92\x3b\xf8\x18\xf9\xd8\x49\xb8\xcc\xa1\xfa\x71\xf5\x34\x58\xcc\xc6\xa4\x63\xb0\x34\xaf\x3d\x62\xf9\x09\x09\x78\x12\x0e\x23\xcb\x40\x1c\x0a\xab\xe2\x1d\x24\x4b\x18\x20\xe2\xcd\x07\x9b\x74\x89\x1d\x37\x4a\x64\x09\x2d\x26\x07\x42\xc8\x81\xca\xd2\xe8\x8e\xd8\xac\x36\xa8\x4c\x62\x8c\x02\x06\xfe\x7c\xf0\x5d\x16\xf0\x11\x0b\x9b\x16\x82\x1f\x45\x42\xd5\xb2\x39\x46\x2e\x0d\x0b\x9f\x24\x94\xf4\x00\x5f\xa6\xe2\x4f\x02\x1b\x74\x0b\x02\x93\x50\x4e\x53\x19\xf5\xc1\xc8\x56\xa4\x5e\x0b\x98\xc9\x72\x73\x5c\xc2\xdc\x10\x0a\x1b\x59\x12\x07\x07\xa8\x2e\x7d\x08\x98\xf9\x44\x17\x53\xff\xf4\xe2\x1a\xd3\xf6\xed\xea\xaf\xa7\x53\x95\x81\xf7\xda\x88\x2a\x30\x5f\xbd\x58\xa2\xea\xe0\x9c\x0d\x26\xa2\x3f\x57\xa5\x13\xd2\xfe\xdf\x9e\xae\x7a\xd8\xff\xc9\xfa\xc2\xc9\xba\x85\x30\x6c\x65\xd7\x8b\xe6\x2b\x27\x02\x1e\x71\xfc\x52\x19\xbb\x8c\x58\x94\x08\xd9\xa2\xf1\x1e\x5c\xfd\x50\x38\x7d\x33\xae\x9a\x58\x88\xb8\xd8\x86\x20\x67\x04\x2a\x05\xd7\x97\xd3\xb8\xbd\x8a\xcd\x55\xd9\xd1\x2e\x56\xab\x4f\x36\xb2\x38\x09\xc5\x5e\x43\xd2\xd2\x4b\xd6\xea\xaf\xd9\x81\x34\x8d\x1f\x22\x6f\x6b\xe8\x3c\x05\x7e\x50\xac\x06\x1e\x47\x94\x93\x35\xd4\x99\xa2\xf5\x7b\xc6\x28\x75\x09\xa2\x75\xeb\x16\x35\x13\x2a\xb4\x36\x39\x33\x2c\x93\x08\x16\x1f\x6f\x67\x63\xf9\x65\xd4\xff\xca\x00\x0b\xf0\xba\x8d\xee\xe4\x1e\x8b\x0e\x21\x69\x23\x8a\x1f\xe1\x08\x33\x2e\xb0\x48\xf8\x11\x86\x6e\x57\x78\x52\xda\x32\x73\x65\x6b\xc8\x93\x5a\xad\x56\x87\xa6\x42\x0a\xd5\x62\x9c\xad\xea\xaa\xc7\x54\x57\xcd\xb5\x9d\xa4\xaf\xb0\xec\xce\x5e\x31\xaf\xa0\x10\xe4\x8d\x19\xa8\xa7\x2e\xc9\x17\x95\xcb\xf3\x17\x9e\xde\x9b\xb9\xcb\x48\x2c\x52\xbf\x35\x66\x9a\x02\xfc\x36\xa2\x89\xb8\xd1\x32\x3f\xa1\xae\x20\x11\x45\x4b\x10\x6a\xc6\x9f\x34\x45\xfe\x90\xd9\xb1\x53\xb6\x0c\xd1\x73\x11\x03\xdf\x10\xe1\x06\x2d\x0a\xf5\xb8\x98\x03\x9a\x5c\x37\xa6\xc7\x40\x24\x8c\x22\x4b\xb5\x78\xd6\x4d\x43\xfd\x20\x33\xbc\xba\x69\x22\x4d\xcd\x48\x31\x8b\x5c\xe0\xbc\x07\xd8\x3b\x33\x18\x4f\xdc\x9e\x60\xef\xcd\x60\xbe\xec\xd3\x7a\x20\x5d\x76\x23\xa1\x87\x2d\x12\xe4\x11\xe4\xc1\xd9\x03\xf4\xca\x0c\xba\x22\x61\x9f\xf0\x7e\xec\x5e\x4c\xf9\x12\x4b\x76\x1c\x07\x98\xed\x4a\x66\xc4\x84\xae\x68\xb4\xa1\x87\xd1\x76\x17\xe5\x67\x51\xbd\x49\xec\x49\x9e\xda\xd5\x9a\x7c\x33\xc2\x5f\xf0\x93\xbd\x5f\xa4\x62\x1b\xc3\x35\xb2\x3e\xfc\x76\x67\xbd\xdd\x53\x24\x2c\x94\xf2\x71\x76\x4a\x8f\x95\xeb\xb8\x66\x92\x55\xca\x75\x31\xaa\xcd\x86\xcf\x8d\x68\x15\xc9\xc4\x3d\x9a\xa3\x37\xb6\x95\x5f\xea\x91\x26\xb8\x35\x1c\xc1\x63\x2c\xb6\xf6\xb0\x39\x47\xed\x75\x97\x79\xa5\xf7\xb5\xa3\x7c\xf2\x01\xe6\x88\x8d\xb2\xdf\x9f\xf5\x35\x0a\x7d\xfd\x8a\x26\x86\x71\x14\xfc\x67\xbd\x82\x73\x93\x4d\x8e\x95\x59\x95\xe0\x5a\x60\xc6\xce\xcd\x1e\x12\xbe\xdd\xf3\xd3\x02\xb3\x5f\xd9\x53\x6a\xaf\xca\xab\xf2\x69\xb8\x10\x1f\xd9\xbf\x30\x86\xb7\x23\xc2\xf5\xb7\x5d\x8c\x34\xac\xef\x4b\xf9\xe3\x47\x0c\xd9\x6a\x2c\x82\x08\x2d\x23\x33\x99\xef\xcf\xa8\x3a\x97\xbf\xc8\xdf\xcd\x49\xd4\x13\x2c\x1d\x52\xf3\x91\x7a\x33\xdb\x8b\xfb\x11\x8e\x63\xb9\x81\xdb\x96\x3a\xd9\xac\xce\x4e\x5a\x3d\x3f\x20\x69\xe8\x2d\x2c\xf9\x23\x1b\x80\x78\x5a\x38\x56\xd2\x3e\xee\x54\x5d\x2d\x15\x6b\x32\x9c\xec\xac\x1b\x8e\x44\xf4\x7b\xe4\xe2\x10\x3e\x09\x26\xbb\x03\x49\xaa\x93\xe0\x6d\x9d\x86\x9f\x75\x36\x54\x8c\x92\x5e\xd6\x39\xa0\xd4\xc9\x7d\x0e\xb0\xe6\x81\xa7\xe1\xf3\xc3\xed\x0c\x23\x14\x09\xd6\xc0\xe6\xf4\x9e\x32\x94\x6a\x3d\xac\x96\x4d\x41\x3d\xbb\x56\x69\xcb\x56\x31\x0a\x81\x2e\x45\xd0\x30\x6f\x02\xb4\x11\xae\xdc\x47\x8e\xe6\x5c\xc5\xe5\x00\xed\x32\x0e\x55\x5d\x3a\x79\x27\xee\x4e\xe7\x51\x5e\xa1\x27\x2d\x76\x59\x93\xff\x8e\x84\x07\x6a\xe4\xbf\xae\x8e\xbd\x43\xa1\x9a\xf5\xe3\x6b\xa4\x38\xba\x1c\x41\x44\x08\xf2\xe8\x52\x7f\x34\xd8\x15\x64\x19\x1a\xda\x14\x57\x8d\xb6\x00\x15\x46\xb9\xf9\xe7\x10\xa5\xc4\xe0\xb2\xf7\x6f\x7f\xee\x95\x6f\xf0\xed\x2e\xf5\xff\x1d\x9b\xe1\xd6\x1c\xcb\x09\xef\x32\x4d\x2a\x79\x63\x17\xfd\x40\xb5\xa8\xf3\x8e\xa4\x04\xe1\x20\x3e\x52\x01\x6c\x8d\x43\x3b\xd5\xbe\x45\xd3\xc9\x64\x82\xbe\x47\x57\x39\xa2\xfc\x9e\x8d\xf3\x9e\xbd\xe8\xec\xff\x09\x00\x00\xff\xff\x2d\x65\x24\x03\x15\x1b\x00\x00")

func templatesViewsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsIndexHtml,
		"templates/views/index.html",
	)
}

func templatesViewsIndexHtml() (*asset, error) {
	bytes, err := templatesViewsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/index.html", size: 6933, mode: os.FileMode(420), modTime: time.Unix(1486300657, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/index.html": templatesViewsIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"index.html": &bintree{templatesViewsIndexHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: AssetInfo, Prefix: k}
	}
	panic("unreachable")
}
