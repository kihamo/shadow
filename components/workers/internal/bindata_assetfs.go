// Code generated by go-bindata.
// sources:
// templates/views/manager.html
// assets/js/manager.min.js
// DO NOT EDIT!

package internal

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsManagerHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x4b\x6f\xdb\xb8\x16\xde\xe7\x57\x10\x2a\x70\xd1\x2e\x14\xf5\x75\x37\xad\xad\x0b\xa3\x77\x06\x2d\x90\x29\x06\x69\x07\xc5\xac\x02\x4a\x3c\xb2\xe8\x50\xa4\x86\x3c\x92\x6d\x04\xf9\xef\x03\x52\x92\x2d\xd9\x94\xed\xb6\xe9\x4c\x52\x64\x15\x8a\x3c\x2f\x7e\xe7\x29\x2b\x37\x37\x84\x41\xc6\x25\x90\x20\x55\x12\x41\x62\x40\x6e\x6f\xcf\x26\x8c\xd7\x24\x15\xd4\x98\x69\x50\xd2\x39\x84\xc8\x51\x40\x10\x9f\x11\x42\x48\xff\xd0\xed\x5f\x09\xc8\xb0\x3d\x74\x04\xf9\xab\xf8\x8b\xd2\xd7\xa0\xcd\x24\xca\x5f\xb5\x5c\x11\xe3\x75\x7c\x36\x22\x41\xf3\x79\x3e\x10\xd1\xa3\xc8\x94\x2e\xc2\xb9\x56\x55\x49\xca\x4a\x88\x70\x97\x76\x97\x9e\xcb\xb2\xc2\x86\x61\x87\xca\x51\x0a\x9a\x80\xd8\xdf\x77\x67\x8e\x95\xe0\xba\x84\x69\x90\xe6\x90\x5e\x27\x6a\x15\x74\x72\x17\x26\x34\x4b\x8e\x69\x1e\x10\xce\xa6\x01\xad\x50\x69\xc8\x34\x98\x3c\x20\x51\x4c\x66\xdb\xe7\x7d\xa5\x91\x47\x6b\x8b\x88\xe7\xb1\x5d\x76\x90\xf5\x2f\x97\x0a\xa0\x3a\xe3\xab\x20\xf6\x9d\x6a\xb5\x24\xa8\xca\x2b\xe4\x02\x8c\xc7\x5d\x54\xf2\x82\x22\x30\x92\x09\x5e\x7e\x90\x7f\x92\x54\x89\x50\xcc\xc3\xd7\x6e\x51\xb0\x76\x61\x8a\x76\xb1\x32\xe1\x8b\x97\x23\x6e\xb1\x3a\x42\x83\x14\xcd\x21\x5f\xa4\x4a\x06\xf1\x84\x6f\x7c\x49\x49\x46\x43\x06\x34\xb3\x7f\xff\xeb\xae\xc1\xe3\x1d\x24\x76\x85\xa4\xaa\xb2\x71\x69\x41\x17\xdc\x20\x48\xd0\x26\x6c\x36\xe3\xe7\x3e\xde\xfc\x55\x7c\xd1\x11\x6e\x23\xd0\x0f\xf2\x3d\x85\xa8\x32\xa0\xcd\xb7\x61\xb4\x6c\x52\xef\x18\x42\x7b\x19\xfa\xa0\xf0\x41\x6a\xae\xbf\x11\x1f\xc7\x7a\x0c\x9d\xcf\x96\xe8\x18\x36\x83\x14\x1c\x84\xa7\x27\xf7\x56\x57\x25\x95\x20\x46\xa0\x58\x5d\xf5\x4b\xec\xd6\x92\x97\xde\xe4\x69\xae\x4c\xfa\x41\xfe\x72\x87\xb3\x12\x1d\x9b\xa4\x35\x91\xb4\x4e\xa8\x6e\x4a\x27\x71\x76\x5c\xa1\x52\xc2\x96\x37\x5f\x89\xe4\xf1\x84\x6e\x91\x13\x82\x96\x06\x42\xc1\xe5\xf5\xbe\x23\xd2\x1c\x6a\xad\x64\x68\x8b\x6d\xe3\x07\x1a\x4f\x22\xc1\xbd\x62\x3b\x56\xa6\x55\xc9\xd4\x52\x7a\x94\x3b\x4a\x4a\x72\x0d\xd9\x34\x78\x12\xec\x72\x84\xa8\xe6\x73\x01\x01\x61\x14\x69\xfb\xd0\x93\x47\xb4\xb2\xcf\x49\x85\xa8\x64\x40\xa8\xe6\x34\x84\x55\x49\x25\x03\x66\x2d\x16\x06\xf6\xaf\xb0\xd4\x20\xd3\x7c\x6b\xbe\xdf\xa6\x2d\xa0\x1b\x5b\x0a\x90\x55\xa7\xd2\xad\xfd\xac\x1d\xa6\xa3\x87\x83\x3b\x2f\x68\x4d\x4d\xaa\x79\x89\x6f\x6a\xc5\xd9\xd3\xe7\xcf\x76\x2e\x5b\x28\x46\x45\xb7\x47\xf5\x1c\x70\x1a\x3c\xe9\x6f\xba\x75\xd3\xb2\xa7\xc1\x3b\x25\x33\xae\x0b\xa2\xa1\x50\x35\x10\x2a\x04\xd9\x46\x69\x9f\x3e\x51\x6c\x3d\x0d\xbe\x70\x21\x48\x02\x5e\x72\x02\xab\x14\x4a\xb4\x13\x03\xad\x04\x6e\x0e\xce\xc9\x4c\x03\x59\xab\x8a\x98\x4a\xc3\xff\x06\x52\x53\x2a\x44\x42\xd3\xeb\x5e\x6e\x5c\x3a\xd1\x4f\x9f\xbd\x3d\x00\xd7\x06\x95\x8d\xab\xe6\x62\x5d\xe6\xb6\x16\x90\xcd\x2a\x44\x4d\x4d\xeb\x37\x72\xb9\x31\xf8\x30\xcc\x63\xfe\x6d\x0e\xc7\xbc\x34\x89\x2a\xcf\xcc\xb0\x4f\xbf\x4f\x77\xb0\x79\x6f\xd9\x86\x8f\x83\xc2\xd0\x0d\x66\xe3\x72\x91\x26\x02\x42\x0d\xa6\x54\xd2\xf0\x7a\xb7\x8a\x38\x72\x47\x33\x60\x20\x0d\x5b\xae\x6a\xd0\xed\xda\xa0\xe6\x25\xb0\xb1\xb4\xc4\x1c\x28\x1b\x3b\xd3\x07\x70\xc5\x3c\xfe\xf0\xff\x49\x84\xf9\x61\x9a\x8f\xb4\x80\xe3\x54\xbf\xd4\x20\xd1\x1c\xa7\xfb\x95\x6b\x38\x8d\xcc\x20\xc9\xb8\x06\x76\x9c\xf8\x82\x9e\x4e\x3b\x4b\x91\x2b\x79\xc0\x82\x49\x34\x06\x9a\xe5\xf1\x42\x3d\x89\x9c\xa3\xbe\x67\x90\xec\x8d\x08\x3f\xb0\x4b\xb9\xf9\xa5\x4d\xcd\xed\xa4\xf1\xd8\xa4\x7e\xe2\x26\xd5\x9f\x3d\x4d\xae\x96\xdf\x5d\xde\x61\x0d\xa1\x2a\x41\xb6\x61\xf4\x29\x57\x4b\xd7\x90\xdc\x00\xf7\x23\xaa\xfc\xdd\x62\x90\x73\xe6\xab\xc4\x5f\x8f\x41\x2a\x94\x8b\x08\x0b\xc2\x7b\xce\xe0\x1f\x01\x61\x13\x47\xbc\xe6\x0c\x74\x30\x92\x2f\x3d\x8e\x7b\x33\xdf\x74\xd5\xcd\x3f\x87\xb4\xa7\x0f\x71\x0a\x21\xf7\xd2\x35\x5d\xbc\x53\x36\x36\x38\x0c\x94\x1d\xc4\xb2\x14\x55\xd7\x35\x66\x8c\xb5\x9e\x7c\x1c\xe8\x1e\xea\x40\xf7\x4e\x03\xc5\x53\x66\xa5\x4f\x48\xb1\x3a\x61\x58\xbb\x50\xe9\xf5\x29\xf2\xec\xeb\xfb\x83\x9e\xd0\x5c\x79\xff\x81\xf3\x59\x2b\xdf\x65\x5a\xf7\x5b\xc7\xe3\x74\xf6\x13\x4f\x67\x77\xdb\x62\x9b\xf0\xf1\x37\x58\x77\xf6\x10\xdb\xeb\x63\x4f\xb8\x3f\x2f\xf9\xbf\x6b\xae\x34\xc7\xf5\x71\xca\x4b\x28\x81\x9e\xf2\x7b\x40\x43\x48\x3e\x48\x04\x5d\x53\x71\x42\x13\xe1\x05\xa8\x0a\xef\xb6\xcd\xe9\x7f\xa5\x1f\xce\x10\xa1\x28\x4f\x41\x69\x26\x84\x5a\x12\x63\x0d\x3d\xf5\xb7\x13\x73\xea\xad\xdc\xaf\x27\x27\x53\xdf\xd3\xee\xdc\x66\x97\xab\x7a\x24\xa3\x0c\x86\x6f\x7d\x76\x0a\xb6\x89\xc6\x25\x83\xd5\x34\x08\x5f\x74\xd5\x9d\x71\x2a\xd4\xbc\x6d\x28\x39\x67\x0c\xe4\x34\x40\x5d\xf9\x3e\xab\x36\x25\xb5\xe5\xf0\x97\x8c\xb6\xea\x1e\x2d\x1b\x0d\x9d\x45\xc3\xbe\x29\xec\x03\xd2\xf4\xb9\xf6\x9b\x67\xd7\xf4\x36\xa5\xcc\xbe\x78\x36\x55\x9e\x71\x53\xf0\x8d\x40\xef\x35\xfe\x83\xbc\x00\xf3\x76\x12\x35\x62\x3c\xca\xf2\xd7\x43\xb3\xda\x69\x65\x3b\xea\xdb\x31\xe4\xf5\x41\xef\xf8\xef\x97\x28\xb6\xf6\xdd\x2e\x53\xba\x18\x09\x11\xef\x17\xe6\x83\xed\x97\x26\x20\x48\xa6\xf4\xc0\xd9\xed\x87\xa4\xed\xa8\x23\x51\x2b\x11\x3a\xe2\x20\xfe\x58\x15\x09\x68\x22\x61\xd9\x5d\xf0\x8d\xf7\x5b\xf0\x40\x51\xff\x2b\xb4\x74\x02\x02\x52\x70\x39\x0d\x5e\x04\x03\x8b\x5b\x5d\x7b\xf1\xd7\x99\x54\x53\x51\x81\xe5\x1a\x4b\x92\x3d\x60\x9b\xed\x7d\xd0\x4e\xf2\x41\xa6\x14\x7e\x7d\x8c\x25\x28\x49\x82\x32\x6c\x3f\x2a\xf8\xa3\x2d\x7e\x67\x23\xf1\x40\x60\x0d\x34\x98\x2a\x29\x38\xee\x69\x30\x55\x9a\x82\x31\x23\x1a\x66\x8c\xf9\xe5\x9f\x5a\x1d\x6e\x6e\x08\x48\x46\x6e\x6f\xcf\xce\x7a\xff\x55\x61\x13\xcf\xfd\x4b\x85\x65\xb8\xb9\xb1\xd5\x0f\x79\xfa\xfe\xf3\x6f\x17\xe4\x69\xb3\xfe\xe3\xf2\x82\x04\x11\xa3\x26\x4f\x14\xd5\x2c\xa2\xc6\x00\x9a\xa8\x06\xc9\x94\x36\x91\x35\xd6\xd5\x2c\x73\x2e\x01\xc3\xc4\x44\xa9\x69\x76\x3f\x37\xbb\x89\x52\x68\x50\xd3\xf2\xbc\xe0\xf2\x3c\xb5\x17\x74\x43\xea\x33\xab\xd5\x6f\xd4\xc2\xdc\xa1\x49\xd1\xc2\x44\x8b\xbf\x2a\xd0\xeb\xf3\x9e\x55\xd6\x96\xc5\xc0\x94\xbb\x03\x60\x71\xe0\xfe\x5f\xa5\xb3\xcd\x99\x4e\xe3\xc2\x44\x05\x95\x74\x0e\xda\x89\xb1\x45\x6d\x08\xe2\xdf\x01\x00\x00\xff\xff\xe1\x11\x25\x87\x2e\x23\x00\x00")

func templatesViewsManagerHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsManagerHtml,
		"templates/views/manager.html",
	)
}

func templatesViewsManagerHtml() (*asset, error) {
	bytes, err := templatesViewsManagerHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/manager.html", size: 9006, mode: os.FileMode(420), modTime: time.Unix(1517651172, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsJsManagerMinJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x59\x6f\x6f\xe3\x2c\x12\xff\x2a\x3c\xec\x5e\x6d\x14\xc7\xd9\x3e\x77\xaf\x1c\xdb\xd5\x6a\x57\x8f\xb4\xd2\xea\xee\xd1\xb6\xd2\xbd\x68\xab\x8a\x98\x49\xc2\x96\x98\x08\x70\xb3\x55\xe4\xef\x7e\x02\x1c\xdb\x49\x93\xfe\xd9\x36\xbd\x37\x16\x86\x61\xf8\x01\x33\x3f\x66\xe0\x63\xc8\x64\x51\x2d\xa0\x34\x24\x56\x40\xd9\x7d\x38\xad\xca\xc2\x70\x59\x86\x64\xfd\x31\xc4\x1f\x56\x52\xdd\x82\xd2\x43\x3d\x97\x2b\x4c\xe2\x42\xf0\xe2\xf6\x80\x0c\x8a\x0d\xd5\xb7\x4e\x32\x99\x53\x1d\xf2\x78\x26\xee\x97\x73\x5e\xc8\x72\x08\xf7\x30\x94\x4b\x28\x49\xab\x83\xd4\x24\xea\x0f\x30\xe7\x0c\x5e\x39\x40\x21\xa4\x86\xc3\x23\x50\xc6\xd0\xa4\x32\x46\x96\x97\xe6\x7e\x09\x99\xae\x26\x0b\x6e\xae\xf7\x0e\x1a\xd3\x9f\xf4\x57\xb8\xb6\x72\x09\xfe\xfb\x3f\xe7\x17\x38\xaa\x94\x48\xf0\xa8\x51\x36\x3a\xa3\x4e\x36\xeb\x29\xc7\x11\xa3\x86\x26\xeb\x42\x56\xa5\x49\x76\x46\x1e\xba\x5a\x4c\xe2\x3b\x2a\x42\x52\x47\xba\x2a\x0a\xd0\x3a\xa9\x96\x8c\x1a\xa8\x49\x4d\xc6\x77\x54\x21\x43\x27\x02\xbe\x73\x6d\xa0\x04\xa5\x33\xab\x44\x6c\xfe\x7c\x23\x26\xb1\x2c\x43\xcc\x14\x5d\xc5\xcc\xe0\xa8\x45\x0d\x91\x06\x63\x78\x39\xd3\x64\xbd\x29\xc5\x3f\xb5\x2c\x4f\x4e\xb6\xd4\xb4\x48\x0c\xfc\x32\xe1\x96\x64\xac\xa0\x90\x8a\xe9\x0b\x69\xa8\x20\x35\x89\xbf\x52\x43\x2f\xec\xa8\xe1\xda\x2e\x48\xb2\xde\xbf\x08\xda\x50\xa3\x4f\xa0\x34\xdc\xdc\x67\xed\x40\x7e\x3d\xce\x55\x91\x60\x5b\xc0\x75\x54\x48\x51\x2d\x4a\x9d\x5c\xae\xdd\x4a\x61\xce\x70\x1d\x35\xe5\x92\x2e\xa0\xfb\x83\x3b\x28\x8d\xc6\x91\x82\x92\x81\x4a\xda\x49\xda\xd6\xc8\xee\x4a\xa4\xe4\x8a\xac\xed\x92\x15\xb2\x34\x50\x9a\x0c\xe3\xf1\x54\xaa\xd0\x56\xb9\xde\xdf\x18\xe2\x25\xb2\x1d\x88\x92\xab\x58\xc8\xe2\x16\xd8\x59\x23\x3d\xc8\x82\x54\x2f\x69\x89\x0a\x41\xb5\xce\xb0\xa0\x13\x10\xc8\x7d\x87\xbc\x9c\x4a\x9c\x07\x03\xdb\xf5\xb2\x51\x75\x3d\xc0\xe9\xc8\x76\xc8\x11\x4e\x7a\x3a\x28\x9a\x2b\x98\x66\xf8\x03\x46\x86\x1b\x01\x19\xfe\x01\x0b\x79\xc7\xcb\x19\xda\xac\x03\x3e\x38\x86\x03\x37\x34\x72\x36\xb3\x1d\x17\x92\x51\xb1\xa9\xa3\x6a\x06\x26\xc3\x1f\xfa\x95\xae\x3c\x6c\x86\xf9\x22\xcb\x29\x57\x0b\xa4\xec\x70\xd0\x0e\x86\x3e\x04\x03\x3b\x5b\xce\x06\x18\x4d\x65\xb3\x14\x08\xef\x4c\x26\xd8\x52\x59\x50\x21\x26\xb4\xb8\xcd\x70\xbb\x77\x6e\x16\x10\x5e\x05\x9d\xba\x20\x42\x01\x1e\x34\x2a\x06\x38\x20\xe3\x2b\x9c\xef\x2a\xc6\xe8\x57\x3a\xa2\x39\xc2\x63\x05\xa6\x52\xe5\x66\x77\xea\x76\x67\xa7\x5c\x81\xc6\xfd\x5f\x6d\x6e\x6c\x25\xbb\xa1\x66\xef\x86\x03\x59\x37\xca\xec\xcf\x99\xfd\x5c\xc8\x73\xa3\x78\x39\xf3\xcd\x09\xc6\x9d\x7e\x41\xdf\x4a\x9f\x54\x0c\x94\x35\xfe\xe4\x8f\x53\xef\xda\x65\x25\xc4\x53\x26\xd9\xa8\xee\x99\x1c\xc6\x49\x90\x32\x7e\xb7\xb1\x83\x89\x29\x87\x33\x25\xab\x25\x6a\x4b\xc3\x5f\x1a\xe7\xa9\x27\x27\xe4\xc8\x09\xfb\x1f\xdc\xeb\xe4\xc4\x19\x2d\x67\xa0\x5c\xd1\xf2\xde\x91\x6d\x28\x70\x36\x44\x85\x40\x8d\x43\xbe\xd8\x6c\x82\xab\x80\x8c\x71\x9e\xf2\xcd\x44\x5a\xca\x46\x1d\x79\x1b\x45\xf5\x7c\xdb\x83\x3a\x38\x7a\x17\x43\x9e\x8e\x78\x9e\x8e\xfc\x02\xe5\xe9\x88\xf1\xbb\x3c\xa8\xeb\xeb\xc8\x6d\x58\x72\x79\x79\x1a\x61\xaa\x0b\x7c\x1d\x5d\xfe\xd9\x94\xae\x6b\x12\x39\xf6\xfc\xaf\x67\xae\xac\x7f\xaa\xbc\x8a\x56\x37\x14\x7f\x64\x52\x6d\x1a\x5f\x46\xa9\x85\x02\x6a\x80\x3d\xc3\x09\xb6\xed\xbf\x73\x26\x8b\xa1\xea\x79\xab\xb7\xe8\x87\x0a\xa7\x82\xce\x5a\x85\xf6\xe7\x0c\x7f\xf7\xa2\x09\xfe\x4b\x01\x74\xfe\xe9\x5c\x88\xc1\x94\x56\xc2\x7c\xf1\xdc\x60\xdd\xed\x45\xde\xb6\xcd\xfb\xcf\xf2\xad\x60\xdc\xcd\x96\xba\x30\xe2\xe4\x24\xec\xf1\xf8\x73\x5c\xaf\x39\xb2\x5d\xb9\xe0\xaa\x10\x80\xda\x78\xa4\xf5\x39\x7d\x9b\xe1\xab\x00\x0d\x10\x47\x03\x74\x15\x3c\x65\xf9\x9b\xb8\xa8\x35\xfe\xf3\xb9\x5c\x39\xb5\x57\x81\x46\x0c\x0c\xe5\x62\xd7\xe2\x03\x12\xbd\x10\xf9\x31\x48\xe3\x96\x0b\x81\xbc\x59\x5a\xc2\x70\xeb\x6a\xfd\xfd\x00\x45\x34\x06\xdc\x23\x88\xb6\xc7\x6f\x33\x84\xd7\xf9\x34\x1f\xfc\xd9\xf2\xc1\xa7\x8e\x0f\xc6\x0f\x28\x00\x99\x89\x64\xf7\x0d\x11\xb8\x90\x10\x47\xcd\x8a\x76\x81\x67\x9f\x19\xc8\x1a\xe2\xa5\x72\xac\xf4\xd5\x5b\x74\xe8\xa3\xb8\x49\xf6\x31\x34\x73\xae\x49\x3c\xe5\x25\x0b\x31\xc7\xc4\x1e\x0e\x59\x9f\x82\x62\x25\x57\xe1\x46\xcc\x45\xae\xda\x84\xd8\x28\x4c\xc8\x98\x4f\xc3\x49\x3c\xa7\xfa\x8b\x5d\x90\x10\xef\x31\x17\xe2\x7d\xc0\xd9\x9b\x65\x5a\xbb\x98\x21\x71\x30\xc7\x93\xd8\x13\xfa\x23\xbd\x63\xca\xd8\xde\x66\x07\xc4\xa3\x8d\x8b\x39\x17\x2c\x0c\x52\xbf\x38\x2b\xce\xcc\x3c\xc3\xa7\x9f\x3e\xfd\x03\xe7\xa9\x51\x79\x6a\x58\x9e\x56\xa2\x8d\x6e\xb8\x36\xde\xe1\x70\x9e\x0a\xfe\xb0\x7a\xc8\x0d\x2c\x70\xbe\x15\x76\x2d\x2b\x21\x86\x8a\xcf\xe6\x06\x59\xe2\x1c\x2e\x2a\x03\x0c\xe9\x05\x15\x02\xe7\x29\x2c\xf2\x60\x60\xa7\xe4\xcc\x24\x1d\xc1\x22\x6f\x82\xb0\x54\x1b\x25\xcb\x59\xfe\xed\x6b\x3a\x6a\x8a\xe9\x44\xa1\x51\x9e\x8e\x04\x7f\xfb\xe1\x6d\x6c\xba\x1f\xc0\xbf\xe9\x02\xde\x05\xc2\x52\x71\xa9\xb8\xb9\xdf\x0f\xe3\xef\xa6\xf5\x5d\xa0\x28\x58\x02\x35\x7a\x3f\x92\x1f\xbe\xf1\xd8\x40\x58\xa5\xa8\x75\xc2\x0b\xf9\x03\x28\xb3\x06\xda\x1c\x60\x3d\x84\x37\xbc\x34\xa0\xee\xa8\x20\x8f\x41\xfd\xd6\x08\xfd\x7f\x11\x1b\xbe\x00\x59\x99\x03\x48\x2f\x7c\xeb\xd1\x21\xf6\x23\x01\x07\xab\x89\x20\x6e\xe8\x21\x64\x5f\xbc\xc0\xb1\x91\x79\x34\xda\x50\xe5\xd1\x9c\x3d\x84\xda\x35\xda\xf8\xfd\x00\xdc\x73\x2f\xf4\x2e\x6e\xe2\x63\xa7\x83\x38\x4c\x75\x74\x27\x71\x30\xa8\x31\xb0\x58\x1e\x72\xd7\xcf\x4d\xeb\xfb\x9b\x16\x15\x42\xae\x6e\xdc\xae\x1d\x36\xaf\xcf\x56\x08\x39\xa1\xf7\x31\x31\x9f\x8e\x3e\x6a\x68\xbb\x22\x8f\x98\xdb\x5f\x56\x14\xe9\xf7\x31\x3a\x8f\xce\xa5\xbf\x8f\xe2\xdf\x91\xf0\xf0\xf1\x3e\xf8\xdf\xe9\x13\xe8\x47\x95\xc8\xd3\x91\x8d\x03\x46\x36\x20\x18\xb9\x48\x21\xc7\x24\xb6\x91\x52\x48\x6a\x10\x1a\xd0\xa3\xe1\x48\x13\x6f\x1c\x8c\x47\x7c\xb8\xd2\x85\x23\xf1\x9c\x33\x08\xb7\x6e\xcb\x2e\xa8\xbe\xf5\x09\x9d\x9d\xde\x2b\xd3\x39\xa7\xe2\xd8\xc9\x9c\x1b\xe4\x35\xb7\x63\x9b\x60\xa0\xab\x69\xce\xe4\xdd\x8a\xf6\x08\x7c\x98\xb2\x95\xba\xcb\x00\x0f\x1d\x4d\xa5\xee\xe5\x82\xcd\x11\xf5\x06\x9a\xba\x53\xe5\x75\xa9\xa9\x7a\xb6\x92\xa7\x2e\x8d\xde\x3e\xcf\xc5\x1b\xde\xed\x94\x6e\x33\xde\x2b\xa6\xbe\xcb\x40\x6f\x75\x6b\xf6\x46\x1a\x5f\x94\xc9\x7b\x8d\x47\xbb\x1f\xf3\x19\xba\x27\xa0\xb7\xbc\x2b\xb3\x6a\x9f\x93\xf6\x3a\x57\x7f\xd3\xa4\xd7\x6a\x7c\x49\xca\xfb\xcf\xde\x15\x98\x7f\x6c\xc8\x7a\x0f\x1d\xdb\xef\x0d\xee\xd5\x23\x56\x20\x24\x65\xe1\xf6\x8d\xd9\xbe\x26\xc7\xbc\xdb\x0d\x75\x44\x2b\x23\x15\x4c\x15\xe8\x79\x66\xf7\xdd\xe5\xd9\xbd\xca\x7d\xcf\x2d\x36\x09\x8e\x8b\x39\xb8\xeb\x52\xdb\x29\xcb\xb2\x5e\x97\x93\x93\xd0\x23\x0f\xc9\x96\xfa\x15\x2f\x99\x5c\xc5\x1a\xda\x20\xbe\x91\x8b\x4e\xe1\x5f\x84\x38\xb3\xfb\x63\x57\x53\xd3\xa9\x10\x40\x55\xdb\xad\x27\x42\x1e\xcc\x80\xd4\x24\x6a\x7a\xed\x5c\x74\x76\x2b\xb9\x69\xf8\xc6\xc8\xba\x90\xa5\x96\x02\x62\x21\x67\x21\x55\x33\xf7\xba\xa6\x49\xf4\xfc\x37\xa5\xee\xa9\xa6\x31\xdc\xe6\x61\x89\xb3\xa4\x1b\x27\xf2\xb7\xa1\xc9\x67\xa5\xe8\x7d\x4c\x97\x4b\x71\x1f\x3a\x3f\xeb\x86\x8c\xb5\xe0\x05\x84\xa7\xbd\xe7\xa6\x67\x6e\x7d\x5d\x93\x7a\x33\xe7\xad\x9b\x9b\x6e\xc6\x9c\xfd\xce\x33\xd9\x83\x09\x71\x76\x18\xdc\x0b\x4d\xaf\x87\xb9\xe7\x76\xbf\x8b\xd8\x47\x02\x47\xc6\x5b\x93\xf1\xff\x02\x00\x00\xff\xff\x78\x99\x55\x8d\x82\x1d\x00\x00")

func assetsJsManagerMinJsBytes() ([]byte, error) {
	return bindataRead(
		_assetsJsManagerMinJs,
		"assets/js/manager.min.js",
	)
}

func assetsJsManagerMinJs() (*asset, error) {
	bytes, err := assetsJsManagerMinJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/js/manager.min.js", size: 7554, mode: os.FileMode(420), modTime: time.Unix(1518870329, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/manager.html": templatesViewsManagerHtml,
	"assets/js/manager.min.js": assetsJsManagerMinJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"js": &bintree{nil, map[string]*bintree{
			"manager.min.js": &bintree{assetsJsManagerMinJs, map[string]*bintree{}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"manager.html": &bintree{templatesViewsManagerHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
