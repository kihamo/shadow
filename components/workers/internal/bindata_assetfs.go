// Code generated by go-bindata.
// sources:
// templates/views/manager.html
// assets/js/manager.min.js
// DO NOT EDIT!

package internal

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsManagerHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5b\x6f\xdb\xb6\x17\x7f\xcf\xa7\x20\x54\xe0\x8f\xf6\x41\x51\x6f\xff\x97\xd6\xd6\x60\x74\x1b\x5a\x20\x2b\x86\xb4\x43\xb1\xa7\x80\x12\x8f\x2c\x3a\x14\xa9\x91\x47\xb2\x8d\x20\xdf\x7d\x20\x25\xd9\x92\x4d\xd9\x6e\x9b\x0e\x49\x91\xa7\x50\xe4\xb9\xf1\x77\xae\xb2\x72\x73\x43\x18\x64\x5c\x02\x09\x52\x25\x11\x24\x06\xe4\xf6\xf6\x6c\xc2\x78\x4d\x52\x41\x8d\x99\x06\x25\x9d\x43\x88\x1c\x05\x04\xf1\x19\x21\x84\xf4\x0f\xdd\xfe\x95\x80\x0c\xdb\x43\x47\x90\xbf\x8a\xbf\x28\x7d\x0d\xda\x4c\xa2\xfc\x55\xcb\x15\x31\x5e\xc7\x67\x23\x12\x34\x9f\xe7\x03\x11\x3d\x8a\x4c\xe9\x22\x9c\x6b\x55\x95\xa4\xac\x84\x08\x77\x69\x77\xe9\xb9\x2c\x2b\x6c\x18\x76\xa8\x1c\xa5\xa0\x09\x88\xfd\x7d\x77\xe6\x58\x09\xae\x4b\x98\x06\x69\x0e\xe9\x75\xa2\x56\x41\x27\x77\x61\x42\xb3\xe4\x98\xe6\x01\xe1\x6c\x1a\xd0\x0a\x95\x86\x4c\x83\xc9\x03\x12\xc5\x64\xb6\x7d\xde\x57\x1a\x79\xb4\xb6\x88\x78\x1e\xdb\x65\x07\x59\xff\x72\xa9\x00\xaa\x33\xbe\x0a\x62\xdf\xa9\x56\x4b\x82\xaa\xbc\x42\x2e\xc0\x78\xdc\x45\x25\x2f\x28\x02\x23\x99\xe0\xe5\x07\xf9\x37\x49\x95\x08\xc5\x3c\x7c\xed\x16\x05\x6b\x17\xa6\x68\x17\x2b\x13\xbe\x78\x39\xe2\x16\xab\x23\x34\x48\xd1\x1c\xf2\x45\xaa\x64\x10\x4f\xf8\xc6\x97\x94\x64\x34\x64\x40\x33\xfb\xf7\xff\xee\x1a\x3c\xde\x41\x62\x57\x48\xaa\x2a\x1b\x97\x16\x74\xc1\x0d\x82\x04\x6d\xc2\x66\x33\x7e\xee\xe3\xcd\x5f\xc5\x17\x1d\xe1\x36\x02\xfd\x20\xdf\x53\x88\x2a\x03\xda\x7c\x1b\x46\xcb\x26\xf5\x8e\x21\xb4\x97\xa1\x0f\x0a\x1f\xa4\xe6\xfa\x1b\xf1\x71\xac\xc7\xd0\xf9\x6c\x89\x8e\x61\x33\x48\xc1\x41\x78\x7a\x72\x6f\x75\x55\x52\x09\x62\x04\x8a\xd5\x55\xbf\xc4\x6e\x2d\x79\xe9\x4d\x9e\xe6\xca\xa4\x1f\xe4\x2f\x77\x38\x2b\xd1\xb1\x49\x5a\x13\x49\xeb\x84\xea\xa6\x74\x12\x67\xc7\x15\x2a\x25\x6c\x79\xf3\x95\x48\x1e\x4f\xe8\x16\x39\x21\x68\x69\x20\x14\x5c\x5e\xef\x3b\x22\xcd\xa1\xd6\x4a\x86\xb6\xd8\x36\x7e\xa0\xf1\x24\x12\xdc\x2b\xb6\x63\x65\x5a\x95\x4c\x2d\xa5\x47\xb9\xa3\xa4\x24\xd7\x90\x4d\x83\x27\xc1\x2e\x47\x88\x6a\x3e\x17\x10\x10\x46\x91\xb6\x0f\x3d\x79\x44\x2b\xfb\x9c\x54\x88\x4a\x06\x84\x6a\x4e\x43\x58\x95\x54\x32\x60\xd6\x62\x61\x60\xff\x0a\x4b\x0d\x32\xcd\xb7\xe6\xfb\x6d\xda\x02\xba\xb1\xa5\x00\x59\x75\x2a\xdd\xda\xcf\xda\x61\x3a\x7a\x38\xb8\xf3\x82\xd6\xd4\xa4\x9a\x97\xf8\xa6\x56\x9c\x3d\x7d\xfe\x6c\xe7\xb2\x85\x62\x54\x74\x7b\x54\xcf\x01\xa7\xc1\x93\xfe\xa6\x5b\x37\x2d\x7b\x1a\xbc\x53\x32\xe3\xba\x20\x1a\x0a\x55\x03\xa1\x42\x90\x6d\x94\xf6\xe9\x13\xc5\xd6\xd3\xe0\x0b\x17\x82\x24\xe0\x25\x27\xb0\x4a\xa1\x44\x3b\x31\xd0\x4a\xe0\xe6\xe0\x9c\xcc\x34\x90\xb5\xaa\x88\xa9\x34\xfc\x32\x90\x9a\x52\x21\x12\x9a\x5e\xf7\x72\xe3\xd2\x89\x7e\xfa\xec\xed\x01\xb8\x36\xa8\x6c\x5c\x35\x17\xeb\x32\xb7\xb5\x80\x6c\x56\x21\x6a\x6a\x5a\xbf\x91\xcb\x8d\xc1\x87\x61\x1e\xf3\x6f\x73\x38\xe6\xa5\x49\x54\x79\x66\x86\x7d\xfa\x7d\xba\x83\xcd\x7b\xcb\x36\x7c\x1c\x14\x86\x6e\x30\x1b\x97\x8b\x34\x11\x10\x6a\x30\xa5\x92\x86\xd7\xbb\x55\xc4\x91\x3b\x9a\x01\x03\x69\xd8\x72\x55\x83\x6e\xd7\x06\x35\x2f\x81\x8d\xa5\x25\xe6\x40\xd9\xd8\x99\x3e\x80\x2b\xe6\xf1\x87\x5f\x27\x11\xe6\x87\x69\x3e\xd2\x02\x8e\x53\xfd\x56\x83\x44\x73\x9c\xee\x77\xae\xe1\x34\x32\x83\x24\xe3\x1a\xd8\x71\xe2\x0b\x7a\x3a\xed\x2c\x45\xae\xe4\x01\x0b\x26\xd1\x18\x68\x96\xc7\x0b\xf5\x24\x72\x8e\xfa\x9e\x41\xb2\x37\x22\xfc\xc0\x2e\xe5\xe6\x97\x36\x35\xb7\x93\xc6\x63\x93\xfa\x89\x9b\x54\x7f\xf6\x34\xb9\x5a\x7e\x77\x79\x87\x35\x84\xaa\x04\xd9\x86\xd1\xa7\x5c\x2d\x5d\x43\x72\x03\xdc\x8f\xa8\xf2\x77\x8b\x41\xce\x99\xaf\x12\x7f\x3d\x06\xa9\x50\x2e\x22\x2c\x08\xef\x39\x83\xff\x04\x84\x4d\x1c\xf1\x9a\x33\xd0\xc1\x48\xbe\xf4\x38\xee\xcd\x7c\xd3\x55\x37\xff\x1c\xd2\x9e\x3e\xc4\x29\x84\xdc\x4b\xd7\x74\xf1\x4e\xd9\xd8\xe0\x30\x50\x76\x10\xcb\x52\x54\x5d\xd7\x98\x31\xd6\x7a\xf2\x71\xa0\x7b\xa8\x03\xdd\x3b\x0d\x14\x4f\x99\x95\x3e\x21\xc5\xea\x84\x61\xcd\xbe\x96\x3f\xe8\xc9\xcb\x95\xed\x1f\x38\x77\xb5\xf2\x5d\x06\x75\xbf\x61\x3c\x4e\x5d\x3f\xf1\xd4\x75\xb7\xad\xb3\x09\x1f\x7f\xe3\x74\x67\x0f\xb1\x6d\x3e\xd6\xfa\xfb\xf3\xf2\xfe\xa7\xe6\x4a\x73\x5c\x1f\xa7\xbc\x84\x12\xe8\x29\xef\xf9\x0d\x21\xf9\x20\x11\x74\x4d\xc5\x09\x4d\x84\x17\xa0\x2a\xbc\xdb\xf6\xa5\xef\xb4\xcf\xcd\x10\xa1\x28\x4f\xb9\xfd\x4c\x08\xb5\x24\xc6\x1a\x70\xea\x6f\x1d\xe6\x54\x6b\xdd\xaf\x1d\x27\x53\xdf\xd3\xae\xdb\x66\x8d\xab\x66\x24\xa3\x0c\x86\x6f\x69\x76\x6a\xb5\x09\xc4\x25\x83\xd5\x34\x08\x5f\x74\x55\x9b\x71\x2a\xd4\xbc\x6d\x14\x39\x67\x0c\xe4\x34\x40\x5d\xf9\x3e\x83\x36\xa5\xb2\xe5\xf0\x97\x82\xb6\x9a\x1e\x2d\x07\x0d\x9d\x45\xc3\x4e\xf6\xfb\x80\x34\xfd\xab\xfd\x46\xd9\x35\xb3\x4d\x89\xb2\x2f\x8a\x4d\xf5\x66\xdc\x14\x7c\x23\xd0\x7b\x8d\xff\x21\x2f\xc0\xbc\x9d\x44\x8d\x18\x8f\xb2\xfc\xf5\xd0\xac\x76\x0a\xd9\x8e\xe6\x76\xbc\x78\x7d\xd0\x3b\xfe\xfb\x25\x8a\xad\x7d\xb7\xcb\x94\x2e\x46\x42\xc4\xfb\x45\xf8\x60\x5b\xa5\x09\x08\x92\x29\x3d\x70\x76\xfb\xe1\x67\x3b\xc2\x48\xd4\x4a\x84\x8e\x38\x88\x3f\x56\x45\x02\x9a\x48\x58\x76\x17\x7c\xe3\xfd\x76\x3b\x50\xd4\xff\x6a\x2c\x9d\x80\x80\x14\x5c\x4e\x83\x17\xc1\xc0\xe2\x56\xd7\x5e\xfc\x75\x26\xd5\x54\x54\x60\xb9\xc6\x92\x64\x0f\xd8\x66\x7b\x1f\xb4\x93\x7c\x90\x29\x85\x5f\x1f\x63\x09\x4a\x92\xa0\x0c\xdb\x8f\x00\xfe\x68\x8b\xdf\xd9\x48\x3c\x10\x58\x03\x0d\xa6\x4a\x0a\x8e\x7b\x1a\x4c\x95\xa6\x60\xcc\x88\x86\x19\x63\x7e\xf9\xa7\x56\x87\x9b\x1b\x02\x92\x91\xdb\xdb\xb3\xb3\xde\x7f\x41\xd8\xc4\x73\xff\x02\x61\x19\x6e\x6e\x6c\xf5\x43\x9e\xbe\xff\xfc\xc7\x05\x79\xda\xac\xff\xba\xbc\x20\x41\xc4\xa8\xc9\x13\x45\x35\x8b\xa8\x31\x80\x26\xaa\x41\x32\xa5\x4d\x64\x8d\x75\x35\xcb\x9c\x4b\xc0\x30\x31\x51\x6a\x9a\xdd\xcf\xcd\x6e\xa2\x14\x1a\xd4\xb4\x3c\x2f\xb8\x3c\x4f\xed\x05\xdd\xf0\xf9\xcc\x6a\xf5\x1b\xb5\x30\x77\x68\x52\xb4\x30\xd1\xe2\x9f\x0a\xf4\xfa\xbc\x67\x95\xb5\x65\x31\x30\xe5\xee\x00\x58\x1c\xb8\xff\x57\xe9\x6c\x73\xa6\xd3\xb8\x30\x51\x41\x25\x9d\x83\x76\x62\x6c\x51\x1b\x82\xf8\x6f\x00\x00\x00\xff\xff\xd4\x7d\x03\x7e\xde\x22\x00\x00")

func templatesViewsManagerHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsManagerHtml,
		"templates/views/manager.html",
	)
}

func templatesViewsManagerHtml() (*asset, error) {
	bytes, err := templatesViewsManagerHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/manager.html", size: 8926, mode: os.FileMode(420), modTime: time.Unix(1515438862, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsJsManagerMinJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x59\x6f\x6f\xe3\x2c\x12\xff\x2a\x3c\xec\x5e\x6d\x14\xc7\xd9\x3e\x77\xaf\x12\xdb\xab\xd5\xae\x4e\x5a\xe9\xd1\x3d\xab\x6d\xa5\x7b\xd1\x56\x15\x31\x93\x84\x0d\x31\x11\xe0\xa6\x51\xe4\xef\x7e\x02\x1c\xdb\x49\x93\xfe\xd9\x36\xbd\x37\x16\x86\x61\xf8\x01\xf3\x1b\x66\xe0\x63\xc8\x64\x5e\x2e\xa0\x30\x24\x56\x40\xd9\x3a\x9c\x94\x45\x6e\xb8\x2c\x42\xb2\xf9\x18\xe2\x0f\x2b\xa9\xe6\xa0\x74\x5f\xcf\xe4\x0a\x93\x38\x17\x3c\x9f\x1f\x91\x41\xb1\xa1\x7a\xee\x24\x87\x33\xaa\x43\x1e\x4f\xc5\x7a\x39\xe3\xb9\x2c\xfa\xb0\x86\xbe\x5c\x42\x41\x1a\x1d\xa4\x22\x51\x77\x80\x19\x67\xf0\xca\x01\x72\x21\x35\x1c\x1f\x81\x32\x86\xc6\xa5\x31\xb2\xb8\x32\xeb\x25\xa4\xba\x1c\x2f\xb8\xb9\x39\x38\x68\x4c\x7f\xd1\xfb\x70\x63\xe5\x86\xf8\xc7\xdf\x17\x97\x38\x2a\x95\x18\xe2\x41\xad\x6c\xf0\x99\x3a\xd9\xb4\xa3\x1c\x47\x8c\x1a\x3a\xdc\xe4\xb2\x2c\xcc\x70\x6f\xe4\xbe\xab\xc5\x24\xbe\xa3\x22\x24\x55\xa4\xcb\x3c\x07\xad\x87\xe5\x92\x51\x03\x15\xa9\xc8\xe8\x8e\x2a\x64\xe8\x58\xc0\x5f\x5c\x1b\x28\x40\xe9\xd4\x2a\x11\xdb\x3f\xdf\x88\x49\x2c\x8b\x10\x33\x45\x57\x31\x33\x38\x6a\x50\x43\xa4\xc1\x18\x5e\x4c\x35\xd9\x6c\x4b\xf1\x2f\x2d\x8b\xb3\xb3\x1d\x35\x0d\x12\x03\xf7\x26\xdc\x91\x8c\x15\xe4\x52\x31\x7d\x29\x0d\x15\xa4\x22\xf1\x37\x6a\xe8\xa5\x1d\x35\xdc\xd8\x05\x19\x6e\x0e\x2f\x82\x36\xd4\xe8\x33\x28\x0c\x37\xeb\xb4\x19\xc8\xaf\xc7\x85\xca\x87\xd8\x16\x70\x15\xe5\x52\x94\x8b\x42\x0f\xaf\x36\x6e\xa5\x30\x67\xb8\x8a\xea\x72\x41\x17\xd0\xfe\xc1\x1d\x14\x46\xe3\x48\x41\xc1\x40\x0d\x9b\x49\xda\xd6\xc8\xee\x4a\xa4\xe4\x8a\x6c\xec\x92\xe5\xb2\x30\x50\x98\x14\xe3\x68\x0e\x6b\x9d\xfe\x3d\xfe\x05\xb9\x89\x6d\xd9\x89\x93\x91\x2d\xc6\x5a\x2a\x13\x92\xd1\x44\xaa\xd0\xf6\xe2\xe9\xa7\x11\x4f\x5c\x8b\x80\x62\x6a\x66\x23\xde\xeb\x11\x25\x57\xb1\x90\xf9\x1c\xd8\xe7\x5a\x6d\x2f\x0d\x12\xbd\xa4\x05\xca\x05\xd5\x3a\xc5\x82\x8e\x41\x20\xf7\xed\xf3\x62\x22\x71\x16\xf4\xac\x96\x2b\x7e\xd3\xc3\xc9\xc0\x8a\x66\x08\x0f\x3b\xbd\x29\x9a\x29\x98\xa4\xf8\x03\x46\x86\x1b\x01\x29\xfe\x09\x0b\x79\xc7\x8b\x29\xda\x2e\x15\x3e\xaa\x1d\xd9\x19\xf4\x8d\x9c\x4e\x6d\xc7\x85\x64\x54\x6c\xeb\xa8\x9a\x82\x49\xf1\x87\x6e\xa5\x2b\xf7\xeb\x61\xbe\xca\x62\xc2\xd5\x02\x29\x3b\x1c\x34\x83\xa1\x0f\x41\xcf\xce\x93\xb3\x1e\x46\x13\xa9\x90\x5b\x6b\x84\x9b\x69\x04\x3b\xca\x72\x2a\xc4\x98\xe6\xf3\x14\x37\x1b\xeb\xf0\x43\x78\x1d\xb4\x8a\x82\x08\x05\xb8\x67\xbb\x5d\xd5\x6a\x6e\x7a\x38\x20\xa3\x6b\x9c\xb5\x8a\x31\xba\x4f\x06\x34\x43\x78\xa4\xc0\x94\xaa\xd8\x6e\x5d\xd5\x6c\xfb\x84\x2b\xd0\xb8\xfb\xab\xcd\xad\xad\x64\xb7\xd4\x1c\xb4\x06\x20\x9b\x5a\x99\xfd\xf9\x6c\x3f\x97\xf2\xc2\x28\x5e\x4c\x7d\xf3\x10\xe3\x56\xbf\xa0\x6f\xa5\x4f\x2a\x06\xca\x32\x63\xf8\xc7\xb9\xe7\x7d\x51\x0a\xf1\x94\xbd\xd6\xaa\x3b\x66\x86\xf1\x30\x48\x18\xbf\xdb\x5a\xc0\xd8\x14\xfd\xa9\x92\xe5\x12\x35\xa5\xfe\xbd\xc6\x59\xe2\x3d\x17\x72\x9e\x0b\xfb\x1f\xdc\xe9\xe4\xc4\x19\x2d\xa6\xa0\x5c\xd1\x3a\xc5\x13\x5b\x4f\xe0\xac\x87\x0a\x81\x6a\xb6\xbe\xd8\x6c\x82\xeb\x80\x8c\x70\x96\xf0\xed\x44\x1a\x7f\x8e\x5a\xcf\x6e\x14\xd5\xb3\x5d\xee\xb4\x70\xf4\x3e\x86\x2c\x19\xf0\x2c\x19\xf8\x05\xca\x92\x01\xe3\x77\x59\x50\x55\x37\x91\xdb\xb0\xe1\xd5\xd5\x79\x84\xa9\xce\xf1\x4d\x74\xf5\x67\x5d\xba\xa9\x48\xe4\x5c\xeb\x7f\xbd\x5b\x4b\xbb\x47\xce\xab\x7c\xee\xd6\xff\x9f\xd8\xe3\xd6\x8d\x2f\xf3\xb7\xb9\x02\x6a\x80\x3d\x83\x04\xbb\xf6\xdf\x92\xc9\x62\x28\x5b\xb6\x3a\xfb\x67\x30\xa1\xa5\x30\x5f\x3d\xb1\x2d\x57\x5e\x44\x95\x5d\x8f\xfe\x2c\x62\x04\xa3\x16\x2a\x75\x01\xc2\xd9\x59\xd8\x71\xbf\xcf\xe1\x4d\x7d\x18\xbb\x72\xce\x55\x2e\x00\x35\x91\x46\x43\x18\x3d\x4f\xf1\x75\x80\x7a\x88\xa3\x1e\xba\x0e\x9e\x32\xdb\x6d\xc4\xd3\x58\xee\xc5\x4c\xae\x9c\xda\xeb\x40\x23\x06\x86\x72\xb1\x6f\xae\x01\x89\x5e\x88\xfc\x14\x8c\x9f\x73\x21\x90\xb7\x29\xcb\x76\xb7\xae\x96\xac\x47\xf8\x5d\x5b\x5f\x87\xdd\x4d\x8f\xdf\xa6\xb7\xd7\xf9\x34\x99\xff\x6c\xc8\xfc\xa9\x25\xf3\xe8\x01\x7f\x91\x19\x4b\xb6\xae\x59\xec\x82\x3d\x1c\xd5\x2b\xda\x86\x94\x5d\x5a\x93\x0d\xc4\x4b\xe5\x5c\xca\x37\x6f\xd1\xa1\x8f\xcf\xc6\xe9\xc7\xd0\xcc\xb8\x26\xf1\x84\x17\x2c\xc4\x1c\x13\xeb\xd9\xd3\xae\xff\x88\x95\x5c\x85\x5b\x31\x17\x93\x6a\x13\x62\xa3\x30\x21\x23\x3e\x09\xc7\xf1\x8c\xea\xaf\x76\x41\x42\x7c\xc0\x5c\x88\xe7\x80\xb3\x37\xeb\x26\xed\x62\x86\xc4\xc1\x1c\x8d\x63\xef\x8d\x1f\xe9\x1d\x53\xc6\x0e\x36\x3b\x20\x1e\x6d\x9c\xcf\xb8\x60\x61\x90\xf8\xc5\x59\x71\x66\x66\x29\x3e\xff\xf4\xe9\x1f\x38\x4b\x8c\xca\x12\xc3\xb2\xa4\x14\x4d\x50\xc2\xb5\xf1\x84\xc3\x59\x22\xf8\xc3\xea\x3e\x37\xb0\xc0\xd9\x4e\x9c\xb4\x2c\x85\xe8\x2b\x3e\x9d\x19\x64\xbd\x5e\x7f\x51\x1a\x60\x48\x2f\xa8\x10\x38\x4b\x60\x91\x05\x3d\x3b\x25\x67\x26\xc9\x00\x16\x59\x1d\x3b\x25\xda\x28\x59\x4c\xb3\xef\xdf\x92\x41\x5d\x4c\xc6\x0a\x0d\xb2\x64\x20\xf8\xdb\x0f\x6f\xa3\xce\xc3\x00\xfe\x43\x17\xf0\x2e\x10\x96\x8a\x4b\xc5\xcd\xfa\x30\x8c\x1f\x75\xeb\xbb\x40\x51\xb0\x04\x6a\xf4\x61\x24\x3f\x7d\xe3\xa9\x81\xb0\x52\x51\x4b\xc2\x4b\xf9\x13\x28\xb3\x06\x5a\x9f\x3e\x1d\x84\xb7\xbc\x30\xa0\xee\xa8\x20\x8f\x41\xfd\x5e\x0b\xfd\x7f\x11\x1b\xbe\x00\x59\x9a\x23\x48\x2f\x7d\xeb\xc9\x21\x76\x8f\x71\x07\xab\x3e\xfe\x6f\xe9\x31\x64\x5f\xbd\xc0\xa9\x91\x79\x34\xda\x50\xe5\xd1\x7c\x7e\x08\xb5\x6d\xb4\xc1\xf7\x11\xb8\x17\x5e\xe8\x5d\x68\xe2\x03\x9f\xa3\x38\x4c\x79\x72\x92\x38\x18\xd4\x18\x58\x2c\x8f\xd1\xf5\x4b\xdd\xfa\xfe\xa6\x45\x85\x90\xab\x5b\xb7\x6b\xc7\xcd\xeb\x8b\x15\x42\x4e\xe8\x7d\x4c\xcc\xe7\x92\x8f\x1a\xda\xbe\xc8\x23\xe6\xf6\x6f\x2b\x8a\xf4\xfb\x18\x9d\x47\xe7\x72\xd7\x47\xf1\xef\x49\x78\xf8\xf8\x10\xfc\xbf\xe8\x13\xe8\x07\xa5\xc8\x92\x81\x8d\x03\x06\x36\x20\x18\xb8\x48\x21\xc3\x24\xb6\x91\x52\x48\x2a\x10\x1a\xd0\xa3\xe1\x48\x1d\x6f\x1c\x8d\x47\x7c\xb8\xd2\x86\x23\xf1\x8c\x33\x08\x77\xee\xc1\x2e\xa9\x9e\xfb\x6c\xcc\x4e\xef\x95\xb9\x98\x53\x71\xea\x4c\xcc\x0d\xf2\x9a\x7b\xaf\x6d\x30\xd0\xd6\xd4\x67\xf2\x7e\x45\x73\x04\x3e\x4c\xe0\x0a\xdd\xa6\x6f\xc7\x8e\xa6\x42\x77\x12\xb9\xfa\x88\x7a\x03\x4d\xed\xa9\xf2\xba\xbc\x52\x3d\x5b\xc9\x53\x37\x3e\x7b\x49\x2a\xde\x3a\xcd\x4e\xcd\x8e\xbb\x7a\x05\xee\x7d\xf7\xf1\x56\xf7\x55\x6f\xa4\xf1\x45\x69\xb8\xd7\x78\xb2\x9b\x29\x9f\x5e\x7b\xef\xf1\x96\xb7\x54\x56\xed\x73\x72\x56\xc7\xd3\x37\xcd\x58\xad\xc6\x97\xe4\xab\xff\xec\x5c\x3e\xf9\x37\x80\xb4\xf3\xfe\xb0\xfb\x0c\xe0\x1e\x23\x62\x05\x42\x52\x16\xee\xde\x55\x1d\x6a\x72\x6e\x73\xb7\xa1\x8a\x68\x69\xa4\x82\x89\x02\x3d\x4b\xed\xbe\xbb\x24\xb9\x53\x79\xe8\x15\xc4\x66\xb0\x71\x3e\x03\x77\x51\x69\x3b\xa5\x69\xda\xe9\x72\x76\x16\x7a\xe4\x21\xd9\x51\xbf\xe2\x05\x93\xab\x58\x43\x13\x81\xd7\x72\xd1\x39\xfc\x8b\x10\x67\x76\x7f\xec\x6b\xaa\x3b\xe5\x02\xa8\x6a\xba\x75\x44\xc8\x83\x19\x90\x8a\x44\x75\xaf\xbd\x2b\xc6\x76\x25\xb7\x0d\xdf\x19\xd9\xe4\xb2\xd0\x52\x40\x2c\xe4\x34\xa4\x6a\xea\x1e\xbd\x34\x89\x9e\xff\xd4\xd3\xbe\xa0\xd4\x86\x5b\xbf\xf7\x70\x36\x6c\xc7\x89\xfc\x3d\xe4\xf0\x8b\x52\x74\x1d\xd3\xe5\x52\xac\x43\xc7\xb3\x76\xc8\x58\x0b\x9e\x43\x78\xde\x79\x05\x7a\xe6\xd6\x57\x15\xa9\xb6\x73\xde\xb9\x76\x69\x67\xcc\xd9\xef\xbc\x5e\x3d\x98\x10\x67\xc7\xc1\xbd\xd0\xf4\x3a\x98\x3b\xb4\xfb\x5d\xc4\xfe\x18\x3f\x31\xde\x8a\x8c\xfe\x17\x00\x00\xff\xff\x5e\x51\xd6\xc7\x19\x1d\x00\x00")

func assetsJsManagerMinJsBytes() ([]byte, error) {
	return bindataRead(
		_assetsJsManagerMinJs,
		"assets/js/manager.min.js",
	)
}

func assetsJsManagerMinJs() (*asset, error) {
	bytes, err := assetsJsManagerMinJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/js/manager.min.js", size: 7449, mode: os.FileMode(420), modTime: time.Unix(1515446123, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/manager.html": templatesViewsManagerHtml,
	"assets/js/manager.min.js": assetsJsManagerMinJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"js": &bintree{nil, map[string]*bintree{
			"manager.min.js": &bintree{assetsJsManagerMinJs, map[string]*bintree{}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"manager.html": &bintree{templatesViewsManagerHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
