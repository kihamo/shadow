// Code generated by go-bindata.
// sources:
// templates/views/manager.html
// assets/js/manager.min.js
// DO NOT EDIT!

package internal

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsManagerHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x4b\x6f\xdb\xb8\x16\xde\xe7\x57\x10\x2a\x70\xd1\x2e\x14\xf5\x75\x37\xad\xad\x0b\xa3\x77\x06\x2d\x90\x29\x06\x69\x07\xc5\xac\x02\x4a\x3c\xb2\xe8\x50\xa4\x86\x3c\x92\x6d\x04\xf9\xef\x03\x52\x92\x2d\xd9\x94\xed\xb6\xe9\x4c\x52\x64\x15\x8a\x3c\x2f\x7e\xe7\x29\x2b\x37\x37\x84\x41\xc6\x25\x90\x20\x55\x12\x41\x62\x40\x6e\x6f\xcf\x26\x8c\xd7\x24\x15\xd4\x98\x69\x50\xd2\x39\x84\xc8\x51\x40\x10\x9f\x11\x42\x48\xff\xd0\xed\x5f\x09\xc8\xb0\x3d\x74\x04\xf9\xab\xf8\x8b\xd2\xd7\xa0\xcd\x24\xca\x5f\xb5\x5c\x11\xe3\x75\x7c\x36\x22\x41\xf3\x79\x3e\x10\xd1\xa3\xc8\x94\x2e\xc2\xb9\x56\x55\x49\xca\x4a\x88\x70\x97\x76\x97\x9e\xcb\xb2\xc2\x86\x61\x87\xca\x51\x0a\x9a\x80\xd8\xdf\x77\x67\x8e\x95\xe0\xba\x84\x69\x90\xe6\x90\x5e\x27\x6a\x15\x74\x72\x17\x26\x34\x4b\x8e\x69\x1e\x10\xce\xa6\x01\xad\x50\x69\xc8\x34\x98\x3c\x20\x51\x4c\x66\xdb\xe7\x7d\xa5\x91\x47\x6b\x8b\x88\xe7\xb1\x5d\x76\x90\xf5\x2f\x97\x0a\xa0\x3a\xe3\xab\x20\xf6\x9d\x6a\xb5\x24\xa8\xca\x2b\xe4\x02\x8c\xc7\x5d\x54\xf2\x82\x22\x30\x92\x09\x5e\x7e\x90\x7f\x92\x54\x89\x50\xcc\xc3\xd7\x6e\x51\xb0\x76\x61\x8a\x76\xb1\x32\xe1\x8b\x97\x23\x6e\xb1\x3a\x42\x83\x14\xcd\x21\x5f\xa4\x4a\x06\xf1\x84\x6f\x7c\x49\x49\x46\x43\x06\x34\xb3\x7f\xff\xeb\xae\xc1\xe3\x1d\x24\x76\x85\xa4\xaa\xb2\x71\x69\x41\x17\xdc\x20\x48\xd0\x26\x6c\x36\xe3\xe7\x3e\xde\xfc\x55\x7c\xd1\x11\x6e\x23\xd0\x0f\xf2\x3d\x85\xa8\x32\xa0\xcd\xb7\x61\xb4\x6c\x52\xef\x18\x42\x7b\x19\xfa\xa0\xf0\x41\x6a\xae\xbf\x11\x1f\xc7\x7a\x0c\x9d\xcf\x96\xe8\x18\x36\x83\x14\x1c\x84\xa7\x27\xf7\x56\x57\x25\x95\x20\x46\xa0\x58\x5d\xf5\x4b\xec\xd6\x92\x97\xde\xe4\x69\xae\x4c\xfa\x41\xfe\x72\x87\xb3\x12\x1d\x9b\xa4\x35\x91\xb4\x4e\xa8\x6e\x4a\x27\x71\x76\x5c\xa1\x52\xc2\x96\x37\x5f\x89\xe4\xf1\x84\x6e\x91\x13\x82\x96\x06\x42\xc1\xe5\xf5\xbe\x23\xd2\x1c\x6a\xad\x64\x68\x8b\x6d\xe3\x07\x1a\x4f\x22\xc1\xbd\x62\x3b\x56\xa6\x55\xc9\xd4\x52\x7a\x94\x3b\x4a\x4a\x72\x0d\xd9\x34\x78\x12\xec\x72\x84\xa8\xe6\x73\x01\x01\x61\x14\x69\xfb\xd0\x93\x47\xb4\xb2\xcf\x49\x85\xa8\x64\x40\xa8\xe6\x34\x84\x55\x49\x25\x03\x66\x2d\x16\x06\xf6\xaf\xb0\xd4\x20\xd3\x7c\x6b\xbe\xdf\xa6\x2d\xa0\x1b\x5b\x0a\x90\x55\xa7\xd2\xad\xfd\xac\x1d\xa6\xa3\x87\x83\x3b\x2f\x68\x4d\x4d\xaa\x79\x89\x6f\x6a\xc5\xd9\xd3\xe7\xcf\x76\x2e\x5b\x28\x46\x45\xb7\x47\xf5\x1c\x70\x1a\x3c\xe9\x6f\xba\x75\xd3\xb2\xa7\xc1\x3b\x25\x33\xae\x0b\xa2\xa1\x50\x35\x10\x2a\x04\xd9\x46\x69\x9f\x3e\x51\x6c\x3d\x0d\xbe\x70\x21\x48\x02\x5e\x72\x02\xab\x14\x4a\xb4\x13\x03\xad\x04\x6e\x0e\xce\xc9\x4c\x03\x59\xab\x8a\x98\x4a\xc3\xff\x06\x52\x53\x2a\x44\x42\xd3\xeb\x5e\x6e\x5c\x3a\xd1\x4f\x9f\xbd\x3d\x00\xd7\x06\x95\x8d\xab\xe6\x62\x5d\xe6\xb6\x16\x90\xcd\x2a\x44\x4d\x4d\xeb\x37\x72\xb9\x31\xf8\x30\xcc\x63\xfe\x6d\x0e\xc7\xbc\x34\x89\x2a\xcf\xcc\xb0\x4f\xbf\x4f\x77\xb0\x79\x6f\xd9\x86\x8f\x83\xc2\xd0\x0d\x66\xe3\x72\x91\x26\x02\x42\x0d\xa6\x54\xd2\xf0\x7a\xb7\x8a\x38\x72\x47\x33\x60\x20\x0d\x5b\xae\x6a\xd0\xed\xda\xa0\xe6\x25\xb0\xb1\xb4\xc4\x1c\x28\x1b\x3b\xd3\x07\x70\xc5\x3c\xfe\xf0\xff\x49\x84\xf9\x61\x9a\x8f\xb4\x80\xe3\x54\xbf\xd4\x20\xd1\x1c\xa7\xfb\x95\x6b\x38\x8d\xcc\x20\xc9\xb8\x06\x76\x9c\xf8\x82\x9e\x4e\x3b\x4b\x91\x2b\x79\xc0\x82\x49\x34\x06\x9a\xe5\xf1\x42\x3d\x89\x9c\xa3\xbe\x67\x90\xec\x8d\x08\x3f\xb0\x4b\xb9\xf9\xa5\x4d\xcd\xed\xa4\xf1\xd8\xa4\x7e\xe2\x26\xd5\x9f\x3d\x4d\xae\x96\xdf\x5d\xde\x61\x0d\xa1\x2a\x41\xb6\x61\xf4\x29\x57\x4b\xd7\x90\xdc\x00\xf7\x23\xaa\xfc\xdd\x62\x90\x73\xe6\xab\xc4\x5f\x8f\x41\x2a\x94\x8b\x08\x0b\xc2\x7b\xce\xe0\x1f\x01\x61\x13\x47\xbc\xe6\x0c\x74\x30\x92\x2f\x3d\x8e\x7b\x33\xdf\x74\xd5\xcd\x3f\x87\xb4\xa7\x0f\x71\x0a\x21\xf7\xd2\x35\x5d\xbc\x53\x36\x36\x38\x0c\x94\x1d\xc4\xb2\x14\x55\xd7\x35\x66\x8c\xb5\x9e\x7c\x1c\xe8\x1e\xea\x40\xf7\x4e\x03\xc5\x53\x66\xa5\x4f\x48\xb1\x3a\x61\x58\xbb\x50\xe9\xf5\x29\xf2\xec\xeb\xfb\x83\x9e\xd0\x5c\x79\xff\x81\xf3\x59\x2b\xdf\x65\x5a\xf7\x5b\xc7\xe3\x74\xf6\x13\x4f\x67\x77\xdb\x62\x9b\xf0\xf1\x37\x58\x77\xf6\x10\xdb\xeb\x63\x4f\xb8\x3f\x2f\xf9\xbf\x6b\xae\x34\xc7\xf5\x71\xca\x4b\x28\x81\x9e\xf2\x7b\x40\x43\x48\x3e\x48\x04\x5d\x53\x71\x42\x13\xe1\x05\xa8\x0a\xef\xb6\xcd\xe9\x7f\xa5\x1f\xce\x10\xa1\x28\x4f\x41\x69\x26\x84\x5a\x12\x63\x0d\x3d\xf5\xb7\x13\x73\xea\xad\xdc\xaf\x27\x27\x53\xdf\xd3\xee\xdc\x66\x97\xab\x7a\x24\xa3\x0c\x86\x6f\x7d\x76\x0a\xb6\x89\xc6\x25\x83\xd5\x34\x08\x5f\x74\xd5\x9d\x71\x2a\xd4\xbc\x6d\x28\x39\x67\x0c\xe4\x34\x40\x5d\xf9\x3e\xab\x36\x25\xb5\xe5\xf0\x97\x8c\xb6\xea\x1e\x2d\x1b\x0d\x9d\x45\xc3\xbe\x29\xec\x03\xd2\xf4\xb9\xf6\x9b\x67\xd7\xf4\x36\xa5\xcc\xbe\x78\x36\x55\x9e\x71\x53\xf0\x8d\x40\xef\x35\xfe\x83\xbc\x00\xf3\x76\x12\x35\x62\x3c\xca\xf2\xd7\x43\xb3\xda\x69\x65\x3b\xea\xdb\x31\xe4\xf5\x41\xef\xf8\xef\x97\x28\xb6\xf6\xdd\x2e\x53\xba\x18\x09\x11\xef\x17\xe6\x83\xed\x97\x26\x20\x48\xa6\xf4\xc0\xd9\xed\x87\xa4\xed\xa8\x23\x51\x2b\x11\x3a\xe2\x20\xfe\x58\x15\x09\x68\x22\x61\xd9\x5d\xf0\x8d\xf7\x5b\xf0\x40\x51\xff\x2b\xb4\x74\x02\x02\x52\x70\x39\x0d\x5e\x04\x03\x8b\x5b\x5d\x7b\xf1\xd7\x99\x54\x53\x51\x81\xe5\x1a\x4b\x92\x3d\x60\x9b\xed\x7d\xd0\x4e\xf2\x41\xa6\x14\x7e\x7d\x8c\x25\x28\x49\x82\x32\x6c\x3f\x2a\xf8\xa3\x2d\x7e\x67\x23\xf1\x40\x60\x0d\x34\x98\x2a\x29\x38\xee\x69\x30\x55\x9a\x82\x31\x23\x1a\x66\x8c\xf9\xe5\x9f\x5a\x1d\x6e\x6e\x08\x48\x46\x6e\x6f\xcf\xce\x7a\xff\x55\x61\x13\xcf\xfd\x4b\x85\x65\xb8\xb9\xb1\xd5\x0f\x79\xfa\xfe\xf3\x6f\x17\xe4\x69\xb3\xfe\xe3\xf2\x82\x04\x11\xa3\x26\x4f\x14\xd5\x2c\xa2\xc6\x00\x9a\xa8\x06\xc9\x94\x36\x91\x35\xd6\xd5\x2c\x73\x2e\x01\xc3\xc4\x44\xa9\x69\x76\x3f\x37\xbb\x89\x52\x68\x50\xd3\xf2\xbc\xe0\xf2\x3c\xb5\x17\x74\x43\xea\x33\xab\xd5\x6f\xd4\xc2\xdc\xa1\x49\xd1\xc2\x44\x8b\xbf\x2a\xd0\xeb\xf3\x9e\x55\xd6\x96\xc5\xc0\x94\xbb\x03\x60\x71\xe0\xfe\x5f\xa5\xb3\xcd\x99\x4e\xe3\xc2\x44\x05\x95\x74\x0e\xda\x89\xb1\x45\x6d\x08\xe2\xdf\x01\x00\x00\xff\xff\xe1\x11\x25\x87\x2e\x23\x00\x00")

func templatesViewsManagerHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsManagerHtml,
		"templates/views/manager.html",
	)
}

func templatesViewsManagerHtml() (*asset, error) {
	bytes, err := templatesViewsManagerHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/manager.html", size: 9006, mode: os.FileMode(420), modTime: time.Unix(1517651172, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsJsManagerMinJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x59\x6f\x6f\xe3\xaa\xd2\xff\x2a\x1c\x76\x9f\xda\x28\x8e\xb3\x3d\xcf\x7d\xe5\xd8\xae\x56\xbb\x3a\xd2\x4a\xab\x7b\x8e\xb6\x95\xee\x8b\xb6\xaa\x88\x99\x24\x6c\x89\x89\x00\x37\x1b\x45\xfe\xee\x57\x80\x63\x3b\x6d\xd2\x3f\xdb\xa6\xf7\x8d\x85\x61\x18\x7e\xc0\xcc\x8f\x19\xf8\x18\x32\x59\x54\x0b\x28\x0d\x89\x15\x50\xb6\x0e\xa7\x55\x59\x18\x2e\xcb\x90\x6c\x3e\x86\xf8\xc3\x4a\xaa\x5b\x50\x7a\xa8\xe7\x72\x85\x49\x5c\x08\x5e\xdc\x1e\x90\x41\xb1\xa1\xfa\xd6\x49\x26\x73\xaa\x43\x1e\xcf\xc4\x7a\x39\xe7\x85\x2c\x87\xb0\x86\xa1\x5c\x42\x49\x5a\x1d\xa4\x26\x51\x7f\x80\x39\x67\xf0\xca\x01\x0a\x21\x35\x1c\x1e\x81\x32\x86\x26\x95\x31\xb2\xbc\x34\xeb\x25\x64\xba\x9a\x2c\xb8\xb9\xde\x3b\x68\x4c\x7f\xd2\x5f\xe1\xc6\xca\x25\xf8\x9f\xbf\xcf\x2f\x70\x54\x29\x91\xe0\x51\xa3\x6c\x74\x46\x9d\x6c\xd6\x53\x8e\x23\x46\x0d\x4d\x36\x85\xac\x4a\x93\xdc\x1b\x79\xe8\x6a\x31\x89\xef\xa8\x08\x49\x1d\xe9\xaa\x28\x40\xeb\xa4\x5a\x32\x6a\xa0\x26\x35\x19\xdf\x51\x85\x0c\x9d\x08\xf8\xce\xb5\x81\x12\x94\xce\xac\x12\xb1\xfd\xf3\x8d\x98\xc4\xb2\x0c\x31\x53\x74\x15\x33\x83\xa3\x16\x35\x44\x1a\x8c\xe1\xe5\x4c\x93\xcd\xb6\x14\xff\xd4\xb2\x3c\x39\xd9\x51\xd3\x22\x31\xf0\xcb\x84\x3b\x92\xb1\x82\x42\x2a\xa6\x2f\xa4\xa1\x82\xd4\x24\xfe\x4a\x0d\xbd\xb0\xa3\x86\x1b\xbb\x20\xc9\x66\xff\x22\x68\x43\x8d\x3e\x81\xd2\x70\xb3\xce\xda\x81\xfc\x7a\x9c\xab\x22\xc1\xb6\x80\xeb\xa8\x90\xa2\x5a\x94\x3a\xb9\xdc\xb8\x95\xc2\x9c\xe1\x3a\x6a\xca\x25\x5d\x40\xf7\x07\x77\x50\x1a\x8d\x23\x05\x25\x03\x95\xb4\x93\xb4\xad\x91\xdd\x95\x48\xc9\x15\xd9\xd8\x25\x2b\x64\x69\xa0\x34\x19\xc6\xd1\x2d\xac\x75\xf6\xf7\xe4\x27\x14\x26\xb6\x65\x27\x4e\xc6\xb6\x18\x6b\xa9\x4c\x48\xc6\x53\xa9\x42\xdb\x8b\x67\x9f\xc6\x3c\x75\x2d\x02\xca\x99\x99\x8f\xf9\x60\x40\x94\x5c\xc5\x42\x16\xb7\xc0\xce\x1a\xb5\x83\x2c\x48\xf5\x92\x96\xa8\x10\x54\xeb\x0c\x0b\x3a\x01\x81\xdc\x77\xc8\xcb\xa9\xc4\x79\x30\xb0\x5a\x2e\xf9\xf5\x00\xa7\x23\x2b\x9a\x23\x9c\xf4\x7a\x53\x34\x57\x30\xcd\xf0\x07\x8c\x0c\x37\x02\x32\xfc\x03\x16\xf2\x8e\x97\x33\xb4\x5d\x2a\x7c\x50\x3b\xb2\x33\x18\x1a\x39\x9b\xd9\x8e\x0b\xc9\xa8\xd8\xd6\x51\x35\x03\x93\xe1\x0f\xfd\x4a\x57\x1e\x36\xc3\x7c\x91\xe5\x94\xab\x05\x52\x76\x38\x68\x07\x43\x1f\x82\x81\x9d\x27\x67\x03\x8c\xa6\x52\x21\xb7\xd6\x08\xb7\xd3\x08\x76\x94\x15\x54\x88\x09\x2d\x6e\x33\xdc\x6e\xac\xc3\x0f\xe1\x55\xd0\x29\x0a\x22\x14\xe0\x81\xed\x76\xd9\xa8\xb9\x1e\xe0\x80\x8c\xaf\x70\xde\x29\xc6\xe8\x57\x3a\xa2\x39\xc2\x63\x05\xa6\x52\xe5\x76\xeb\xea\x76\xdb\xa7\x5c\x81\xc6\xfd\x5f\x6d\x6e\x6c\x25\xbb\xa1\x66\xaf\x35\x00\xd9\x34\xca\xec\xcf\x99\xfd\x5c\xc8\x73\xa3\x78\x39\xf3\xcd\x09\xc6\x9d\x7e\x41\xdf\x4a\x9f\x54\x0c\x94\xf5\x8c\xe4\x8f\x53\xef\xf7\x65\x25\xc4\x53\xf6\xda\xa8\xee\x99\x19\xc6\x49\x90\x32\x7e\xb7\xb5\x80\x89\x29\x87\x33\x25\xab\x25\x6a\x4b\xc3\x5f\x1a\xe7\xa9\x67\x2e\xe4\x98\x0b\xfb\x1f\xdc\xeb\xe4\xc4\x19\x2d\x67\xa0\x5c\xd1\x92\xe2\x91\xad\x27\x70\xd6\x43\x85\x40\x8d\xb7\xbe\xd8\x6c\x82\xab\x80\x8c\x71\x9e\xf2\xed\x44\x5a\x3e\x47\x1d\xb3\x1b\x45\xf5\x7c\xd7\x77\x3a\x38\xfa\x3e\x86\x3c\x1d\xf1\x3c\x1d\xf9\x05\xca\xd3\x11\xe3\x77\x79\x50\xd7\xd7\x91\xdb\xb0\xe4\xf2\xf2\x34\xc2\x54\x17\xf8\x3a\xba\xfc\xb3\x29\x5d\xd7\x24\x72\xd4\xfa\x1f\x4f\x6b\x59\xff\xc8\x79\x15\xe7\x6e\xf9\xff\xc8\x8c\xdb\x34\xbe\x8c\x6f\x0b\x05\xd4\x00\x7b\x86\x13\xec\xda\x7f\xe7\x4c\x16\x43\xd5\xf3\x56\x6f\xd1\x0f\x15\x4e\x05\x9d\xb5\x0a\xed\xcf\x19\xfe\xee\x45\x13\xfc\x97\x02\xe8\xfc\xd3\xb9\x10\x83\x29\xad\x84\xf9\xe2\xb9\xc1\xba\xdb\x8b\xbc\x6d\xf7\x50\x78\x96\x6f\x05\xe3\x6e\xb6\xd4\xc5\x18\x27\x27\x61\x8f\xc1\x9f\xe3\x7a\xcd\x79\xee\xca\x05\x57\x85\x00\xd4\x06\x2b\xad\xcf\xe9\xdb\x0c\x5f\x05\x68\x80\x38\x1a\xa0\xab\xe0\x29\xcb\xdf\x06\x4d\xad\xf1\x9f\xcf\xe5\xca\xa9\xbd\x0a\x34\x62\x60\x28\x17\xf7\x2d\x3e\x20\xd1\x0b\x91\x1f\x83\x34\x6e\xb9\x10\xc8\x9b\xa5\x25\x0c\xb7\xae\xd6\xdf\x0f\x50\x44\x63\xc0\x3d\x82\x68\x7b\xfc\x36\x43\x78\x9d\x4f\xf3\xc1\x9f\x2d\x1f\x7c\xea\xf8\x60\xfc\x80\x02\x90\x99\x48\xb6\x6e\x88\xc0\xc5\x8b\x38\x6a\x56\xb4\x8b\x4a\xfb\xcc\x40\x36\x10\x2f\x95\x63\xa5\xaf\xde\xa2\x43\x1f\xe2\x4d\xb2\x8f\xa1\x99\x73\x4d\xe2\x29\x2f\x59\x88\x39\x26\xf6\x70\xc8\xfa\x14\x14\x2b\xb9\x0a\xb7\x62\x2e\xac\xd5\x26\xc4\x46\x61\x42\xc6\x7c\x1a\x4e\xe2\x39\xd5\x5f\xec\x82\x84\x78\x8f\xb9\x10\xef\x03\xce\xde\x2c\xd3\xda\xc5\x0c\x89\x83\x39\x9e\xc4\x9e\xd0\x1f\xe9\x1d\x53\xc6\xf6\x36\x3b\x20\x1e\x6d\x5c\xcc\xb9\x60\x61\x90\xfa\xc5\x59\x71\x66\xe6\x19\x3e\xfd\xf4\xe9\xff\x70\x9e\x1a\x95\xa7\x86\xe5\x69\x25\xda\xb8\x86\x6b\xe3\x1d\x0e\xe7\xa9\xe0\x0f\xab\x87\xdc\xc0\x02\xe7\x3b\xa1\xd6\xb2\x12\x62\xa8\xf8\x6c\x6e\x90\x25\xce\xe1\xa2\x32\xc0\x90\x5e\x50\x21\x70\x9e\xc2\x22\x0f\x06\x76\x4a\xce\x4c\xd2\x11\x2c\xf2\x26\xfc\x4a\xb5\x51\xb2\x9c\xe5\xdf\xbe\xa6\xa3\xa6\x98\x4e\x14\x1a\xe5\xe9\x48\xf0\xb7\x1f\xde\x06\xae\xfb\x01\xfc\x9b\x2e\xe0\x5d\x20\x2c\x15\x97\x8a\x9b\xf5\x7e\x18\xff\x34\xad\xef\x02\x45\xc1\x12\xa8\xd1\xfb\x91\xfc\xf0\x8d\xc7\x06\xc2\x2a\x45\xad\x13\x5e\xc8\x1f\x40\x99\x35\xd0\xe6\x00\xeb\x21\xbc\xe1\xa5\x01\x75\x47\x05\x79\x0c\xea\xb7\x46\xe8\x7f\x8b\xd8\xf0\x05\xc8\xca\x1c\x40\x7a\xe1\x5b\x8f\x0e\xb1\x1f\x09\x38\x58\x4d\x04\x71\x43\x0f\x21\xfb\xe2\x05\x8e\x8d\xcc\xa3\xd1\x86\x2a\x8f\xe6\xec\x21\xd4\xae\xd1\xc6\xef\x07\xe0\x9e\x7b\xa1\x77\x71\x13\x1f\x3b\x1d\xc4\x61\xaa\xa3\x3b\x89\x83\x41\x8d\x81\xc5\xf2\x90\xbb\x7e\x6e\x5a\xdf\xdf\xb4\xa8\x10\x72\x75\xe3\x76\xed\xb0\x79\x7d\xb6\x42\xc8\x09\xbd\x8f\x89\xf9\x74\xf4\x51\x43\xbb\x2f\xf2\x88\xb9\xfd\x65\x45\x91\x7e\x1f\xa3\xf3\xe8\x5c\xfa\xfb\x28\xfe\x7b\x12\x1e\x3e\xde\x07\xff\x3b\x7d\x02\xfd\xa8\x12\x79\x3a\xb2\x71\xc0\xc8\x06\x04\x23\x17\x29\xe4\x98\xc4\x36\x52\x0a\x49\x0d\x42\x03\x7a\x34\x1c\x69\xe2\x8d\x83\xf1\x88\x0f\x57\xba\x70\x24\x9e\x73\x06\xe1\xce\x55\xda\x05\xd5\xb7\x3e\xa1\xb3\xd3\x7b\x65\x3a\xe7\x54\x1c\x3b\x99\x73\x83\xbc\xe6\xea\x6c\x1b\x0c\x74\x35\xcd\x99\x7c\xbf\xa2\x3d\x02\x1f\xa6\x6c\xa5\xee\x32\xc0\x43\x47\x53\xa9\x7b\xb9\x60\x73\x44\xbd\x81\xa6\xee\x54\x79\x5d\x6a\xaa\x9e\xad\xe4\xa9\x4b\xa3\xb7\xcf\x73\xf1\x96\x77\x3b\xa5\xbb\x8c\xf7\x8a\xa9\xdf\x67\xa0\xb7\xba\x35\x7b\x23\x8d\x2f\xca\xe4\xbd\xc6\xa3\xdd\x8f\xf9\x0c\xdd\x13\xd0\x5b\xde\x95\x59\xb5\xcf\x49\x7b\x9d\xab\xbf\x69\xd2\x6b\x35\xbe\x24\xe5\xfd\xff\xde\x15\x98\x7f\x89\xc8\x7a\xaf\x20\xbb\x8f\x11\xee\x49\x24\x56\x20\x24\x65\xe1\xee\x8d\xd9\xbe\x26\xc7\xbc\xbb\x0d\x75\x44\x2b\x23\x15\x4c\x15\xe8\x79\x66\xf7\xdd\xe5\xd9\xbd\xca\x7d\x6f\x31\x36\x09\x8e\x8b\x39\xb8\xeb\x52\xdb\x29\xcb\xb2\x5e\x97\x93\x93\xd0\x23\x0f\xc9\x8e\xfa\x15\x2f\x99\x5c\xc5\x1a\xda\x20\xbe\x91\x8b\x4e\xe1\x5f\x84\x38\xb3\xfb\xe3\xbe\xa6\xa6\x53\x21\x80\xaa\xb6\x5b\x4f\x84\x3c\x98\x01\xa9\x49\xd4\xf4\xba\x77\xd1\xd9\xad\xe4\xb6\xe1\x1b\x23\x9b\x42\x96\x5a\x0a\x88\x85\x9c\x85\x54\xcd\xdc\xd3\x9b\x26\xd1\xf3\x1f\x9c\xba\x77\x9c\xc6\x70\x9b\x57\x27\xce\x92\x6e\x9c\xc8\xdf\x86\x26\x9f\x95\xa2\xeb\x98\x2e\x97\x62\x1d\x3a\x3f\xeb\x86\x8c\xb5\xe0\x05\x84\xa7\xbd\xb7\xa8\x67\x6e\x7d\x5d\x93\x7a\x3b\xe7\x9d\x9b\x9b\x6e\xc6\x9c\xfd\xce\x1b\xda\x83\x09\x71\x76\x18\xdc\x0b\x4d\xaf\x87\xb9\xe7\x76\xbf\x8b\xd8\x47\x02\x47\xc6\x5b\x93\xf1\x7f\x03\x00\x00\xff\xff\xda\x89\xd4\xc8\x9f\x1d\x00\x00")

func assetsJsManagerMinJsBytes() ([]byte, error) {
	return bindataRead(
		_assetsJsManagerMinJs,
		"assets/js/manager.min.js",
	)
}

func assetsJsManagerMinJs() (*asset, error) {
	bytes, err := assetsJsManagerMinJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/js/manager.min.js", size: 7583, mode: os.FileMode(420), modTime: time.Unix(1517652049, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/manager.html": templatesViewsManagerHtml,
	"assets/js/manager.min.js": assetsJsManagerMinJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"js": &bintree{nil, map[string]*bintree{
			"manager.min.js": &bintree{assetsJsManagerMinJs, map[string]*bintree{}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"manager.html": &bintree{templatesViewsManagerHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
