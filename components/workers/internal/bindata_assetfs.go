// Code generated by go-bindata.
// sources:
// templates/views/manager.html
// assets/js/manager.min.js
// DO NOT EDIT!

package internal

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsManagerHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x4b\x6f\xdb\xb8\x16\xde\xe7\x57\x10\x2a\x70\xd1\x2e\x14\xf5\x75\x37\xad\xad\x0b\xa3\x77\x06\x2d\x90\x29\x06\x69\x07\xc5\xac\x02\x4a\x3c\xb2\xe8\x50\xa4\x86\x3c\x92\x6d\x04\xf9\xef\x03\x52\x92\x2d\xd9\x94\xed\xb6\xe9\x4c\x52\x64\x15\x8a\x3c\x2f\x7e\xe7\x29\x2b\x37\x37\x84\x41\xc6\x25\x90\x20\x55\x12\x41\x62\x40\x6e\x6f\xcf\x26\x8c\xd7\x24\x15\xd4\x98\x69\x50\xd2\x39\x84\xc8\x51\x40\x10\x9f\x11\x42\x48\xff\xd0\xed\x5f\x09\xc8\xb0\x3d\x74\x04\xf9\xab\xf8\x8b\xd2\xd7\xa0\xcd\x24\xca\x5f\xb5\x5c\x11\xe3\x75\x7c\x36\x22\x41\xf3\x79\x3e\x10\xd1\xa3\xc8\x94\x2e\xc2\xb9\x56\x55\x49\xca\x4a\x88\x70\x97\x76\x97\x9e\xcb\xb2\xc2\x86\x61\x87\xca\x51\x0a\x9a\x80\xd8\xdf\x77\x67\x8e\x95\xe0\xba\x84\x69\x90\xe6\x90\x5e\x27\x6a\x15\x74\x72\x17\x26\x34\x4b\x8e\x69\x1e\x10\xce\xa6\x01\xad\x50\x69\xc8\x34\x98\x3c\x20\x51\x4c\x66\xdb\xe7\x7d\xa5\x91\x47\x6b\x8b\x88\xe7\xb1\x5d\x76\x90\xf5\x2f\x97\x0a\xa0\x3a\xe3\xab\x20\xf6\x9d\x6a\xb5\x24\xa8\xca\x2b\xe4\x02\x8c\xc7\x5d\x54\xf2\x82\x22\x30\x92\x09\x5e\x7e\x90\x7f\x92\x54\x89\x50\xcc\xc3\xd7\x6e\x51\xb0\x76\x61\x8a\x76\xb1\x32\xe1\x8b\x97\x23\x6e\xb1\x3a\x42\x83\x14\xcd\x21\x5f\xa4\x4a\x06\xf1\x84\x6f\x7c\x49\x49\x46\x43\x06\x34\xb3\x7f\xff\xeb\xae\xc1\xe3\x1d\x24\x76\x85\xa4\xaa\xb2\x71\x69\x41\x17\xdc\x20\x48\xd0\x26\x6c\x36\xe3\xe7\x3e\xde\xfc\x55\x7c\xd1\x11\x6e\x23\xd0\x0f\xf2\x3d\x85\xa8\x32\xa0\xcd\xb7\x61\xb4\x6c\x52\xef\x18\x42\x7b\x19\xfa\xa0\xf0\x41\x6a\xae\xbf\x11\x1f\xc7\x7a\x0c\x9d\xcf\x96\xe8\x18\x36\x83\x14\x1c\x84\xa7\x27\xf7\x56\x57\x25\x95\x20\x46\xa0\x58\x5d\xf5\x4b\xec\xd6\x92\x97\xde\xe4\x69\xae\x4c\xfa\x41\xfe\x72\x87\xb3\x12\x1d\x9b\xa4\x35\x91\xb4\x4e\xa8\x6e\x4a\x27\x71\x76\x5c\xa1\x52\xc2\x96\x37\x5f\x89\xe4\xf1\x84\x6e\x91\x13\x82\x96\x06\x42\xc1\xe5\xf5\xbe\x23\xd2\x1c\x6a\xad\x64\x68\x8b\x6d\xe3\x07\x1a\x4f\x22\xc1\xbd\x62\x3b\x56\xa6\x55\xc9\xd4\x52\x7a\x94\x3b\x4a\x4a\x72\x0d\xd9\x34\x78\x12\xec\x72\x84\xa8\xe6\x73\x01\x01\x61\x14\x69\xfb\xd0\x93\x47\xb4\xb2\xcf\x49\x85\xa8\x64\x40\xa8\xe6\x34\x84\x55\x49\x25\x03\x66\x2d\x16\x06\xf6\xaf\xb0\xd4\x20\xd3\x7c\x6b\xbe\xdf\xa6\x2d\xa0\x1b\x5b\x0a\x90\x55\xa7\xd2\xad\xfd\xac\x1d\xa6\xa3\x87\x83\x3b\x2f\x68\x4d\x4d\xaa\x79\x89\x6f\x6a\xc5\xd9\xd3\xe7\xcf\x76\x2e\x5b\x28\x46\x45\xb7\x47\xf5\x1c\x70\x1a\x3c\xe9\x6f\xba\x75\xd3\xb2\xa7\xc1\x3b\x25\x33\xae\x0b\xa2\xa1\x50\x35\x10\x2a\x04\xd9\x46\x69\x9f\x3e\x51\x6c\x3d\x0d\xbe\x70\x21\x48\x02\x5e\x72\x02\xab\x14\x4a\xb4\x13\x03\xad\x04\x6e\x0e\xce\xc9\x4c\x03\x59\xab\x8a\x98\x4a\xc3\xff\x06\x52\x53\x2a\x44\x42\xd3\xeb\x5e\x6e\x5c\x3a\xd1\x4f\x9f\xbd\x3d\x00\xd7\x06\x95\x8d\xab\xe6\x62\x5d\xe6\xb6\x16\x90\xcd\x2a\x44\x4d\x4d\xeb\x37\x72\xb9\x31\xf8\x30\xcc\x63\xfe\x6d\x0e\xc7\xbc\x34\x89\x2a\xcf\xcc\xb0\x4f\xbf\x4f\x77\xb0\x79\x6f\xd9\x86\x8f\x83\xc2\xd0\x0d\x66\xe3\x72\x91\x26\x02\x42\x0d\xa6\x54\xd2\xf0\x7a\xb7\x8a\x38\x72\x47\x33\x60\x20\x0d\x5b\xae\x6a\xd0\xed\xda\xa0\xe6\x25\xb0\xb1\xb4\xc4\x1c\x28\x1b\x3b\xd3\x07\x70\xc5\x3c\xfe\xf0\xff\x49\x84\xf9\x61\x9a\x8f\xb4\x80\xe3\x54\xbf\xd4\x20\xd1\x1c\xa7\xfb\x95\x6b\x38\x8d\xcc\x20\xc9\xb8\x06\x76\x9c\xf8\x82\x9e\x4e\x3b\x4b\x91\x2b\x79\xc0\x82\x49\x34\x06\x9a\xe5\xf1\x42\x3d\x89\x9c\xa3\xbe\x67\x90\xec\x8d\x08\x3f\xb0\x4b\xb9\xf9\xa5\x4d\xcd\xed\xa4\xf1\xd8\xa4\x7e\xe2\x26\xd5\x9f\x3d\x4d\xae\x96\xdf\x5d\xde\x61\x0d\xa1\x2a\x41\xb6\x61\xf4\x29\x57\x4b\xd7\x90\xdc\x00\xf7\x23\xaa\xfc\xdd\x62\x90\x73\xe6\xab\xc4\x5f\x8f\x41\x2a\x94\x8b\x08\x0b\xc2\x7b\xce\xe0\x1f\x01\x61\x13\x47\xbc\xe6\x0c\x74\x30\x92\x2f\x3d\x8e\x7b\x33\xdf\x74\xd5\xcd\x3f\x87\xb4\xa7\x0f\x71\x0a\x21\xf7\xd2\x35\x5d\xbc\x53\x36\x36\x38\x0c\x94\x1d\xc4\xb2\x14\x55\xd7\x35\x66\x8c\xb5\x9e\x7c\x1c\xe8\x1e\xea\x40\xf7\x4e\x03\xc5\x53\x66\xa5\x4f\x48\xb1\x3a\x61\x58\xbb\x50\xe9\xf5\x29\xf2\xec\xeb\xfb\x83\x9e\xd0\x5c\x79\xff\x81\xf3\x59\x2b\xdf\x65\x5a\xf7\x5b\xc7\xe3\x74\xf6\x13\x4f\x67\x77\xdb\x62\x9b\xf0\xf1\x37\x58\x77\xf6\x10\xdb\xeb\x63\x4f\xb8\x3f\x2f\xf9\xbf\x6b\xae\x34\xc7\xf5\x71\xca\x4b\x28\x81\x9e\xf2\x7b\x40\x43\x48\x3e\x48\x04\x5d\x53\x71\x42\x13\xe1\x05\xa8\x0a\xef\xb6\xcd\xe9\x7f\xa5\x1f\xce\x10\xa1\x28\x4f\x41\x69\x26\x84\x5a\x12\x63\x0d\x3d\xf5\xb7\x13\x73\xea\xad\xdc\xaf\x27\x27\x53\xdf\xd3\xee\xdc\x66\x97\xab\x7a\x24\xa3\x0c\x86\x6f\x7d\x76\x0a\xb6\x89\xc6\x25\x83\xd5\x34\x08\x5f\x74\xd5\x9d\x71\x2a\xd4\xbc\x6d\x28\x39\x67\x0c\xe4\x34\x40\x5d\xf9\x3e\xab\x36\x25\xb5\xe5\xf0\x97\x8c\xb6\xea\x1e\x2d\x1b\x0d\x9d\x45\xc3\xbe\x29\xec\x03\xd2\xf4\xb9\xf6\x9b\x67\xd7\xf4\x36\xa5\xcc\xbe\x78\x36\x55\x9e\x71\x53\xf0\x8d\x40\xef\x35\xfe\x83\xbc\x00\xf3\x76\x12\x35\x62\x3c\xca\xf2\xd7\x43\xb3\xda\x69\x65\x3b\xea\xdb\x31\xe4\xf5\x41\xef\xf8\xef\x97\x28\xb6\xf6\xdd\x2e\x53\xba\x18\x09\x11\xef\x17\xe6\x83\xed\x97\x26\x20\x48\xa6\xf4\xc0\xd9\xed\x87\xa4\xed\xa8\x23\x51\x2b\x11\x3a\xe2\x20\xfe\x58\x15\x09\x68\x22\x61\xd9\x5d\xf0\x8d\xf7\x5b\xf0\x40\x51\xff\x2b\xb4\x74\x02\x02\x52\x70\x39\x0d\x5e\x04\x03\x8b\x5b\x5d\x7b\xf1\xd7\x99\x54\x53\x51\x81\xe5\x1a\x4b\x92\x3d\x60\x9b\xed\x7d\xd0\x4e\xf2\x41\xa6\x14\x7e\x7d\x8c\x25\x28\x49\x82\x32\x6c\x3f\x2a\xf8\xa3\x2d\x7e\x67\x23\xf1\x40\x60\x0d\x34\x98\x2a\x29\x38\xee\x69\x30\x55\x9a\x82\x31\x23\x1a\x66\x8c\xf9\xe5\x9f\x5a\x1d\x6e\x6e\x08\x48\x46\x6e\x6f\xcf\xce\x7a\xff\x55\x61\x13\xcf\xfd\x4b\x85\x65\xb8\xb9\xb1\xd5\x0f\x79\xfa\xfe\xf3\x6f\x17\xe4\x69\xb3\xfe\xe3\xf2\x82\x04\x11\xa3\x26\x4f\x14\xd5\x2c\xa2\xc6\x00\x9a\xa8\x06\xc9\x94\x36\x91\x35\xd6\xd5\x2c\x73\x2e\x01\xc3\xc4\x44\xa9\x69\x76\x3f\x37\xbb\x89\x52\x68\x50\xd3\xf2\xbc\xe0\xf2\x3c\xb5\x17\x74\x43\xea\x33\xab\xd5\x6f\xd4\xc2\xdc\xa1\x49\xd1\xc2\x44\x8b\xbf\x2a\xd0\xeb\xf3\x9e\x55\xd6\x96\xc5\xc0\x94\xbb\x03\x60\x71\xe0\xfe\x5f\xa5\xb3\xcd\x99\x4e\xe3\xc2\x44\x05\x95\x74\x0e\xda\x89\xb1\x45\x6d\x08\xe2\xdf\x01\x00\x00\xff\xff\xe1\x11\x25\x87\x2e\x23\x00\x00")

func templatesViewsManagerHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsManagerHtml,
		"templates/views/manager.html",
	)
}

func templatesViewsManagerHtml() (*asset, error) {
	bytes, err := templatesViewsManagerHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/manager.html", size: 9006, mode: os.FileMode(420), modTime: time.Unix(1517651172, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsJsManagerMinJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\x6d\x6f\xe3\x2a\xf6\xff\x2a\xbe\xcc\xfc\x6b\xa3\x38\xce\xf4\xfe\xf7\xc5\xca\xb1\x5d\x8d\x66\x74\xa5\x91\x46\xbb\x57\xd3\x4a\xfb\xa2\xad\x2a\x62\x4e\x12\x6e\x09\x44\x80\x9b\x89\x22\x7f\xf7\x15\xe0\xd8\x4e\x9a\xf4\x61\xfa\xb0\xf7\x8d\x85\xe1\x70\xf8\x01\xe7\xfc\x38\x07\x3e\x46\x54\x96\xd5\x02\x84\xc1\x89\x02\x42\xd7\xd1\xb4\x12\xa5\x61\x52\x44\x78\xf3\x31\x42\x1f\x56\x52\xdd\x82\xd2\x43\x3d\x97\x2b\x84\x93\x92\xb3\xf2\xf6\x88\x4c\x90\x18\xa2\x6f\x9d\x64\x3a\x27\x3a\x62\xc9\x8c\xaf\x97\x73\x56\x4a\x31\x84\x35\x0c\xe5\x12\x04\x6e\x75\xe0\x1a\xc7\xfd\x01\xe6\x8c\xc2\x0b\x07\x28\xb9\xd4\x70\x7c\x04\x42\x69\x30\xa9\x8c\x91\xe2\xd2\xac\x97\x90\xeb\x6a\xb2\x60\xe6\xfa\xe0\xa0\x09\xf9\x8b\xfc\x8c\x36\x56\x2e\x45\x7f\xfe\xfb\xfc\x02\xc5\x95\xe2\x29\x1a\x35\xca\x46\x67\xc4\xc9\xe6\x3d\xe5\x28\xa6\xc4\x90\x74\x53\xca\x4a\x98\x74\x6f\xe4\xa1\xab\x45\x38\xb9\x23\x3c\xc2\x75\xac\xab\xb2\x04\xad\xd3\x6a\x49\x89\x81\x1a\xd7\x78\x7c\x47\x54\x60\xc8\x84\xc3\x77\xa6\x0d\x08\x50\x3a\xb7\x4a\xf8\xf6\xcf\x37\x22\x9c\x48\x11\x21\xaa\xc8\x2a\xa1\x06\xc5\x2d\x6a\x88\x35\x18\xc3\xc4\x4c\xe3\xcd\xb6\x94\xfc\xa5\xa5\x38\x39\xd9\x51\xd3\x22\x31\xf0\xd3\x44\x3b\x92\x89\x82\x52\x2a\xaa\x2f\xa4\x21\x1c\xd7\x38\xf9\x4a\x0c\xb9\xb0\xa3\x46\x1b\x4e\xc4\xac\x22\x33\x48\x37\x7e\x21\x28\xd1\xf3\x89\x24\x8a\x8e\xec\xac\x1d\x34\x3d\x62\xa7\xff\x14\x4e\x13\xaa\x63\xbb\x82\x5b\xe1\xfd\x55\xd3\x86\x18\x7d\x02\xc2\x30\xb3\xce\x5b\x64\x7e\x01\xcf\x55\x99\x22\x5b\x40\x75\x5c\x4a\x5e\x2d\x84\x4e\x2f\x37\x6e\x69\x11\xa3\xa8\x8e\x9b\xb2\x20\x0b\xe8\xfe\xe0\x0e\x84\xd1\x28\x56\x20\x28\xa8\xb4\x5d\x15\xdb\x1a\xdb\x6d\x8c\x95\x5c\xe1\x8d\x5d\xe3\x52\x0a\x03\xc2\xe4\x08\x8d\xa7\x52\x45\xb6\xca\xf5\xfe\x46\x03\x26\x02\xdb\x01\x2b\xb9\x4a\xb8\x2c\x6f\x81\x9e\x35\xd2\x83\x3c\xcc\xf4\x92\x88\xa0\xe4\x44\xeb\x1c\x71\x32\x01\x1e\xb8\xef\x90\x89\xa9\x44\x45\x38\xb0\x5d\x2f\x1b\x55\xd7\x03\x94\x8d\x6c\x87\x22\x40\x69\x4f\x07\x09\xe6\x0a\xa6\x39\xfa\x80\x02\xc3\x0c\x87\x1c\xfd\x80\x85\xbc\x63\x62\x16\x6c\xd7\x01\x1d\x1d\xc3\x81\x1b\x1a\x39\x9b\xd9\x8e\x0b\x49\x09\xdf\xd6\x11\x35\x03\x93\xa3\x0f\xfd\x4a\x57\x1e\x36\xc3\x7c\x91\x62\xca\xd4\x22\x50\x76\x38\x68\x07\x0b\x3e\x84\x03\x3b\x5b\x46\x07\x28\x98\xca\x66\x29\x02\xb4\x37\x99\x70\x47\x65\x49\x38\x9f\x90\xf2\x36\x47\xed\xde\xb9\x59\x40\x74\x15\x76\xea\xc2\x38\x08\xd1\xa0\x51\x31\x40\x21\x1e\x5f\xa1\x62\x5f\x31\x0a\x7e\x66\x23\x52\x04\x68\xac\xc0\x54\x4a\x6c\x77\xa7\x6e\x77\x76\xca\x14\x68\xd4\xff\xd5\xe6\xc6\x56\xd2\x1b\x62\x0e\x6e\x38\xe0\x4d\xa3\xcc\xfe\x9c\xd9\xcf\x85\x3c\x37\x8a\x89\x99\x6f\x4e\x11\xea\xf4\x73\xf2\x5a\xfa\xa4\xa2\xa0\xac\x23\xa4\xbf\x9d\x7a\x2e\x10\x15\xe7\x8f\x99\x64\xa3\xba\x67\x72\x08\xa5\x61\x46\xd9\xdd\xd6\x0e\x26\x46\x0c\x67\x4a\x56\xcb\xa0\x2d\x0d\x7f\x6a\x54\x64\x9e\xcd\x02\xc7\x66\xc8\xff\xa0\x5e\x27\x27\x4e\x89\x98\x81\x72\x45\x4b\x94\x6f\x6c\x43\xa1\xb3\x21\xc2\x79\xd0\x38\xe4\xb3\xcd\x26\xbc\x0a\xf1\x18\x15\x19\xdb\x4e\xa4\xe5\xf8\xa0\x63\x7b\xa3\x88\x9e\xef\x7a\x50\x07\x47\xef\x63\x28\xb2\x11\x2b\xb2\x91\x5f\xa0\x22\x1b\x51\x76\x57\x84\x75\x7d\x1d\xbb\x0d\x4b\x2f\x2f\x4f\x63\x44\x74\x89\xae\xe3\xcb\xdf\x9b\xd2\x75\x8d\x63\xc7\x69\xff\xf1\xcc\x95\xf7\x8f\xa1\x17\xf1\xf0\xf6\x4c\xf8\xbb\xb1\x70\xd3\xf8\x3c\x0e\x2e\x15\x10\x03\xf4\x09\x5e\xb3\xeb\x30\x9d\xf7\x59\x0c\x55\xcf\xbd\xbd\x0b\xdc\x57\x38\xe5\x64\xd6\x2a\xb4\x3f\x67\xe8\xbb\x17\x4d\xd1\x1f\x0a\xa0\x73\x68\xe7\x73\x14\xa6\xa4\xe2\xe6\x8b\x27\x13\xeb\x9f\xcf\x72\xcf\xdd\x83\xe2\x49\xce\x18\x8e\xbb\xd9\x12\x17\xa8\x9c\x9c\x44\x3d\xe2\x7f\x8a\xaf\x36\x41\x81\x2b\x97\x4c\x95\x1c\x82\x36\xe2\x69\x9d\x54\xdf\xe6\xe8\x2a\x0c\x06\x01\x0b\x06\xc1\x55\xf8\x98\xab\x6c\x23\xaf\xd6\x5b\xce\xe7\x72\xe5\xd4\x5e\x85\x3a\xa0\x60\x08\xe3\xfb\x2e\x12\xe2\xf8\x99\xc8\xdf\x82\x65\x6e\x19\xe7\x81\x37\x4b\xcb\x30\x6e\x5d\x2d\x41\x1c\xe1\x94\xc6\x80\x7b\x8c\xd2\xf6\xf8\x65\x4a\xf1\x3a\x1f\x27\x90\xdf\x5b\x02\xf9\xd4\x11\xc8\xf8\x1e\x67\x04\x66\x22\xe9\xba\x61\x0e\x17\x74\xa2\xb8\x59\xd1\x2e\xb4\xed\x53\x09\xde\x40\xb2\x54\x8e\xc6\xbe\x7a\x8b\x8e\x7c\x9c\x38\xc9\x3f\x46\x66\xce\x34\x4e\xa6\x4c\xd0\x08\x31\x84\xed\x69\x92\xf7\x39\x2b\x51\x72\x15\x6d\xc5\x5c\x6c\xac\x4d\x84\x8c\x42\x18\x8f\xd9\x34\x9a\x24\x73\xa2\xbf\xd8\x05\x89\xd0\x01\x73\xc1\xde\x07\x9c\xbd\x59\x6a\xb6\x8b\x19\x61\x07\x73\x3c\x49\xfc\x09\xf0\x40\xef\x84\x50\x7a\xb0\xd9\x01\xf1\x68\x93\x72\xce\x38\x8d\xc2\xcc\x2f\xce\x8a\x51\x33\xcf\xd1\xe9\xa7\x4f\xff\x87\x8a\xcc\xa8\x22\x33\xb4\xc8\x2a\xde\x86\x43\x4c\x1b\xef\x70\xa8\xc8\x38\xbb\x5f\x3d\x64\x06\x16\xa8\xd8\x89\xd3\x96\x15\xe7\x43\xc5\x66\x73\x13\x58\xa6\x1d\x2e\x2a\x03\x34\xd0\x0b\xc2\x39\x2a\x32\x58\x14\xe1\xc0\x4e\xc9\x99\x49\x36\x82\x45\xd1\x44\x6d\x99\x36\x4a\x8a\x59\xf1\xed\x6b\x36\x6a\x8a\xd9\x44\x05\xa3\x22\x1b\x71\xf6\xfa\xc3\xdb\x60\xf6\x30\x80\x7f\x91\x05\xbc\x0b\x84\xa5\x62\x52\x31\xb3\x3e\x0c\xe3\xcf\xa6\xf5\x5d\xa0\x28\x58\x02\x31\xfa\x30\x92\x1f\xbe\xf1\xad\x81\xd0\x4a\x11\xeb\x84\x17\xf2\x07\x10\x6a\x0d\xb4\x39\xc0\x7a\x08\x6f\x98\x30\xa0\xee\x08\xc7\x0f\x41\xfd\xd6\x08\xfd\x6f\x11\x1b\xb6\x00\x59\x99\x23\x48\x2f\x7c\xeb\x9b\x43\xec\x47\x02\x0e\x56\x13\x41\xdc\x90\x63\xc8\xbe\x78\x81\xb7\x46\xe6\xd1\x68\x43\x94\x47\x73\x76\x1f\x6a\xd7\x68\x03\xfe\x23\x70\xcf\xbd\xd0\xbb\xb8\x89\x8f\x9d\x8e\xe2\x30\xd5\x9b\x3b\x89\x83\x41\x8c\x81\xc5\xf2\x98\xbb\x7e\x6e\x5a\xdf\xdf\xb4\x08\xe7\x72\x75\xe3\x76\xed\xb8\x79\x7d\xb6\x42\x81\x13\x7a\x1f\x13\xf3\xf9\xeb\x83\x86\xb6\x2f\xf2\x80\xb9\xfd\x61\x45\x03\xfd\x3e\x46\xe7\xd1\xb9\x7c\xf9\x41\xfc\x7b\x12\x1e\x3e\x3a\x04\xff\x3b\x79\x04\xfd\xa8\xe2\x45\x36\xb2\x71\xc0\xc8\x06\x04\x23\x17\x29\x14\x08\x27\x36\x52\x8a\x70\x0d\x5c\x43\xf0\x60\x38\xd2\xc4\x1b\x47\xe3\x11\x1f\xae\x74\xe1\x48\x32\x67\x14\xa2\x9d\xfb\xb8\x0b\xa2\x6f\x7d\x06\x68\xa7\xf7\xc2\xfc\xcf\xa9\xf8\xdb\x65\x7f\x0e\xd5\x4b\xee\xdf\xb6\xd1\x43\x57\xd3\x1c\xe2\xfb\x15\xed\x99\x79\x3f\xc7\x13\xba\x4b\x19\x8f\x9d\x65\x42\xf7\x92\xc7\xe6\x4c\x7b\x05\x4d\xdd\x31\xf4\xb2\x5c\x56\x3d\x59\xc9\x63\xd7\x52\xaf\x9f\x18\xa3\x2d\x51\x77\x4a\x77\x29\xf2\x05\x53\xdf\xa7\xac\xd7\xba\x97\x7b\x25\x8d\xcf\x4a\xfd\xbd\xc6\x37\xbb\x81\xf3\x29\xbd\x67\xac\xd7\xbc\x8d\xb3\x6a\x9f\x92\x27\x3b\x57\x7f\xd5\x2c\xd9\x6a\x7c\x4e\x8e\xfc\xff\xbd\x4b\x36\xff\xfe\x91\xf7\xde\x5e\x76\x9f\x40\xdc\x43\x4c\xa2\x80\x4b\x42\xa3\xdd\x3b\xb9\x43\x4d\x8e\xaa\x77\x1b\xea\x98\x54\x46\x2a\x98\x2a\xd0\xf3\xdc\xee\xbb\x4b\xcc\x7b\x95\x87\x5e\x80\x6c\xd6\x9c\x94\x73\x70\x17\xb2\xb6\x53\x9e\xe7\xbd\x2e\x27\x27\x91\x47\x1e\xe1\x1d\xf5\x2b\x26\xa8\x5c\x25\x1a\xda\xa8\xbf\x91\x8b\x4f\xe1\x1f\x18\x3b\xb3\xfb\x6d\x5f\x53\xd3\xa9\xe4\x40\x54\xdb\xad\x27\x82\xef\xcd\x00\xd7\x38\x6e\x7a\xed\x5d\xa5\x76\x2b\xb9\x6d\xf8\x46\xf1\xa6\x94\x42\x4b\x0e\x09\x97\xb3\x88\xa8\x99\x7b\xf0\xd3\x38\x7e\xfa\x33\x57\xf7\x7a\xd4\x18\x6e\xf3\xd6\xc5\x68\xda\x8d\x13\xfb\xfb\xd6\xf4\xb3\x52\x64\x9d\x90\xe5\x92\xaf\x23\xe7\x67\xdd\x90\x89\xe6\xac\x84\xe8\xb4\xf7\x02\xf6\xc4\xad\xaf\x6b\x5c\x6f\xe7\xbc\x73\xd5\xd3\xcd\x98\xd1\x5f\x79\xb9\xbb\x37\x21\x46\x8f\x83\x7b\xa6\xe9\xf5\x30\xf7\xdc\xee\x57\x11\xfb\xd0\xe1\x8d\xf1\xd6\x78\xfc\xdf\x00\x00\x00\xff\xff\xdb\xcb\x0a\x72\x15\x1e\x00\x00")

func assetsJsManagerMinJsBytes() ([]byte, error) {
	return bindataRead(
		_assetsJsManagerMinJs,
		"assets/js/manager.min.js",
	)
}

func assetsJsManagerMinJs() (*asset, error) {
	bytes, err := assetsJsManagerMinJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/js/manager.min.js", size: 7701, mode: os.FileMode(420), modTime: time.Unix(1521852101, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/manager.html": templatesViewsManagerHtml,
	"assets/js/manager.min.js": assetsJsManagerMinJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"js": &bintree{nil, map[string]*bintree{
			"manager.min.js": &bintree{assetsJsManagerMinJs, map[string]*bintree{}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"manager.html": &bintree{templatesViewsManagerHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
