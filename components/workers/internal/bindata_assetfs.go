// Code generated by go-bindata.
// sources:
// templates/views/manager.html
// assets/js/manager.min.js
// DO NOT EDIT!

package internal

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsManagerHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x5b\x6f\xdb\xb6\x17\x7f\xcf\xa7\x20\x54\xe0\x8f\xf6\x41\x51\x6f\xff\x97\xd6\xd6\x10\x74\x1b\x5a\x20\x2b\x86\xb6\x43\xb1\xa7\x80\x12\x8f\x2c\x3a\x14\xa9\x91\x47\xb2\x0d\x23\xdf\x7d\x20\x25\xd9\x92\x4d\xd9\x6e\x9b\x0c\x49\x91\x27\x53\xe2\xb9\xf1\x77\xae\x32\xd7\x6b\xc2\x20\xe3\x12\x48\x90\x2a\x89\x20\x31\x20\x37\x37\x67\x13\xc6\x6b\x92\x0a\x6a\xcc\x34\x28\xe9\x0c\x42\xe4\x28\x20\x88\xcf\x08\x21\xa4\xbf\xe9\xde\x5f\x09\xc8\xb0\xdd\x74\x04\xf9\xab\xf8\xab\xd2\xd7\xa0\xcd\x24\xca\x5f\xb5\x5c\x11\xe3\x75\x7c\x36\x22\x41\xf3\x59\x3e\x10\xd1\xa3\xc8\x94\x2e\xc2\x99\x56\x55\x49\xca\x4a\x88\x70\x97\x76\x97\x9e\xcb\xb2\xc2\x86\x61\x87\xca\x51\x0a\x9a\x80\xd8\x7f\xef\xf6\x1c\x2b\xc1\x55\x09\xd3\x20\xcd\x21\xbd\x4e\xd4\x32\xe8\xe4\xce\x4d\x68\x16\x1c\xd3\x3c\x20\x9c\x4d\x03\x5a\xa1\xd2\x90\x69\x30\x79\x40\xa2\x98\x5c\x6c\x9f\xf7\x95\x46\x1e\xad\x2d\x22\x9e\xc7\x76\xd9\x41\xd6\x3f\x5c\x2a\x80\xea\x8c\x2f\x83\xd8\xb7\xab\xd5\x82\xa0\x2a\xaf\x90\x0b\x30\x1e\x77\x51\xc9\x0b\x8a\xc0\x48\x26\x78\xf9\x41\xfe\x4d\x52\x25\x42\x31\x0b\x5f\xbb\x45\xc1\xda\x85\x29\xda\xc5\xd2\x84\x2f\x5e\x8e\xb8\xc5\xea\x08\x0d\x52\x34\x87\x7c\x91\x2a\x19\xc4\x13\xbe\xf1\x25\x25\x19\x0d\x19\xd0\xcc\xfe\xfe\xdf\x1d\x83\xc7\x3b\x48\xec\x0a\x49\x55\x65\xe3\xd2\x82\x2e\xb8\x41\x90\xa0\x4d\xd8\xbc\x8c\x9f\xfb\x78\xf3\x57\xf1\x65\x47\xb8\x8d\x40\x3f\xc8\xf7\x14\xa2\xca\x80\x36\xdf\x87\xd1\xa2\x49\xbd\x63\x08\xed\x65\xe8\x83\xc2\x07\xa9\xb9\xfe\x4e\x7c\x1c\xeb\x31\x74\xbe\x58\xa2\x63\xd8\x0c\x52\x70\x10\x9e\x9e\xdc\x5b\x5e\x95\x54\x82\x18\x81\x62\x79\xd5\x2f\xb1\x5b\x4b\x5e\x7a\x93\xa7\x39\x32\xe9\x07\xf9\xcb\x1d\xce\x4a\x74\x6c\x92\xd6\x44\xd2\x3a\xa1\xba\x29\x9d\xc4\xd9\x71\x85\x4a\x09\x5b\xde\x7c\x25\x92\xc7\x13\xba\x45\x4e\x08\x5a\x1a\x08\x05\x97\xd7\xfb\x8e\x48\x73\xa8\xb5\x92\xa1\x2d\xb6\x8d\x1f\x68\x3c\x89\x04\xf7\x8a\xed\x58\x99\x56\x25\x53\x0b\xe9\x51\xee\x28\x29\xc9\x35\x64\xd3\xe0\x49\xb0\xcb\x11\xa2\x9a\xcd\x04\x04\x84\x51\xa4\xed\x43\x4f\x1e\xd1\xca\x3e\x27\x15\xa2\x92\x01\xa1\x9a\xd3\x10\x96\x25\x95\x0c\x98\xb5\x58\x18\xd8\x3f\xc2\x42\x83\x4c\xf3\xad\xf9\x7e\x9b\xb6\x80\x6e\x6c\x29\x40\x56\x9d\x4a\xb7\xf6\xb3\x76\x98\x8e\x6e\x0e\xce\x3c\xa7\x35\x35\xa9\xe6\x25\xbe\xa9\x15\x67\x4f\x9f\x3f\xdb\x39\x6c\xa1\x18\x15\xdd\x3b\xaa\x67\x80\xd3\xe0\x49\xff\xa5\x5b\x37\x2d\x7b\x1a\xbc\x53\x32\xe3\xba\x20\x1a\x0a\x55\x03\xa1\x42\x90\x6d\x94\xf6\xe9\x13\xc5\x56\xd3\xe0\x2b\x17\x82\x24\xe0\x25\x27\xb0\x4c\xa1\x44\x3b\x31\xd0\x4a\xe0\x66\xe3\x9c\x5c\x68\x20\x2b\x55\x11\x53\x69\xf8\x65\x20\x35\xa5\x42\x24\x34\xbd\xee\xe5\xc6\x27\x27\xfa\xe9\xb3\xb7\x07\xe0\xda\xa0\xb2\x71\xd5\x4c\xac\xca\xdc\xd6\x02\xb2\x59\x85\xa8\xa9\x69\xfd\x46\x3e\x6d\x0c\x3e\x0c\xf3\x98\x7f\x9b\xcd\x31\x2f\x4d\xa2\xca\x33\x33\xec\xd3\xef\xd3\x1d\x6c\xde\x5b\xb6\xe1\xe3\xa0\x30\x74\x83\xd9\xb8\x5c\xa4\x89\x80\x50\x83\x29\x95\x34\xbc\xde\xad\x22\x8e\xdc\xd1\x0c\x18\x48\xc3\x96\xab\x1a\x74\xbb\x36\xa8\x79\x09\x6c\x2c\x2d\x31\x07\xca\xc6\xf6\xf4\x01\x5c\x31\x8f\x3f\xfc\x3a\x89\x30\x3f\x4c\xf3\x91\x16\x70\x9c\xea\xb7\x1a\x24\x9a\xe3\x74\xbf\x73\x0d\xa7\x91\x19\x24\x19\xd7\xc0\x8e\x13\x5f\xd2\xd3\x69\x2f\x52\xe4\x4a\x1e\xb0\x60\x12\x8d\x81\x66\x79\xbc\x50\x4f\x22\xe7\xa8\x1f\x19\x24\x7b\x23\xc2\x1d\x76\x29\x37\xbf\xb4\xa9\xb9\x9d\x34\x1e\x9b\xd4\x4f\xdc\xa4\xfa\xb3\xa7\xc9\xd5\xe2\x87\xcb\x3b\xac\x20\x54\x25\xc8\x36\x8c\x3e\xe7\x6a\xe1\x1a\x92\x1b\xe0\xee\xa2\xca\xdf\x2e\x06\x39\x67\xbe\x4a\xfc\xed\x18\xa4\x42\xb9\x88\xb0\x20\xbc\xe7\x0c\xfe\x13\x10\x36\x71\xc4\x6b\xce\x40\x07\x23\xf9\xd2\xe3\xb8\x37\xf3\x4d\x57\xdd\xfc\x73\x48\xbb\xfb\x10\xa7\x10\x72\x2f\x5d\xd3\xc5\x3b\x65\x63\x83\xc3\x40\xd9\x41\x2c\x4b\x51\x75\x5d\xe3\x82\xb1\xd6\x93\x8f\x03\xdd\x43\x1d\xe8\xde\x69\xa0\x78\xca\xac\xf4\x19\x29\x56\x27\x0c\x6b\xf6\xb3\xfc\x41\x4f\x5e\xae\x6c\xdf\xe1\xdc\xd5\xca\x77\x19\xd4\xfd\x87\xf1\x38\x75\xfd\xc4\x53\xd7\xed\xb6\xce\x26\x7c\xfc\x8d\xd3\xed\x3d\xc4\xb6\xf9\x58\xeb\xef\xcf\xc7\xfb\xa9\x85\xfe\x4f\xcd\x95\xe6\xb8\x3a\xa1\xd8\x23\x42\x51\x9e\xf2\x87\x80\xfb\x78\x07\xad\x95\xbe\xc5\xce\x75\x4f\x7b\x4d\x1b\x2b\x2e\x87\x49\x46\x19\x0c\xbf\x4d\xec\xac\x66\xc3\x86\x4b\x06\xcb\x69\x10\xbe\xe8\x6a\x15\xe3\x54\xa8\x59\x5b\x1e\x73\xce\x18\xc8\x69\x80\xba\xf2\x5d\xfe\x35\x05\xa2\xe5\xf0\x27\x40\x5b\x43\x8e\x26\x41\x43\x67\xd1\xb0\xf3\xec\x3e\x20\x4d\xd5\x6e\x6f\xe6\xba\x12\xbe\x49\x4c\xfb\x79\xd4\xd4\x2c\xc6\x4d\xc1\x37\x02\xbd\xc7\xf8\x1f\xf2\x02\xcc\xdb\x49\xd4\x88\xf1\x28\xcb\x5f\x0f\xcd\x6a\x7b\xef\x76\x20\xb5\x4d\xf5\xf5\x41\xef\xf8\xcf\x97\x28\xb6\xf2\x9d\x2e\x53\xba\x18\x09\x11\xef\x3d\xe8\xc1\x66\x42\x13\x10\x24\x53\x7a\xe0\xec\xf6\xba\x63\xdb\xb8\x25\x6a\x25\x42\x47\x1c\xc4\x1f\xab\x22\x01\x4d\x24\x2c\xba\x03\xbe\xf1\xde\x58\x0e\x14\xf5\xef\x4a\xa5\x13\x10\x90\x82\xcb\x69\xf0\x22\x18\x58\xdc\xea\xda\x8b\xbf\xce\xa4\x9a\x8a\x0a\x2c\xd7\x58\x92\xec\x01\xdb\xbc\xde\x07\xed\x24\x1f\x64\x4a\xe1\xb7\xc7\x58\x82\x92\x24\x28\xc3\xf6\xaf\x6f\x7f\xb4\xc5\xef\x6c\x24\x1e\x08\xac\x81\x06\x53\x25\x05\xc7\x3d\x0d\xa6\x4a\x53\x30\x66\x44\xc3\x05\x63\x7e\xf9\xa7\x56\x87\xf5\x9a\x80\x64\xe4\xe6\xe6\xec\xac\x77\xf7\x6f\x13\xcf\x5d\xfc\x5b\x86\xf5\x9a\x18\xa4\xc8\xd3\xf7\x5f\xfe\xb8\x24\x4f\x9b\xf5\x5f\x9f\x2e\x49\x10\x31\x6a\xf2\x44\x51\xcd\x22\x6a\x0c\xa0\x89\x6a\x90\x4c\x69\x13\x59\x63\x5d\xcd\x32\xe7\x12\x30\x4c\x4c\x94\x9a\xe6\xed\x97\xe6\x6d\xa2\x14\x1a\xd4\xb4\x3c\x2f\xb8\x3c\x4f\xed\x01\xdd\xc8\xf5\xcc\x6a\xf5\x1b\x35\x37\xb7\x68\x52\x34\x37\xd1\xfc\x9f\x0a\xf4\xea\xbc\x67\x95\xb5\x65\x3e\x30\xe5\xf6\x00\x98\x1f\x38\xff\x37\xe9\x6c\x73\xa6\xd3\x38\x37\x51\x41\x25\x9d\x81\x76\x62\x6c\x51\x1b\x82\xf8\x6f\x00\x00\x00\xff\xff\xa2\x10\x1b\xca\xd4\x21\x00\x00")

func templatesViewsManagerHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsManagerHtml,
		"templates/views/manager.html",
	)
}

func templatesViewsManagerHtml() (*asset, error) {
	bytes, err := templatesViewsManagerHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/manager.html", size: 8660, mode: os.FileMode(420), modTime: time.Unix(1514934013, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsJsManagerMinJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x58\xdf\x6f\xdb\x38\x12\xfe\x57\xb8\x6c\x2f\x22\x61\x59\x6e\xf6\xee\x49\x96\x54\x2c\xda\x97\x02\x8b\xdb\xc5\x25\xc0\x3d\x24\xc1\x82\x16\xc7\x36\x6b\x9a\x34\x48\x2a\xae\x61\xe8\x7f\x5f\x90\x92\x25\x39\x71\xb6\x49\x13\xf7\xc5\xa0\xf8\x63\xe6\xe3\x70\xbe\xcf\x43\xbe\x27\x5c\x97\xd5\x1a\x94\xa3\x89\x01\xc6\x77\x64\x5e\xa9\xd2\x09\xad\x08\xdd\xbf\x27\xf8\xdd\x56\x9b\x15\x18\x3b\xb6\x4b\xbd\xc5\x34\x29\xa5\x28\x57\x4f\xcc\x41\x89\x63\x76\x15\x66\xa6\x4b\x66\x89\x48\x16\x72\xb7\x59\x8a\x52\xab\x31\xec\x60\xac\x37\xa0\x68\x67\x83\xd6\x34\x1e\x3a\x58\x0a\x0e\xaf\x74\x50\x4a\x6d\xe1\x69\x0f\x8c\x73\x34\xab\x9c\xd3\xea\xc6\xed\x36\x90\xdb\x6a\xb6\x16\xee\xee\xa4\xd3\x84\x7d\x65\xdf\xc8\xde\xcf\x4b\xf1\x9f\x7f\x5c\x5d\xe3\xb8\x32\x32\xc5\x93\xd6\xd8\xe4\x23\x0b\x73\xf3\x81\x71\x1c\x73\xe6\x58\xba\x2f\x75\xa5\x5c\xfa\xc0\xf3\x38\xf4\x62\x9a\xdc\x33\x49\x68\x1d\xdb\xaa\x2c\xc1\xda\xb4\xda\x70\xe6\xa0\xa6\x35\x9d\xde\x33\x83\x1c\x9b\x49\xf8\x5d\x58\x07\x0a\x8c\xcd\xbd\x11\x79\xf8\x6a\x06\x31\x4d\xb4\x22\x98\x1b\xb6\x4d\xb8\xc3\x71\x87\x1a\x62\x0b\xce\x09\xb5\xb0\x74\x7f\x68\x25\x5f\xad\x56\x17\x17\x47\x66\x3a\x24\x0e\xbe\x39\x72\x34\x33\x31\x50\x6a\xc3\xed\xb5\x76\x4c\xd2\x9a\x26\x9f\x99\x63\xd7\xde\x2b\xd9\xfb\x80\xa4\xfb\xd3\x41\xb0\x8e\x39\x7b\x01\xca\x09\xb7\xcb\x3b\x47\x4d\x3c\xae\x4c\x99\x62\xdf\xc0\x75\x5c\x6a\x59\xad\x95\x4d\x6f\xf6\x21\x52\x58\x70\x5c\xc7\x6d\x5b\xb1\x35\xf4\x5f\x70\x0f\xca\x59\x1c\x1b\x50\x1c\x4c\xda\x6d\xd2\x8f\xc6\xfe\x54\x62\xa3\xb7\x74\xef\x43\x56\x6a\xe5\x40\xb9\x1c\xe3\x78\x05\x3b\x9b\xff\x31\xfb\x0a\xa5\x4b\x7c\x3b\x4c\xa7\x53\xdf\x4c\xac\x36\x8e\xd0\xe9\x5c\x1b\xe2\x57\x89\xfc\xc3\x54\x64\x61\x44\x82\x5a\xb8\xe5\x54\x8c\x46\xd4\xe8\x6d\x22\x75\xb9\x02\xfe\xb1\x35\x3b\xca\xa3\xcc\x6e\x98\x42\xa5\x64\xd6\xe6\x58\xb2\x19\x48\x14\x7e\xc7\x42\xcd\x35\x2e\xa2\x91\xb7\x72\x23\xee\x46\x38\x9b\xf8\xa9\x05\xc2\xe9\x60\x35\x43\x4b\x03\xf3\x1c\xbf\xc3\xc8\x09\x27\x21\xc7\xff\x83\xb5\xbe\x17\x6a\x81\x0e\xa1\xc2\x4f\x5a\x47\x7e\x07\x63\xa7\x17\x0b\xbf\x70\xad\x39\x93\x87\x3e\x66\x16\xe0\x72\xfc\x6e\xd8\x19\xda\xe3\xd6\xcd\x27\xad\xe6\xc2\xac\x91\xf1\xee\xa0\x73\x86\xde\x45\x23\xbf\x4f\xc1\x47\x18\xcd\xb5\x41\x21\xd6\x08\x77\xdb\x88\x8e\x8c\x95\x4c\xca\x19\x2b\x57\x39\xee\x0e\x36\xe0\x07\x72\x1b\xf5\x86\xa2\x18\x45\x78\xe4\x97\xdd\xb4\x66\xee\x46\x38\xa2\xd3\x5b\x5c\xf4\x86\x31\xfa\x96\x4d\x58\x81\xf0\xd4\x80\xab\x8c\x3a\x1c\x5d\xdd\x1d\xfb\x5c\x18\xb0\x78\xf8\x69\xdd\x5f\xbe\x93\xff\xc5\xdc\xc9\x6c\x00\xba\x6f\x8d\xf9\x8f\x8f\xfe\xe7\x5a\x5f\x39\x23\xd4\xa2\x19\x4e\x31\xee\xed\x4b\xf6\x56\xf6\xb4\xe1\x60\x3c\x33\xd2\x5f\x2e\x1b\xde\xab\x4a\xca\xef\xe5\x6b\x6b\x7a\x90\x66\x18\xa7\x51\xc6\xc5\xfd\x21\x03\x66\x4e\x8d\x17\x46\x57\x1b\xd4\xb5\xc6\xdf\x2c\x2e\xb2\x46\xb9\x50\x50\x2e\xdc\x7c\xe0\xc1\xa2\x30\x9d\x33\xb5\x00\x13\x9a\x5e\x14\xcf\x9c\x3d\x51\xc8\x1e\x26\x25\x6a\xd9\xfa\xe2\xb4\x89\x6e\x23\x3a\xc5\x45\x26\x0e\x1b\xe9\xf4\x1c\xf5\xca\xee\x0c\xb3\xcb\x63\xee\xf4\x70\xec\x43\x0c\x45\x36\x11\x45\x36\x69\x02\x54\x64\x13\x2e\xee\x8b\xa8\xae\xef\xe2\x70\x60\xe9\xcd\xcd\x65\x8c\x99\x2d\xf1\x5d\x7c\xf3\x6b\xdb\xba\xab\x69\x1c\xa4\xf5\xff\x8d\xac\xe5\xc3\xbf\x9c\x57\x69\xee\x41\xff\xcf\xac\xb8\xed\xe0\xcb\xf4\xb6\x34\xc0\x1c\xf0\x67\x90\xe0\x38\xff\x7b\x32\x79\x0c\x55\xcf\xd6\x90\xff\x1c\xe6\xac\x92\xee\x53\x43\x6c\xcf\x95\x17\x51\xe5\x58\xd1\x9f\x45\x8c\x68\xda\x43\x65\xa1\x40\xb8\xb8\x20\x03\xf9\x7d\x0e\x6f\xda\x3f\xe3\xd0\x2e\x85\x29\x25\xa0\xae\xd2\xe8\x08\x63\x57\x39\xbe\x8d\xd0\x08\x09\x34\x42\xb7\xd1\xf7\xd2\xf6\x50\xf1\x74\x99\x7b\xb5\xd4\xdb\x60\xf6\x36\xb2\x88\x83\x63\x42\x3e\x4c\xd7\x88\xc6\x2f\x44\x7e\x0e\xc6\xaf\x84\x94\xa8\xc9\x29\xcf\xf6\x10\x57\x4f\xd6\x27\xf8\xdd\x66\xdf\x80\xdd\xdd\x8a\x1f\xa6\x77\x63\xf3\xfb\x64\xfe\xb5\x23\xf3\x87\x9e\xcc\xd3\x47\xfc\x45\x6e\xa6\xf9\xae\x65\x71\x28\xf6\x70\xdc\x46\xb4\x2f\x29\x87\xb4\xa6\x7b\x48\x36\x26\x48\xca\xe7\x26\xa3\x49\x53\x9f\xcd\xf2\xf7\xc4\x2d\x85\xa5\xc9\x5c\x28\x4e\xb0\xc0\xd4\x2b\x7b\x3e\xd4\x8f\xc4\xe8\x2d\x39\x4c\x0b\x35\xa9\x75\x04\x3b\x83\x29\x9d\x8a\x39\x99\x25\x4b\x66\x3f\xf9\x80\x10\x7c\x22\x5d\x68\xc3\x81\x90\x6f\x5e\x26\x7d\x30\x09\x0d\x30\xa7\xb3\xa4\x51\xe3\x7f\x58\x9d\x30\xce\x4f\x0e\x07\x20\x0d\xda\xa4\x5c\x0a\xc9\x49\x94\x35\xc1\xd9\x0a\xee\x96\x39\xbe\xfc\xf0\xe1\x5f\xb8\xc8\x9c\x29\x32\xc7\x8b\xac\x92\x5d\x51\x22\xac\x6b\x08\x87\x8b\x4c\x8a\xc7\xdd\x63\xe1\x60\x8d\x8b\xa3\x3a\x69\x53\x49\x39\x36\x62\xb1\x74\xc8\xab\xde\x78\x5d\x39\xe0\xc8\xae\x99\x94\xb8\xc8\x60\x5d\x44\x23\xbf\xa5\x90\x26\xd9\x04\xd6\x45\x5b\x3b\x65\xd6\x19\xad\x16\xc5\x97\xcf\xd9\xa4\x6d\x66\x33\x83\x26\x45\x36\x91\xe2\xed\xdd\xfb\xaa\xf3\x34\x80\xff\xb2\x35\xfc\x14\x08\x8d\x8c\x9e\x06\x71\x15\xc6\x7e\x0a\x8c\x8d\x11\xda\x08\xb7\x3b\x0d\xe4\xcf\x76\xf4\xa7\x40\x61\xce\xc1\x7a\xe3\x9e\x88\xc9\x6f\xed\xe8\xb9\xa1\x90\x80\x25\x54\x8c\x60\x8c\x36\x1f\x1f\x7c\xa7\xf8\x62\xcd\x99\x5d\x4e\x31\x3d\x0d\xf4\x77\x66\x1d\x0a\x53\xcf\x0d\xf5\xe8\x5f\x3a\xc0\x6c\xff\xdd\xa9\xbf\x93\x3c\x46\xf6\xa9\x19\x3d\x09\x6b\x52\xc9\x22\x9b\x78\x05\x98\x78\x29\x98\x04\x8d\x28\x30\x4d\xbc\x46\x12\x5a\x83\xb4\x80\xfe\x51\x88\x5a\xa5\x79\x52\x89\x1a\xa1\xea\x85\x28\xf1\x57\x7f\x72\x74\x03\xbe\x66\x76\xd5\xd4\x61\x7e\x37\xaf\xac\xc2\x82\x89\x73\xd7\x60\xc1\xc9\x6b\x6e\xbc\x0f\xaa\x29\x7c\xe0\x63\xdf\x73\xa0\xc5\xf7\x2b\xae\xd7\x57\x78\x2f\xaa\xd9\x1a\x4b\x67\xbb\xc6\x34\xb5\x58\x93\x70\x6f\x79\xa5\xf1\x66\x9f\x53\xe0\x84\xa3\x7d\xd3\xf2\xc6\x5b\x7c\x49\x71\xf3\xef\xc1\x4d\xa5\x79\x30\xca\x07\x8f\x55\xc7\x6f\x46\xe1\xe5\x2a\x31\x20\x35\xe3\xe4\xf8\x62\x73\x6a\x28\x30\xed\x78\xa0\x8e\x59\xe5\xb4\x81\xb9\x01\xbb\xcc\xfd\xb9\x87\x8a\x6a\xd0\x79\xea\xc9\xcc\x97\x3b\x49\xb9\x84\x70\xab\xf5\x8b\xf2\x3c\x1f\x2c\xb9\xb8\x20\x0d\x72\x42\x8f\xcc\x6f\x85\xe2\x7a\x9b\x58\x70\x5f\x94\x03\x73\xcf\x64\x3b\x2f\xbe\x84\xff\x50\x1a\xd2\xee\x97\x87\x96\xda\x45\xa5\x04\x66\xba\x65\x83\x29\xf4\xd1\x0e\x68\x4d\xe3\x76\xd5\x83\xfb\x68\x1f\xc9\xc3\xc0\x17\x4e\xf7\xa5\x56\x56\x4b\x48\xa4\x5e\x10\x66\x16\xe1\x85\xd4\xd2\xf8\xf9\xef\x82\xfd\x73\x5b\x9b\xb8\xed\xe3\xa0\xe0\x69\xef\x27\x6e\x2e\xad\xe9\x6f\xc6\xb0\x5d\xc2\x36\x1b\xb9\x23\x81\x67\xbd\xcb\xc4\x4a\x51\x02\xb9\x1c\x3c\x19\x3e\xf3\xe8\xeb\x9a\xd6\x87\x3d\x1f\xd5\xe8\xfd\x8e\x05\xff\x91\xa7\xce\x47\x1b\x12\xfc\x69\x70\x2f\x4c\xbd\x01\xe6\x01\xed\x7e\x14\x71\xa3\xfc\x67\xc6\x5b\xd3\xe9\xdf\x01\x00\x00\xff\xff\xff\x82\xcc\x06\x46\x17\x00\x00")

func assetsJsManagerMinJsBytes() ([]byte, error) {
	return bindataRead(
		_assetsJsManagerMinJs,
		"assets/js/manager.min.js",
	)
}

func assetsJsManagerMinJs() (*asset, error) {
	bytes, err := assetsJsManagerMinJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/js/manager.min.js", size: 5958, mode: os.FileMode(420), modTime: time.Unix(1514936416, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/manager.html": templatesViewsManagerHtml,
	"assets/js/manager.min.js": assetsJsManagerMinJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"js": &bintree{nil, map[string]*bintree{
			"manager.min.js": &bintree{assetsJsManagerMinJs, map[string]*bintree{}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"manager.html": &bintree{templatesViewsManagerHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
