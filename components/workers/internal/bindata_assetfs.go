// Code generated by go-bindata.
// sources:
// templates/views/manager.html
// assets/js/manager.min.js
// DO NOT EDIT!

package internal

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsManagerHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x4f\x6f\xdb\x3a\x12\xbf\xe7\x53\x10\x2a\xb0\x6d\x0f\xaa\xfa\x6f\x2f\xad\xad\x45\xd0\x3d\xb4\x68\xb6\x58\xa4\x7d\x28\xde\x29\x18\x8b\x23\x8b\x31\x45\x0a\x24\x65\x3b\x08\xf2\xdd\x1f\x48\x51\xb6\x64\x53\x8e\xda\xda\x0f\x69\x5f\x4f\x96\xc5\x99\xe1\xf0\x37\x7f\xf8\xa3\x78\x7b\x4b\x28\xe6\x4c\x20\x89\x32\x29\x0c\x0a\x13\x91\xbb\xbb\xb3\x09\x65\x4b\x92\x71\xd0\x7a\x1a\x55\x30\xc7\xd8\x30\xc3\x31\x4a\xcf\x08\x21\xa4\x3b\xe8\xde\x5f\x71\xcc\x8d\x1f\x74\x02\xc5\xab\xf4\xab\x54\x0b\x54\x7a\x92\x14\xaf\xbc\x56\x42\xd9\x32\x3d\x1b\xb0\xa0\xd8\xbc\xe8\x99\xe8\x48\xe4\x52\x95\xf1\x5c\xc9\xba\x22\x55\xcd\x79\xbc\x2b\xbb\x2b\xcf\x44\x55\x9b\x46\x61\x47\xca\x49\x72\x98\x21\xdf\x7f\xef\xc6\x9c\x2a\x31\x37\x15\x4e\xa3\xac\xc0\x6c\x31\x93\xeb\xa8\xb5\x7b\xad\x63\xbd\x62\x26\x2b\x22\xc2\xe8\x34\x82\xda\x48\x85\xb9\x42\x5d\x44\x24\x49\xc9\xf9\xf6\xff\xfe\xa4\x49\x60\x56\x8f\x48\xe0\xaf\x7f\x6c\x21\xeb\x2e\x2e\xe3\x08\x2a\x67\xeb\x28\x0d\x8d\x2a\xb9\x22\x46\x56\x57\x86\x71\xd4\x81\x70\x81\x60\x25\x18\xa4\x24\xe7\xac\xfa\x20\xfe\x24\x99\xe4\x31\x9f\xc7\xaf\xdd\x43\x49\xfd\x83\x2e\xfd\xc3\x5a\xc7\x2f\x5e\x0e\x84\xc5\xce\x11\x6b\x03\x46\x1f\x8a\x45\x26\x45\x94\x4e\xd8\x26\x96\x40\x72\x88\x29\x42\x6e\x7f\xff\xed\x96\xc1\xd2\x1d\x24\x76\x8d\x64\xb2\xb6\x79\x69\x41\xe7\x4c\x1b\x14\xa8\x74\xdc\xbc\x4c\x9f\x87\x74\x8b\x57\xe9\x45\x2b\xb8\xcd\xc0\x30\xc8\x0f\x14\xa2\x5a\xa3\xd2\xdf\x87\xd1\xaa\x29\xbd\xfb\x10\xda\xab\xd0\x9f\x0a\x1f\x03\x7a\xf1\x9d\xf8\x38\xd5\x78\x05\xcc\xdc\x0b\x11\x30\x43\x9c\xf8\x7d\x28\xf5\x8a\xb1\x97\xa8\x81\x2a\x5c\x5f\x55\x20\x90\x0f\x80\xb2\xbe\xea\x36\xdb\xad\x3b\x2f\x83\x65\xd4\x2c\x9e\x74\xd3\xfd\xe5\x8e\x66\xcd\x5b\x35\x01\x4b\x22\x60\x39\x03\xd5\x34\x51\xe2\xfc\xb8\x32\x52\x72\xdb\xe8\x42\xcd\x92\xa5\x13\xd8\x62\xc8\x39\x54\x1a\x63\xce\xc4\x62\x3f\x24\x59\x81\x4b\x25\x45\x6c\xdb\x6e\x13\x11\x48\x27\x09\x67\x41\xb3\xad\x2a\x55\xb2\xa2\x72\x25\x02\x93\x3b\x49\x20\x85\xc2\x7c\x1a\x3d\x8a\x76\x35\x62\x23\xe7\x73\x8e\x11\xa1\x60\xc0\xff\xe9\xd8\x23\x4a\xda\xff\xb3\xda\x18\x29\x22\x02\x8a\x41\x8c\xeb\x0a\x04\x45\x6a\x3d\xe6\x1a\xf7\x97\xb0\x52\x28\xb2\x62\xeb\x7e\xd8\xa7\x2d\xa0\x1b\x5f\x4a\x14\x75\x3b\xa5\x7b\x0e\xab\xb6\x98\x0e\x0e\xf6\xd6\x7c\x0d\x4b\xd0\x99\x62\x95\x79\xb3\x94\x8c\x3e\x79\xfe\x74\x67\xb1\xa5\xa4\xc0\xdb\x77\xa0\xe6\x68\xa6\xd1\xa3\xee\x4b\xf7\xdc\x6c\xde\xd3\xe8\x9d\x14\x39\x53\x25\x51\x58\xca\x25\x12\xe0\x9c\x6c\xb3\xb4\x2b\x3f\x93\xf4\x66\x1a\x7d\x65\x9c\x93\x19\x06\xc5\x09\xae\x33\xac\x8c\xe5\x0e\x50\x73\xb3\x19\x78\x46\xce\x15\x92\x1b\x59\x13\x5d\x2b\xfc\x4f\xcf\x6a\x06\x9c\xcf\x20\x5b\x74\x6a\xe3\xd2\x99\x7e\xf2\xf4\xed\x01\xb8\x36\xa8\x6c\x42\x35\xe7\x37\x55\x61\xbb\x02\xd9\x3c\xc5\x46\x81\xf6\x71\x23\x97\x1b\x87\x0f\xc3\x3c\x14\xdf\x66\x70\x28\x4a\x93\xa4\x0e\xb0\x87\x7d\xf9\x7d\xb9\x83\xdb\xf8\x56\xad\xff\xb7\xd7\x18\x5a\x8a\x36\x6c\xd7\xc0\x8c\x63\xac\x50\x57\x52\x68\xb6\xdc\xed\x22\x4e\xdc\xc9\xf4\x14\x48\xa3\x56\xc8\x25\xaa\xa1\x42\x34\x05\x02\x1d\x1a\x53\x07\x90\x34\x45\xfa\x09\x4a\x9c\x24\xa6\x38\x2c\xf5\x4e\xa1\xdd\x58\x46\x08\xda\xae\x4d\x74\x9d\x65\xa8\xf5\xfd\xe2\x17\xa0\xbf\x41\xba\x31\x9e\x03\xe3\x63\x5c\x71\xb6\xc7\x0a\x9f\x67\x86\x49\x71\xc0\x87\x49\x32\x84\xa4\xd5\x39\x80\xbf\xad\xd8\x41\xc5\xf0\xe0\x24\x71\x41\xff\x11\x4a\xda\x21\x1b\x27\xdc\xe5\x1c\x13\xf2\xa5\xbd\xe5\x2c\xbf\x37\xb9\x5f\x78\x93\xeb\xb2\x58\x5d\xc8\xd5\x0f\x6f\x0f\x78\x83\xb1\xac\x50\xf8\x34\xfa\x5c\xc8\x95\xdb\xd0\x1c\xb7\x3b\xc5\x2e\x71\x5c\x0c\x0a\x46\x43\x9d\xfc\xdb\x31\xc8\xb8\x74\x19\x61\x41\x78\xcf\x28\xfe\x2d\x20\x6c\xf2\x88\x2d\x19\xb5\x1b\xcc\x29\x61\x3b\x0a\x3f\xd2\x68\x1c\x32\x6d\x73\x0b\xd3\x18\x3f\x7a\x69\xc5\x8f\xc1\x61\xda\x8f\x09\x2d\x8b\xf1\x5e\x3c\xcc\xf4\x3c\x02\xce\x0b\x4b\x30\x41\xd0\x2e\xc3\x1c\x85\xf8\x47\xc6\xf9\xb1\x49\xe3\x47\xe7\xcc\x49\xd1\x7e\x60\x75\xd0\x36\x17\xa0\xf4\x87\x91\xac\x78\xdd\x6e\xd1\xe7\x94\xfa\x28\xfe\x66\xdf\xe3\xd8\xf7\x29\x18\xf7\x87\xff\x1e\x91\x6f\x7f\x36\x60\xea\x11\xd4\xf9\x0b\xe8\xc5\x3f\x93\x05\xbb\x2d\xf4\x84\x1c\xd8\xdb\x6f\x38\x70\xf7\xa3\xd4\xc3\xa6\xc1\x3f\x53\x15\x9e\xfa\x0c\x3c\xa6\x22\xc7\x9d\x93\xc7\x96\xe3\xff\x15\x93\x8a\x99\x9b\x11\x25\x69\x0c\x96\x95\x19\x7b\x96\x46\xa5\xa4\x3a\x62\x7f\xf9\xd5\x3a\x82\x4f\x2b\xb7\xeb\x92\x1c\x28\xf6\xd9\xbc\xdd\x70\x6d\xb6\x31\x41\x71\x3d\x8d\xe2\x17\xed\x99\x8a\x32\xe0\x72\xee\x8f\x71\x05\xa3\x14\xc5\x34\x32\xaa\x0e\x5d\xbc\x35\xd4\xc8\x6b\x84\x6b\xc5\xb3\xa7\x7b\xeb\xa5\x91\xb3\x30\x06\x33\x7f\xd2\x9c\x2e\xfd\xad\x58\x7b\xd4\xdc\xd4\xb0\x3d\x50\x34\xcc\x82\x32\x5d\xb2\x8d\xc1\xe0\x32\xfe\x65\x58\x89\xfa\xed\x24\x69\xcc\x04\x26\x2b\x5e\xf7\xdd\xf2\x1d\x72\xcb\x2a\x6c\xd7\x7b\x7d\x30\x3a\xe1\xf5\xd9\x68\x87\x56\x97\x4b\x55\x0e\xa4\x48\xf0\x0e\xf2\xe0\xa1\x17\x66\xc8\x49\x2e\x55\x2f\xd8\xfe\x96\x61\xdb\x59\x85\x51\x92\xc7\x4e\x38\x4a\x3f\xd5\xe5\x0c\x15\x11\xb8\x6a\x17\xf8\x26\x78\x5b\xd8\x9b\xa8\x7b\x4f\x29\x9c\x81\x88\x94\x4c\x4c\xa3\x17\x51\xcf\x63\x3f\xd7\x5e\xfe\xb5\x2e\x2d\x81\xd7\x68\xb5\x86\x8a\x64\x0f\xd8\xe6\xf5\x3e\x68\xa3\x62\x90\x4b\x69\xbe\x3d\xc7\x66\x46\x90\x99\x11\xb1\xff\xd8\x1c\xce\xb6\xf4\x9d\xcd\xc4\x03\x89\xd5\x9b\x41\xd7\xb3\x92\x99\xbd\x19\xfc\x47\xc2\x81\x19\xce\x29\x0d\xdb\x1f\xdb\x1d\x6e\x6f\x09\x0a\x4a\xee\xee\xce\xce\x3a\xf7\xee\xd7\xba\xb9\x72\x6f\x18\xbc\x77\x10\xaa\x8a\xb3\x0c\x6c\x5f\x4c\xb6\xf4\xde\x23\xb7\x04\xd5\x7e\x79\x6f\xef\x7d\xec\xce\x41\xa6\xe4\xf1\xed\x2d\x79\x16\x1a\xba\xbb\x7b\xfc\xf6\x6c\x92\x34\x66\x9c\x27\xda\x80\x61\xd9\xfb\x2f\xff\xbb\x20\x4f\x9a\xe7\x3f\x2e\x2f\x48\x94\xf8\x2c\x49\x40\x6b\x34\x3a\xb9\xd6\x49\x09\x02\xe6\xa8\x9e\x59\x47\x6d\x19\x3f\xb5\xee\x6e\xd6\xf2\x57\x00\x00\x00\xff\xff\xfe\xa1\xf0\x81\x42\x20\x00\x00")

func templatesViewsManagerHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsManagerHtml,
		"templates/views/manager.html",
	)
}

func templatesViewsManagerHtml() (*asset, error) {
	bytes, err := templatesViewsManagerHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/manager.html", size: 8258, mode: os.FileMode(420), modTime: time.Unix(1507066300, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsJsManagerMinJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x58\x6f\x8f\xda\x38\x13\xff\x2a\xa9\xbb\x5a\x62\x11\x42\xfb\x3c\xed\xbd\x80\x24\xab\x8a\x9e\x4e\xd5\xad\xee\xaa\x76\xa5\xbe\x68\xab\x95\x89\x0d\xf8\x70\x12\x64\x4f\x96\x22\xca\x77\x3f\xd9\x71\x82\x03\x61\xff\xdd\x6e\x5f\x61\x66\xc6\x33\xe3\x99\xf9\x8d\xc7\x99\x95\x79\x0a\xbc\xc8\xbd\x39\x83\x2f\x85\x5c\x32\xf9\x19\x08\x94\xea\x2f\x92\x31\x5f\x99\x25\xde\xaa\x35\x87\x74\xd1\xfc\x4d\x89\x62\xde\xab\x91\x64\x50\xca\x1c\xad\x09\x07\x34\x36\xb4\xd7\x35\x6d\x25\x8b\x94\x29\x65\xc9\xff\xab\xc9\xd3\x52\x6d\xd0\x98\xb2\x19\x29\x05\xd4\xc4\x32\x5f\xe6\xc5\x3a\x47\xbb\x9d\xeb\xcb\x15\x51\xcb\x67\xf4\x44\x95\xa9\x43\xfe\x7f\x4d\x9e\x11\x2e\x2c\xed\x8d\x4b\xf3\xa6\x1b\x0f\x78\xc6\x8a\xb2\x36\xf0\xb6\x66\x2f\xb9\xa8\xb7\xfc\xe6\x3a\xe2\x49\xb6\x62\x04\xee\x73\xdc\x72\x45\x09\x30\x1f\x6f\xcf\x42\xf2\x0f\xf9\xe1\x6f\x61\xb3\x62\x23\xf4\xc7\xef\x57\x28\x28\xa5\x18\xa1\xe1\xda\x64\x46\x0d\x2f\x88\xd9\x11\xeb\xf3\x2b\x14\xd8\x53\x8c\x6a\x4d\xbe\xc4\xdb\x1b\x22\x3d\xb8\x8c\xcf\x7c\xf4\x52\x70\x05\x2c\x67\x52\x79\x30\x2d\xe8\x06\xe1\x90\x65\x2b\xd8\xf8\x38\x80\x2f\x46\xc0\xaa\x3d\x66\x5f\x19\x36\x10\xb5\x3c\x66\x36\x5a\x63\x19\x36\xeb\xeb\xb4\x28\x73\xf8\xf9\xf3\x55\x60\x75\xc6\x32\xb4\xab\x3d\xcb\xe8\xbb\xd6\xc1\x89\x5f\x8d\xf9\xcc\x7f\x27\x25\xd9\x84\x5c\x99\x5f\xdf\xd1\x86\xf1\x76\x56\x48\x5f\x1f\x85\x7b\x3c\xf7\x5c\x96\x39\x60\xfd\xd7\x75\xe1\x2b\xff\x1e\x88\x49\x8c\x22\x90\x49\x04\x34\x41\xfd\x9a\x15\xe6\x24\x63\x7d\x14\x0d\x81\x5a\x8e\x8e\xf7\x55\xf1\x19\x24\xcf\xe7\x7e\x23\x96\x4a\x46\x80\xd1\x6b\x02\xb8\x25\xbd\x17\xd0\x27\xb9\xd6\xc7\xb8\xb6\xa1\x6f\xc9\xed\x35\x09\xa2\xda\x72\xd7\x04\x2e\xba\x8d\x76\x89\xe2\x11\x42\x77\xbb\xa0\x0b\x93\xd1\x3b\x3d\xa8\xc4\xee\xe3\x40\x23\xe9\xda\x47\xe3\x56\x18\x5f\xc4\xb6\x9e\x2f\x2d\x55\xc3\xf3\x42\x4c\xfa\x71\x4f\xbb\x10\x51\x7e\xe3\xa5\x82\x28\x15\xa3\x29\xe4\x83\xb9\x2c\xca\x95\xd7\xac\x06\x3f\x14\x4a\xa2\x69\x09\x50\xe4\x9e\xae\xf2\x18\x55\x7f\x90\xb3\xc9\x88\x53\x92\xcf\x99\x34\x4b\x9e\x16\x79\x93\xf1\x81\x64\x59\x71\xc3\x90\x47\x09\x90\x01\x14\xf3\xb9\x60\x31\xca\x0a\x4a\x44\x4d\x23\x72\xce\x20\x46\x2f\x5d\xa2\x59\x0f\x80\x83\x96\x9e\x14\xf9\x8c\xcb\xcc\xab\x54\x35\xaa\xbd\xde\x41\xc5\xf4\x5a\x9b\x53\x22\xc4\x94\xa4\xcb\x18\x35\x25\xf7\xc9\x28\xf0\xbf\xf5\x8e\x76\x7e\xeb\xe1\x31\x4a\x22\x5e\x1f\x6b\x2e\x36\xab\x85\x39\x48\xb3\x1a\x80\x24\x6a\x81\x3c\xeb\x54\xa5\x0b\x25\xd1\x90\x27\xd1\xb0\x8a\x4a\x12\x0d\x29\xbf\x49\x4c\x1e\x7a\x23\x1d\x64\x64\x82\x6c\xf2\x12\x54\xff\x87\x20\x13\x14\xc0\x65\x48\x56\x2b\x96\x53\x5f\x4c\xf0\xae\x13\xa2\xa1\x60\xf9\x1c\x16\xbb\x0e\xe0\x59\xa4\x1e\xc3\xae\x66\x18\xd0\x55\x7f\xf6\xc0\xd6\x80\xd3\x75\x13\x57\xff\x43\xbd\x0e\xd6\x2d\x04\x5a\x0e\xa7\xa7\xd1\x67\x45\x2c\xf6\xda\x55\xdf\x75\x27\x59\x79\x7b\x03\x34\x45\xba\x9e\xf4\x63\xed\xc0\x45\x55\x86\xf7\x29\x31\x8b\x37\xb3\x4e\xb9\x4c\x05\xf3\xb4\x86\x81\x5a\x14\xeb\xa6\x96\xd4\x32\x46\xbd\x3e\xef\xf7\xee\xca\x26\xdb\xb0\x41\xb1\x62\xf9\x51\x06\x4d\xee\xdc\xbc\xad\x9f\x1c\x2c\x3c\x9f\x15\x7b\xa8\x54\x11\x1a\x48\xa6\x18\x3c\x11\x4e\x14\x03\xab\xd6\x7b\xd9\x73\xb2\x7a\x0a\x21\xb6\x42\x3e\xe9\x8d\x06\x1e\xce\x96\xfb\x40\x43\xb2\x99\x64\x2d\x70\xe8\xb3\x1c\x44\xf6\x31\x6d\xc4\xc6\xc6\x5c\xda\x4f\x11\x1a\xad\xe8\x31\x91\xf9\x93\x0b\xf1\x98\xc0\xb4\x7b\x86\xd6\x72\xba\x63\x98\xd6\xd0\x0b\xe0\x4b\xdd\x1a\xd6\x13\x6c\x00\x7b\x7e\xbe\xa7\xf5\x22\x90\x9e\x82\x8d\x56\x47\xb9\x5a\x09\xb2\x19\xe5\x45\xce\x90\xc7\x69\x8c\x0c\x1e\xea\xf2\x07\xea\xa5\x85\x50\x2b\x92\xc7\xe8\x2d\x4a\xa2\x52\xd4\x9e\xea\x1e\x53\xd5\x2c\x4a\x22\xc1\x8f\xc9\x03\x0e\x2c\x43\x49\xa4\x37\xd7\xdc\x55\x29\xc4\x40\xf2\xf9\x02\x3c\x60\x3f\x60\x90\x95\xc0\xa8\xa7\x32\x62\xce\xc4\xb2\xa4\xd7\xd7\xe6\x4d\x68\xa2\x21\xcb\x92\x68\xa8\xb7\x27\x91\x02\x59\xe4\xf3\xe4\xc3\xfb\x68\x68\x97\xd1\x54\x7a\xc3\x24\x1a\x0a\xfe\xf4\xe6\xab\x7e\xde\xe5\x80\x6e\x47\xcf\xed\xc2\xf1\x24\x6c\x9c\xaa\xbb\x5f\xa7\x5f\x95\xf0\x2f\x09\xce\x4a\xf2\x42\x72\xd8\x74\x3b\xf2\xd1\x72\x7f\x89\x2b\x04\x40\x4f\xa8\xaa\xdb\x95\x77\x96\xfb\xdc\xae\x54\xe9\x31\x23\x15\x93\xb2\x90\x17\x07\xff\x47\xe8\x3c\xa3\x44\x2d\xc6\xe8\x44\xf2\x2e\x89\x02\xcf\x88\x3e\xb7\xab\x39\x5b\x7b\xef\xf5\xbb\xc3\xb8\x58\xdf\xbf\x21\x14\x97\x45\x4a\x04\xb3\xd7\xb3\xb9\x61\x8f\xdd\x9c\x54\xe2\x9d\x3e\x0e\x4b\xe1\x34\x20\x84\x77\x47\x4f\x82\x5b\x46\x91\xfd\x1b\xe1\x78\x1a\x71\x78\x5b\x73\x33\xbb\xa4\xaf\xfc\xfb\x18\xae\xea\xb6\xe6\xcc\x20\x75\x13\x71\x07\x8b\x3d\xb2\x0f\xc6\x8d\xdb\xc0\x76\xa4\xa0\xa9\xfe\x23\x4e\x53\x8c\xad\xe1\xfc\x01\xb5\x71\x72\x5c\x6a\x25\x4b\x97\x90\x15\xbb\x6b\x96\x50\xd9\xa3\x66\x09\x73\x01\x3c\xfd\xc8\xad\xd5\xea\xfb\xb2\x69\xf0\x27\x6e\x4b\xcd\x77\x86\xec\x46\xfc\xe9\xc7\xeb\xea\xb2\xc4\x3b\xe7\x8d\xea\x56\x57\x5d\xb1\xad\x67\xf5\xc0\x3c\xc6\x10\x0e\x35\xc4\xfc\xfd\x13\x35\x70\xde\xd6\x6d\x99\x7a\x9e\x0e\x9a\xe7\x75\x15\xa0\x9a\xbf\x37\xd8\x47\x9e\xf9\x8a\x60\x28\xc8\xdd\xa0\xc9\x6d\xad\x0e\x2e\x5c\xd3\x5e\xb8\x1f\x67\x71\x98\x0a\x9e\x2e\xfd\xe6\x4b\x41\x35\xd2\xb3\xf8\xcc\x87\x05\x57\x38\x98\xc6\x2c\x9c\x71\x8d\x1c\x8e\x70\xc0\x63\x16\xea\x84\xf8\x26\x03\x08\x8f\xa7\xe1\x82\xa8\x89\x0e\xb6\x8f\x3a\x66\x5e\x7c\xe1\x4f\xc3\x2a\xb7\xb7\x08\x05\xd3\x90\x50\xda\x29\x90\x8a\x42\x31\xe7\x98\x03\xd4\xe7\x38\xd4\xae\xfb\x68\x46\x14\x20\x8c\x47\xb7\x9b\xa8\x35\x9c\xb6\x61\x9d\x68\x9b\x58\x70\xca\x1a\x13\x3b\xbc\xdb\xe1\xfd\x77\x99\xc3\x77\x1e\xa7\x87\x9f\x68\x3e\xfe\xfd\xf9\xe4\x37\x9a\x7d\x99\x58\xfc\x04\x3a\xa2\xa3\x2d\xa7\x23\x4e\x77\xcd\xb7\x9b\xea\xe3\x8f\x6b\xd6\x29\xfa\x87\x59\x74\xc1\x7a\x5f\x63\xee\x3c\xfa\x30\x6b\x75\x81\x9b\x59\xfa\x81\xe6\xaa\x87\xc1\xe3\xec\x55\xef\x9a\x3b\x0c\x9e\xf9\xb4\x48\xcb\x8c\xe5\x80\x43\xc9\x08\xdd\xb8\x95\xef\xc2\xf3\x14\x3a\xba\x71\x34\x5a\x10\xe5\xf3\xf0\xb8\xae\x70\xa3\x03\xef\xda\xf8\xd7\x05\xf6\x1f\x0d\x98\xd2\x3e\x6d\x81\x50\xea\x55\x0d\xed\xab\xe9\xec\xaa\x9c\x66\x1c\xbe\x77\x1a\x7d\x70\xb4\x09\xa5\x75\xac\x4d\xcf\x19\x1d\x58\x6e\x3a\xd1\x0d\x11\x3e\xee\xc8\x04\x0e\xea\xcf\x9b\x63\xdd\x71\x48\x09\x85\x7d\xdd\xc5\x79\x29\xc4\x58\xeb\x73\x88\x5d\x5e\xeb\x0e\x15\xa6\x0b\x96\x2e\x19\xbd\xd0\x9b\xe2\x38\x76\xb6\x9c\x9f\xfb\xb5\x89\xc0\x55\xbf\xe6\x39\x2d\xd6\xa1\x62\xf0\x21\x07\x26\xb5\x83\x95\x5c\xf0\x9a\xbd\xc1\x78\xa4\x35\xbd\x38\xd4\x64\x37\xa5\x82\x11\xd9\x6c\x73\x44\xda\x26\xb4\x0a\xdd\x35\xf0\xf8\xdf\x00\x00\x00\xff\xff\x02\x80\x01\x25\x48\x17\x00\x00")

func assetsJsManagerMinJsBytes() ([]byte, error) {
	return bindataRead(
		_assetsJsManagerMinJs,
		"assets/js/manager.min.js",
	)
}

func assetsJsManagerMinJs() (*asset, error) {
	bytes, err := assetsJsManagerMinJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/js/manager.min.js", size: 5960, mode: os.FileMode(420), modTime: time.Unix(1507066411, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/manager.html": templatesViewsManagerHtml,
	"assets/js/manager.min.js": assetsJsManagerMinJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"js": &bintree{nil, map[string]*bintree{
			"manager.min.js": &bintree{assetsJsManagerMinJs, map[string]*bintree{}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"manager.html": &bintree{templatesViewsManagerHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: AssetInfo, Prefix: k}
	}
	panic("unreachable")
}
