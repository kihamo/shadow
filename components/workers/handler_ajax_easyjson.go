// AUTOGENERATED FILE: easyjson marshaller/unmarshallers.

package workers

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonDce94ab1DecodeGithubComKihamoShadowComponentsWorkers(in *jlexer.Lexer, out *ajaxHandlerResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "workers":
			if in.IsNull() {
				in.Skip()
				out.Workers = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.Workers = make([]ajaxHandlerResponseWorker, 0, 1)
				} else {
					out.Workers = []ajaxHandlerResponseWorker{}
				}
				for !in.IsDelim(']') {
					var v1 ajaxHandlerResponseWorker
					(v1).UnmarshalEasyJSON(in)
					out.Workers = append(out.Workers, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "workers_count":
			out.WorkersCount = int(in.Int())
		case "workers_wait":
			out.WorkersWait = int(in.Int())
		case "workers_busy":
			out.WorkersBusy = int(in.Int())
		case "listeners":
			if in.IsNull() {
				in.Skip()
				out.Listeners = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.Listeners = make([]ajaxHandlerResponseListener, 0, 4)
				} else {
					out.Listeners = []ajaxHandlerResponseListener{}
				}
				for !in.IsDelim(']') {
					var v2 ajaxHandlerResponseListener
					(v2).UnmarshalEasyJSON(in)
					out.Listeners = append(out.Listeners, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "listeners_count":
			out.ListenersCount = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDce94ab1EncodeGithubComKihamoShadowComponentsWorkers(out *jwriter.Writer, in ajaxHandlerResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"workers\":")
	if in.Workers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v3, v4 := range in.Workers {
			if v3 > 0 {
				out.RawByte(',')
			}
			(v4).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"workers_count\":")
	out.Int(int(in.WorkersCount))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"workers_wait\":")
	out.Int(int(in.WorkersWait))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"workers_busy\":")
	out.Int(int(in.WorkersBusy))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"listeners\":")
	if in.Listeners == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v5, v6 := range in.Listeners {
			if v5 > 0 {
				out.RawByte(',')
			}
			(v6).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"listeners_count\":")
	out.Int(int(in.ListenersCount))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ajaxHandlerResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDce94ab1EncodeGithubComKihamoShadowComponentsWorkers(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ajaxHandlerResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDce94ab1EncodeGithubComKihamoShadowComponentsWorkers(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ajaxHandlerResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDce94ab1DecodeGithubComKihamoShadowComponentsWorkers(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ajaxHandlerResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDce94ab1DecodeGithubComKihamoShadowComponentsWorkers(l, v)
}
func easyjsonDce94ab1DecodeGithubComKihamoShadowComponentsWorkers1(in *jlexer.Lexer, out *ajaxHandlerResponseListener) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDce94ab1EncodeGithubComKihamoShadowComponentsWorkers1(out *jwriter.Writer, in ajaxHandlerResponseListener) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"name\":")
	out.String(string(in.Name))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ajaxHandlerResponseListener) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDce94ab1EncodeGithubComKihamoShadowComponentsWorkers1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ajaxHandlerResponseListener) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDce94ab1EncodeGithubComKihamoShadowComponentsWorkers1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ajaxHandlerResponseListener) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDce94ab1DecodeGithubComKihamoShadowComponentsWorkers1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ajaxHandlerResponseListener) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDce94ab1DecodeGithubComKihamoShadowComponentsWorkers1(l, v)
}
func easyjsonDce94ab1DecodeGithubComKihamoShadowComponentsWorkers2(in *jlexer.Lexer, out *ajaxHandlerResponseWorker) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = string(in.String())
		case "created":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Created).UnmarshalJSON(data))
			}
		case "task":
			if in.IsNull() {
				in.Skip()
				out.Task = nil
			} else {
				if out.Task == nil {
					out.Task = new(ajaxHandlerResponseTask)
				}
				(*out.Task).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDce94ab1EncodeGithubComKihamoShadowComponentsWorkers2(out *jwriter.Writer, in ajaxHandlerResponseWorker) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"id\":")
	out.String(string(in.Id))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"created\":")
	out.Raw((in.Created).MarshalJSON())
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"task\":")
	if in.Task == nil {
		out.RawString("null")
	} else {
		(*in.Task).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ajaxHandlerResponseWorker) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDce94ab1EncodeGithubComKihamoShadowComponentsWorkers2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ajaxHandlerResponseWorker) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDce94ab1EncodeGithubComKihamoShadowComponentsWorkers2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ajaxHandlerResponseWorker) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDce94ab1DecodeGithubComKihamoShadowComponentsWorkers2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ajaxHandlerResponseWorker) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDce94ab1DecodeGithubComKihamoShadowComponentsWorkers2(l, v)
}
func easyjsonDce94ab1DecodeGithubComKihamoShadowComponentsWorkers3(in *jlexer.Lexer, out *ajaxHandlerResponseTask) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "status":
			out.Status = int64(in.Int64())
		case "created":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Created).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDce94ab1EncodeGithubComKihamoShadowComponentsWorkers3(out *jwriter.Writer, in ajaxHandlerResponseTask) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"id\":")
	out.String(string(in.Id))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"name\":")
	out.String(string(in.Name))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"status\":")
	out.Int64(int64(in.Status))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"created\":")
	out.Raw((in.Created).MarshalJSON())
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ajaxHandlerResponseTask) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDce94ab1EncodeGithubComKihamoShadowComponentsWorkers3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ajaxHandlerResponseTask) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDce94ab1EncodeGithubComKihamoShadowComponentsWorkers3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ajaxHandlerResponseTask) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDce94ab1DecodeGithubComKihamoShadowComponentsWorkers3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ajaxHandlerResponseTask) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDce94ab1DecodeGithubComKihamoShadowComponentsWorkers3(l, v)
}
