// Code generated by go-bindata.
// sources:
// templates/views/manager.html
// assets/js/manager.min.js
// locales/ru/LC_MESSAGES/config.mo
// locales/ru/LC_MESSAGES/manager.mo
// DO NOT EDIT!

package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsManagerHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x56\x4d\x6f\xe3\x36\x10\xbd\xe7\x57\x0c\xb8\x6e\x2d\x03\x89\x94\xe4\x54\x64\xad\x9c\x7a\xd8\x43\x5a\x14\xc5\xb6\xd7\x05\x2d\x8e\x6d\x1a\x34\xa9\x25\x69\x25\x86\xa0\xff\x5e\x90\x94\x2c\x59\xb5\x65\x79\xb1\x89\x2e\xe2\xd7\xcc\x7b\x9c\x79\x1c\xb2\x2c\x81\xe1\x92\x4b\x04\x92\x29\x69\x51\x5a\x02\x55\x75\x33\x67\xbc\x80\x4c\x50\x63\x52\xa2\xd5\x2b\x79\xbe\x01\x00\xe8\x8e\xbe\x7d\xcb\xa9\x44\x51\xcf\xfc\x7f\xd6\x72\x2b\xb0\x33\xeb\x57\xac\x1f\x9f\xcb\x12\xf8\xc3\x6f\x12\xc8\x8b\x5a\xad\x50\x1b\x02\x31\x54\xd5\x3c\x59\x3f\xf6\xd6\x76\xbc\x65\x02\xa9\x5e\xf2\x37\xf2\x3c\x4f\x18\x2f\x3a\x90\xbd\xee\x11\x83\x66\x3f\x3d\xbf\x4b\xa5\xb7\xa0\x95\xc0\x94\xb8\x26\x01\x9a\x59\xae\x64\x4a\x3e\x11\xd8\xa2\x5d\x2b\x96\x92\x5c\x19\x4b\x80\xb3\x94\x88\x9a\xe5\xb1\x93\x3e\x98\xa5\x0b\x81\x77\x1a\x4d\xae\xa4\xe1\x45\x7f\xdf\x07\x13\xbf\xee\xc8\x08\x82\xe9\x5a\x15\xa8\xeb\xb6\xb1\x9a\xe7\xc8\x80\xd9\x8e\x47\x90\xea\x55\xd3\x9c\x80\xb1\x7b\x47\xfd\x95\x33\xbb\x7e\x7a\xb8\xbf\xff\xe5\x0c\x56\xc0\x5b\x23\x65\x43\xf3\xfa\xfc\x64\xed\xa0\x4d\xd8\x5f\x54\x7b\x79\x84\x7c\xd9\xf5\x15\xa6\x7f\xd2\x2d\xfe\x90\xe1\x0b\x16\x28\x7e\xc8\xf2\x77\xcc\x51\xb2\x91\x84\xe7\xc9\x50\x24\x9c\xed\x85\x38\x2e\x14\xdb\x9f\x9f\x2f\x4b\x98\x70\xc9\xf0\x0d\x9e\x52\xb8\x77\xe7\x6b\x60\xa5\xa6\x72\x85\x30\xe1\xec\x16\x26\x41\x7d\xce\x2a\xae\x85\x78\xc1\xb8\x86\x49\x81\x32\xd6\x74\x1e\x86\x6c\x46\x48\x80\xf9\xa0\x2e\x01\xbf\x37\x84\xe2\x20\x05\x20\xae\x56\xfc\x2a\x17\x26\xff\x5c\x96\x80\xc2\x20\x54\x95\x63\x71\xbc\xcc\x8f\xa1\x64\x21\x0d\x03\x71\xec\xe0\x35\x2e\x9c\x72\xae\xb3\x2b\xc4\x37\x83\xf6\x62\xa4\x0f\x76\x06\x05\x66\xb6\x39\x94\xae\x24\xdc\xb9\xca\xa1\x95\x80\x30\xf5\x48\x40\xd2\x2d\xa6\xc4\xc7\xd7\xed\xa2\x5b\x1a\xee\xda\xa8\x57\xd5\xc0\x59\x6c\xbe\x36\xc3\xe2\xd6\xb3\x75\x4c\x27\xb1\x70\x42\x1f\xcc\xee\x11\x69\x95\xbb\x9a\x05\x05\x15\xbb\x9a\x98\x28\x44\xfc\xaf\xeb\x56\x15\x19\xe5\x23\x24\x95\x4a\x06\x91\xcf\x6c\x1d\xb7\xfb\x99\xef\x47\x4d\x02\xfc\x09\x9c\x75\xfc\xcf\xc6\x92\x6c\xbe\x10\x45\x64\x29\x69\x5a\xe3\x08\x76\x88\x1e\xd8\xa5\xc3\x6a\xee\x99\x05\xcd\x1d\x6a\x82\xdf\x83\x17\xd4\xc4\xdf\x76\x4b\xbe\x22\xe0\xd3\xc8\xe5\x8a\x78\x95\x85\xb8\x8e\xca\x62\x70\x7e\x59\x5f\x49\xd8\xf5\x65\x9f\x73\x93\x69\x9e\x5b\xb0\xfb\x1c\x53\x42\xf3\x5c\xf0\x8c\x3a\x3a\xc9\x86\x16\x34\x4c\x8e\x10\x98\xfb\x26\x11\x53\xd9\x6e\x8b\xd2\xce\x62\x8d\x94\xed\xa3\xe5\x4e\xfa\x6b\x0e\xa2\x19\x94\xa3\xc3\x3f\x89\xa6\x9f\x4e\xc8\x7c\x3a\x8b\x95\x8c\xa6\xf5\xf1\x78\x0a\xff\xe9\x2d\xb4\x20\x78\x0d\xca\x31\x92\x99\xce\x62\xb3\x5b\x6c\xb9\x8d\x66\x9f\x47\xfb\xa8\x46\xae\x1d\xb3\x6e\x9e\x84\x60\x5f\x28\x38\xd7\x96\xb2\xc3\x8d\x74\xb1\x9e\x0d\x5f\x47\x97\xb5\x37\x4f\x06\x2e\xa4\x79\xe2\x9f\x19\x27\x1e\x34\xc7\x8f\xa9\x30\xe4\xea\xe1\xc9\xf7\x56\xdd\xac\x7f\x2d\xa7\x9b\xce\x8b\xd2\xdd\x9a\xa4\x21\x5a\x96\x60\x2c\xb5\x3c\xfb\xf2\xf5\x8f\x17\x88\x42\xfb\x9f\xbf\x5f\x80\x24\x8c\x9a\xf5\x42\x51\xcd\x12\x6a\x0c\x5a\x93\x14\x28\x99\xd2\x26\x61\xd4\x52\xcf\xd6\xc4\x12\xed\xdd\xc2\x24\x99\x09\xa3\x5f\xc3\xe8\x42\x29\x6b\xac\xa6\x79\xbc\xe5\x32\xce\x8c\x21\xb0\xa4\xc2\xb4\x45\xea\x27\xa0\x2e\xf9\x1b\x32\xb7\x15\xd4\x0d\x03\x3f\xf4\xc5\x0f\x7d\x08\x85\xf6\x1d\xd8\x30\x68\x47\x86\x09\x9c\x4e\xcc\xc6\xfc\xc4\xb4\x24\x1b\x93\x6c\xbe\xef\x50\xef\xe3\x4e\x66\x1c\x97\xcd\x7b\xc4\x62\x61\x1c\xe0\x59\x0d\xbc\x0b\x66\x47\x02\x3d\xf0\xae\x12\xde\x0d\xbe\x4d\x76\x0f\xbd\xa3\x82\x0f\x00\xaf\x43\x7f\x56\x7a\x57\xc1\xd7\xd7\x6e\x03\xbe\x31\xc9\x96\x4a\xea\xea\xa4\x73\x63\xf5\xae\xa7\xdf\xff\x02\x00\x00\xff\xff\x6c\x6b\x67\xa7\xa9\x0e\x00\x00"

func templatesViewsManagerHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsManagerHtml,
		"templates/views/manager.html",
	)
}

func templatesViewsManagerHtml() (*asset, error) {
	bytes, err := templatesViewsManagerHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/manager.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsJsManagerMinJs = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x92\x41\x8f\xdb\x2e\x10\xc5\xbf\x4a\x96\x7f\x94\x80\x82\x88\x73\xf8\x4b\x15\x09\xd9\x43\xf7\x18\xa9\x52\xd5\x5b\xe4\xc3\x04\x26\x36\x5d\x16\x5c\xc0\x6b\x55\x91\xbf\x7b\x85\xbd\x6a\xd3\x6d\x7b\x1b\x31\xbf\x07\xf3\x78\xb3\xa4\x26\xe8\xfe\x05\x7d\x66\x22\x22\x98\xef\xf4\xda\x7b\x9d\x6d\xf0\x94\xdd\x5e\x21\x2e\x32\x5c\x1c\x9e\x42\xd3\x60\x4c\x6a\x49\xc9\x7f\x6e\xae\xe7\x06\x61\xe2\x09\x32\x7c\x29\x35\xbd\x75\xd0\xe0\x09\x7d\x93\x5b\xf9\x7f\xc5\x1d\xf8\xa6\x87\x06\xe5\xad\x8f\x4e\x92\xad\x81\xd4\x5e\x02\x44\xb3\x35\x90\x61\x92\xa7\xad\xdd\x7d\xf0\xe2\x6b\x0a\xfe\xd1\x05\x0d\x0e\x15\xd9\x0c\xd6\x9b\x30\x88\xd4\x82\x09\xc3\x69\x3a\x1d\x79\x88\x06\xa3\x3c\x9f\x2b\x4e\x20\x69\x52\xd7\x5c\x07\xd7\xbf\xf8\x27\xbc\x26\x79\xbe\xbd\xda\x64\x2f\x0e\xe5\xc3\x8e\x67\x88\x0d\xe6\x24\xab\xb1\xe6\x26\xc2\xf0\x11\x9c\xbb\x80\x7e\x96\x3f\x8d\x25\xcc\xd9\xfa\x26\xcd\x06\xa1\xb3\x2a\xb7\x36\x09\xe8\x2c\x65\x3c\x86\x21\x29\xe8\xac\x28\xc5\x6c\x49\x12\xdd\xc7\x88\x3e\x93\x91\x09\x1f\x0c\x26\xca\xb8\x83\x94\x95\xef\x9d\xdb\x17\x78\x1e\x86\x56\xfc\x4f\x41\x31\x4b\x99\x40\xd0\xed\xaf\xbf\x6d\x62\xe8\x3b\x6e\xe7\x09\x96\xf0\x39\x0c\x6a\x49\xcb\x8b\x4c\xe0\x37\x6a\xd9\xbe\x5c\xff\xa0\xd4\xc4\xad\x56\x74\x42\xc4\x05\xaf\x21\x22\x5d\x1f\x72\x5c\x68\x07\x29\x29\x32\x01\xe4\x78\xd8\x66\x73\x3c\x64\xb3\xd0\xc1\xa5\x0e\xbc\x22\xeb\xcd\xac\xd1\xad\x75\x26\xa2\xa7\x4c\xb8\x29\x9a\xcd\x9a\x1c\xd7\x9b\x49\xb7\x21\xb3\x6e\x9b\xe3\x91\xbc\x59\x9a\x1a\x6c\x64\xe3\xc8\xf6\xf7\xd9\x8b\xe0\x29\xd1\xce\xea\x67\xc2\x49\x8e\x62\x7e\x98\xbf\xdb\x96\x37\xdf\x9f\x4a\x5a\xea\x77\x79\x39\xa2\xec\x5c\xd5\xfb\x4a\x29\x75\x0f\x9e\xab\x7a\xb5\x9a\x62\x7d\xdf\xd8\xd5\x8f\x7f\xb9\xa4\x2c\x81\xc1\xb2\x05\x4c\x94\x84\x29\x93\xff\xa0\xe0\x1e\x1a\xd9\xc8\xf6\x3f\x02\x00\x00\xff\xff\x39\xed\x9a\x13\xf0\x02\x00\x00"

func assetsJsManagerMinJsBytes() ([]byte, error) {
	return bindataRead(
		_assetsJsManagerMinJs,
		"assets/js/manager.min.js",
	)
}

func assetsJsManagerMinJs() (*asset, error) {
	bytes, err := assetsJsManagerMinJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/js/manager.min.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesConfigMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\xdf\x8f\x13\x55\x14\xfe\x68\xc7\x4e\x5d\x11\xe5\x87\x88\x3f\x30\x17\x13\x88\x18\x8b\xed\xfa\x33\x85\x82\x01\x59\xe4\xc7\x22\x61\x57\x7d\x93\x5c\xda\xd9\xee\x84\xe9\xbd\xeb\xcc\x94\x68\x42\xe2\x52\x8c\x11\x21\xf2\x80\x46\x03\x0a\xac\xe1\x51\x63\x59\xb6\x50\x58\x5a\x7c\x34\xd1\x98\x73\x13\xdf\x4c\x78\x34\xfe\x01\x1a\x5f\x7c\x30\x77\xee\x74\xda\x5d\x7c\xd0\x79\x99\x7b\xce\xf9\xee\x77\xbe\xf3\x9d\x99\x3b\x2b\xac\xcf\x00\xe0\x09\x00\x8f\x03\x58\xba\x04\xd8\x08\xe0\xef\x25\x88\x9e\x4b\x29\xe0\x7e\x00\x33\x29\x60\x19\x80\xef\x52\xc0\x52\x00\xdd\x14\xb0\x02\xc0\x8f\x29\x60\x0d\x80\x3b\x29\x60\x35\x80\xbf\x62\xdc\xb2\xb4\xc1\xad\x8d\xdf\x4f\xa7\x81\xd7\x00\xbc\x94\x06\xee\x03\x30\x9d\x36\xb8\xd3\x69\xe0\x61\x00\xe7\xd3\xc0\x2a\x00\x57\xe3\xfa\x0f\x69\x60\x25\x80\x5f\xe2\xf8\xf7\xb4\xe9\xf7\x47\xcc\x67\x5b\xc0\x72\x00\xab\x2c\xc3\xb3\xc1\x32\xf9\x17\x2c\xe0\x31\x00\xdb\x2d\xa3\xfb\x6d\xcb\xdc\xf3\x2c\xc3\xf3\x7e\x8c\x3f\x15\xe7\xcf\xc5\xef\x6f\x2d\x60\xdb\x12\xe0\xfb\x38\x46\xc6\xe0\x56\xc6\xef\x27\x33\x46\x5f\x21\x03\xac\x03\x30\x92\x01\x36\x01\x98\x8c\xf3\x9f\x67\x4c\xff\x6f\x32\xe6\xfe\x8d\x0c\xb0\x17\xc0\x4f\x71\x7e\x8d\x0d\x3c\x08\x60\xbd\x0d\x14\x01\xbc\x68\x1b\xbf\xdf\xb1\x01\x0b\xc0\x27\xb6\xf1\xf1\xac\x0d\x0c\x69\x1e\xdb\xf8\x79\xdd\x36\xf7\x7f\x8e\xf3\xbf\xda\x46\xcf\x6f\x71\xfd\x4f\x1b\xc8\xeb\xbd\x65\x0d\xae\x94\x35\xf3\xef\xc9\x46\x23\x60\x22\x6b\xfa\xd4\xb2\xc0\x23\x00\x3e\xce\x9a\x7b\x97\xb3\x80\x5e\xb1\xce\xa5\xcd\xaa\xa3\x39\x56\xc6\x67\x7d\x57\xeb\x5a\x1e\xc7\x9a\x43\xcf\x95\x05\x70\x2f\x80\x47\x01\x3c\x00\xa3\xe5\x1e\x18\xaf\x75\x7f\xed\xb1\xd6\xb9\x16\x66\xaf\xfa\xb1\xb1\xf0\x49\xc5\x6f\xfd\xcd\x69\x4f\xb4\xde\x87\x06\xea\xda\x87\xd5\xbd\xa0\x2c\xc5\x84\x5b\xb5\x76\x70\xcf\x73\xfc\x24\x92\x22\x90\x9e\xd3\x0b\x5f\x75\x0e\xd7\xab\xfd\xe0\xa8\xe3\xc9\xa9\x9a\x23\xc2\x7f\x49\xb1\x29\x2e\xdc\x72\x52\xa8\xfb\x3c\x74\xa5\x60\x13\xd2\xaf\xf1\x04\xbf\x53\x94\x65\xa5\xdf\x6d\xa7\xef\xcb\x24\x18\xe1\x21\xf7\x92\xc0\x75\xbc\x4a\xc0\xdc\x1e\x01\x9b\xd0\x89\x43\x82\xd7\x9c\x52\x74\x2c\x1c\x3a\xca\xbd\xba\xf3\x4c\x14\x0c\x0f\x14\x86\x4d\x21\x21\xaa\x7b\x09\xe9\x2e\x47\x38\x7e\xbf\xc7\x2e\x4f\x1e\xe6\x1e\xf3\x64\x95\x79\x7a\x8e\x5e\x7e\xb7\x30\x3d\x5d\x29\xfa\xe0\x3d\x63\xaf\xef\xef\x9d\x47\x5d\xcf\x73\x03\xa7\x2c\x45\x25\x48\x72\xb2\x92\xf4\xdc\xcf\x85\x5c\x54\x3e\x30\x68\xce\x01\x5f\x56\xea\x65\xcd\xdf\xcb\x8c\x2d\x44\x8f\x4d\x4a\x3f\xf1\x6c\x2c\xe4\xe5\x23\xa1\xcf\xcb\xce\xdd\x52\xc7\x42\xdf\x15\xc9\x82\xc6\xdd\x9a\xb3\xc8\xf0\xf1\xf7\xa6\x12\x59\x6f\x71\x5f\x0c\xa0\x79\xa5\xc2\xb8\xf1\x35\x4e\xe5\x42\x7e\xd8\xf2\x64\xb5\xaa\x51\x07\x9d\x29\xe9\x87\xb9\xd1\xa0\xea\x56\x72\xdb\xeb\xd5\x20\x37\x2e\x8b\xac\xe2\x1c\x7d\xe5\x88\x3b\xc9\x6b\x72\x93\x5f\x1f\xda\xc7\x83\x30\x37\xee\x73\x11\x78\x3c\x94\x7e\x91\xed\x8d\x4a\x6c\xb4\xee\xf3\x9a\xac\x48\xb6\x65\x01\x7e\xeb\xd0\x3e\x2e\xaa\x75\x5e\x75\x72\xe3\x0e\xaf\x15\x59\x12\x17\xd9\xc1\x7a\x10\xb8\x5c\x0c\x8d\xee\x1e\xdd\x99\x7b\xd3\xf1\x03\x57\x8a\x22\x2b\x6c\xca\x0f\xed\x90\x22\x74\x44\x98\xd3\xa3\x14\x59\xe8\xbc\x1b\x3e\x3b\xe5\x71\x57\x6c\x66\xe5\x49\xee\x07\x4e\x58\x7a\x63\x7c\x24\xf7\x72\x1f\xa7\xf5\x4c\x38\x7e\x2e\xfa\xd8\x5c\x51\x2d\xb2\xa1\x03\x5e\xdd\xe7\x5e\x6e\x44\xfa\xb5\xa0\xc8\xc4\x54\x14\x06\xa5\xe7\x36\x33\x73\x2c\x89\xf5\x85\x7c\xa9\x54\x60\x1b\x36\x30\x7d\xcc\xaf\x2b\x15\x0a\x6c\x1b\xcb\xb3\x62\x14\x6f\x2d\x0d\xf7\x4a\x5b\x4a\xcf\xeb\xe3\x53\x11\x6c\x4b\x21\xcf\x8e\x1d\x33\x57\xb6\x96\x86\xf3\x1b\xd9\x36\x56\x60\x45\x36\xbc\x19\xf4\x05\x75\xa8\xad\x3e\xa4\x36\x35\x55\x83\xba\x6a\x1a\x74\x8e\xba\xd4\x51\xc7\xa9\x4b\xf3\xea\x34\xe8\x82\x6a\xd0\x3c\x35\x69\x8e\x6e\x52\x13\x74\x89\x9a\x74\x5d\x4d\x53\x93\xae\x50\x57\x35\x4c\xf2\x22\x35\x35\x8f\x0e\x58\x54\x5b\x88\x68\x83\x2e\x6b\x6e\xba\xa5\xbb\x30\x6a\x53\x47\x35\xa8\xa5\xa6\x69\x96\x9a\x9a\x9c\xd1\xac\x9a\xa6\x16\xdd\xa2\x96\xe6\x31\x1a\xe6\xa8\xad\xa6\xa9\x4b\xb3\xea\xa4\xa6\xd6\x4a\x3e\xa2\x36\x5d\x31\x2d\x2f\x47\x82\x9b\x5a\x23\x75\xd4\x29\xba\xa1\x55\x68\xc9\x67\x18\xcd\x32\xf5\x41\xbf\x1f\xb5\xfe\xff\x7f\x69\xb8\x7a\xc4\x17\xd4\x71\xea\x68\x25\x51\xa2\x05\x3a\x4b\xf3\xd4\xa5\x2b\x83\xed\x99\x3a\x61\xd4\xea\x11\xd4\x69\x16\x21\xae\xf6\x46\x30\xfe\xa8\x33\x91\xe1\x03\xe2\xb4\xf1\x5d\xea\xc4\x8d\xa2\xdf\x97\xbe\xa4\x36\xcd\xd3\x3c\xb5\xd5\x71\x6a\xd1\x4d\x75\x82\x3a\x34\xa7\x4e\x69\xeb\x5b\x74\x8d\xda\x74\x0b\xf4\x55\x44\xd8\x5d\x8c\x18\xd8\x03\x06\xfe\x5f\x9a\x59\x08\x9b\xa1\x2e\xdd\xd4\x1b\x52\x27\x23\xc3\x4d\xf7\x81\x5f\xf8\x3f\xce\x32\xa3\x1a\x51\x2a\x5e\xc8\xc0\x86\x17\xad\xf3\x6b\x6a\xd3\x6d\xd0\xc5\x28\x3b\xa7\x4e\xd0\xed\xe8\x74\x8d\xe6\x0c\x42\x7b\xfa\x69\xec\xe8\x2c\xb5\x55\x43\x37\xbd\x1d\xad\xa0\x05\x3a\x7f\x77\x77\x6a\xe1\x9f\x00\x00\x00\xff\xff\xd3\xb7\x0f\x8c\xbb\x08\x00\x00"

func localesRuLc_messagesConfigMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesConfigMo,
		"locales/ru/LC_MESSAGES/config.mo",
	)
}

func localesRuLc_messagesConfigMo() (*asset, error) {
	bytes, err := localesRuLc_messagesConfigMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/config.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesManagerMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\x31\x6b\x14\x5f\x14\xc5\x4f\xe6\x9f\x7f\xc4\x55\x44\x52\x58\x59\x5c\x8b\x04\x2d\x26\xce\xac\x16\x61\x76\x67\x57\xd4\x44\xc4\x5d\x09\x61\xb4\x7f\x64\x9f\x93\x21\xbb\x6f\x96\xf7\x66\x82\x42\x8a\x28\x58\x65\xc1\x4a\x14\x6c\x04\xbf\x40\x88\x2e\x8c\x98\x6c\x63\x65\x77\x5f\x69\x93\xce\xef\x21\xb3\x3b\x51\xbc\xcd\x39\x87\xfb\x7b\xef\xdc\xd3\xc5\xf9\xb7\x00\x70\x0e\xc0\x55\x00\x11\x80\x0b\x00\x46\x98\x4d\x01\xe0\x3c\x80\xaf\x00\xfe\x07\xf0\xbd\x62\x7f\x54\x6a\x01\xcc\x03\xf8\x09\x60\x01\xc0\x29\x80\xf6\x1c\xf0\x0b\xc0\x22\x80\x25\x07\xb8\x04\x60\xd5\x01\x2e\x02\x78\xe0\x00\x57\xca\x1e\x67\xc6\xef\x38\xc0\x65\x00\xda\x01\xe6\xaa\x4e\xa7\xfa\x7b\xbe\xca\x0b\x55\x77\x39\xff\x55\x8a\xfb\x72\x28\x55\x4f\xaa\x0c\x1d\xb9\x2b\xfb\xe8\xa4\x71\x2c\xb5\x99\x6a\xa2\x62\x3c\x16\x03\x89\x0d\xa1\x4b\x62\x53\x0e\x53\x9d\xb9\x5d\x13\x27\x3d\xf7\x6e\x1e\x1b\x37\x4a\x03\xea\xc9\xdd\x3b\x3b\xc9\xb6\x18\xa4\x2b\x3a\xaf\x75\x84\xc9\xdc\x48\x0b\x65\xfa\x22\x4b\x75\x40\x8f\xa6\x2b\xea\xe6\x5a\x0c\xd2\x5e\x4a\xcd\x7f\xf8\x56\xad\x23\x54\x9c\x8b\x58\xba\x91\x14\x83\x80\xfe\xe4\x80\x36\x73\x63\x12\xa1\x6a\xdd\x87\xdd\x35\xf7\xa9\xd4\x26\x49\x55\x40\xfe\x8a\x57\xbb\x97\xaa\x4c\xaa\xcc\x8d\x5e\x0c\x65\x40\x99\x7c\x9e\xdd\x1c\xf6\x45\xa2\x1a\xb4\xb5\x2d\xb4\x91\x59\xf8\x24\x5a\x77\x57\xff\x72\xe5\x3d\xcf\xa4\x76\xd7\xd4\x56\xda\x4b\x54\x1c\x50\x6d\xa3\x9f\x6b\xd1\x77\xd7\x53\x3d\x30\x01\xa9\xe1\x34\x9a\xf0\x56\x83\x66\x36\x54\x4b\xbe\x17\x86\x3e\x2d\x2f\x53\x69\xbd\x6b\xa1\xef\x53\x9b\x3c\x0a\xa6\xb9\x15\xd6\xcf\x56\xcd\xf0\x76\x69\xaf\x4f\xb1\xa6\xef\xd1\xde\xde\xec\x49\x2b\xac\x7b\x37\xa8\x4d\x3e\x05\x54\x6f\x80\xdf\xf1\x21\x1f\x71\x61\x5f\x72\xc1\xc7\xf6\xc0\xbe\x06\x7f\xb2\xfb\x3c\xe1\x23\x1e\xf3\x89\x1d\x81\x3f\xf0\x84\x3f\xf3\xd8\xee\xdb\x83\xb3\x50\x54\xc4\x21\x9f\x70\xc1\x63\xf0\x7b\x3e\xb6\x6f\xc0\x1f\x79\xc2\x5f\xb8\xb0\xaf\x78\xcc\xdf\xec\x08\xbf\x03\x00\x00\xff\xff\x11\x8e\xc8\xf5\x83\x02\x00\x00"

func localesRuLc_messagesManagerMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesManagerMo,
		"locales/ru/LC_MESSAGES/manager.mo",
	)
}

func localesRuLc_messagesManagerMo() (*asset, error) {
	bytes, err := localesRuLc_messagesManagerMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/manager.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/manager.html":      templatesViewsManagerHtml,
	"assets/js/manager.min.js":          assetsJsManagerMinJs,
	"locales/ru/LC_MESSAGES/config.mo":  localesRuLc_messagesConfigMo,
	"locales/ru/LC_MESSAGES/manager.mo": localesRuLc_messagesManagerMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"js": &bintree{nil, map[string]*bintree{
			"manager.min.js": &bintree{assetsJsManagerMinJs, map[string]*bintree{}},
		}},
	}},
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"config.mo":  &bintree{localesRuLc_messagesConfigMo, map[string]*bintree{}},
				"manager.mo": &bintree{localesRuLc_messagesManagerMo, map[string]*bintree{}},
			}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"manager.html": &bintree{templatesViewsManagerHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
