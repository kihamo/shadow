// Code generated by go-bindata.
// sources:
// templates/views/manager.html
// assets/js/manager.min.js
// locales/ru/LC_MESSAGES/config.mo
// locales/ru/LC_MESSAGES/manager.mo
// DO NOT EDIT!

package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsManagerHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x56\x4d\x6f\xe3\x36\x10\xbd\xe7\x57\x0c\xb8\x6e\x2d\x03\x89\x94\xe4\x54\x64\xad\x9c\x7a\xd8\x43\x5a\x14\xc5\xb6\xd7\x05\x2d\x8e\x6d\x1a\x34\xa9\x25\x69\x25\x86\xa0\xff\x5e\x90\x94\x2c\x59\xb5\x65\x79\xb1\x89\x2e\xe2\xd7\xcc\x7b\x9c\x79\x1c\xb2\x2c\x81\xe1\x92\x4b\x04\x92\x29\x69\x51\x5a\x02\x55\x75\x33\x67\xbc\x80\x4c\x50\x63\x52\xa2\xd5\x2b\x79\xbe\x01\x00\xe8\x8e\xbe\x7d\xcb\xa9\x44\x51\xcf\xfc\x7f\xd6\x72\x2b\xb0\x33\xeb\x57\xac\x1f\x9f\xcb\x12\xf8\xc3\x6f\x12\xc8\x8b\x5a\xad\x50\x1b\x02\x31\x54\xd5\x3c\x59\x3f\xf6\xd6\x76\xbc\x65\x02\xa9\x5e\xf2\x37\xf2\x3c\x4f\x18\x2f\x3a\x90\xbd\xee\x11\x83\x66\x3f\x3d\xbf\x4b\xa5\xb7\xa0\x95\xc0\x94\xb8\x26\x01\x9a\x59\xae\x64\x4a\x3e\x11\xd8\xa2\x5d\x2b\x96\x92\x5c\x19\x4b\x80\xb3\x94\x88\x9a\xe5\xb1\x93\x3e\x98\xa5\x0b\x81\x77\x1a\x4d\xae\xa4\xe1\x45\x7f\xdf\x07\x13\xbf\xee\xc8\x08\x82\xe9\x5a\x15\xa8\xeb\xb6\xb1\x9a\xe7\xc8\x80\xd9\x8e\x47\x90\xea\x55\xd3\x9c\x80\xb1\x7b\x47\xfd\x95\x33\xbb\x7e\x7a\xb8\xbf\xff\xe5\x0c\x56\xc0\x5b\x23\x65\x43\xf3\xfa\xfc\x64\xed\xa0\x4d\xd8\x5f\x54\x7b\x79\x84\x7c\xd9\xf5\x15\xa6\x7f\xd2\x2d\xfe\x90\xe1\x0b\x16\x28\x7e\xc8\xf2\x77\xcc\x51\xb2\x91\x84\xe7\xc9\x50\x24\x9c\xed\x85\x38\x2e\x14\xdb\x9f\x9f\x2f\x4b\x98\x70\xc9\xf0\x0d\x9e\x52\xb8\x77\xe7\x6b\x60\xa5\xa6\x72\x85\x30\xe1\xec\x16\x26\x41\x7d\xce\x2a\xae\x85\x78\xc1\xb8\x86\x49\x81\x32\xd6\x74\x1e\x86\x6c\x46\x48\x80\xf9\xa0\x2e\x01\xbf\x37\x84\xe2\x20\x05\x20\xae\x56\xfc\x2a\x17\x26\xff\x5c\x96\x80\xc2\x20\x54\x95\x63\x71\xbc\xcc\x8f\xa1\x64\x21\x0d\x03\x71\xec\xe0\x35\x2e\x9c\x72\xae\xb3\x2b\xc4\x37\x83\xf6\x62\xa4\x0f\x76\x06\x05\x66\xb6\x39\x94\xae\x24\xdc\xb9\xca\xa1\x95\x80\x30\xf5\x48\x40\xd2\x2d\xa6\xc4\xc7\xd7\xed\xa2\x5b\x1a\xee\xda\xa8\x57\xd5\xc0\x59\x6c\xbe\x36\xc3\xe2\xd6\xb3\x75\x4c\x27\xb1\x70\x42\x1f\xcc\xee\x11\x69\x95\xbb\x9a\x05\x05\x15\xbb\x9a\x98\x28\x44\xfc\xaf\xeb\x56\x15\x19\xe5\x23\x24\x95\x4a\x06\x91\xcf\x6c\x1d\xb7\xfb\x99\xef\x47\x4d\x02\xfc\x09\x9c\x75\xfc\xcf\xc6\x92\x6c\xbe\x10\x45\x64\x29\x69\x5a\xe3\x08\x76\x88\x1e\xd8\xa5\xc3\x6a\xee\x99\x05\xcd\x1d\x6a\x82\xdf\x83\x17\xd4\xc4\xdf\x76\x4b\xbe\x22\xe0\xd3\xc8\xe5\x8a\x78\x95\x85\xb8\x8e\xca\x62\x70\x7e\x59\x5f\x49\xd8\xf5\x65\x9f\x73\x93\x69\x9e\x5b\xb0\xfb\x1c\x53\x42\xf3\x5c\xf0\x8c\x3a\x3a\xc9\x86\x16\x34\x4c\x8e\x10\x98\xfb\x26\x11\x53\xd9\x6e\x8b\xd2\xce\x62\x8d\x94\xed\xa3\xe5\x4e\xfa\x6b\x0e\xa2\x19\x94\xa3\xc3\x3f\x89\xa6\x9f\x4e\xc8\x7c\x3a\x8b\x95\x8c\xa6\xf5\xf1\x78\x0a\xff\xe9\x2d\xb4\x20\x78\x0d\xca\x31\x92\x99\xce\x62\xb3\x5b\x6c\xb9\x8d\x66\x9f\x47\xfb\xa8\x46\xae\x1d\xb3\x6e\x9e\x84\x60\x5f\x28\x38\xd7\x96\xb2\xc3\x8d\x74\xb1\x9e\x0d\x5f\x47\x97\xb5\x37\x4f\x06\x2e\xa4\x79\xe2\x9f\x19\x27\x1e\x34\xc7\x8f\xa9\x30\xe4\xea\xe1\xc9\xf7\x56\xdd\xac\x7f\x2d\xa7\x9b\xce\x8b\xd2\xdd\x9a\xa4\x21\x5a\x96\x60\x2c\xb5\x3c\xfb\xf2\xf5\x8f\x17\x88\x42\xfb\x9f\xbf\x5f\x80\x24\x8c\x9a\xf5\x42\x51\xcd\x12\x6a\x0c\x5a\x93\x14\x28\x99\xd2\x26\x61\xd4\x52\xcf\xd6\xc4\x12\xed\xdd\xc2\x24\x99\x09\xa3\x5f\xc3\xe8\x42\x29\x6b\xac\xa6\x79\xbc\xe5\x32\xce\x8c\x21\xb0\xa4\xc2\xb4\x45\xea\x27\xa0\x2e\xf9\x1b\x32\xb7\x15\xd4\x0d\x03\x3f\xf4\xc5\x0f\x7d\x08\x85\xf6\x1d\xd8\x30\x68\x47\x86\x09\x9c\x4e\xcc\xc6\xfc\xc4\xb4\x24\x1b\x93\x6c\xbe\xef\x50\xef\xe3\x4e\x66\x1c\x97\xcd\x7b\xc4\x62\x61\x1c\xe0\x59\x0d\xbc\x0b\x66\x47\x02\x3d\xf0\xae\x12\xde\x0d\xbe\x4d\x76\x0f\xbd\xa3\x82\x0f\x00\xaf\x43\x7f\x56\x7a\x57\xc1\xd7\xd7\x6e\x03\xbe\x31\xc9\x96\x4a\xea\xea\xa4\x73\x63\xf5\xae\xa7\xdf\xff\x02\x00\x00\xff\xff\x6c\x6b\x67\xa7\xa9\x0e\x00\x00"

func templatesViewsManagerHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsManagerHtml,
		"templates/views/manager.html",
	)
}

func templatesViewsManagerHtml() (*asset, error) {
	bytes, err := templatesViewsManagerHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/manager.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsJsManagerMinJs = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x92\x41\x8f\xdb\x2e\x10\xc5\xbf\x4a\x96\x7f\x94\x80\x82\x88\x73\xf8\x4b\x15\x09\xd9\x43\xf7\x18\xa9\x52\xd5\x5b\xe4\xc3\x04\x26\x36\x5d\x16\x5c\xc0\x6b\x55\x91\xbf\x7b\x85\xbd\x6a\xd3\x6d\x7b\x1b\x31\xbf\x07\xf3\x78\xb3\xa4\x26\xe8\xfe\x05\x7d\x66\x22\x22\x98\xef\xf4\xda\x7b\x9d\x6d\xf0\x94\xdd\x5e\x21\x2e\x32\x5c\x1c\x9e\x42\xd3\x60\x4c\x6a\x49\xc9\x7f\x6e\xae\xe7\x06\x61\xe2\x09\x32\x7c\x29\x35\xbd\x75\xd0\xe0\x09\x7d\x93\x5b\xf9\x7f\xc5\x1d\xf8\xa6\x87\x06\xe5\xad\x8f\x4e\x92\xad\x81\xd4\x5e\x02\x44\xb3\x35\x90\x61\x92\xa7\xad\xdd\x7d\xf0\xe2\x6b\x0a\xfe\xd1\x05\x0d\x0e\x15\xd9\x0c\xd6\x9b\x30\x88\xd4\x82\x09\xc3\x69\x3a\x1d\x79\x88\x06\xa3\x3c\x9f\x2b\x4e\x20\x69\x52\xd7\x5c\x07\xd7\xbf\xf8\x27\xbc\x26\x79\xbe\xbd\xda\x64\x2f\x0e\xe5\xc3\x8e\x67\x88\x0d\xe6\x24\xab\xb1\xe6\x26\xc2\xf0\x11\x9c\xbb\x80\x7e\x96\x3f\x8d\x25\xcc\xd9\xfa\x26\xcd\x06\xa1\xb3\x2a\xb7\x36\x09\xe8\x2c\x65\x3c\x86\x21\x29\xe8\xac\x28\xc5\x6c\x49\x12\xdd\xc7\x88\x3e\x93\x91\x09\x1f\x0c\x26\xca\xb8\x83\x94\x95\xef\x9d\xdb\x17\x78\x1e\x86\x56\xfc\x4f\x41\x31\x4b\x99\x40\xd0\xed\xaf\xbf\x6d\x62\xe8\x3b\x6e\xe7\x09\x96\xf0\x39\x0c\x6a\x49\xcb\x8b\x4c\xe0\x37\x6a\xd9\xbe\x5c\xff\xa0\xd4\xc4\xad\x56\x74\x42\xc4\x05\xaf\x21\x22\x5d\x1f\x72\x5c\x68\x07\x29\x29\x32\x01\xe4\x78\xd8\x66\x73\x3c\x64\xb3\xd0\xc1\xa5\x0e\xbc\x22\xeb\xcd\xac\xd1\xad\x75\x26\xa2\xa7\x4c\xb8\x29\x9a\xcd\x9a\x1c\xd7\x9b\x49\xb7\x21\xb3\x6e\x9b\xe3\x91\xbc\x59\x9a\x1a\x6c\x64\xe3\xc8\xf6\xf7\xd9\x8b\xe0\x29\xd1\xce\xea\x67\xc2\x49\x8e\x62\x7e\x98\xbf\xdb\x96\x37\xdf\x9f\x4a\x5a\xea\x77\x79\x39\xa2\xec\x5c\xd5\xfb\x4a\x29\x75\x0f\x9e\xab\x7a\xb5\x9a\x62\x7d\xdf\xd8\xd5\x8f\x7f\xb9\xa4\x2c\x81\xc1\xb2\x05\x4c\x94\x84\x29\x93\xff\xa0\xe0\x1e\x1a\xd9\xc8\xf6\x3f\x02\x00\x00\xff\xff\x39\xed\x9a\x13\xf0\x02\x00\x00"

func assetsJsManagerMinJsBytes() ([]byte, error) {
	return bindataRead(
		_assetsJsManagerMinJs,
		"assets/js/manager.min.js",
	)
}

func assetsJsManagerMinJs() (*asset, error) {
	bytes, err := assetsJsManagerMinJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/js/manager.min.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesConfigMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\xdf\x8f\x13\x55\x1b\x7e\x68\xe7\x6b\xfb\xf5\xe3\xe3\xfb\xf8\x21\xfe\x84\x1c\x2e\x24\xa2\x0e\xb6\x5d\x89\x64\xd8\x82\xf2\x53\x84\x85\x0d\x5b\x35\xf1\x42\x72\x68\x67\xbb\x13\xa6\x73\x36\x33\x53\xa2\x09\x89\xcb\x62\x8c\x04\x12\x62\xfc\x11\x03\x0a\xac\xe1\xd6\x58\x96\x2d\x54\x76\x5b\xb8\x34\x31\x26\xef\x49\xf4\x96\x18\xaf\xfc\x03\x34\xdc\x78\x61\xce\x9c\xe9\x6c\x77\xf1\x42\xe7\x66\xce\xfb\xbe\xcf\x79\xde\xe7\x7d\xde\x99\xfb\x6b\x8c\x4f\x01\x60\x23\x80\xa7\x00\xac\x5c\x01\x6c\x01\xf0\xc7\x0a\x44\xcf\xb5\x14\xf0\x5f\x00\x33\x29\x60\x15\x80\x6f\x52\xc0\x4a\x00\xbd\x14\xb0\x06\xc0\xf7\x29\xe0\x31\x00\xf7\x53\xc0\x7a\x00\x0f\x62\xdc\xaa\xb4\xc6\x6d\x88\xdf\xcf\xa6\x81\x57\x01\xbc\x94\x06\xfe\x03\x60\x2a\xad\x71\x17\xd2\xc0\xa3\x00\x2e\xa7\x81\x75\x00\x6e\xc6\xf5\xef\xd2\xc0\x5a\x00\x3f\xc6\xf1\xaf\x69\xdd\xef\xb7\x98\x2f\x6b\x00\xab\x01\xac\x33\x34\xcf\x66\x43\xe7\xb7\x19\xc0\x93\x00\x76\x1b\x5a\xf7\xdb\x86\xbe\xe7\x1a\x9a\xe7\xbd\x18\x7f\x3e\xce\x5f\x8a\xdf\x5f\x1b\xc0\xc4\x0a\xe0\x5e\x1c\x6f\xc9\x68\xdc\x70\xfc\x3e\x94\xd1\xfa\xde\xca\x00\x9b\x00\x88\x0c\xb0\x15\xc0\x47\x71\xfe\x5e\x46\xf7\xff\x29\xa3\xef\xff\x92\x01\x0e\x01\xf8\x3d\xce\xbf\x92\x05\xfe\x0f\xe0\x48\x16\xb0\x00\x1c\xcf\x6a\xbf\x2f\x65\x01\x03\xc0\xed\xac\xf6\x71\x21\x0b\xe4\x15\x4f\x56\xfb\xf9\x73\x56\xdf\x7f\x10\xe7\x8d\x9c\xd6\xf3\xbf\x9c\xae\x6f\xcc\x01\x05\x35\x77\x4e\xe3\xc6\x73\x7a\xfe\x20\x07\x64\x00\x5c\xcc\xe9\x3e\x9f\xe5\x80\xc7\x95\xbf\xf1\xbd\x1f\x72\x80\x5a\xb1\xca\xa5\xf5\xaa\xa3\x39\xd6\xc6\x67\x75\x57\xe9\x5a\x1d\xc7\x8a\x43\xcd\x95\x03\xf0\x6f\x00\x4f\x28\x0d\xd0\x5a\xfe\x05\xed\xb5\xea\xaf\x3c\x56\x3a\x37\x40\xef\x55\x3d\x59\x2c\x7d\x52\xf1\x5b\x7d\x73\xca\x13\xa5\xf7\x91\x81\xba\xf2\x61\x7d\x3f\xa8\x0a\x6f\xdc\xa9\x1b\x7b\xb8\xeb\xda\x7e\x12\x09\x2f\x10\xae\xdd\x0f\xf7\xda\x27\x9a\xf5\xc5\xe0\x94\xed\x8a\xc9\x86\xed\x85\x7f\x91\x62\x93\xdc\x73\xaa\x49\xa1\xe9\xf3\xd0\x11\x1e\x1b\x17\x7e\x83\x27\xf8\x7d\x5e\x55\xd4\x16\xbb\xed\xf3\x7d\x91\x04\xfb\x79\xc8\xdd\x24\x70\x6c\xb7\x16\x30\xa7\x4f\xc0\xc6\x55\xe2\xb8\xc7\x1b\x76\x39\x3a\x16\x8f\x9f\xe2\x6e\xd3\x7e\x3e\x0a\x4a\x03\x85\x92\x2e\x24\x44\x4d\x37\x21\x3d\x60\x7b\xb6\xbf\xd8\xe3\x80\x2b\x4e\x70\x97\xb9\xa2\xce\x5c\x35\x47\x3f\x7f\xd0\xd3\x3d\x1d\xe1\x2d\x82\x5f\x1b\x3b\x7a\xa4\x7f\x1e\x71\x5c\xd7\x09\xec\xaa\xf0\x6a\x41\x92\x13\xb5\xa4\xe7\x11\xee\x89\x65\xe5\xd1\x41\x73\x46\x7d\x51\x6b\x56\x15\x7f\x3f\x33\xb6\x14\x3d\x36\x21\xfc\xc4\xb3\xb1\x90\x57\x4f\x86\x3e\xaf\xda\x0f\x4b\x1d\x0b\x7d\xc7\x4b\x16\x54\x71\x1a\xf6\x32\xc3\x2b\xef\x4e\x26\xb2\xde\xe4\xbe\x37\x80\xe6\xb5\x1a\xe3\xda\xd7\x38\x65\x86\xfc\x84\xe1\x8a\x7a\x5d\xa1\x8e\xd9\x93\xc2\x0f\xcd\x91\xa0\xee\xd4\xcc\xdd\xcd\x7a\x60\x56\x84\xc5\x6a\xf6\xa9\x97\x4f\x3a\x13\xbc\x21\xb6\xfa\xcd\xfc\xe8\xd1\x8a\xb9\xc7\xb7\x23\xab\xcc\xbd\x3c\xb4\x2d\x56\x2a\x14\xb7\x9b\x85\x21\xb3\x34\xc4\x4a\x43\xd6\xb6\x6d\xcf\x15\x86\x0a\x85\xfc\x61\x1e\x84\x66\xc5\xe7\x5e\xe0\xf2\x50\xf8\x16\x3b\x14\x71\xb0\x91\xa6\xcf\x1b\xa2\x26\xd8\xf0\x12\xe2\x9d\xf9\xc3\xdc\xab\x37\x79\xdd\x36\x2b\x36\x6f\x58\x2c\x89\x2d\x76\xac\x19\x04\x0e\xf7\xf2\x23\x07\x47\xf6\x99\x6f\xd8\x7e\xe0\x08\xcf\x62\xc5\xad\x85\xfc\x1e\xe1\x85\xb6\x17\x9a\x6a\x66\x8b\x85\xf6\x3b\xe1\x0b\x93\x2e\x77\xbc\x1d\xac\x3a\xc1\xfd\xc0\x0e\xcb\xaf\x57\xf6\x9b\xdb\x17\x71\x4a\xcf\xb8\xed\x9b\xd1\x57\xe9\x78\x75\x8b\xe5\x47\xdd\xa6\xcf\x5d\x73\xbf\xf0\x1b\x81\xc5\xbc\xc9\x28\x0c\xca\x43\x3b\x98\x3e\x96\xbd\xa7\x8b\x85\x72\xb9\xc8\x36\x6f\x66\xea\x58\xd8\x54\x2e\x16\xd9\x2e\x56\x60\x56\x14\xef\x2c\x97\xfa\xa5\xe1\xf2\x8b\xea\xf8\x4c\x04\x1b\x2e\x16\xd8\xe9\xd3\xfa\xca\xce\x72\xa9\xb0\x85\xed\x62\x45\x66\xb1\xd2\x0e\xd0\xe7\xd4\xa5\x8e\xfc\x80\x3a\xd4\x92\xd3\xd4\x93\x53\xa0\x4b\xd4\xa3\xae\x3c\x43\x3d\x9a\x97\x17\x40\x57\xe4\x34\xcd\x53\x8b\xe6\xe8\x0e\xb5\x40\xd7\xa8\x45\xb7\xe5\x14\xb5\xe8\x06\xf5\xe4\xb4\x4e\x5e\xa5\x96\xe2\x51\x01\x8b\x6a\x4b\x11\x1d\xd0\x75\xc5\x4d\x0b\xaa\x0b\xa3\x0e\x75\xe5\x34\xb5\xe5\x14\xcd\x52\x4b\x91\x33\x9a\x95\x53\xd4\xa6\x05\x6a\x2b\x1e\xad\x61\x8e\x3a\x72\x8a\x7a\x34\x2b\xcf\x29\x6a\xa5\xe4\x43\xea\xd0\x0d\xdd\xf2\x7a\x24\xb8\xa5\x34\x52\x57\x9e\xa7\x6f\x95\x0a\x25\xf9\x22\xa3\x59\x26\xdf\x5f\xec\x47\xed\x7f\xfe\x03\x6b\xae\x3e\xf1\x15\x79\x86\xba\x4a\x49\x94\x68\x83\x3e\xa6\x79\xea\xd1\x8d\xc1\xf6\x4c\x9e\xd5\x6a\xd5\x08\xf2\x02\x8b\x10\x37\xfb\x23\x68\x7f\xe4\xc5\xc8\xf0\x01\x71\xca\xf8\x1e\x75\xe3\x46\xd1\x7f\x4e\x5f\x50\x87\xe6\x69\x9e\x3a\xf2\x0c\xb5\xe9\x8e\x3c\x4b\x5d\x9a\x93\xe7\x95\xf5\x6d\xba\x45\x1d\x5a\x00\x7d\x19\x11\xf6\x96\x23\x06\xf6\x80\x81\x1f\x9d\x66\x96\xc2\x66\xa8\x47\x77\xd4\x86\xe4\xb9\xc8\x70\xdd\x7d\xe0\x5f\xff\x9b\xb3\xcc\xc8\xe9\x28\x15\x2f\x64\x60\xc3\xcb\xd6\xf9\x15\x75\xe8\x2e\xe8\x6a\x94\x9d\x93\x67\xe9\x6e\x74\xba\x45\x73\x1a\xa1\x3c\xfd\x24\x76\x74\x96\x3a\x72\x5a\x35\xbd\x1b\xad\xa0\x0d\xba\xfc\x70\x77\x6a\xe3\xcf\x00\x00\x00\xff\xff\xd7\x6f\x22\xe7\xe4\x08\x00\x00"

func localesRuLc_messagesConfigMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesConfigMo,
		"locales/ru/LC_MESSAGES/config.mo",
	)
}

func localesRuLc_messagesConfigMo() (*asset, error) {
	bytes, err := localesRuLc_messagesConfigMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/config.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesManagerMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\xbf\x6b\x14\x5f\x14\xc5\x4f\xe6\x9b\x6f\xc4\x55\x44\x52\x58\x59\x5c\x0b\x83\x22\x2f\xce\xec\x1a\x08\x2f\x99\x44\xcc\x0f\x10\x77\x63\x08\xa3\xfd\x23\xfb\x9c\x0c\xee\xbe\xb7\xbc\x99\x0d\x0a\x11\xa2\x60\x95\x80\x8d\xa2\x90\x46\xf0\x1f\x08\xd1\x85\x11\x93\x6d\xac\xec\xee\x94\x36\xe9\xfc\x3f\x64\x77\x27\x8a\xb7\x39\xe7\xf0\x3e\xef\xdc\x7b\x3a\x39\xfe\x0e\x00\xce\x01\xb8\x0a\x20\x02\x70\x01\xc0\x3e\x46\x93\x03\x38\x0f\xe0\x2b\x80\xff\x01\x7c\x2f\xd9\x1f\xa5\x16\x00\xc6\x01\xfc\x04\x30\x01\xe0\x14\xc0\xd6\x18\xf0\x0b\xc0\x24\x80\x35\x0f\xb8\x04\x40\x79\xc0\x45\x00\x1d\x0f\xb8\x02\xe0\x85\x37\xe2\xdf\x7a\xc0\x65\x00\x07\x1e\x30\x56\xee\xf4\xca\xee\xf1\x32\x4f\x94\xbb\x07\xf3\x5f\xa9\x58\xd6\x1d\x6d\x9a\xda\x64\xa8\xeb\x6d\xdd\x42\xdd\xc6\xb1\x76\xe9\x50\x13\x13\x63\x4d\xb5\x35\xd6\x95\x1b\x10\x1b\xba\x63\x5d\x26\x1a\x69\x9c\x34\xc5\xbd\x6e\x9c\x8a\xc8\x4a\x6a\xea\xed\xbb\x4f\x93\x2d\xd5\xb6\xd3\xae\x5b\x59\x7f\x18\x89\x25\xa7\x55\x96\x58\x23\x96\x55\xa6\x25\x55\xfd\x60\x56\xf8\x35\x51\xad\x51\xb5\x26\x67\x66\x6e\xf9\x35\xdf\xaf\xd4\x55\x9a\x89\xc8\x29\x93\xb6\x54\x66\x9d\xa4\x07\xc3\x0e\x6a\x74\x9d\x6a\xdb\xa6\xa5\xf9\x7f\x8a\x17\x2a\x75\x65\xe2\xae\x8a\xb5\x88\xb4\x6a\x4b\xfa\x93\x25\x6d\x74\xd3\x34\x51\xa6\xd2\xb8\xdf\x58\x11\x8f\xb5\x4b\x13\x6b\x24\x05\xd3\x7e\x65\xc9\x9a\x4c\x9b\x4c\x44\xcf\x3b\x5a\x52\xa6\x9f\x65\xb7\x3b\x2d\x95\x98\x39\xda\xdc\x52\x2e\xd5\x59\xf8\x28\x5a\x15\xb3\x7f\xb9\xc1\x3d\x4f\xb4\x13\x2b\x66\xd3\x36\x13\x13\x4b\xaa\xac\xb7\xba\x4e\xb5\xc4\xaa\x75\xed\x54\x92\xe9\x0c\x63\x1a\xd6\xe6\x68\x64\x43\x73\x3d\xf0\xc3\x30\xa0\xa9\x29\x1a\x58\xff\x5a\x18\x04\xb4\x48\x3e\xc9\x61\x5e\x08\xab\x67\x4f\xf3\xe1\x9d\x81\xbd\x31\xc4\xe6\x03\x9f\x76\x76\x46\x5f\x16\xc2\xaa\x7f\x93\x16\x29\x20\x49\xd5\x39\xf0\x7b\x3e\xe4\x23\xce\x8b\x97\x9c\xf3\x71\xb1\x57\xbc\x06\x7f\x2a\x76\xb9\xcf\x47\xdc\xe3\x93\x62\x1f\x7c\xc0\x7d\xfe\xcc\xbd\x62\xb7\xd8\x3b\x0b\x79\x49\x1c\xf2\x09\xe7\xdc\x03\x7f\xe0\xe3\xe2\x0d\xf8\x23\xf7\xf9\x0b\xe7\xc5\x2b\xee\xf1\xb7\x62\x1f\xbf\x03\x00\x00\xff\xff\x88\xcf\x80\x3d\xac\x02\x00\x00"

func localesRuLc_messagesManagerMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesManagerMo,
		"locales/ru/LC_MESSAGES/manager.mo",
	)
}

func localesRuLc_messagesManagerMo() (*asset, error) {
	bytes, err := localesRuLc_messagesManagerMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/manager.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/manager.html":      templatesViewsManagerHtml,
	"assets/js/manager.min.js":          assetsJsManagerMinJs,
	"locales/ru/LC_MESSAGES/config.mo":  localesRuLc_messagesConfigMo,
	"locales/ru/LC_MESSAGES/manager.mo": localesRuLc_messagesManagerMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"js": &bintree{nil, map[string]*bintree{
			"manager.min.js": &bintree{assetsJsManagerMinJs, map[string]*bintree{}},
		}},
	}},
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"config.mo":  &bintree{localesRuLc_messagesConfigMo, map[string]*bintree{}},
				"manager.mo": &bintree{localesRuLc_messagesManagerMo, map[string]*bintree{}},
			}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"manager.html": &bintree{templatesViewsManagerHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
