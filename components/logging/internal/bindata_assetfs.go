// Code generated by go-bindata.
// sources:
// templates/views/manager.html
// locales/ru/LC_MESSAGES/config.mo
// locales/ru/LC_MESSAGES/manager.mo
// DO NOT EDIT!

package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsManagerHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x56\x4d\x8f\xa3\x38\x10\xbd\xcf\xaf\x28\x79\xb2\x1b\x22\x75\xa0\xbb\x4f\xab\x1e\xe8\xdb\x4a\x73\xe8\xdd\xc3\x6a\x76\xaf\x23\x07\x57\x82\x23\x63\x33\xb6\x43\x77\x84\xf8\xef\x2b\x63\x08\x84\x86\x24\x87\xe9\xf1\x21\xf1\x57\x55\xbd\x7a\xf5\x28\xa8\x2a\x60\xb8\xe5\x12\x81\xa4\x4a\x5a\x94\x96\x40\x5d\x7f\x8a\x19\x2f\x21\x15\xd4\x98\x84\x68\xf5\x4a\x9e\x3f\x01\x00\x0c\x77\xdf\xbe\x17\x54\xa2\x68\x4f\xde\x9f\x5a\x6e\x05\x0e\x4e\x9b\x1b\xd9\xe3\x73\x55\x01\x7f\xf8\x43\x02\x79\x51\xbb\x1d\x6a\x43\x20\x84\xba\x8e\xa3\xec\x71\x74\x77\xe0\x2d\x15\x48\xf5\x96\xbf\x91\xe7\x38\x62\xbc\x1c\x84\x1c\x2d\xcf\x10\x74\xf9\x9c\xfb\x75\xf1\xb7\x10\xa2\xd6\x4a\xbb\x4c\x61\x34\x86\x3e\xa8\x40\x6d\xa1\xf9\x5d\x33\x2a\x77\xa8\xbb\x05\x37\x39\x37\x86\x6e\xde\xa5\x78\x72\xb3\x39\x58\xab\x24\xd8\x63\x81\x09\xf1\x0b\xd2\xe7\xa3\x0c\x12\x60\xd4\xd2\xce\x55\x1b\x8c\x00\xd5\x9c\xae\x33\xce\x18\xca\x84\x58\x7d\x40\xf2\xfc\xbb\xe5\x39\x9a\x2f\x71\xe4\xdd\xbc\x0f\x58\x55\x6d\x42\xe1\x9f\xb3\x69\x9d\x33\xd5\x5a\xa1\x64\xe3\xcb\xf1\x56\xe9\x1c\xb4\x12\x98\x10\x37\x25\x40\x53\xcb\x95\x4c\xc8\x67\x02\x39\xda\x4c\xb1\x84\x14\xca\x58\x02\x9c\x25\x44\x74\x55\x6c\x53\xb3\x8e\x93\xb5\x46\x53\x28\x69\x78\x39\x45\x4f\xdc\xdc\x39\x33\x00\x6f\x96\xa9\x12\x75\x3b\x37\x56\xf3\x02\x59\x43\x92\xbf\xc3\xec\xc0\x2f\x48\xf5\xaa\x69\x41\xc0\xd8\xa3\x83\xfa\xca\x99\xcd\x9e\x1e\xee\xef\x7f\x9b\x2b\x88\xcd\x90\xb2\xb9\x33\x3d\x7d\xd0\x1a\xf6\xa2\xfd\x9b\xe6\xd8\x29\xd6\x66\x37\x1a\xbd\x60\x89\xe2\x9a\x55\x1c\xcd\x81\x70\x36\x17\xa0\x6f\x14\x3b\x4e\x9f\x55\x15\x2c\xb8\x64\xf8\x06\x4f\x09\xdc\x4f\xa9\xa2\xbd\xa5\x9d\xb6\x61\xc1\xd9\x1d\x2c\x7c\x41\x9d\x45\xd8\xd6\xf6\x82\x61\xeb\x3e\x01\xca\x58\xb7\x78\x98\xbb\x7f\x85\x65\xe6\x08\x6b\xc3\x87\x8e\x67\x4f\xd7\x4c\xde\x67\x36\xa5\xf8\x6e\xd0\x5e\xcc\xf2\x64\x63\x50\x60\x6a\x3b\xf5\x39\x85\xaf\x5d\xa3\xd0\x4a\x80\x3f\x7a\x24\x20\x69\x8e\x09\x69\xf2\x73\xcf\xc7\x50\xe9\xeb\x3e\xeb\xba\x9e\x91\xda\x7b\x66\xc5\x5d\x83\xd2\x21\x5c\x84\xc2\xc9\x61\x96\xd5\x33\xb0\xaa\x70\x8f\x1e\x94\x54\x1c\x5a\x40\xa2\x14\xe1\x7f\x6e\x59\xd7\xe4\xaa\xbd\xef\x75\x54\x32\x08\xf0\x47\xcf\xd3\xfd\xaa\x59\x07\x1d\xd9\x8d\x3e\x57\x03\xdf\xab\x5b\xc0\x75\xc3\xb3\x86\x2c\x21\xdd\xec\x3a\xb0\x01\xc0\x13\xaa\x64\x5e\x39\x23\x13\xdf\xb5\x4e\xcf\x57\x83\xbb\x11\xcc\xa2\x79\x89\x6d\xf9\x8e\x40\x53\x2e\x2e\x77\xa4\x51\x91\xe7\xf1\x6a\xb5\x26\xda\xe1\x78\xc4\x91\xcf\xf2\xb2\xaf\xd8\xa4\x9a\x17\xb6\xed\xfe\xb4\x28\x04\x4f\xa9\x83\x10\xed\x69\x49\xfd\xe1\x15\xf1\xb8\xb1\x08\x98\x4a\x0f\x39\x4a\xbb\x0a\x35\x52\x76\x0c\xb6\x07\xd9\x74\x63\x08\x56\x50\xdd\x44\xf3\x22\x58\x7e\x9e\x90\xee\x72\x15\x2a\x19\x2c\x5b\xc9\x3f\xf9\xff\xe5\x1d\xf4\x01\xf0\xd6\x08\x6e\xa4\x4a\x1a\x25\xd0\xb5\x8c\x00\x57\x5f\x6e\xb6\xeb\xd1\x99\xe5\x2a\x34\x87\x4d\xce\x6d\x70\xa3\x7d\x7d\xc3\xbd\x6b\x77\xe2\xc8\x17\xe3\x42\x93\x99\x6d\x41\xf3\x1d\xfb\xb2\x94\xe2\x68\xa6\x67\xc7\x51\xf3\xa2\x1b\x7d\x07\x45\xae\x47\x4d\x7e\xf2\xb4\xd3\xf6\xaf\x0f\xfa\x69\xf0\x51\xe7\xde\x1c\xa4\x43\x52\x55\x60\x2c\xb5\x3c\xfd\xfa\xed\xaf\x17\x08\xfc\xfc\xdf\x7f\x5e\x80\x44\x8c\x9a\x6c\xa3\xa8\x66\x11\x35\x06\xad\x89\x4a\x94\x4c\x69\x13\x9d\xde\xbf\x26\x94\x68\xd7\x1b\x13\xa5\xc6\xef\x7e\xf3\xbb\x1b\xa5\xac\xb1\x9a\x16\x61\xce\x65\x98\x1a\x43\x60\x4b\x85\xe9\x9b\xc8\x4f\x88\xba\xe5\x6f\xc8\x5c\x2a\xa8\x3b\x04\xcd\xd6\xd7\x66\xeb\x97\x40\xe8\x3f\x3d\x3a\x04\xfd\xce\x65\x00\xd3\x85\xd9\x9b\x9f\x58\x96\x68\x6f\xa2\xfd\x8f\x03\xea\x63\x38\xa8\x8c\xc3\xb2\xff\x08\x2e\x36\xc6\x05\x9c\xd5\xc0\x87\xc4\x1c\x48\x60\x14\x7c\xa8\x84\x0f\x0b\xdf\x17\x7b\x14\x7d\xa0\x82\x5f\x10\xbc\xa5\x7e\x56\x7a\xfb\x69\xe5\xfd\x1f\x00\x00\xff\xff\xed\x66\x44\x3a\xe6\x0d\x00\x00"

func templatesViewsManagerHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsManagerHtml,
		"templates/views/manager.html",
	)
}

func templatesViewsManagerHtml() (*asset, error) {
	bytes, err := templatesViewsManagerHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/manager.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesConfigMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\x4d\x8c\x53\x55\x18\x3d\xb4\xb5\xad\x55\x54\x40\x41\xfc\xcb\x65\x01\x42\xf0\x61\xdb\x91\x48\xca\x14\x8c\xc3\x8f\x08\x03\x13\xa6\xea\xc6\x84\x5c\xda\x37\x9d\x17\x5e\xef\x6d\xde\x7b\x45\x8d\x2c\x86\xc1\x18\x11\x12\x34\xc1\x44\x8d\x80\x28\x6b\x53\x86\x29\x56\x86\x76\x36\xae\xcd\x77\x8d\x0b\x57\x26\x26\x26\x6e\xd8\xbb\x30\x31\xe6\xbe\xfb\xfa\xa6\x33\xba\xd0\x6e\xfa\xfd\x9c\x7b\xbe\x73\xcf\xf7\xee\x2f\x6b\x53\x9f\x00\xc0\xd3\x00\x9e\x02\x90\x5a\x05\x6c\x03\x70\x6f\x15\xc2\xdf\x47\x09\x60\x35\x80\x8f\x13\xc0\x43\x00\xae\x25\x80\x07\x01\x7c\x93\x00\xd6\x02\x58\x48\x00\x8f\x03\xf8\x21\x01\xac\x07\xf0\x7b\x84\xfb\x2b\xc2\xad\x4e\x9a\xff\x27\x92\xc0\x2b\x00\x9e\x4d\x02\x0f\x00\x68\x26\x0d\xee\x4c\x12\xd8\x00\xe0\x42\x12\x78\x14\xc0\xd7\x51\xbf\x9b\x04\xd6\x01\xf8\x3e\xca\x7f\x4e\x9a\x79\xbf\x45\x7c\x7f\x24\x81\x35\x5a\x6f\xca\xf0\xac\x4f\x99\xfa\xe6\x14\xf0\x24\x80\x62\xca\xe8\x3e\x9a\x32\xe7\xde\x4c\x19\x1e\x19\xe1\xdf\x8d\xea\x1f\xa6\x80\xe9\x55\xc0\x95\x28\x4f\xa7\x4d\x7f\x63\xf4\xbf\x35\x6d\x74\xbd\x98\x06\x36\x01\x38\x92\x06\x76\x00\x10\x51\xfd\x4a\xda\xcc\x9d\x4b\x9b\xf3\x8b\x69\xe0\x30\x80\x1f\xa3\xfa\x33\x19\xe0\x11\x00\xdb\x33\x40\x09\xc0\x68\xc6\xf8\xfc\x56\x06\x48\x01\xb8\x9c\x31\xfe\x7d\x96\x01\x72\x9a\x27\x63\x7c\xec\x65\xcc\xf9\x9f\xa2\xfa\xaf\x19\xa3\xe7\x5e\xd4\xff\x33\x03\xe4\x01\xac\xcd\x1a\xdc\x58\xd6\xdc\x7b\x22\x0b\xa4\x01\xb8\x59\x33\xc7\xcf\x02\x1b\xf5\x1e\xb3\x80\x5e\xa9\x8e\x93\x66\xb5\xa1\xfe\x75\x51\xac\xcf\x68\x3d\x6b\xa2\x5c\x9f\xd5\xf7\xc9\x02\xb8\x5f\xef\x0f\xc0\xc3\x30\x1a\xee\x83\xf1\x56\xcf\xd5\x9e\xe6\xa2\xef\x67\x43\x74\x36\x83\xe5\xbf\xc4\x50\xac\xbd\xd0\x3a\x1f\x1b\xaa\xe9\xfb\xaf\x1f\x24\x55\x29\xa6\x9c\x7a\x6a\x8c\xbb\xae\xed\xc5\x99\x14\xbe\x74\xed\x41\xba\xcf\x3e\xd9\xaa\x2f\x25\xa7\x6d\x57\x36\x1b\xb6\x08\xfe\xa5\xc4\x9a\x5c\x38\xd5\xb8\xd1\xf2\x78\xe0\x48\xc1\xa6\xa4\xd7\xe0\x31\x7e\xbf\xa8\xca\xda\xd2\xb4\xfd\x9e\x27\xe3\xe4\x00\x0f\xb8\x1b\x27\x8e\xed\xd6\x7c\xe6\x0c\x08\xd8\x94\x2e\x9c\x10\xbc\x61\x97\xc3\xb0\x70\xe2\x34\x77\x5b\xf6\x73\x61\x52\x1c\x6a\x14\x4d\x23\x26\x6a\xb9\x31\xe9\x41\x5b\xd8\xde\xd2\x8c\x83\xae\x3c\xc9\x5d\xe6\xca\x3a\x73\xf5\x3d\x06\xf5\x43\xc2\xcc\x74\xa4\x58\x02\xbf\x3a\x79\xec\xe8\x20\x1e\x77\x5c\xd7\xf1\xed\xaa\x14\x35\x3f\xae\xc9\x5a\x3c\xf3\x28\x17\x72\x45\x7b\x62\xd8\x9c\x09\x4f\xd6\x5a\x55\xcd\x3f\xa8\x4c\x2e\x47\x4f\x4e\x4b\x2f\xf6\x6c\x32\xe0\xd5\x53\x81\xc7\xab\xf6\x3f\xa5\x4e\x06\x9e\x23\xe2\x05\x55\x9c\x86\xbd\xc2\xf0\xca\x3b\xcd\x58\xd6\x1b\xdc\x13\x43\x68\x5e\xab\x31\x6e\x7c\xc5\x71\xbb\x29\xbd\xc0\x1a\xf7\xeb\x4e\xcd\x7a\xb9\x55\xf7\xad\x8a\x2c\xb1\x9a\x7d\xfa\xa5\x53\xce\x34\x6f\xc8\x1d\x5e\x2b\x37\x71\xac\x62\x8d\x79\x76\xe8\x8b\xb5\x8f\x07\x76\x89\x15\xf3\x85\x5d\x56\x7e\xc4\x2a\x8e\xb0\xe2\x48\x69\xe7\xce\xed\xf9\x91\x7c\x3e\x77\x84\xfb\x81\x55\xf1\xb8\xf0\x5d\x1e\x48\xaf\xc4\x0e\x87\x1c\x6c\xbc\xe5\xf1\x86\xac\x49\x36\xba\x8c\x78\x4f\xee\x08\x17\xf5\x16\xaf\xdb\x56\xc5\xe6\x8d\x12\x8b\xf3\x12\x3b\xde\xf2\x7d\x87\x8b\xdc\xf8\xa1\xf1\xfd\xd6\xeb\xb6\xe7\x3b\x52\x94\x58\x61\x47\x3e\x37\x26\x45\x60\x8b\xc0\xd2\x17\x2c\xb1\xc0\x7e\x3b\x78\xbe\xe9\x72\x47\xec\x66\xd5\x69\xee\xf9\x76\x50\x7e\xad\x72\xc0\xda\xb5\x84\xd3\x7a\xa6\x6c\xcf\x0a\x3f\x41\x47\xd4\x4b\x2c\x37\xe1\xb6\x3c\xee\x5a\x07\xa4\xd7\xf0\x4b\x4c\x34\xc3\xd4\x2f\x8f\xec\x66\x26\x2c\x8b\xcd\x85\x7c\xb9\x5c\x60\x5b\xb6\x30\x1d\xe6\x37\x95\x0b\x05\xb6\x97\xe5\x59\x29\xcc\xf7\x94\x8b\x83\xd6\x68\xf9\x05\x1d\x6e\x0d\x61\xa3\x85\x3c\x3b\x73\xc6\x1c\xd9\x53\x2e\xe6\xb7\xb1\xbd\xac\xc0\x4a\xac\xb8\x1b\xf4\x29\xf5\xa8\xab\xde\xa7\x2e\xb5\xd5\x2c\xf5\xd5\x0c\xe8\x73\xea\x53\x4f\x9d\xa5\x3e\x2d\xa8\x8b\xa0\xab\x6a\x96\x16\xa8\x4d\xf3\x74\x87\xda\xa0\x2f\xa9\x4d\xdf\xaa\x19\x6a\xd3\x4d\xea\xab\x59\x53\xbc\x46\x6d\xcd\xa3\x13\x16\xf6\x96\x23\xba\xa0\x1b\x9a\x9b\xee\xea\x29\x8c\xba\xd4\x53\xb3\xd4\x51\x33\x34\x47\x6d\x4d\xce\x68\x4e\xcd\x50\x87\xee\x52\x47\xf3\x18\x0d\xf3\xd4\x55\x33\xd4\xa7\x39\x75\x5e\x53\x6b\x25\x1f\x50\x97\x6e\x9a\x91\x37\x42\xc1\x6d\xad\x91\x7a\xea\x02\x7d\xa7\x55\x68\xc9\x97\x18\xcd\x31\xf5\xde\xd2\x3c\xea\xfc\xff\xd7\x6a\xb8\x06\xc4\x57\xd5\x59\xea\x69\x25\x61\xa1\x03\xba\x45\x0b\xd4\xa7\x9b\xc3\xe3\x99\x3a\x67\xd4\xea\x2b\xa8\x8b\x2c\x44\xdc\x1a\x5c\xc1\xf8\xa3\x2e\x85\x86\x0f\x89\xd3\xc6\xf7\xa9\x17\x0d\x0a\x1f\x35\x7d\x41\x5d\x5a\xa0\x05\xea\xaa\xb3\xd4\xa1\x3b\xea\x1c\xf5\x68\x5e\x5d\xd0\xd6\x77\xe8\x36\x75\xe9\x2e\xe8\x4a\x48\xd8\x5f\x89\x18\xda\x03\x86\x5e\x35\x5d\x5f\x0e\xbb\x4e\x7d\xba\xa3\x37\xa4\xce\x87\x86\x9b\xe9\x43\x0f\xfb\x3f\xde\xe5\xba\x9a\x0d\x4b\xd1\x42\x86\x36\xbc\x62\x9d\x5f\x51\x97\x16\x41\xd7\xc2\xea\xbc\x3a\x47\x8b\x61\x74\x9b\xe6\x0d\x42\x7b\x7a\x39\x72\x74\x8e\xba\x6a\x56\x0f\x5d\x0c\x57\xd0\xc1\xdf\x01\x00\x00\xff\xff\x8a\xb3\xdb\x4c\xaa\x08\x00\x00"

func localesRuLc_messagesConfigMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesConfigMo,
		"locales/ru/LC_MESSAGES/config.mo",
	)
}

func localesRuLc_messagesConfigMo() (*asset, error) {
	bytes, err := localesRuLc_messagesConfigMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/config.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesManagerMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\x4f\x6b\x13\x4f\x1c\xc6\x9f\xe6\x97\x9f\xc2\xa2\x1e\x3c\x78\xf2\xf0\xf5\x60\xb1\xc8\xd4\xd9\x8d\x85\x32\xc9\xa6\xc5\xfe\x01\x31\xd1\x52\x56\xef\x43\x33\x6e\x16\x37\x33\x61\x66\xb6\x28\xf4\xd0\xa3\xa2\xd0\x93\x28\x78\xf0\xa0\x2f\x40\x94\x40\x0f\xb6\xaf\x61\xf2\x06\x7c\x2d\x92\x64\xab\x38\x87\x79\x9e\x67\xbe\xcf\x7c\xf8\xfe\xba\xde\x7c\x0f\x00\xff\x03\xb8\x09\x60\x1b\xc0\x65\x00\x25\x16\xe7\x75\x3d\x7b\x53\xbf\x9f\xd4\xfa\x01\x40\x13\xc0\x67\x00\xc3\x25\xe0\x2b\x80\x6b\x00\xae\x36\x80\x2b\x33\x56\x03\xb8\x01\x60\xa5\x01\x5c\x02\xb0\xd9\x00\x96\x6a\x56\xb3\x66\xff\x57\x6b\x63\x76\xf5\xd4\xa1\x2a\xd1\x33\x79\xae\xac\x9b\x6b\xa1\x73\x3c\x96\x23\x85\x7d\x35\x36\xd6\xb3\xbe\xcb\x8b\x01\x7b\x50\xe5\x8e\x65\x46\xd0\x40\x1d\x6e\xbe\x28\x86\x72\x64\x56\x6d\x15\xed\x3d\xc9\xd8\x96\x55\xd2\x17\x46\xb3\x6d\xe9\x95\xa0\x84\xc7\xeb\x8c\xb7\x58\xd2\xa2\xa4\x25\xd6\xd6\xee\xf2\x16\xe7\x51\x4f\x3a\xcf\x32\x2b\xb5\x2b\xa5\x37\x56\xd0\xa3\x39\x83\xfa\x95\x95\x23\x33\x30\xd4\xf9\x07\xdc\x8d\x7a\x52\xe7\x95\xcc\x15\xcb\x94\x1c\x09\xfa\x93\x05\xed\x57\xce\x15\x52\x47\xfd\x87\xfd\x1d\xf6\x4c\x59\x57\x18\x2d\x28\x5e\xe5\xd1\x96\xd1\x5e\x69\xcf\xb2\x57\x63\x25\xc8\xab\x97\xfe\xde\xb8\x94\x85\x6e\xd3\xc1\x50\x5a\xa7\x7c\xfa\x34\xdb\x65\xeb\x7f\x7b\xb3\x7d\x9e\x2b\xcb\x76\xf4\x81\x19\x14\x3a\x17\x14\xed\x95\x95\x95\x25\xdb\x35\x76\xe4\x04\xe9\xf1\x3c\xba\xb4\xd5\xa6\x85\x4d\xf5\xed\x98\xa7\x69\x4c\xcb\xcb\x34\xb3\xfc\x56\x1a\xc7\xb4\x41\x9c\xc4\x3c\x77\xd3\xe4\x62\xd4\x49\xef\xcf\xec\x9d\x79\xad\x13\x73\x3a\x3a\x5a\x7c\xe9\xa6\x09\x5f\xa1\x0d\x8a\x49\x50\xd2\x46\xf8\x32\x3d\x0e\xe7\xe1\x7b\x98\x84\xb3\xe9\x3b\x84\x4f\xe1\x3c\xfc\x08\x93\xe9\xf1\xf4\xed\x45\x38\xad\x1b\xdf\xc2\x59\x38\x0d\x13\x84\x8f\xe1\xe7\xf4\x04\xbf\x03\x00\x00\xff\xff\x9a\xce\x88\x76\x47\x02\x00\x00"

func localesRuLc_messagesManagerMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesManagerMo,
		"locales/ru/LC_MESSAGES/manager.mo",
	)
}

func localesRuLc_messagesManagerMo() (*asset, error) {
	bytes, err := localesRuLc_messagesManagerMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/manager.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/manager.html":      templatesViewsManagerHtml,
	"locales/ru/LC_MESSAGES/config.mo":  localesRuLc_messagesConfigMo,
	"locales/ru/LC_MESSAGES/manager.mo": localesRuLc_messagesManagerMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"config.mo":  &bintree{localesRuLc_messagesConfigMo, map[string]*bintree{}},
				"manager.mo": &bintree{localesRuLc_messagesManagerMo, map[string]*bintree{}},
			}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"manager.html": &bintree{templatesViewsManagerHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
