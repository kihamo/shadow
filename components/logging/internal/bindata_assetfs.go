// Code generated by go-bindata.
// sources:
// locales/ru/LC_MESSAGES/config.mo
// DO NOT EDIT!

package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _localesRuLc_messagesConfigMo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x52\x4d\x6c\x1b\x45\x14\xfe\xec\xd8\x01\xcc\x6f\x02\x87\x22\x40\x9a\x1e\x52\x81\x60\xc3\xda\xa1\x52\xb5\x89\x53\x44\xda\x40\x69\x42\xa3\xd6\xc0\xb1\x1a\xbc\x13\x67\xd5\xf5\x8c\xb5\x3f\x11\x88\x1e\xd2\x14\x21\x7e\x2a\x2a\x21\x10\x08\x89\x06\x09\x6e\x70\x70\x42\x5c\x0c\x89\x5d\xb8\x71\x7c\x7b\xe8\x11\x84\xc4\x81\x2b\x47\x8e\x68\x76\xd6\x8e\x83\x38\xc0\x5c\xf6\x7d\xef\xcd\xfb\xde\xf7\xbe\x9d\x5f\x27\x0b\x1f\x03\xc0\x83\x00\x1e\x05\xb0\x0b\xe0\x31\x00\x4b\x39\xa4\xe7\xc7\x1c\x70\x1f\x80\x9f\x72\xc0\x3d\x00\x28\x07\x4c\x02\xf8\x25\x07\x1c\x01\xf0\x67\x56\xbf\x2b\x6f\xea\x47\xb2\xef\x54\x1e\x78\x01\x40\x25\x6f\xea\x6f\xe6\x81\x87\x00\xbc\x97\x07\xee\x06\xb0\x95\x07\x1e\x00\xf0\x75\x86\xf7\xb3\xbe\x9f\xf3\xc0\x04\x80\xdb\x79\xe0\x11\x00\x7f\x64\xfd\x63\x63\x66\xee\xe4\x18\xb0\x96\x03\xa6\xc6\x4c\xfe\x83\x82\xf9\x7e\x5e\x30\xfc\xdf\x14\x80\xa3\x5a\x6f\x86\x7f\x2f\x18\xde\xbf\x0a\xa6\xbf\x58\x04\xce\x6a\x9d\x45\x33\xdf\x2d\x9a\xbd\xe3\x22\x50\x00\xf0\x61\x11\x98\x02\xf0\x49\x11\x28\x01\xe8\x15\x33\x5d\x19\xbe\x5d\x04\x6c\x00\xbf\x65\x7d\x13\xe3\xc0\xc3\x00\xa6\xc7\x01\x6d\xd9\x84\xb1\x0d\x45\x18\x3e\x7d\xee\x80\x99\x35\x38\x77\x8e\xc4\xda\x77\xad\xbf\x94\xe1\x71\x18\x9d\xfa\x68\x5f\xee\x05\x70\x7f\x86\xc7\xb2\x6f\x5e\xfb\x0d\xa3\x0b\x75\x25\x57\xbd\x46\x61\x41\xc9\x50\xf9\x62\x00\x4f\x89\xd7\xe2\xc6\x01\x58\x17\xbe\x6a\x35\x85\x8c\xfe\x25\xc5\x5a\x5c\x7a\xf5\x41\xe1\xb4\xac\x2b\x57\x04\x43\x18\x04\x6a\x08\x16\x79\xc4\xfd\x21\xf0\x84\xef\x86\xcc\x93\x6c\x55\x05\x4d\x1e\xb1\x55\x9d\xb8\x28\x79\x53\x54\xd3\xb0\x7c\x71\x9d\xfb\xb1\x78\x2a\x05\x95\x91\x42\xc5\x14\x06\x44\xcf\x0b\x29\x82\x03\xde\x33\xd2\xf0\x79\x4a\x1e\x24\x5f\xbc\x70\xee\xa5\x41\xbc\xa4\x1a\xcc\xd7\xf2\x07\x89\x65\xe5\x0e\xc9\x56\x46\x77\x59\x09\x94\x1b\xd7\x35\xd3\x20\x73\x21\xe2\xf5\x4b\x51\xc0\xeb\x82\xf9\xff\xa4\x79\x95\x07\xd2\x93\x43\xd3\xb8\xeb\x32\x6e\x96\xc2\x79\xd1\x52\x41\x64\x2d\x87\x0d\xcf\xb5\x9e\x8b\x1b\xa1\x55\x53\x0e\x73\xc5\xfa\xb3\x97\xbc\x35\xde\x54\xd3\x41\x5c\x5a\x39\x57\xb3\x16\x02\x91\x0a\xb7\x4e\xf1\x48\x38\xac\x62\x97\x4f\x58\xf6\x8c\x55\x99\x61\x95\x19\xe7\xf8\xf1\x27\xed\x19\xdb\x2e\x2d\xf1\x30\xb2\x6a\x01\x97\xa1\xcf\x23\x15\x38\xec\x6c\xca\xc1\x96\xe3\x80\x37\x95\xab\xd8\xdc\x21\xe2\xf9\xd2\x12\x97\x8d\x98\x37\x84\x55\x13\xbc\xe9\xb0\x21\x76\xd8\xf9\x38\x0c\x3d\x2e\x4b\xcb\x67\x96\x4f\x5b\xaf\x88\x20\xf4\x94\x74\x58\x79\xda\x2e\x2d\x28\x19\x09\x19\x59\xb5\x37\x5a\xc2\x61\x91\x78\x3d\x7a\xba\xe5\x73\x4f\xce\xb2\xfa\x1a\x0f\x42\x11\x55\x5f\xae\x2d\x5a\x27\x0e\xee\x69\x3d\xab\x22\xb0\xd2\xff\xef\xc9\x86\xc3\x4a\x2b\x7e\x1c\x70\xdf\x5a\x54\x41\x33\x74\x98\x6c\xa5\x30\xac\xce\xcc\x32\x13\x56\xe5\x54\xd9\xae\x56\xcb\xec\xd8\x31\xa6\x43\xfb\x68\xb5\x5c\x66\x27\x99\xcd\x9c\x14\xcf\x57\x2b\x83\xd2\x5c\xf5\x19\x1d\x3e\x9e\x5e\x9b\x2b\xdb\xec\xf2\x65\xd3\x32\x5f\xad\xd8\x4f\xb0\x93\xac\xcc\x1c\x56\x99\x05\x7d\x46\x7d\xea\x25\x57\xa8\x4f\x7b\xc9\x35\xd0\x8d\x64\x93\xf6\xa8\x4d\xbb\xf4\x03\xb5\x41\x5f\x50\x9b\xbe\x4b\x36\xa8\x4d\xdb\xd4\x4f\x36\x4d\x72\x8b\xda\xd4\xa3\xae\x06\x2c\xad\x1d\xbe\xd1\x35\xa4\xbb\xd4\x4d\x36\xa8\x4f\x3b\xc9\xbb\xfa\xae\xa6\x7e\x87\xba\xb4\x6d\x38\xbe\xa2\x76\xb2\x49\x6d\x3d\x94\x7a\xc9\xfb\xf4\xbd\xa6\xd5\x1a\xae\x33\xda\x61\xc9\x5b\xd4\x4f\x36\x68\x3f\xbd\xd4\xf9\xff\x0f\x9d\x6e\x24\x57\xa8\xa7\x87\xa7\xe4\x1d\xd0\xa7\xd4\x1b\x21\x7d\x9b\xba\x7a\xed\x6c\x72\xfa\xd6\xe9\x4b\xa3\x96\x3a\xd4\x4b\xae\x31\xda\xa3\x3e\x7d\x3b\x58\xc1\x2c\x9c\x5c\xd7\x86\x74\xe8\x26\x75\x69\xff\x90\x0d\x18\x79\xf8\x23\x2f\x3e\xb9\xfa\x9f\x38\xb7\x92\x0d\xea\xd0\x6e\x72\x95\x6e\xa5\xd1\x4d\xda\xd5\x1d\xd4\xd5\xc2\x3f\xa2\x3e\x6d\x53\x9b\x76\xa8\x9b\x6c\x6a\x92\x5b\xda\x26\xea\xe0\xef\x00\x00\x00\xff\xff\xb8\x63\xa1\xcf\x48\x06\x00\x00")

func localesRuLc_messagesConfigMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesConfigMo,
		"locales/ru/LC_MESSAGES/config.mo",
	)
}

func localesRuLc_messagesConfigMo() (*asset, error) {
	bytes, err := localesRuLc_messagesConfigMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/config.mo", size: 1608, mode: os.FileMode(420), modTime: time.Unix(1541331642, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"locales/ru/LC_MESSAGES/config.mo": localesRuLc_messagesConfigMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"config.mo": &bintree{localesRuLc_messagesConfigMo, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
