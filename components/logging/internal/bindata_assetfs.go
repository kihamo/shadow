// Code generated by go-bindata.
// sources:
// locales/ru/LC_MESSAGES/config.mo
// DO NOT EDIT!

package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _localesRuLc_messagesConfigMo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x52\x4d\x6f\x1b\x55\x14\x3d\x13\x0f\x5f\xe6\x43\x50\xb1\x28\x82\xc5\xed\xa2\x05\x04\x53\x66\x6c\x2a\x55\x93\x4c\x5a\xd1\x26\x50\x35\x11\xa1\x18\xba\xac\x1e\xf6\x8b\x33\xea\xf8\x8d\x79\x33\x13\x81\xd4\x45\x48\x2b\x84\x44\xa5\x6e\x8a\xc4\xaa\x08\x95\x1f\xe0\x84\x18\x4c\x82\xdd\x35\xbb\xfb\x10\xeb\x4a\xec\x91\xd8\xb0\x64\x81\xe6\xc3\xf9\x60\x05\x5e\x3c\xdf\x73\xee\xb9\xe7\x9d\x3b\x7a\x0f\x8f\xd9\x5f\x01\xc0\xd3\x00\x5e\x02\x70\x0b\xc0\x73\x00\xfe\x40\xf9\x73\x2d\xe0\x29\x00\x9e\x05\x1c\x07\x30\x5f\xe1\xab\xd5\x7f\xc7\x02\xde\x01\xf0\xb1\x05\x3c\x03\x60\xd7\x02\x9e\x07\xf0\x8b\x05\x3c\x0b\xe0\x61\xa5\xfb\xd3\x02\x5e\x04\xf0\x77\xa5\x3b\x3e\x03\x1c\x03\xf0\xf2\x0c\xb0\x66\x01\xfe\x4c\xc9\xdf\xaf\x01\x27\x00\x6c\xd7\xca\xb9\xdf\x6a\xa5\xee\xf7\x1a\x70\x19\xc0\x5f\xb5\xd2\xf7\xbc\x5d\xe6\x7d\xcf\x06\x4e\x02\x50\x76\xa9\xbf\x6b\x03\x2e\x80\x6f\xab\xfe\xaf\x36\xf0\x42\x7e\xbf\x0d\x58\x28\x35\xd3\x7d\x67\x00\xd4\x2b\xfc\x08\x80\x47\x01\x3c\x51\x61\x1b\x40\x0d\xc0\x93\x00\x1e\xaf\xb8\xc7\xf2\xa3\x1d\xab\xd5\xb0\x6b\x5f\x94\x1f\x65\xdd\x03\xb0\x2e\xa3\xb8\xdf\x93\x2a\xa5\xbe\x50\x61\x7b\xda\x58\xd0\x3a\xd6\x53\xb0\x28\x52\x11\xed\x83\x50\x46\x9d\x84\x42\x45\xab\xb1\xee\x89\x94\x56\x73\xe2\x9a\x12\x3d\x19\x14\xa5\x77\x6d\x5d\x44\x99\x7c\xbd\x00\x8d\x43\x8d\x46\xd9\x98\x1a\xbd\x2d\x95\xd4\x07\xbe\x97\x54\xe9\x17\xc6\xea\x80\x5c\x8a\xbb\x14\xe5\x19\xa7\xc4\xca\xe1\x90\xef\xa7\xa2\x7d\x3d\xd5\xa2\x2d\x29\xfa\xb7\xf0\xaa\xd0\x2a\x54\xfb\x8b\x8a\x4e\x87\x44\x19\x15\x57\x64\x3f\xd6\xa9\xb3\x9c\x74\xc3\x8e\xf3\x56\xd6\x4d\x9c\x56\xec\x53\x47\xae\x9f\xbf\x1e\xae\x89\x5e\x7c\x5a\x67\xf5\x95\x77\x5b\xce\x05\x2d\x8b\x38\xce\x45\x91\x4a\x9f\x1a\xae\x77\xd6\x71\x9b\x4e\xa3\x49\x8d\xa6\x7f\xe6\xcc\x6b\x6e\xd3\x75\xeb\x4b\x22\x49\x9d\x96\x16\x2a\x89\x44\x1a\x6b\x9f\x2e\x17\x1e\xb4\x9c\x69\xd1\x8b\x3b\x31\xcd\x1d\x31\x9e\xaf\x2f\x09\xd5\xcd\x44\x57\x3a\x2d\x29\x7a\x3e\xed\x63\x9f\xae\x64\x49\x12\x0a\x55\x5f\xbe\xb4\xbc\xe0\x7c\x28\x75\x12\xc6\xca\x27\xef\xb4\x5b\xbf\x10\xab\x54\xaa\xd4\x69\x7d\xda\x97\x3e\xa5\xf2\x93\xf4\x8d\x7e\x24\x42\x35\x4b\xed\x35\xa1\x13\x99\x06\x1f\xb4\x16\x9d\xb3\x07\xba\x3c\xcf\xaa\xd4\xce\x82\x6a\xc7\x9d\x50\x75\x7d\xaa\xaf\x44\x99\x16\x91\xb3\x18\xeb\x5e\xe2\x93\xea\x17\x30\x09\x9a\xb3\x54\x96\x81\x3a\xe9\xb9\x41\xe0\xd1\xa9\x53\x94\x97\xee\x89\xc0\xf3\xe8\x1c\xb9\xe4\x17\x78\x3e\x68\x4c\x5b\x73\xc1\x9b\x79\xf9\x4a\x21\x9b\xf3\x5c\xba\x71\xa3\x1c\x99\x0f\x1a\xee\xab\x74\x8e\x3c\xf2\xa9\x31\x0b\xbe\x67\x36\x79\x8f\x07\xbc\xc3\xbb\x3c\x00\x7f\xc3\x03\x1e\xf3\x28\x07\x64\x36\x78\xc0\x3f\x16\xe7\x16\x4f\xcc\x26\xef\xf2\x28\x1f\xf8\x82\x47\xbc\x55\xca\xbf\xe3\x81\xd9\xe4\x01\xef\x99\xdb\x3c\x36\x5f\xf2\x4f\xb9\xc3\x84\xf7\xcc\x1d\xe2\x6d\x32\xb7\x78\x62\x36\xf8\xe7\x42\x34\xfc\xff\xaf\x90\xef\x99\xcf\x78\xcc\x13\xde\x2e\xcc\x87\xe0\xaf\x79\x7c\xc8\xf4\x73\x1e\xf1\x84\xc7\xd3\x9b\xef\x9b\x8d\x42\x3b\xe4\xb1\xb9\x4d\xbc\xc7\x13\xfe\x9e\x47\x15\x59\xac\x65\xee\x1c\xd9\x10\x87\x5e\xa7\xb9\xf9\xdf\xa6\xcd\x06\x0f\x79\xc7\xdc\xe4\x07\x45\xf5\x03\xef\xe4\x13\x3c\xca\xd3\xdd\xe5\x09\x6f\xf1\x80\xb7\x79\x64\x36\x73\x93\x07\xf9\xb7\xe0\x21\xfe\x09\x00\x00\xff\xff\xa5\xc9\x5e\x8f\x09\x05\x00\x00")

func localesRuLc_messagesConfigMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesConfigMo,
		"locales/ru/LC_MESSAGES/config.mo",
	)
}

func localesRuLc_messagesConfigMo() (*asset, error) {
	bytes, err := localesRuLc_messagesConfigMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/config.mo", size: 1289, mode: os.FileMode(420), modTime: time.Unix(1541329297, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"locales/ru/LC_MESSAGES/config.mo": localesRuLc_messagesConfigMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"config.mo": &bintree{localesRuLc_messagesConfigMo, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
