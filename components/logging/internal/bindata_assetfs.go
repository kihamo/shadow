// Code generated by go-bindata.
// sources:
// templates/views/manager.html
// assets/js/manager.min.js
// locales/ru/LC_MESSAGES/config.mo
// locales/ru/LC_MESSAGES/manager.mo
// DO NOT EDIT!

package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsManagerHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x57\x4d\x6f\xe3\x36\x13\xbe\xe7\x57\x0c\xb8\x7e\xd7\x36\x10\x4b\x49\x4e\x2f\x12\xc9\xa7\x16\xd8\x43\x5a\x14\xc5\xb6\xd7\x05\x2d\x8e\x6d\x1a\x12\xa9\x25\x69\x25\x86\xa0\xff\x5e\x90\x94\x2c\xf9\x4b\x96\x17\x9b\xd5\x21\xe6\xd7\xcc\xf3\x70\xe6\xe1\x90\x29\x4b\x60\xb8\xe4\x02\x81\x24\x52\x18\x14\x86\x40\x55\xdd\x45\x8c\x17\x90\xa4\x54\xeb\x98\x28\xf9\x46\xe6\x77\x00\x00\xdd\xd1\xf7\x6f\x39\x15\x98\xd6\x33\xa7\xb3\x86\x9b\x14\x3b\xb3\x6e\xc5\xfa\x69\x5e\x96\xc0\x1f\xff\x2f\x80\xbc\xca\xd5\x0a\x95\x26\x10\x40\x55\x45\xe1\xfa\xe9\x68\x6d\xc7\x5b\x92\x22\x55\x4b\xfe\x4e\xe6\x51\xc8\x78\xd1\x81\x3c\xea\x1e\x30\x68\xf6\x73\xe8\xd7\xe2\x2f\x21\x40\xa5\xa4\xb2\x3b\x85\xa3\xaf\xeb\x83\xa6\xa8\x0c\xb8\xbf\x33\x46\xc5\x0a\x55\xd3\xe1\x3a\xe3\x5a\xd3\xc5\xc9\x16\xf7\x6e\x16\x5b\x63\xa4\x00\xb3\xcb\x31\x26\xbe\x43\xda\xfd\x48\x8d\x04\x18\x35\xb4\x71\x55\x83\x11\xa0\x8a\xd3\xd9\x9a\x33\x86\x22\x26\x46\x6d\x91\xcc\x3f\x1b\x9e\xa1\x7e\x89\x42\xef\xe6\x14\xb0\x2c\xeb\x0d\x05\xbf\x5f\xdc\xd6\x61\xa4\x6a\x2b\x14\xec\x78\x71\xb4\x94\x2a\x03\x25\x53\x8c\x89\x6d\x12\xa0\x89\xe1\x52\xc4\xe4\x13\x81\x0c\xcd\x5a\xb2\x98\xe4\x52\x1b\x02\x9c\xc5\x24\xad\xb3\x78\x4a\xaa\x1b\x48\x63\x23\x35\x53\xa8\x73\x29\x34\x2f\x2e\x06\xcd\xad\x3b\x30\x02\x6f\xba\x96\x05\xaa\xba\xad\x8d\xe2\x39\x32\x60\xa6\xe3\x11\x84\x7c\x53\x34\x27\xa0\xcd\xce\x52\x7f\xe3\xcc\xac\x9f\x1f\x1f\x1e\xfe\x77\x01\xcb\xe3\xad\x91\xb2\xbe\x79\x75\x79\xb2\x76\xd0\x0a\xfa\x2f\xaa\xdc\xf1\xf1\x7a\x36\xeb\x1b\x4c\xff\xa4\x19\xfe\x90\xe1\x2b\x16\x98\xfe\x90\xe5\x6f\x98\xa3\x60\x03\x09\x47\x61\x5f\x24\xac\xed\x95\x38\x2e\x24\xdb\x5d\x9e\x2f\x4b\x18\x71\xc1\xf0\x1d\x9e\x63\x78\x38\x27\xdf\xce\x4a\x65\x0f\x22\x8c\x38\xbb\x87\x91\x57\x9f\xb5\x0a\x6a\x21\x5e\x31\xae\x61\x62\xa0\x8c\x35\x9d\xc7\x3e\x9b\x01\x12\x60\x73\x5f\x53\xf0\x7b\x43\x28\xf0\x52\x00\x62\x6b\xe9\x67\xb1\xd0\xf9\x8b\x3d\x6c\xa9\x46\xa8\x2a\xcb\xe2\x70\x99\x1b\xf3\x47\x31\x0a\x4d\x4f\x1c\x3b\x78\x8d\x0b\xab\x9c\xdb\xec\x8a\xf4\x9b\x46\x73\x35\xd2\x7b\x3b\x8d\x29\x26\xa6\x39\x94\xb6\x24\xcc\x6c\x65\x55\x32\x05\x3f\xf5\x44\x40\xd0\x0c\x63\xe2\xe2\x6b\x77\xd1\x2d\x0d\xb3\x36\xea\x55\xd5\x73\x16\x9b\xaf\xcd\x70\x7a\xef\xd8\x5a\xa6\xa3\x20\xb5\x42\xef\xcd\xee\x01\x69\x99\xdb\x9a\x05\x05\x4d\xb7\x35\xb1\xb4\x48\x83\x7f\x6d\xb7\xaa\xc8\x20\x1f\x3e\xa9\x54\x30\x98\xb8\xcc\xd6\x71\x7b\x98\xba\xfe\xa4\x49\x80\x3b\x81\xd3\x8e\xff\xe9\x50\x92\xcd\xe7\xa3\x88\x2c\x26\x4d\x6b\x18\xc1\x0e\xd1\x3d\xbb\xb8\x5f\xcd\x47\x66\x5e\x73\xfb\x9a\xe0\xf6\xe0\x04\x35\x72\xaf\x81\x25\x5f\x11\x70\x69\xe4\x62\x45\x9c\xca\x7c\x5c\x07\x65\xf1\xcc\xdd\x72\xee\x8b\x42\xbf\xeb\xeb\x3e\x23\x9d\x28\x9e\x9b\xfa\x4a\xa5\x79\x9e\xf2\x84\x5a\x3a\xe1\x86\x16\xd4\x4f\x0e\x10\x98\xfd\x46\x13\x26\x93\x6d\x86\xc2\x4c\x03\x85\x94\xed\x26\xcb\xad\x70\xd7\x1c\x4c\xa6\x50\x0e\x0e\xff\x68\x32\xfe\x74\x46\xe6\xe3\x69\x20\xc5\x64\x5c\x1f\x8f\x67\xff\x3b\xbe\x87\x16\x04\x6f\x41\x39\x44\xd2\xe3\x69\xa0\xb7\x8b\x8c\x9b\xc9\xf4\x65\xb0\x8f\x6a\xe0\xda\x21\xeb\xa2\xd0\x07\xfb\x4a\xc1\xb9\xb5\x94\xed\x6f\xa4\xab\xf5\xac\xff\x3a\xba\xae\xbd\x28\xec\xb9\x90\xa2\xd0\x3d\x33\xce\x3c\x68\x4e\x9f\x50\x51\x68\xeb\xe1\xd9\xf7\x68\xdd\xac\x7f\x5a\x4e\x77\x9d\x17\xb7\xbd\x35\x49\x43\xb4\x2c\x41\x1b\x6a\x78\xf2\xe5\xeb\x1f\xaf\x30\xf1\xed\x7f\xfe\x7e\x05\x12\x32\xaa\xd7\x0b\x49\x15\x0b\xa9\xd6\x68\x74\x58\xa0\x60\x52\xe9\xd0\xbe\x20\x1d\x5b\x1d\x08\x34\xb3\x85\x0e\x13\xed\x47\xbf\xfa\xd1\x85\x94\x46\x1b\x45\xf3\x20\xe3\x22\x48\xb4\x26\xb0\xa4\xa9\x6e\x8b\xd4\x4f\x40\x5d\xf2\x77\x64\x76\x2b\xa8\x1a\x06\x6e\xe8\x8b\x1b\xfa\x25\x14\xda\x77\x60\xc3\xa0\x1d\xe9\x27\x70\x3e\x31\x1b\xfd\x13\xd3\x12\x6e\x74\xb8\xf9\xbe\x45\xb5\x0b\x3a\x99\xb1\x5c\x36\x1f\x11\x8b\x85\xb6\x80\x17\x35\xf0\x21\x98\x1d\x09\x1c\x81\x77\x95\xf0\x61\xf0\x6d\xb2\x8f\xd0\x3b\x2a\xf8\x05\xe0\x75\xe8\x2f\x4a\xef\x26\xf8\xfa\xda\x6d\xc0\x37\x3a\xcc\xa8\xa0\xb6\x4e\x5a\x37\xf6\x1f\xc3\x43\xfd\xfe\x17\x00\x00\xff\xff\xf7\x77\x95\x47\xc9\x0f\x00\x00"

func templatesViewsManagerHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsManagerHtml,
		"templates/views/manager.html",
	)
}

func templatesViewsManagerHtml() (*asset, error) {
	bytes, err := templatesViewsManagerHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/manager.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsJsManagerMinJs = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x52\xc1\x8e\xdb\x20\x10\xfd\x95\x5d\x1a\x25\xa0\x20\xe2\x1c\x2a\x55\x24\xa4\x87\xee\x71\xa5\x4a\x55\x6f\x96\x0f\x63\x98\xd8\x74\x59\x70\x01\x6f\x54\x45\xfe\xf7\x0a\x7b\xd5\xa6\xdb\xf6\x36\x62\xde\x63\xde\x9b\x37\x2b\x6a\x82\x1e\x9f\xd1\x67\x26\x22\x82\xf9\x41\xcf\xa3\xd7\xd9\x06\x4f\xd9\xf5\x05\xe2\x5d\x86\xd6\xe1\x63\xe8\x3a\x8c\x49\xad\x28\x79\xe7\x96\x7a\x69\x10\x26\x1e\x20\xc3\xd7\x52\xd3\xeb\x00\x1d\x3e\xa2\xef\x72\x2f\xdf\x57\xdc\x81\xef\x46\xe8\x50\x5e\xc7\xe8\x24\xd9\x19\x48\x7d\x1b\x20\x9a\x9d\x81\x0c\x33\x3d\xed\xec\xfe\x83\x17\xdf\x52\xf0\x64\xe2\x21\x1a\x8c\xb2\xae\x2b\x4e\x20\x69\xd2\x34\x5c\x07\x37\x3e\xfb\x07\x3c\x27\x59\x5f\x5f\x6c\xb2\xad\x43\x79\xbf\xe7\x19\x62\x87\x39\xc9\x6a\x6a\xb8\x89\x70\xf9\x04\xce\xb5\xa0\x9f\xe4\x2f\xf1\x09\x73\xb6\xbe\x4b\x8b\x09\x18\xac\xca\xbd\x4d\x02\x06\x4b\x19\x8f\xe1\x92\x14\x0c\x56\x94\x62\x91\x2d\x89\x1e\x63\x44\x9f\xc9\xc4\x84\x0f\x06\x13\x65\xdc\x41\xca\xca\x8f\xce\x1d\x0a\x78\x11\x43\x2b\xfe\x37\xa1\x18\xa2\x4c\x20\xe8\xfe\xf7\xfe\xba\x18\xc6\x81\xdb\x45\xc1\x0a\xbe\x84\x8b\x5a\xd1\x32\x91\x09\xfc\x4e\x2d\x3b\x94\xef\xef\x95\x9a\x71\xeb\x35\x9d\x21\xa2\xc5\x73\x88\x48\x37\xc7\x1c\xef\xb4\x83\x94\x14\x99\x01\xe4\x74\xdc\x65\x73\x3a\x66\x73\xa7\x83\x4b\x03\x78\x45\x36\xdb\x85\xa3\x7b\xeb\x4c\x44\x4f\x99\x70\xf3\xfa\xb7\x1b\x72\xda\x6c\x67\xde\x96\x2c\xbc\x5d\x8e\x27\xf2\x6a\x69\x6e\xb0\x89\x4d\x13\x3b\xdc\xe6\x2b\x82\xa7\x44\x3b\xab\x9f\x08\x27\x39\x8a\x65\x30\x7f\x73\x11\xaf\xbe\x3f\x97\xb4\xd4\x9f\xf4\xf2\x44\x59\x5d\x35\x87\x4a\x29\x75\x0b\xac\xab\x66\xbd\x9e\x63\x7d\xdb\xd8\x37\x1f\xff\xf1\x49\x39\x02\x83\xe5\x0a\x98\x28\x09\x53\x26\xff\x83\x82\x5b\xd0\xc4\x26\x76\xf8\x19\x00\x00\xff\xff\xf7\xed\xfc\x35\xd4\x02\x00\x00"

func assetsJsManagerMinJsBytes() ([]byte, error) {
	return bindataRead(
		_assetsJsManagerMinJs,
		"assets/js/manager.min.js",
	)
}

func assetsJsManagerMinJs() (*asset, error) {
	bytes, err := assetsJsManagerMinJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/js/manager.min.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesConfigMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\x4d\x8c\x53\x55\x18\x3d\xb4\xb5\xad\x55\x54\x40\x41\xfc\xcb\x65\x01\x42\xf0\x61\xdb\x91\x48\xca\x14\x8c\xc3\x8f\x08\x03\x13\xa6\xea\xc6\x84\x5c\xda\x37\x9d\x17\x5e\xef\x6d\xde\x7b\x45\x8d\x2c\x86\xc1\x18\x11\x12\x34\x62\xa2\x46\x40\x94\xb5\x29\xe3\x14\x2b\x43\x3b\x1b\xd7\xe6\xbb\xc6\x85\x2b\x13\x13\x13\x37\xec\x5d\x98\x18\x73\xdf\x7d\x7d\xd3\x19\x5d\x68\x37\xfd\x7e\xce\x3d\xdf\xb9\xe7\x7b\xf7\x97\xb5\xa9\x8f\x01\xe0\x49\x00\x4f\x00\x48\xad\x02\xb6\x01\xb8\xbb\x0a\xe1\xef\x83\x04\xb0\x1a\xc0\x87\x09\xe0\x01\x00\xd7\x12\xc0\xfd\x00\xbe\x4e\x00\x6b\x01\x2c\x24\x80\x47\x01\xfc\x90\x00\xd6\x03\xf8\x3d\xc2\xfd\x15\xe1\x56\x27\xcd\xff\x63\x49\xe0\x25\x00\x4f\x27\x81\xfb\x00\x34\x93\x06\x77\x26\x09\x6c\x00\x70\x21\x09\x3c\x0c\xe0\xab\xa8\xdf\x4d\x02\xeb\x00\x7c\x1f\xe5\x3f\x27\xcd\xbc\xdf\x22\xbe\x3f\x92\xc0\x1a\xad\x37\x65\x78\xd6\xa7\x4c\x7d\x73\x0a\x78\x1c\x40\x31\x65\x74\x1f\x4d\x99\x73\xaf\xa7\x0c\x8f\x8c\xf0\x6f\x47\xf5\xf7\x53\xc0\xf4\x2a\xe0\x4a\x94\xa7\xd3\xa6\xbf\x31\xfa\xdf\x9a\x36\xba\x9e\x4f\x03\x9b\x00\x1c\x49\x03\x3b\x00\x88\xa8\x7e\x25\x6d\xe6\xce\xa5\xcd\xf9\xc5\x34\x70\x18\xc0\x8f\x51\xfd\xa9\x0c\xf0\x10\x80\xed\x19\xa0\x04\x60\x34\x63\x7c\x7e\x23\x03\xa4\x00\x5c\xce\x18\xff\x3e\xcd\x00\x39\xcd\x93\x31\x3e\xf6\x32\xe6\xfc\x4f\x51\xfd\xd7\x8c\xd1\x73\x37\xea\xff\x99\x01\xf2\x00\xd6\x66\x0d\x6e\x2c\x6b\xee\x3d\x91\x05\xd2\x00\xdc\xac\x99\xe3\x67\x81\x8d\x7a\x8f\x59\x40\xaf\x54\xc7\x49\xb3\xda\x50\xff\xba\x28\xd6\x67\xb4\x9e\x35\x51\xae\xcf\xea\xfb\x64\x01\xdc\xab\xf7\x07\xe0\x41\x18\x0d\xf7\xc0\x78\xab\xe7\x6a\x4f\x73\xd1\xf7\xb3\x21\x3a\x9b\xc1\xf2\x5f\x62\x28\xd6\x5e\x68\x9d\x8f\x0c\xd5\xf4\xfd\xd7\x0f\x92\xaa\x14\x53\x4e\x3d\x35\xc6\x5d\xd7\xf6\xe2\x4c\x0a\x5f\xba\xf6\x20\xdd\x67\x9f\x6c\xd5\x97\x92\xd3\xb6\x2b\x9b\x0d\x5b\x04\xff\x52\x62\x4d\x2e\x9c\x6a\xdc\x68\x79\x3c\x70\xa4\x60\x53\xd2\x6b\xf0\x18\xbf\x5f\x54\x65\x6d\x69\xda\x7e\xcf\x93\x71\x72\x80\x07\xdc\x8d\x13\xc7\x76\x6b\x3e\x73\x06\x04\x6c\x4a\x17\x4e\x08\xde\xb0\xcb\x61\x58\x38\x71\x9a\xbb\x2d\xfb\x99\x30\x29\x0e\x35\x8a\xa6\x11\x13\xb5\xdc\x98\xf4\xa0\x2d\x6c\x6f\x69\xc6\x41\x57\x9e\xe4\x2e\x73\x65\x9d\xb9\xfa\x1e\x83\xfa\x21\x61\x66\x3a\x52\x2c\x81\x5f\x9e\x3c\x76\x74\x10\x8f\x3b\xae\xeb\xf8\x76\x55\x8a\x9a\x1f\xd7\x64\x2d\x9e\x79\x94\x0b\xb9\xa2\x3d\x31\x6c\xce\x84\x27\x6b\xad\xaa\xe6\x1f\x54\x26\x97\xa3\x27\xa7\xa5\x17\x7b\x36\x19\xf0\xea\xa9\xc0\xe3\x55\xfb\x9f\x52\x27\x03\xcf\x11\xf1\x82\x2a\x4e\xc3\x5e\x61\x78\xe5\xad\x66\x2c\xeb\x35\xee\x89\x21\x34\xaf\xd5\x18\x37\xbe\xe2\xb8\xdd\x94\x5e\x60\x8d\xfb\x75\xa7\x66\xbd\xd8\xaa\xfb\x56\x45\x96\x58\xcd\x3e\xfd\xc2\x29\x67\x9a\x37\xe4\x0e\xaf\x95\x9b\x38\x56\xb1\xc6\x3c\x3b\xf4\xc5\xda\xc7\x03\xbb\xc4\x8a\xf9\xc2\x2e\x2b\x3f\x62\x15\x47\x58\x71\xa4\xb4\x73\xe7\xf6\xfc\x48\x3e\x9f\x3b\xc2\xfd\xc0\xaa\x78\x5c\xf8\x2e\x0f\xa4\x57\x62\x87\x43\x0e\x36\xde\xf2\x78\x43\xd6\x24\x1b\x5d\x46\xbc\x27\x77\x84\x8b\x7a\x8b\xd7\x6d\xab\x62\xf3\x46\x89\xc5\x79\x89\x1d\x6f\xf9\xbe\xc3\x45\x6e\xfc\xd0\xf8\x7e\xeb\x55\xdb\xf3\x1d\x29\x4a\xac\xb0\x23\x9f\x1b\x93\x22\xb0\x45\x60\xe9\x0b\x96\x58\x60\xbf\x19\x3c\xdb\x74\xb9\x23\x76\xb3\xea\x34\xf7\x7c\x3b\x28\xbf\x52\x39\x60\xed\x5a\xc2\x69\x3d\x53\xb6\x67\x85\x9f\xa0\x23\xea\x25\x96\x9b\x70\x5b\x1e\x77\xad\x03\xd2\x6b\xf8\x25\x26\x9a\x61\xea\x97\x47\x76\x33\x13\x96\xc5\xe6\x42\xbe\x5c\x2e\xb0\x2d\x5b\x98\x0e\xf3\x9b\xca\x85\x02\xdb\xcb\xf2\xac\x14\xe6\x7b\xca\xc5\x41\x6b\xb4\xfc\x9c\x0e\xb7\x86\xb0\xd1\x42\x9e\x9d\x39\x63\x8e\xec\x29\x17\xf3\xdb\xd8\x5e\x56\x60\x25\x56\xdc\x0d\xfa\x84\x7a\xd4\x55\xef\x52\x97\xda\x6a\x96\xfa\x6a\x06\xf4\x19\xf5\xa9\xa7\xce\x52\x9f\x16\xd4\x45\xd0\x55\x35\x4b\x0b\xd4\xa6\x79\xba\x4d\x6d\xd0\x17\xd4\xa6\x6f\xd5\x0c\xb5\xe9\x26\xf5\xd5\xac\x29\x5e\xa3\xb6\xe6\xd1\x09\x0b\x7b\xcb\x11\x5d\xd0\x0d\xcd\x4d\x77\xf4\x14\x46\x5d\xea\xa9\x59\xea\xa8\x19\x9a\xa3\xb6\x26\x67\x34\xa7\x66\xa8\x43\x77\xa8\xa3\x79\x8c\x86\x79\xea\xaa\x19\xea\xd3\x9c\x3a\xaf\xa9\xb5\x92\xf7\xa8\x4b\x37\xcd\xc8\x1b\xa1\xe0\xb6\xd6\x48\x3d\x75\x81\xbe\xd3\x2a\xb4\xe4\x4b\x8c\xe6\x98\x7a\x67\x69\x1e\x75\xfe\xff\x6b\x35\x5c\x03\xe2\xab\xea\x2c\xf5\xb4\x92\xb0\xd0\x01\x7d\x44\x0b\xd4\xa7\x9b\xc3\xe3\x99\x3a\x67\xd4\xea\x2b\xa8\x8b\x2c\x44\x7c\x33\xb8\x82\xf1\x47\x5d\x0a\x0d\x1f\x12\xa7\x8d\xef\x53\x2f\x1a\x14\x3e\x6a\xfa\x9c\xba\xb4\x40\x0b\xd4\x55\x67\xa9\x43\xb7\xd5\x39\xea\xd1\xbc\xba\xa0\xad\xef\xd0\x2d\xea\xd2\x1d\xd0\x95\x90\xb0\xbf\x12\x31\xb4\x07\x0c\xbd\x6a\xba\xbe\x1c\x76\x9d\xfa\x74\x5b\x6f\x48\x9d\x0f\x0d\x37\xd3\x87\x1e\xf6\x7f\xbc\xcb\x75\x35\x1b\x96\xa2\x85\x0c\x6d\x78\xc5\x3a\xbf\xa4\x2e\x2d\x82\xae\x85\xd5\x79\x75\x8e\x16\xc3\xe8\x16\xcd\x1b\x84\xf6\xf4\x72\xe4\xe8\x1c\x75\xd5\xac\x1e\xba\x18\xae\xa0\x83\xbf\x03\x00\x00\xff\xff\x28\x1f\x51\x90\xaa\x08\x00\x00"

func localesRuLc_messagesConfigMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesConfigMo,
		"locales/ru/LC_MESSAGES/config.mo",
	)
}

func localesRuLc_messagesConfigMo() (*asset, error) {
	bytes, err := localesRuLc_messagesConfigMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/config.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesManagerMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\xbf\x6b\x14\x5f\x14\xc5\x4f\xe6\x9b\x6f\xc4\x55\x44\x52\x58\x59\x5c\x0b\x83\x22\x2f\xce\xec\x1a\x08\x2f\x99\x44\xcc\x0f\x10\x77\x63\x08\xa3\xfd\x23\xfb\x9c\x0c\xee\xbe\xb7\xbc\x99\x0d\x0a\x11\xa2\x60\x95\x80\x8d\xa2\x90\x46\xf0\x1f\x08\xd1\x85\x11\x93\x6d\xac\xec\xee\x94\x36\xe9\xfc\x3f\x64\x77\x27\x8a\xb7\x39\xe7\xf0\x3e\xef\xdc\x7b\x3a\x39\xfe\x0e\x00\xce\x01\xb8\x0a\x20\x02\x70\x01\xc0\x3e\x46\x93\x03\x38\x0f\xe0\x2b\x80\xff\x01\x7c\x2f\xd9\x1f\xa5\x16\x00\xc6\x01\xfc\x04\x30\x01\xe0\x14\xc0\xd6\x18\xf0\x0b\xc0\x24\x80\x35\x0f\xb8\x04\x40\x79\xc0\x45\x00\x1d\x0f\xb8\x02\xe0\x85\x37\xe2\xdf\x7a\xc0\x65\x00\x07\x1e\x30\x56\xee\xf4\xca\xee\xf1\x32\x4f\x94\xbb\x07\xf3\x5f\xa9\x58\xd6\x1d\x6d\x9a\xda\x64\xa8\xeb\x6d\xdd\x42\xdd\xc6\xb1\x76\xe9\x50\x13\x13\x63\x4d\xb5\x35\xd6\x95\x1b\x10\x1b\xba\x63\x5d\x26\x1a\x69\x9c\x34\xc5\xbd\x6e\x9c\x8a\xc8\x4a\x6a\xea\xed\xbb\x4f\x93\x2d\xd5\xb6\xd3\xae\x5b\x59\x7f\x18\x89\x25\xa7\x55\x96\x58\x23\x96\x55\xa6\x25\x55\xfd\x60\x56\xf8\x35\x51\xad\x51\xb5\x26\x67\x66\x6e\xf9\x35\xdf\xaf\xd4\x55\x9a\x89\xc8\x29\x93\xb6\x54\x66\x9d\xa4\x07\xc3\x0e\x6a\x74\x9d\x6a\xdb\xa6\xa5\xf9\x7f\x8a\x17\x2a\x75\x65\xe2\xae\x8a\xb5\x88\xb4\x6a\x4b\xfa\x93\x25\x6d\x74\xd3\x34\x51\xa6\xd2\xb8\xdf\x58\x11\x8f\xb5\x4b\x13\x6b\x24\x05\xd3\x7e\x65\xc9\x9a\x4c\x9b\x4c\x44\xcf\x3b\x5a\x52\xa6\x9f\x65\xb7\x3b\x2d\x95\x98\x39\xda\xdc\x52\x2e\xd5\x59\xf8\x28\x5a\x15\xb3\x7f\xb9\xc1\x3d\x4f\xb4\x13\x2b\x66\xd3\x36\x13\x13\x4b\xaa\xac\xb7\xba\x4e\xb5\xc4\xaa\x75\xed\x54\x92\xe9\x0c\x63\x1a\xd6\xe6\x68\x64\x43\x73\x3d\xf0\xc3\x30\xa0\xa9\x29\x1a\x58\xff\x5a\x18\x04\xb4\x48\x3e\xc9\x61\x5e\x08\xab\x67\x4f\xf3\xe1\x9d\x81\xbd\x31\xc4\xe6\x03\x9f\x76\x76\x46\x5f\x16\xc2\xaa\x7f\x93\x16\x29\x20\x49\xd5\x39\xf0\x7b\x3e\xe4\x23\xce\x8b\x97\x9c\xf3\x71\xb1\x57\xbc\x06\x7f\x2a\x76\xb9\xcf\x47\xdc\xe3\x93\x62\x1f\x7c\xc0\x7d\xfe\xcc\xbd\x62\xb7\xd8\x3b\x0b\x79\x49\x1c\xf2\x09\xe7\xdc\x03\x7f\xe0\xe3\xe2\x0d\xf8\x23\xf7\xf9\x0b\xe7\xc5\x2b\xee\xf1\xb7\x62\x1f\xbf\x03\x00\x00\xff\xff\x88\xcf\x80\x3d\xac\x02\x00\x00"

func localesRuLc_messagesManagerMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesManagerMo,
		"locales/ru/LC_MESSAGES/manager.mo",
	)
}

func localesRuLc_messagesManagerMo() (*asset, error) {
	bytes, err := localesRuLc_messagesManagerMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/manager.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/manager.html":      templatesViewsManagerHtml,
	"assets/js/manager.min.js":          assetsJsManagerMinJs,
	"locales/ru/LC_MESSAGES/config.mo":  localesRuLc_messagesConfigMo,
	"locales/ru/LC_MESSAGES/manager.mo": localesRuLc_messagesManagerMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"js": &bintree{nil, map[string]*bintree{
			"manager.min.js": &bintree{assetsJsManagerMinJs, map[string]*bintree{}},
		}},
	}},
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"config.mo":  &bintree{localesRuLc_messagesConfigMo, map[string]*bintree{}},
				"manager.mo": &bintree{localesRuLc_messagesManagerMo, map[string]*bintree{}},
			}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"manager.html": &bintree{templatesViewsManagerHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
