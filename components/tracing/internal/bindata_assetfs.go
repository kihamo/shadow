// Code generated by go-bindata.
// sources:
// locales/ru/LC_MESSAGES/config.mo
// DO NOT EDIT!

package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _localesRuLc_messagesConfigMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x55\x5f\x6c\x1c\x57\xf5\xfe\x12\xff\xf9\xc5\xae\xd3\x1f\x04\xda\x40\xf8\xa3\x83\x50\x43\x02\xde\xd4\x0e\x08\x15\x27\x4e\x80\x28\x55\x2a\x62\x35\x24\x2e\x7d\x44\xd7\xbb\x77\xd7\x43\x66\x67\xb6\x77\x66\xed\x06\x8a\xe4\xb5\x9b\x1a\x94\x34\xa9\x2a\xca\x43\xf9\x57\x82\x78\xdf\xd8\xde\x64\x63\x7b\xd7\x20\x95\x57\x74\xae\x84\xa8\x90\x50\xdf\xe8\x03\x12\x20\xf1\xcc\x03\x3a\xf7\xce\xae\x77\x9d\x94\x95\x12\xcf\xdc\x7b\xee\x39\xdf\xf9\xbe\xef\xdc\x79\xff\xd0\xe0\x5b\x00\xf0\xe9\xec\xdf\x7f\x00\x3c\x05\xe0\xaf\xfb\xe0\x7e\x95\xfd\xc0\xf3\x00\x5e\xda\x0f\xfc\x3f\x80\xdf\xef\x07\x16\x00\xd8\xfd\xc0\xe3\x00\x2e\x0c\x00\x9f\x05\xf0\xe2\x80\xdf\x5f\x18\x00\x1e\x03\xf0\xda\x00\x70\x0e\xc0\x9b\x03\xc0\x93\x00\xfe\x3c\x00\xbc\x0b\xe0\x1f\x03\xc0\x41\x00\x6b\x83\x40\x0e\xc0\xef\x06\x81\x43\x00\xfe\x39\x08\x7c\x1c\xc0\xbe\x21\xff\xf7\xc9\x21\x1f\xf7\xa5\x21\xe0\x30\x80\xaf\x0d\xf9\xfc\xdf\x1e\xf2\x75\x55\x16\x57\x19\x02\x02\x00\xd7\x87\x80\x2f\x02\xf8\xd7\x90\xaf\x7f\x64\x18\xf8\x28\x80\xa3\xc3\x3e\xee\x99\x61\x8f\x7b\x66\xd8\xd7\x7b\x77\x18\x38\xbb\x0f\x78\x6f\xd8\x9f\x3f\x7c\xc0\xc7\xd5\x0e\x00\x1f\x00\xf8\xe9\x01\xe0\x23\x00\x7e\x38\x02\x7c\x1e\xc0\xad\x11\xe0\x53\x82\x7b\x04\x38\x00\xe0\x8f\x23\x40\x1e\xc0\x7b\x23\x9e\xaf\x53\xa3\xc0\xe2\x3e\x40\x8d\x02\x63\x00\xfe\xf2\x98\xe7\xed\x83\xc7\x80\x27\x00\x7c\x75\x0c\x38\x02\xe0\xe2\x18\xf0\x31\x00\xa5\x31\x8f\xe3\x07\x63\xfe\xfc\xad\x31\x5f\x6f\x63\xcc\xf7\xf7\x87\x31\xe0\x33\x00\xfe\x34\x06\xbc\x01\xe0\xdf\x63\xc0\xd3\x00\x56\x0e\x02\xc3\x00\xd6\x0f\x7a\x5c\x9b\x07\xfd\xf9\xf7\x0f\x02\x7f\x03\x30\xf8\xb8\xcf\xf3\xf7\xc7\x01\x91\x50\x38\x94\x7c\x47\xbc\x9c\x18\xc4\xee\xef\xff\xe0\x63\xe5\x27\x3d\x3d\x91\x79\x60\x7f\xb6\xf6\x49\x00\x23\xf0\x7d\x8b\x86\x87\xb3\x75\xe1\xf5\x13\x00\x86\xe0\xb9\x96\x9f\x68\x73\x28\x7b\x16\x7c\x03\x00\x46\xe1\x39\x1d\xcb\xd6\xa5\x6f\xe4\xe3\xa8\x18\x94\x06\xbf\x51\x28\x18\x9d\x24\x14\x17\xe9\x7b\x4a\x97\xb4\xc9\xa9\x92\x8e\xd2\x2f\x24\x74\x61\x76\xf6\x12\x25\xaa\x5c\x09\x83\xa8\x44\x89\x36\x0b\xda\xd0\xb1\x38\x0a\xaf\x51\x31\x36\x64\x74\x39\x4e\xb5\x0f\xd0\xe6\x78\x27\xdf\xb9\x38\x4a\x52\x15\xa5\x3d\xef\xa9\x89\xc3\x84\xe6\xe3\x45\x8a\x8b\xa9\x8e\x28\x9d\xd7\xd9\xe9\xf0\x1a\xe5\xfd\x7e\xa8\x0b\x9d\x54\xb4\x18\x84\x21\x55\xe2\x30\xec\x43\xe4\x8a\xca\x51\x55\xa9\x98\xb8\x62\x02\xd5\xa9\xee\xe0\xa5\x46\xa5\xba\x74\xad\x53\xf6\x7c\xa4\xe6\x42\x5d\xd8\xf3\x4a\x65\x9d\x9a\x20\x9f\xb8\x5c\x97\x2f\x9d\xdb\xdd\x2e\x54\xe2\x60\x17\xf4\x85\x38\xe9\x79\xee\xc5\x3d\x57\x2d\x16\xb5\xa1\xc0\xa5\xc8\xeb\x5c\x31\xac\x26\xf3\xba\x30\x4e\x7a\x41\x47\x14\x14\x29\x10\xea\xa2\x38\xa5\x62\x35\x0c\x3b\x39\x2e\xc6\x79\x15\x52\x5e\xda\xcc\xa7\xb1\xe9\x2c\xcf\xa8\x97\x83\x72\xb5\x4c\x51\xb5\x3c\xa7\x8d\x48\x10\x57\xb4\x51\x69\x10\x47\x09\xa5\xf3\x2a\x75\x25\xfb\x68\xb9\xaa\x75\x85\x52\xa3\xf2\x57\x29\x2e\x9e\xa0\xe7\x8a\xa4\xa2\xdd\x53\x82\x4b\x6a\xbb\x00\x41\xa5\xa8\xa0\x8b\xaa\x1a\xa6\x54\x31\xf1\x9c\x9a\x0b\xc2\x20\x49\x83\x7c\x7f\xce\x39\x4d\xd5\x44\x17\xc8\xa8\x74\x5e\x0b\xc7\xca\xf7\x5a\x11\x4c\xdd\xd4\x49\x45\xe7\x83\xe2\xee\xd9\x4e\x13\xcf\xcb\xa1\xa4\xf3\x76\x49\x19\x55\x16\x18\x8a\x16\x54\x58\xd5\x54\x51\x89\xe4\x4e\xe3\xde\x5e\xba\xd1\xb1\x49\xb3\xee\xbb\x4b\xbd\x38\x3b\x8b\x97\x45\xeb\x30\x28\x07\x69\x10\x95\xba\x8b\xce\x42\xfd\x6f\x0f\x73\x7c\x59\x57\x62\x93\xee\xe6\xbf\xd2\x8f\xe0\x8a\x36\x0b\x41\x5e\x53\x92\x8f\x2b\xdd\x5c\x57\x82\xef\x6b\x51\x23\x88\x52\x6d\x22\x15\xd2\x4b\x55\x5d\xd5\xb4\x38\xaf\x8d\x38\xd7\x25\x2c\x50\x52\x51\x51\x42\xca\x68\x4a\xd2\xd8\xe8\x02\xcd\xe9\x62\x6c\xb4\xf4\x79\xcd\x2d\x57\x4c\x9c\xd7\xae\xfb\x20\x33\x8f\xca\x5f\x2d\x99\xb8\x1a\x75\x7d\x39\xab\x4a\x89\xec\x16\x63\x53\x16\xb9\x55\x69\xf2\xbb\x91\x2a\xeb\x69\xf7\xe4\x18\xec\x86\x5e\xdb\x05\xf8\x42\xa2\x0d\x85\x71\x29\x88\xfa\x56\x84\xeb\xc5\xd8\x74\xb3\xbf\x38\xaf\x23\xd2\xde\xfa\xe3\xd9\x43\x42\x17\xe3\x52\x29\x88\x4a\x1d\x62\xbc\xd1\x4c\x35\x72\x40\x2a\xca\xa8\x30\xd4\x21\x2d\x06\xe9\xbc\x03\x5d\x56\x41\xd4\x69\xda\x90\x8a\x0a\x52\x38\x21\x15\x86\x94\x54\xe7\xca\x41\xda\xe5\x22\x2b\x9b\x4b\xd5\xdc\xa0\x38\x50\xb4\xf2\x55\x72\x33\x49\x29\x28\xe4\xbe\x59\x2d\x25\xb9\xd9\x78\x8a\x0a\x7a\xe1\xeb\x57\x83\x79\x55\x8e\x4f\x98\xea\xe8\x45\x95\xa4\xb9\x59\xa3\xa2\x24\x54\x69\x6c\xa6\xe8\x5b\x6e\x8b\x66\xaa\x46\x95\xe3\x42\x4c\xa7\xfb\xe2\xcf\x8c\x5e\x54\x51\xa9\xaa\x4a\x3a\x37\xab\x55\x79\x8a\xba\xef\x53\x74\xb9\x9a\x24\x81\x8a\x46\x67\x9e\x9b\x39\x9f\xfb\x8e\x36\x49\x10\x47\x53\x34\x79\x62\x62\x54\xee\x21\x1d\xa5\x39\xa1\x71\x8a\x52\xfd\x72\xfa\x74\x25\x54\x41\x74\x8a\xf2\xf3\xca\x24\x3a\x9d\x7e\x61\xf6\xd9\xdc\x33\xbb\x71\x82\xa7\xa8\x4d\xee\x7c\x94\x8f\x0b\x41\x54\x9a\xa2\xd1\x4b\x61\xd5\xa8\x30\xf7\x6c\x6c\xca\xc9\x14\x45\x15\xf7\x9a\x4c\x7f\xf9\x14\xf9\xc7\xe9\xe8\xa9\xc9\x89\xe9\xe9\x49\x3a\x7a\x94\xe4\x71\xe2\x73\xd3\x93\x93\x74\x96\x26\x68\xca\xbd\x9f\x99\x3e\xd9\xd9\x3a\x3d\xfd\x15\x79\x3c\xe6\xc2\x4e\x4f\x4e\xd0\x2b\xaf\xf8\x23\x67\xa6\x4f\x4e\x1c\xa7\xb3\x34\x49\x53\x74\xf2\x14\xf8\x0d\xde\xb0\x4b\xdc\xb0\x35\x7f\x1f\xdb\x1a\x37\x78\x87\xb7\x79\x8b\x1b\x76\xc9\xbd\xda\x25\x5e\x73\xff\xd7\xe9\x98\x5d\xe6\x36\x6f\xd9\x9b\xbc\xc9\x6d\xe2\x0d\xde\xb2\xb7\xc9\xae\xf0\x06\xd7\xe5\x00\xb7\xb8\xc5\x6d\x5e\xe7\x36\xd9\x9a\x7d\x9d\xb7\x79\xc7\xe7\xe1\xfa\x71\xf0\xaf\xb8\x6d\x6b\x92\xc0\xde\x96\x40\x7b\x83\x1f\x80\xdf\xe6\x36\xb7\xec\xb2\x5d\x92\xbc\xdc\xb4\x4b\x76\x85\x1b\x76\x79\x9c\x78\x93\xeb\xbc\x49\x76\x95\xeb\xfe\x94\x94\x6b\xba\xc7\x3a\xb7\xec\x6b\xdc\x94\x93\x52\x4f\x00\xec\x48\x0d\x5e\x13\x3c\xdc\xe0\x6d\xc9\xbd\x07\x02\xf1\x5d\x07\xb4\x61\x97\x89\xdb\xfe\x80\xfd\x11\x37\x79\x8d\xeb\x76\xd9\xde\xcc\xbe\x05\xc4\x75\x5e\x97\x4e\xa4\x4e\xb7\xc3\x1a\xb7\xb9\x6d\x97\x1d\x0f\xcb\x0e\xc3\x9a\x5d\xb1\xb7\xec\x8f\xb9\xe1\x0b\x2d\xbb\x74\xcb\xdc\xe0\x75\x6e\x72\x93\x78\xcd\xde\xe0\xbb\xdc\xb6\x4b\xbc\xc9\x4d\xf0\x9b\xbc\xc9\x5b\xf6\x96\x5d\x75\x24\xb5\xf7\x2c\xd8\x1b\xf2\xb1\x20\xde\x76\xe9\x97\xb8\xe9\x0f\x39\x6e\xb8\x61\x57\xb9\xc5\x75\x81\x21\xdc\xad\x0a\x31\xe0\xdf\x7a\x32\x25\x68\x2f\x4d\x77\xed\x8a\x7d\xb5\xa3\xde\x5d\x07\xac\x66\x6f\x48\x9f\x19\xfa\xdb\xe3\xe4\x14\xbb\xc7\x0d\x12\xe5\x85\x78\xe1\xa4\x45\x52\x8e\xf8\x3e\xd7\x79\xc7\xe9\xd1\x12\x74\xe0\x9f\x71\xdb\xc9\x21\xc2\x3b\xdd\x44\x1d\xd9\x17\xcd\x37\x1d\xac\x25\xf0\xcf\x05\x89\xad\x71\x93\xb7\x3b\xb1\xdc\x96\x7c\x9b\x99\xb6\xab\x52\xcc\xb1\xd8\x76\x12\x78\x67\x38\x29\x1f\x38\xc1\xdb\x3e\x95\xbd\x21\xa7\x7a\xe5\x12\xd8\xae\xd8\xbd\x1e\xc1\xfa\xf5\x3d\x41\xfc\xd6\x6e\x2b\x3d\xb9\xed\xed\xac\xad\x87\xb2\xf4\xd0\xd1\x53\xac\x69\x6b\xbe\x7b\x7b\x93\xef\x73\xbb\x53\x4e\x02\x29\x1b\x84\xb6\xbd\x6d\x97\xa5\x3b\xd7\x4e\xeb\x91\x6e\xdb\xf1\xc6\xdc\x76\x99\x56\xc5\xb3\xdc\xb4\xb7\xc6\x49\x5c\xd5\xea\xb0\xd2\xe2\x4d\x37\x7c\x1f\x96\xc4\xdb\xcf\x71\x7f\x8f\x37\xb8\x2d\xcc\xf7\x13\xd7\x04\xff\xc4\x0d\xcd\xba\x70\x2d\x43\x56\x77\xa3\x90\x59\x89\xec\xeb\xde\x14\xf7\x9d\x87\xbc\xfd\x9a\x52\xde\x27\x69\x38\x23\xb4\x3a\x4a\xad\xf9\xf9\xef\x22\x00\xff\x82\xdb\x2e\x97\xef\xc8\x2e\xc9\x58\x88\x7b\x3f\x84\x06\xf0\x3b\x32\x12\xc2\xe3\x96\x33\x42\x53\x3c\xfa\x9b\xde\x0b\xc2\x87\x3d\xb4\xf4\x48\x4b\xbd\xe3\x2e\x23\x5f\xd6\xc1\xf9\x75\x3f\xba\x5f\xf2\x5d\xde\xf2\xce\x77\x86\xc8\x2e\x2b\x91\xb0\x2e\xa7\xeb\x7c\xbf\x83\x7e\x8d\x5b\x76\xc5\x4d\x97\xbf\xa6\x1a\x8e\x4b\xe7\x49\x4f\x43\x73\x9c\x78\x5d\x4c\x40\xce\x00\x75\x37\x96\xf6\xba\x63\xb3\x25\x9d\x7a\x07\x6c\x08\x9b\x4d\x7b\x5d\x84\x70\xc3\xe5\xc6\x7c\x59\x26\xd6\xf1\xf7\xaa\x93\x55\x6c\xd3\xe6\x6d\x72\xb9\xef\x39\x26\x1a\xe0\x3b\xfe\x7e\xe8\xc4\xd9\x25\x99\x14\x69\xed\xd1\x1f\x66\xbe\xc3\x4d\xde\xf1\xe3\x27\xd7\x4a\x8b\x1e\x36\x26\x37\xc4\x22\x1d\xdd\xdd\xe6\xff\x88\x7a\xdb\x65\xda\x10\x0f\xae\xf5\xdf\x48\xe3\xbd\x2b\x6e\x32\xf6\x7e\xc7\xf7\x4c\xe8\x03\xea\x69\xde\x1f\x10\xd6\xdc\xa2\x57\x31\xbb\x01\xc8\xd6\x84\xe8\x5a\xc6\x8a\x88\x9d\xf1\xd2\xa3\xac\x23\x8b\x9b\x7e\x7d\xdd\xdf\xf3\x72\x11\x76\xbe\x07\x72\xa1\xd6\xb2\x21\xde\xbd\xec\xbb\xee\xe9\xd5\x0c\x7c\xc7\x65\x79\xe0\xae\xa2\x16\xaf\xe3\xbf\x01\x00\x00\xff\xff\x96\x99\xef\x8c\xfb\x0e\x00\x00"

func localesRuLc_messagesConfigMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesConfigMo,
		"locales/ru/LC_MESSAGES/config.mo",
	)
}

func localesRuLc_messagesConfigMo() (*asset, error) {
	bytes, err := localesRuLc_messagesConfigMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/config.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"locales/ru/LC_MESSAGES/config.mo": localesRuLc_messagesConfigMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"config.mo": &bintree{localesRuLc_messagesConfigMo, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
