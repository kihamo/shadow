// Code generated by go-bindata.
// sources:
// locales/ru/LC_MESSAGES/config.mo
// DO NOT EDIT!

package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _localesRuLc_messagesConfigMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x55\xdd\x6f\x5c\x57\xf5\x5d\xf1\x57\x13\xff\x26\xed\x8f\x94\xb6\x90\x02\xda\x08\x35\x24\xd4\x93\xda\x0e\x95\xc2\x24\x4e\x0b\x21\x55\x2a\x62\x25\x24\x2e\x7d\xac\x8e\x67\xce\x8c\x2f\xb9\x73\xef\xf4\xdc\x3b\x76\x83\xfa\x60\x3b\x4d\x0d\x24\x4d\xa2\x8a\xbe\x94\xaf\x12\x3e\x1e\x10\x0f\x13\xdb\x13\x4f\x6c\xcf\x18\xa4\xfe\x01\xfb\xbc\xc0\x03\x1f\x2f\x08\xde\x28\x8f\xbc\x80\x84\xf6\x39\x33\xe3\xb1\x93\x32\x52\xe2\x7b\xce\xdd\x67\xef\xb5\xd7\x5a\xfb\xdc\xbf\x1c\x18\x78\x0f\x00\x3e\xd3\xfe\xf7\x6f\x00\xcf\x00\xf8\xd3\x1e\xb8\x5f\xa5\x0f\x38\x0f\xe0\xf5\x3e\xe0\x31\x00\xbf\xeb\x03\x66\x01\xd8\x3e\xe0\x51\x00\x67\xfb\x81\xcf\x01\x78\xb5\xdf\xbf\x9f\xed\x07\xfe\x0f\xc0\xdb\xfd\xc0\x69\x00\xef\xf6\x03\x4f\x02\xf8\x7d\x3f\xf0\x21\x80\x7f\xf4\x03\xfb\x01\x2c\x0f\x00\x59\x00\xbf\x1d\x00\x0e\x00\xf8\x68\x00\xf8\x24\x80\x3d\x83\xfe\xef\x93\x83\x3e\xee\xd9\x41\xe0\x29\x00\x5f\x19\xf4\xf9\xbf\x39\xe8\xeb\xaa\x76\x5c\x65\x10\x08\x00\x5c\x1b\x04\xbe\x04\xe0\x9f\x83\xbe\xfe\xc1\x21\xe0\x13\x00\x0e\x0d\xf9\xb8\xe3\x43\x1e\xf7\xe4\x90\xaf\xf7\xe1\x10\x30\xb3\x07\xf8\xc3\x90\x3f\xff\xe2\x5e\x1f\xf7\xeb\xbd\xc0\xdf\x01\x6c\xed\x05\xfe\x1f\xc0\xaf\xf6\x01\x5f\x00\xb0\xb6\x0f\x78\x1a\xc0\x1f\xf7\x01\x7b\x01\xfc\x6b\x1f\x90\x17\x82\x86\x3d\x5f\x85\x61\x60\x6e\x0f\xf0\xfd\x61\x20\x03\xa0\x2f\xe3\x79\x7b\x2c\x03\x3c\x01\xe0\xb5\x0c\x70\x10\x40\x35\x03\x3c\x0e\xe0\x76\xc6\xe3\xf8\x45\xc6\x9f\x5f\xcb\xf8\x7a\x7f\xce\xf8\xfe\x3e\xca\x00\x9f\x05\xf0\x9f\x0c\x70\x1b\xc0\xd3\xfb\x81\xe7\x00\xfc\x66\x3f\x30\x24\xfa\xec\xf7\xb8\xfe\xba\xdf\x9f\x7f\xe4\x51\xe0\x6f\x00\xb2\x8f\xfa\x3c\x8f\x3f\x06\x88\x84\xc2\xa1\xe4\x3b\xe8\xe5\xc4\x00\xb6\x7f\x8f\xc0\xc7\xca\x4f\x7a\x7a\xa2\xed\x81\xbe\xf6\xde\xa7\x01\xec\x83\xef\x5b\x34\x7c\xaa\xbd\x2f\xbc\x7e\x0a\xc0\x20\x3c\xd7\xf2\x13\x6d\x0e\xb4\x9f\x05\x5f\xbf\xa7\xc6\x71\x9a\x69\xef\x4b\xdf\xc8\xc7\x51\x31\x28\x0d\x7c\xb5\x50\x30\x3a\x49\x28\x2e\xd2\xb7\x95\x2e\x69\x93\x55\x25\x1d\xa5\x5f\x4c\xe8\xec\xd4\xd4\x05\x4a\x54\xb9\x12\x06\x51\x89\x12\x6d\x66\xb5\xa1\xc3\x71\x14\x5e\xa1\x62\x6c\xc8\xe8\x72\x9c\x6a\x1f\xa0\xcd\x91\x4e\xbe\xd3\x71\x94\xa4\x2a\x4a\x7b\xd6\xa9\x89\xc3\x84\x66\xe2\x39\x8a\x8b\xa9\x8e\x28\x9d\xd1\xed\xd3\xe1\x15\xca\xfb\xf7\xa1\x2e\x74\x52\xd1\x5c\x10\x86\x54\x89\xc3\x70\x07\x22\x57\x54\x8e\xaa\x4a\xc5\xc4\x15\x13\xa8\x4e\x75\x07\x2f\x35\x2a\xd5\xa5\x2b\x9d\xb2\x67\x22\x35\x1d\xea\xc2\xae\x25\x95\x75\x6a\x82\x7c\xe2\x72\x5d\xbc\x70\x7a\xfb\x75\xa1\x12\x07\xdb\xa0\xcf\xc6\x49\xcf\x73\x2f\xee\xe9\x6a\xb1\xa8\x0d\x05\x2e\x45\x5e\x67\x8b\x61\x35\x99\xd1\x85\x11\xd2\xb3\x3a\xa2\xa0\x48\x81\x50\x17\xc5\x29\x15\xab\x61\xd8\xc9\x71\x2e\xce\xab\x90\xf2\xd2\x66\x3e\x8d\x4d\x67\x7b\x52\xbd\x11\x94\xab\x65\x8a\xaa\xe5\x69\x6d\x44\x82\xb8\xa2\x8d\x4a\x83\x38\x4a\x28\x9d\x51\xa9\x2b\xb9\x83\x96\xcb\x5a\x57\x28\x35\x2a\x7f\x99\xe2\xe2\x51\x7a\xb9\x48\x2a\xda\x3e\x25\xb8\xa4\xb6\x0b\x10\x54\x8a\x0a\xba\xa8\xaa\x61\x4a\x15\x13\x4f\xab\xe9\x20\x0c\x92\x34\xc8\xef\xcc\x39\xad\xa9\x9a\xe8\x02\x19\x95\xce\x68\xe1\x58\xf9\x5e\x2b\x82\xa9\x9b\x3a\xa9\xe8\x7c\x50\xdc\x3e\xdb\x69\xe2\xbc\x1c\x4a\x3a\xab\x0b\xca\xa8\xb2\xc0\x50\x34\xab\xc2\xaa\xa6\x8a\x4a\x24\x77\x1a\xf7\xf6\xd2\x8d\x8e\x4d\xda\xee\xbe\xbb\xd5\x8b\xb3\xb3\x79\x51\xb4\x0e\x83\x72\x90\x06\x51\xa9\xbb\xe9\x2c\xb4\x73\xf5\x20\xc7\x17\x75\x25\x36\xe9\x76\xfe\x4b\x3b\x11\x5c\xd2\x66\x36\xc8\x6b\x4a\xf2\x71\xa5\x9b\xeb\x52\xf0\x1d\x2d\x6a\x04\x51\xaa\x4d\xa4\x42\x7a\xbd\xaa\xab\x9a\xe6\x66\xb4\x11\xe7\xba\x84\x05\x4a\x2a\x2a\x4a\x48\x19\x4d\x49\x1a\x1b\x5d\xa0\x69\x5d\x8c\x8d\x96\x3e\xaf\xb8\xed\x8a\x89\xf3\xda\x75\x1f\xb4\xcd\xa3\xf2\x97\x4b\x26\xae\x46\x5d\x5f\x4e\xa9\x52\x22\x6f\x8b\xb1\x29\x8b\xdc\xaa\x34\xf6\x5a\xa4\xca\x7a\xc2\x3d\x39\x06\xbb\xa1\x57\xb6\x01\xbe\x92\x68\x43\x61\x5c\x0a\xa2\x1d\x3b\xc2\xf5\x5c\x6c\xba\xd9\x5f\x9d\xd1\x11\x69\x6f\xfd\x91\xf6\x43\x42\xe7\xe2\x52\x29\x88\x4a\x1d\x62\xbc\xd1\x4c\x35\x72\x40\x2a\xca\xa8\x30\xd4\x21\xcd\x05\xe9\x8c\x03\x5d\x56\x41\xd4\x69\xda\x90\x8a\x0a\x52\x38\x21\x15\x86\x94\x54\xa7\xcb\x41\xda\xe5\xa2\x5d\x36\x9b\xaa\xe9\x01\x71\xa0\x68\xe5\xab\x64\x27\x93\x52\x50\xc8\x7e\xad\x5a\x4a\xb2\x53\x71\x8e\x0a\x7a\xf6\xc5\xcb\xc1\x8c\x2a\xc7\x47\x4d\x75\xf8\xc2\xf9\xa9\xec\x69\xa3\x9d\xcd\xb2\x5f\x57\xa9\xce\xd1\xf8\xe8\xd8\xf1\xec\xe8\xb1\xec\xf8\x31\x1a\x3f\x96\x7b\xfe\xf9\x67\x47\x8f\x8d\x8e\x0e\x9f\x53\x49\x9a\x9d\x32\x2a\x4a\x42\x95\xc6\x26\x47\xdf\x70\x39\x68\xb2\x6a\x54\x39\x2e\xc4\x74\x72\x47\xe2\x53\xc3\xe7\x54\x54\xaa\xaa\x92\xce\x4e\x69\x55\xce\x51\x77\x9d\xa3\x8b\xd5\x24\x09\x54\x34\x3c\xf9\xf2\xe4\x99\xec\xb7\xb4\x49\x82\x38\xca\xd1\xd8\xd1\xd1\x61\xb9\xb0\x74\x94\x66\x85\xef\x1c\xa5\xfa\x8d\xf4\xb9\x4a\xa8\x82\xe8\x04\xe5\x67\x94\x49\x74\x3a\xf1\xca\xd4\x4b\xd9\xe3\xdb\x71\x82\xa7\xa8\x4d\xf6\x4c\x94\x8f\x0b\x41\x54\xca\xd1\xf0\x85\xb0\x6a\x54\x98\x7d\x29\x36\xe5\x24\x47\x51\xc5\x2d\x93\x89\x63\x27\xc8\x3f\x4e\x44\xcf\x8c\x8d\x4e\x4c\x8c\xd1\xa1\x43\x24\x8f\xa3\x9f\x9f\x18\x1b\xa3\x17\x68\x94\x72\x6e\x7d\x6a\x62\xbc\xf3\xea\xe4\xc4\x97\xe5\xf1\xb0\x0b\x3b\x39\x36\x4a\x6f\xbe\xe9\x8f\x9c\x9a\x18\x1f\x3d\x42\x2f\xd0\x18\xe5\x68\xfc\x04\xf8\x36\xaf\xda\x79\xae\xdb\x05\x7f\x71\xdb\x05\xae\xf3\x16\x6f\xf2\x06\xd7\xed\xbc\x5b\xda\x79\x5e\x76\xff\xd7\xe8\xb0\x5d\xe4\x16\x6f\xd8\x1b\xbc\xce\x2d\xe2\x55\xde\xb0\xb7\xc8\x5e\xe5\x55\xae\xc9\x01\x6e\x72\x93\x5b\xbc\xc2\x2d\xb2\x0b\xf6\x1d\xde\xe4\x2d\x9f\x87\x6b\x47\xc0\x3f\xe5\x96\x5d\x90\x04\xf6\x96\x04\xda\xeb\x7c\x1f\xfc\x3e\xb7\xb8\x69\x17\xed\xbc\xe4\xe5\x86\x9d\xb7\x57\xb9\x6e\x17\x47\x88\xd7\xb9\xc6\xeb\x64\x97\xb8\xe6\x4f\x49\xb9\x86\x7b\xac\x71\xd3\xbe\xcd\x0d\x39\x29\xf5\x04\xc0\x96\xd4\xe0\x65\xc1\xc3\x75\xde\x94\xdc\xbb\x20\x10\xdf\x75\x40\xeb\x76\x91\xb8\xe5\x0f\xd8\xef\x72\x83\x97\xb9\x66\x17\xed\x8d\xf6\x47\x83\xb8\xc6\x2b\xd2\x89\xd4\xe9\x76\xb8\xc0\x2d\x6e\xd9\x45\xc7\xc3\xa2\xc3\xb0\x6c\xaf\xda\x9b\xf6\x7b\x5c\xf7\x85\x16\x5d\xba\x45\xae\xf3\x0a\x37\xb8\x41\xbc\x6c\xaf\xf3\x5d\x6e\xd9\x79\x5e\xe7\x06\xf8\x5d\x5e\xe7\x0d\x7b\xd3\x2e\x39\x92\x5a\xbb\x36\xec\x75\xf9\xaa\x10\x6f\xba\xf4\xf3\xdc\xf0\x87\x1c\x37\x5c\xb7\x4b\xdc\xe4\x9a\xc0\x10\xee\x96\x84\x18\xf0\x2f\x3d\x99\x12\xb4\x9b\xa6\xbb\xf6\xaa\x7d\xab\xa3\xde\x5d\x07\x6c\xc1\x5e\x97\x3e\xdb\xe8\x6f\x8d\x90\x53\xec\x1e\xd7\x49\x94\x17\xe2\x85\x93\x26\x49\x39\xe2\x35\xae\xf1\x96\xd3\xa3\x29\xe8\xc0\x3f\xe4\x96\x93\x43\x84\x77\xba\x89\x3a\xf2\x5e\x34\x5f\x77\xb0\xe6\xc1\x3f\x12\x24\x76\x81\x1b\xbc\xd9\x89\xe5\x96\xe4\x5b\x6f\x6b\xbb\x24\xc5\x1c\x8b\x2d\x27\x81\x77\x86\x93\xf2\xbe\x13\xbc\xe5\x53\xd9\xeb\x72\xaa\x57\x2e\x81\xed\x8a\xdd\xeb\x11\x6c\xa7\xbe\x47\x89\xdf\xdb\x6e\xa5\x27\xb7\xbd\xd5\x6e\xeb\x81\x2c\x3d\x74\xf4\x14\x6b\xd8\x05\xdf\xbd\xbd\xc1\x6b\xdc\xea\x94\x93\x40\x6a\x0f\x42\xcb\xde\xb2\x8b\xd2\x9d\x6b\xa7\xf9\x50\xb7\x6d\x79\x63\x6e\xba\x4c\x4b\xe2\x59\x6e\xd8\x9b\x23\x24\xae\x6a\x76\x58\x69\xf2\xba\x1b\xbe\x8f\x4b\xe2\xed\xe7\xb8\xbf\xc7\xab\xdc\x12\xe6\x77\x12\xd7\x00\xff\xc0\x0d\xcd\x8a\x70\x2d\x43\x56\x73\xa3\xd0\xb6\x12\xd9\x77\xbc\x29\xd6\x9c\x87\xbc\xfd\x1a\x52\xde\x27\xa9\x3b\x23\x34\x3b\x4a\x2d\xfb\xf9\xef\x22\x00\xff\x98\x5b\x2e\x97\xef\xc8\xce\xcb\x58\x88\x7b\x3f\x86\x06\xf0\x07\x32\x12\xc2\xe3\x86\x33\x42\x43\x3c\xfa\xf3\xde\x0b\xc2\x87\x3d\xb0\xf5\x50\x4b\x7d\xe0\x2e\x23\x5f\xd6\xc1\xf9\xd9\x4e\x74\x3f\xe1\xbb\xbc\xe1\x9d\xef\x0c\xd1\xbe\xac\x44\xc2\x9a\x9c\xae\xf1\x5a\x07\xfd\x32\x37\xed\x55\x37\x5d\xfe\x9a\xaa\x3b\x2e\x9d\x27\x3d\x0d\x8d\x11\xe2\x15\x31\x01\x39\x03\xd4\xdc\x58\xda\x6b\x8e\xcd\xa6\x74\xea\x1d\xb0\x2a\x6c\x36\xec\x35\x11\xc2\x0d\x97\x1b\xf3\x45\x99\x58\xc7\xdf\x5b\x4e\x56\xb1\x4d\x8b\x37\xc9\xe5\xbe\xe7\x98\xa8\x83\xef\xf8\xfb\xa1\x13\x67\xe7\x65\x52\xa4\xb5\x87\x7f\xc1\xf9\x0e\x37\x78\xcb\x8f\x9f\x5c\x2b\x4d\x7a\xd0\x98\x5c\x17\x8b\x74\x74\x77\x2f\xff\x47\xd4\xfb\x2e\xd3\xaa\x78\x70\x79\xe7\x8d\x34\xd2\xbb\xe3\x26\x63\xf7\x07\x7f\xd7\x84\xde\xa7\x9e\xe6\xfd\x01\x61\xcd\x6d\x7a\x15\xdb\x37\x00\xd9\x05\x21\x7a\xa1\xcd\x8a\x88\xdd\xe6\xa5\x47\x59\x47\x16\x37\xfc\xfe\x8a\xbf\xe7\xe5\x22\xec\x7c\x0f\xe4\x42\x5d\x68\x0f\xf1\xf6\x65\xdf\x75\x4f\xaf\x66\xe0\x3b\x2e\xcb\x7d\x77\x15\x35\x79\x05\xff\x0d\x00\x00\xff\xff\xd5\x13\x36\xd5\x24\x0f\x00\x00"

func localesRuLc_messagesConfigMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesConfigMo,
		"locales/ru/LC_MESSAGES/config.mo",
	)
}

func localesRuLc_messagesConfigMo() (*asset, error) {
	bytes, err := localesRuLc_messagesConfigMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/config.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"locales/ru/LC_MESSAGES/config.mo": localesRuLc_messagesConfigMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"config.mo": &bintree{localesRuLc_messagesConfigMo, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
