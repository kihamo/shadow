// Code generated by go-bindata.
// sources:
// locales/ru/LC_MESSAGES/config.mo
// DO NOT EDIT!

package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _localesRuLc_messagesConfigMo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x55\x4f\x6c\x5c\x57\xf5\xfe\x1a\xff\xf9\xc5\xae\xd3\x1f\x04\xda\x42\x4b\xd1\x41\xa8\x25\x01\x4f\x6a\x3b\x54\x8a\x26\x71\x4a\x08\x29\xad\x48\x94\x90\xb8\xb0\xa4\xd7\x33\x77\xc6\x8f\xbc\x79\x6f\xb8\xef\x8d\xdd\xa0\x2e\x3c\xe3\x16\x53\x25\x4d\x2a\x94\x6e\x4a\x81\x12\xc4\x7e\xfc\x67\x92\x89\xed\x19\x83\x84\xd8\xc0\xe2\x5c\x89\x15\x12\x65\x03\xac\xd8\x20\xb1\x60\x89\xce\xbd\x33\xe3\x19\x27\x65\x16\xf6\x7d\xf7\xdd\x73\xce\x77\xbe\xef\x3b\xf7\x7d\x74\x78\xf8\x3d\x00\x78\x1a\xc0\xe7\x00\xfc\x1b\xc0\xb3\x00\xfe\xf8\x08\xdc\xef\xb5\x03\xc0\x45\x00\xea\x00\xf0\xff\x00\xd6\x0e\x00\x8b\x00\x7e\x7b\x00\x78\x0c\xc0\x89\x21\xe0\xf3\x00\xbe\x39\xe4\xdf\x17\x86\x80\x47\x01\x2c\x0e\x01\x67\x01\xd4\x86\x80\x27\x00\xfc\x7e\x08\xf8\x1d\x80\xbf\x0c\x01\x87\x00\xdc\x19\x06\x32\x00\xea\xc3\xc0\x61\x00\x1f\x0d\x03\x9f\x06\xf0\xaf\xce\xff\xd1\x11\x7f\xee\xe9\x11\xe0\x49\x00\x47\x47\x7c\xfe\x33\x23\xbe\xee\xb7\x47\xfc\xb9\xd7\x46\x80\x00\x40\x65\x04\xf8\x32\x80\xbf\x8e\xf8\xfa\xe3\xa3\xc0\x27\x01\x3c\x31\xea\xcf\x1d\x19\xf5\xb8\x67\x47\x81\x85\x47\x80\xcd\x51\x1f\xf7\xcc\x41\xff\x7e\xf5\x20\xf0\x0f\x00\x1f\x1c\x04\x3e\x01\x60\x65\x0c\xf8\x22\x80\xdb\x63\x9e\x9b\xe6\x18\x70\x10\xc0\x9f\xc6\x80\x9c\xf4\x31\xe6\x79\x3a\x33\x0e\x2c\x3d\x02\x14\xc7\x81\x09\xa9\xff\xa8\xe7\xeb\x9f\x8f\x02\x8f\x03\x38\x35\x01\x3c\x05\xe0\xf2\x04\xf0\x29\x00\xa5\x09\xdf\x6f\x75\xc2\xc7\xdf\x9e\xf0\xf5\xb6\x26\x7c\x5f\x7f\x98\x00\x9e\x01\xf0\xe7\x09\xe0\x5d\x00\xff\x99\x00\x9e\x07\xf0\xf6\x21\x60\x14\xc0\xfd\x43\x1e\xd7\x6f\x0e\xf9\xf8\xbf\x1d\x02\xfe\x2e\xfd\x3e\x06\x88\x64\xc2\x99\xe4\x79\xca\xcb\x87\x61\xec\xfd\xfe\x0f\xbe\x96\xfc\xa4\x97\xc7\x3b\xeb\x03\x9d\xff\x9f\x05\x30\xd6\xf1\x82\x68\xf6\x64\x67\x5f\x78\xfc\x0c\x80\x11\x78\x6e\xe5\x27\x5a\x1c\xee\xac\x05\xd7\x90\x60\x80\xe7\x72\xa2\xb3\x2f\xfd\x22\x17\x47\x85\xa0\x38\x7c\x26\x9f\x37\x3a\x49\x28\x2e\xd0\xf7\x95\x2e\x6a\x93\x51\x45\x1d\xa5\x5f\x4a\xe8\xe5\xb9\xb9\x4b\x94\xa8\x52\x39\x0c\xa2\x22\x25\xda\x2c\x6a\x43\x47\xe2\x28\xbc\x46\x85\xd8\x90\xd1\xa5\x38\xd5\xfe\x80\x36\x47\xbb\xf9\xce\xc6\x51\x92\xaa\x28\xed\x7b\x4e\x4d\x1c\x26\xb4\x10\x2f\x51\x5c\x48\x75\x44\xe9\x82\xee\x44\x87\xd7\x28\xe7\xdf\x87\x3a\xdf\x4d\x45\x4b\x41\x18\x52\x39\x0e\xc3\x01\x44\xae\xa8\x84\xaa\x72\xd9\xc4\x65\x13\xa8\x6e\x75\x07\x2f\x35\x2a\xd5\xc5\x6b\xdd\xb2\xe7\x22\x35\x1f\xea\xfc\xbe\x47\x2a\xe9\xd4\x04\xb9\xc4\xe5\xba\x7c\xe9\xec\xde\xeb\x7c\x39\x0e\xf6\x40\xbf\x1c\x27\x7d\xeb\x7e\xdc\xf3\x95\x42\x41\x1b\x0a\x5c\x8a\x9c\xce\x14\xc2\x4a\xb2\xa0\xf3\x93\xa4\x17\x75\x44\x41\x81\x02\xa1\x2e\x8a\x53\x2a\x54\xc2\xb0\x9b\xe3\x7c\x9c\x53\x21\xe5\xa4\xcd\x5c\x1a\x9b\xee\xf6\x05\xf5\x7a\x50\xaa\x94\x28\xaa\x94\xe6\xb5\x11\x09\xe2\xb2\x36\x2a\x0d\xe2\x28\xa1\x74\x41\xa5\xae\xe4\x00\x2d\x57\xb5\x2e\x53\x6a\x54\xee\x2a\xc5\x85\x63\xf4\x4a\x81\x54\xb4\x17\x25\xb8\xa4\xb6\x3b\x20\xa8\x14\xe5\x75\x41\x55\xc2\x94\xca\x26\x9e\x57\xf3\x41\x18\x24\x69\x90\x1b\xcc\x39\xaf\xa9\x92\xe8\x3c\x19\x95\x2e\x68\xe1\x58\xf9\x5e\xcb\x82\xa9\x97\x3a\x29\xeb\x5c\x50\xd8\x8b\xed\x36\x71\x51\x82\x92\xee\xd3\x25\x65\x54\x49\x60\x28\x5a\x54\x61\x45\x53\x59\x25\x92\x3b\x8d\xfb\x7b\xe9\x9d\x8e\x4d\xda\xe9\xbe\xb7\xd5\x8f\xb3\xbb\x79\x59\xb4\x0e\x83\x52\x90\x06\x51\xb1\xb7\xe9\x2c\x34\xf8\xf4\x20\xc7\x97\x75\x39\x36\xe9\x5e\xfe\x2b\x83\x08\xae\x68\xb3\x18\xe4\x34\x25\xb9\xb8\xdc\xcb\x75\x25\xf8\xa1\x16\x35\x82\x28\xd5\x26\x52\x21\xfd\xa0\xa2\x2b\x9a\x96\x16\xb4\x11\xe7\xba\x84\x79\x4a\xca\x2a\x4a\x48\x19\x4d\x49\x1a\x1b\x9d\xa7\x79\x5d\x88\x8d\x96\x3e\xaf\xb9\xed\xb2\x89\x73\xda\x75\x1f\x74\xcc\xa3\x72\x57\x8b\x26\xae\x44\x3d\x5f\xce\xa9\x62\x22\x6f\x0b\xb1\x29\x89\xdc\xaa\x38\xfd\xbd\x48\x95\xf4\xac\x5b\x39\x06\x7b\x47\xaf\xed\x01\x7c\x35\xd1\x86\xc2\xb8\x18\x44\x03\x3b\xc2\xf5\x52\x6c\x7a\xd9\xbf\xbb\xa0\x23\xd2\xde\xfa\x93\x9d\x45\x42\xe7\xe3\x62\x31\x88\x8a\x5d\x62\xbc\xd1\x4c\x25\x72\x40\xca\xca\xa8\x30\xd4\x21\x2d\x05\xe9\x82\x03\x5d\x52\x41\xd4\x6d\xda\x90\x8a\xf2\x52\x38\x21\x15\x86\x94\x54\xe6\x4b\x41\xda\xe3\x02\x3e\x65\xe6\x42\x52\x0c\xf2\x99\xaf\x57\x8a\x49\x66\x2e\xce\x52\x5e\x2f\x7e\xed\x6a\xb0\xa0\x4a\xf1\x31\x53\x19\xbf\x74\x71\x2e\x73\xd6\x68\xe7\xa9\xcc\x37\x54\xaa\xb3\x34\x33\x35\x7d\x22\x33\x75\x3c\x33\x73\x9c\x66\x8e\x67\x5f\x78\xe1\x2b\x53\xc7\xa7\xa6\xc6\xcf\xab\x24\xcd\xcc\x19\x15\x25\xa1\x4a\x63\x93\xa5\x6f\xb9\x1c\x74\xa1\x62\x54\x29\xce\xc7\x74\x6a\x20\xf1\xe9\xf1\xf3\x2a\x2a\x56\x54\x51\x67\xe6\xb4\x2a\x65\xa9\xf7\x9c\xa5\xcb\x95\x24\x09\x54\x34\x7e\xe1\x95\x0b\xe7\x32\xdf\xd1\x26\x09\xe2\x28\x4b\xd3\xc7\xa6\xc6\xe5\x76\xd2\x51\x9a\x11\x72\xb3\x94\xea\xd7\xd3\xe7\xcb\xa1\x0a\xa2\x93\x94\x5b\x50\x26\xd1\xe9\xec\xab\x73\x2f\x65\x4e\xec\x9d\x13\x3c\x05\x6d\x32\xe7\xa2\x5c\x9c\x0f\xa2\x62\x96\xc6\x2f\x85\x15\xa3\xc2\xcc\x4b\xb1\x29\x25\x59\x8a\xca\xee\x31\x99\x3d\x7e\x92\xfc\x72\x36\x7a\x76\x7a\x6a\x76\x76\x9a\x9e\x7b\x8e\x64\x39\xf5\x85\xd9\xe9\x69\x7a\x91\xa6\x28\xeb\x9e\x4f\xcf\xce\x74\x5f\x9d\x9a\xfd\xaa\x2c\x8f\xb8\x63\xa7\xa6\xa7\xe8\x8d\x37\x7c\xc8\xe9\xd9\x99\xa9\xa3\xf4\x22\x4d\x53\x96\x66\x4e\x82\xdf\xe5\x4d\xbb\xcc\x0d\x5b\xf5\xb7\xb4\xad\x72\x83\x77\x79\x87\xb7\xb9\x61\x97\xdd\xa3\x5d\xe6\x75\xf7\xb7\x4e\x47\x6c\x8d\xdb\xbc\x6d\x6f\xf0\x16\xb7\x89\x37\x79\xdb\xde\x22\xbb\xc2\x9b\x5c\x97\x00\x6e\x71\x8b\xdb\xbc\xc1\x6d\xb2\x55\xfb\x0e\xef\xf0\xae\xcf\xc3\xf5\xa3\xe0\x5f\x70\xdb\x56\x25\x81\xbd\x25\x07\xed\x75\xbe\x0f\x7e\x9f\xdb\xdc\xb2\x35\xbb\x2c\x79\xb9\x69\x97\xed\x0a\x37\x6c\x6d\x92\x78\x8b\xeb\xbc\x45\x76\x95\xeb\x3e\x4a\xca\x35\xdd\xb2\xce\x2d\xfb\x23\x6e\x4a\xa4\xd4\x13\x00\xbb\x52\x83\xd7\x05\x0f\x37\x78\x47\x72\xef\x83\x40\xbc\xe6\x80\x36\x6c\x8d\xb8\xed\x03\xec\x8f\xb9\xc9\xeb\x5c\xb7\x35\x7b\xa3\xf3\x85\x20\xae\xf3\x86\x74\x22\x75\x7a\x1d\x56\xb9\xcd\x6d\x5b\x73\x3c\xd4\x1c\x86\x75\xbb\x62\x6f\xda\xb7\xb9\xe1\x0b\xd5\x5c\xba\x1a\x37\x78\x83\x9b\xdc\x24\x5e\xb7\xd7\x79\x8d\xdb\x76\x99\xb7\xb8\x09\xfe\x09\x6f\xf1\xb6\xbd\x69\x57\x1d\x49\xed\x7d\x1b\xf6\xba\x7c\x42\x88\x77\x5c\xfa\x65\x6e\xfa\x20\xc7\x0d\x37\xec\x2a\xb7\xb8\x2e\x30\x84\xbb\x55\x21\x06\xfc\x6b\x4f\xa6\x1c\xda\x4f\xd3\x9a\x5d\xb1\x6f\x76\xd5\x5b\x73\xc0\xaa\xf6\xba\xf4\xd9\x41\x7f\x6b\x92\x9c\x62\x77\xb9\x41\xa2\xbc\x10\x2f\x9c\xb4\x48\xca\x11\xdf\xe3\x3a\xef\x3a\x3d\x5a\x82\x0e\xfc\x53\x6e\x3b\x39\x44\x78\xa7\x9b\xa8\x23\xef\x45\xf3\x2d\x07\x6b\x19\xfc\x81\x20\xb1\x55\x6e\xf2\x4e\xf7\x2c\xb7\x25\xdf\x56\x47\xdb\x55\x29\xe6\x58\x6c\x3b\x09\xbc\x33\x9c\x94\xf7\x9d\xe0\x6d\x9f\xca\x5e\x97\xa8\x7e\xb9\x04\xb6\x2b\x76\xb7\x4f\xb0\x41\x7d\x8f\x11\xbf\xb7\xd7\x4a\x5f\x6e\x7b\xab\xd3\xd6\x03\x59\xfa\xe8\xe8\x2b\xd6\xb4\x55\xdf\xbd\xbd\xc1\xf7\xb8\xdd\x2d\x27\x07\xa9\x33\x08\x6d\x7b\xcb\xd6\xa4\x3b\xd7\x4e\xeb\xa1\x6e\xdb\xf5\xc6\xdc\x71\x99\x56\xc5\xb3\xdc\xb4\x37\x27\x49\x5c\xd5\xea\xb2\xd2\xe2\x2d\x37\x7c\x1f\x97\xc4\xdb\xcf\x71\x7f\x97\x37\xb9\x2d\xcc\x0f\x12\xd7\x04\xdf\x76\x43\xb3\x21\x5c\xcb\x90\xd5\xdd\x28\x74\xac\x44\xf6\x1d\x6f\x8a\x7b\xce\x43\xde\x7e\x4d\x29\xef\x93\x34\x9c\x11\x5a\x5d\xa5\xd6\xfd\xfc\xf7\x10\x80\x7f\xc6\x6d\x97\xcb\x77\x64\x97\x65\x2c\xc4\xbd\x1f\x43\x03\xf8\x43\x19\x09\xe1\x71\xdb\x19\xa1\x29\x1e\xfd\x55\xff\x05\xe1\x8f\x3d\xb0\xf5\x50\x4b\x7d\xe8\x2e\x23\x5f\xd6\xc1\xf9\xe5\x20\xba\x9f\xf3\x1a\x6f\x7b\xe7\x3b\x43\x74\x2e\x2b\x91\xb0\x2e\xd1\x75\xbe\xd7\x45\xbf\xce\x2d\xbb\xe2\xa6\xcb\x5f\x53\x0d\xc7\xa5\xf3\xa4\xa7\xa1\x39\x49\xbc\x21\x26\x20\x67\x80\xba\x1b\x4b\xfb\x96\x63\xb3\x25\x9d\x7a\x07\x6c\x0a\x9b\x4d\xfb\x96\x08\xe1\x86\xcb\x8d\x79\x4d\x26\xd6\xf1\xf7\xa6\x93\x55\x6c\xd3\xe6\x1d\x72\xb9\xef\x3a\x26\x1a\xe0\x3b\xfe\x7e\xe8\x9e\xb3\xcb\x32\x29\xd2\xda\xc3\x3f\xd7\x7c\x87\x9b\xbc\xeb\xc7\x4f\xae\x95\x16\x3d\x68\x4c\x6e\x88\x45\xba\xba\xbb\x97\xff\xe3\xd4\xfb\x2e\xd3\xa6\x78\x70\x7d\xf0\x46\x9a\xec\xdf\x71\x93\xb1\xff\xeb\xbe\x6f\x42\xef\x53\x5f\xf3\x3e\x40\x58\x73\x9b\x5e\xc5\xce\x0d\x40\xb6\x2a\x44\x57\x3b\xac\x88\xd8\x1d\x5e\xfa\x94\x75\x64\x71\xd3\xef\x6f\xf8\x7b\x5e\x2e\xc2\xee\xf7\x40\x2e\xd4\x6a\x67\x88\xf7\x2e\xfb\x9e\x7b\xfa\x35\xc3\x7f\x03\x00\x00\xff\xff\x65\xe7\xa6\x78\xf0\x0e\x00\x00")

func localesRuLc_messagesConfigMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesConfigMo,
		"locales/ru/LC_MESSAGES/config.mo",
	)
}

func localesRuLc_messagesConfigMo() (*asset, error) {
	bytes, err := localesRuLc_messagesConfigMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/config.mo", size: 3824, mode: os.FileMode(420), modTime: time.Unix(1541329297, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"locales/ru/LC_MESSAGES/config.mo": localesRuLc_messagesConfigMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"config.mo": &bintree{localesRuLc_messagesConfigMo, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
