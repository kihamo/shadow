// Code generated by go-bindata.
// sources:
// templates/layouts/base.html
// templates/layouts/simple.html
// templates/views/404.html
// templates/views/405.html
// templates/views/500.html
// templates/views/bindata.html
// templates/views/components.html
// templates/views/config.html
// templates/views/environment.html
// assets/css/custom.css
// assets/css/custom.min.css
// assets/css/dashboard.css
// assets/css/dashboard.min.css
// assets/images/back_disabled.png
// assets/images/back_enabled.png
// assets/images/back_enabled_hover.png
// assets/images/favicon.svg
// assets/images/forward_disabled.png
// assets/images/forward_enabled.png
// assets/images/forward_enabled_hover.png
// assets/images/loading.gif
// assets/js/config.js
// assets/js/config.min.js
// assets/js/custom.js
// assets/js/custom.min.js
// assets/js/functions.js
// assets/js/functions.min.js
// assets/vendors/autosize/js/autosize.min.js
// assets/vendors/bootstrap/css/bootstrap.min.css
// assets/vendors/bootstrap/fonts/glyphicons-halflings-regular.eot
// assets/vendors/bootstrap/fonts/glyphicons-halflings-regular.svg
// assets/vendors/bootstrap/fonts/glyphicons-halflings-regular.ttf
// assets/vendors/bootstrap/fonts/glyphicons-halflings-regular.woff
// assets/vendors/bootstrap/fonts/glyphicons-halflings-regular.woff2
// assets/vendors/bootstrap/js/bootstrap.min.js
// assets/vendors/bootstrap-progressbar/css/bootstrap-progressbar.min.css
// assets/vendors/bootstrap-progressbar/js/bootstrap-progressbar.min.js
// assets/vendors/bootstrap-show-password/js/bootstrap-show-password.min.js
// assets/vendors/datatables.net/js/jquery.dataTables.min.js
// assets/vendors/datatables.net-bs/css/dataTables.bootstrap.min.css
// assets/vendors/datatables.net-bs/js/dataTables.bootstrap.min.js
// assets/vendors/datatables.net-fixedheader/js/dataTables.fixedHeader.min.js
// assets/vendors/datatables.net-fixedheader-bs/css/fixedHeader.bootstrap.min.css
// assets/vendors/fastclick/js/fastclick.min.js
// assets/vendors/font-awesome/css/font-awesome.min.css
// assets/vendors/font-awesome/fonts/FontAwesome.otf
// assets/vendors/font-awesome/fonts/fontawesome-webfont.eot
// assets/vendors/font-awesome/fonts/fontawesome-webfont.svg
// assets/vendors/font-awesome/fonts/fontawesome-webfont.ttf
// assets/vendors/font-awesome/fonts/fontawesome-webfont.woff
// assets/vendors/font-awesome/fonts/fontawesome-webfont.woff2
// assets/vendors/icheck/css/green.min.css
// assets/vendors/icheck/css/green.png
// assets/vendors/icheck/css/green@2x.png
// assets/vendors/icheck/js/icheck.min.js
// assets/vendors/jquery/js/jquery.min.js
// assets/vendors/nprogress/css/nprogress.min.css
// assets/vendors/nprogress/js/nprogress.min.js
// assets/vendors/switchery/css/switchery.min.css
// assets/vendors/switchery/js/switchery.min.js
// assets/vendors/validator/js/multifield.min.js
// assets/vendors/validator/js/validator.min.js
// assets/vendors/waitMe/css/waitMe.min.css
// assets/vendors/waitMe/js/waitMe.min.js
// DO NOT EDIT!

package dashboard

import (
	"net/http"
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
)

// bindataRead reads the given file from disk. It returns an error on failure.
func bindataRead(path, name string) ([]byte, error) {
	buf, err := ioutil.ReadFile(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset %s at %s: %v", name, path, err)
	}
	return buf, err
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

// templatesLayoutsBaseHtml reads file data from disk. It returns an error on failure.
func templatesLayoutsBaseHtml() (*asset, error) {
	path := "/Users/sergey.fedosenko/go/src/github.com/kihamo/shadow/components/dashboard/templates/layouts/base.html"
	name := "templates/layouts/base.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesLayoutsSimpleHtml reads file data from disk. It returns an error on failure.
func templatesLayoutsSimpleHtml() (*asset, error) {
	path := "/Users/sergey.fedosenko/go/src/github.com/kihamo/shadow/components/dashboard/templates/layouts/simple.html"
	name := "templates/layouts/simple.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesViews404Html reads file data from disk. It returns an error on failure.
func templatesViews404Html() (*asset, error) {
	path := "/Users/sergey.fedosenko/go/src/github.com/kihamo/shadow/components/dashboard/templates/views/404.html"
	name := "templates/views/404.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesViews405Html reads file data from disk. It returns an error on failure.
func templatesViews405Html() (*asset, error) {
	path := "/Users/sergey.fedosenko/go/src/github.com/kihamo/shadow/components/dashboard/templates/views/405.html"
	name := "templates/views/405.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesViews500Html reads file data from disk. It returns an error on failure.
func templatesViews500Html() (*asset, error) {
	path := "/Users/sergey.fedosenko/go/src/github.com/kihamo/shadow/components/dashboard/templates/views/500.html"
	name := "templates/views/500.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesViewsBindataHtml reads file data from disk. It returns an error on failure.
func templatesViewsBindataHtml() (*asset, error) {
	path := "/Users/sergey.fedosenko/go/src/github.com/kihamo/shadow/components/dashboard/templates/views/bindata.html"
	name := "templates/views/bindata.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesViewsComponentsHtml reads file data from disk. It returns an error on failure.
func templatesViewsComponentsHtml() (*asset, error) {
	path := "/Users/sergey.fedosenko/go/src/github.com/kihamo/shadow/components/dashboard/templates/views/components.html"
	name := "templates/views/components.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesViewsConfigHtml reads file data from disk. It returns an error on failure.
func templatesViewsConfigHtml() (*asset, error) {
	path := "/Users/sergey.fedosenko/go/src/github.com/kihamo/shadow/components/dashboard/templates/views/config.html"
	name := "templates/views/config.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesViewsEnvironmentHtml reads file data from disk. It returns an error on failure.
func templatesViewsEnvironmentHtml() (*asset, error) {
	path := "/Users/sergey.fedosenko/go/src/github.com/kihamo/shadow/components/dashboard/templates/views/environment.html"
	name := "templates/views/environment.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsCssCustomCss reads file data from disk. It returns an error on failure.
func assetsCssCustomCss() (*asset, error) {
	path := "/Users/sergey.fedosenko/go/src/github.com/kihamo/shadow/components/dashboard/assets/css/custom.css"
	name := "assets/css/custom.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsCssCustomMinCss reads file data from disk. It returns an error on failure.
func assetsCssCustomMinCss() (*asset, error) {
	path := "/Users/sergey.fedosenko/go/src/github.com/kihamo/shadow/components/dashboard/assets/css/custom.min.css"
	name := "assets/css/custom.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsCssDashboardCss reads file data from disk. It returns an error on failure.
func assetsCssDashboardCss() (*asset, error) {
	path := "/Users/sergey.fedosenko/go/src/github.com/kihamo/shadow/components/dashboard/assets/css/dashboard.css"
	name := "assets/css/dashboard.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsCssDashboardMinCss reads file data from disk. It returns an error on failure.
func assetsCssDashboardMinCss() (*asset, error) {
	path := "/Users/sergey.fedosenko/go/src/github.com/kihamo/shadow/components/dashboard/assets/css/dashboard.min.css"
	name := "assets/css/dashboard.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsImagesBack_disabledPng reads file data from disk. It returns an error on failure.
func assetsImagesBack_disabledPng() (*asset, error) {
	path := "/Users/sergey.fedosenko/go/src/github.com/kihamo/shadow/components/dashboard/assets/images/back_disabled.png"
	name := "assets/images/back_disabled.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsImagesBack_enabledPng reads file data from disk. It returns an error on failure.
func assetsImagesBack_enabledPng() (*asset, error) {
	path := "/Users/sergey.fedosenko/go/src/github.com/kihamo/shadow/components/dashboard/assets/images/back_enabled.png"
	name := "assets/images/back_enabled.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsImagesBack_enabled_hoverPng reads file data from disk. It returns an error on failure.
func assetsImagesBack_enabled_hoverPng() (*asset, error) {
	path := "/Users/sergey.fedosenko/go/src/github.com/kihamo/shadow/components/dashboard/assets/images/back_enabled_hover.png"
	name := "assets/images/back_enabled_hover.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsImagesFaviconSvg reads file data from disk. It returns an error on failure.
func assetsImagesFaviconSvg() (*asset, error) {
	path := "/Users/sergey.fedosenko/go/src/github.com/kihamo/shadow/components/dashboard/assets/images/favicon.svg"
	name := "assets/images/favicon.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsImagesForward_disabledPng reads file data from disk. It returns an error on failure.
func assetsImagesForward_disabledPng() (*asset, error) {
	path := "/Users/sergey.fedosenko/go/src/github.com/kihamo/shadow/components/dashboard/assets/images/forward_disabled.png"
	name := "assets/images/forward_disabled.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsImagesForward_enabledPng reads file data from disk. It returns an error on failure.
func assetsImagesForward_enabledPng() (*asset, error) {
	path := "/Users/sergey.fedosenko/go/src/github.com/kihamo/shadow/components/dashboard/assets/images/forward_enabled.png"
	name := "assets/images/forward_enabled.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsImagesForward_enabled_hoverPng reads file data from disk. It returns an error on failure.
func assetsImagesForward_enabled_hoverPng() (*asset, error) {
	path := "/Users/sergey.fedosenko/go/src/github.com/kihamo/shadow/components/dashboard/assets/images/forward_enabled_hover.png"
	name := "assets/images/forward_enabled_hover.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsImagesLoadingGif reads file data from disk. It returns an error on failure.
func assetsImagesLoadingGif() (*asset, error) {
	path := "/Users/sergey.fedosenko/go/src/github.com/kihamo/shadow/components/dashboard/assets/images/loading.gif"
	name := "assets/images/loading.gif"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsJsConfigJs reads file data from disk. It returns an error on failure.
func assetsJsConfigJs() (*asset, error) {
	path := "/Users/sergey.fedosenko/go/src/github.com/kihamo/shadow/components/dashboard/assets/js/config.js"
	name := "assets/js/config.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsJsConfigMinJs reads file data from disk. It returns an error on failure.
func assetsJsConfigMinJs() (*asset, error) {
	path := "/Users/sergey.fedosenko/go/src/github.com/kihamo/shadow/components/dashboard/assets/js/config.min.js"
	name := "assets/js/config.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsJsCustomJs reads file data from disk. It returns an error on failure.
func assetsJsCustomJs() (*asset, error) {
	path := "/Users/sergey.fedosenko/go/src/github.com/kihamo/shadow/components/dashboard/assets/js/custom.js"
	name := "assets/js/custom.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsJsCustomMinJs reads file data from disk. It returns an error on failure.
func assetsJsCustomMinJs() (*asset, error) {
	path := "/Users/sergey.fedosenko/go/src/github.com/kihamo/shadow/components/dashboard/assets/js/custom.min.js"
	name := "assets/js/custom.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsJsFunctionsJs reads file data from disk. It returns an error on failure.
func assetsJsFunctionsJs() (*asset, error) {
	path := "/Users/sergey.fedosenko/go/src/github.com/kihamo/shadow/components/dashboard/assets/js/functions.js"
	name := "assets/js/functions.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsJsFunctionsMinJs reads file data from disk. It returns an error on failure.
func assetsJsFunctionsMinJs() (*asset, error) {
	path := "/Users/sergey.fedosenko/go/src/github.com/kihamo/shadow/components/dashboard/assets/js/functions.min.js"
	name := "assets/js/functions.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsVendorsAutosizeJsAutosizeMinJs reads file data from disk. It returns an error on failure.
func assetsVendorsAutosizeJsAutosizeMinJs() (*asset, error) {
	path := "/Users/sergey.fedosenko/go/src/github.com/kihamo/shadow/components/dashboard/assets/vendors/autosize/js/autosize.min.js"
	name := "assets/vendors/autosize/js/autosize.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsVendorsBootstrapCssBootstrapMinCss reads file data from disk. It returns an error on failure.
func assetsVendorsBootstrapCssBootstrapMinCss() (*asset, error) {
	path := "/Users/sergey.fedosenko/go/src/github.com/kihamo/shadow/components/dashboard/assets/vendors/bootstrap/css/bootstrap.min.css"
	name := "assets/vendors/bootstrap/css/bootstrap.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsVendorsBootstrapFontsGlyphiconsHalflingsRegularEot reads file data from disk. It returns an error on failure.
func assetsVendorsBootstrapFontsGlyphiconsHalflingsRegularEot() (*asset, error) {
	path := "/Users/sergey.fedosenko/go/src/github.com/kihamo/shadow/components/dashboard/assets/vendors/bootstrap/fonts/glyphicons-halflings-regular.eot"
	name := "assets/vendors/bootstrap/fonts/glyphicons-halflings-regular.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsVendorsBootstrapFontsGlyphiconsHalflingsRegularSvg reads file data from disk. It returns an error on failure.
func assetsVendorsBootstrapFontsGlyphiconsHalflingsRegularSvg() (*asset, error) {
	path := "/Users/sergey.fedosenko/go/src/github.com/kihamo/shadow/components/dashboard/assets/vendors/bootstrap/fonts/glyphicons-halflings-regular.svg"
	name := "assets/vendors/bootstrap/fonts/glyphicons-halflings-regular.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsVendorsBootstrapFontsGlyphiconsHalflingsRegularTtf reads file data from disk. It returns an error on failure.
func assetsVendorsBootstrapFontsGlyphiconsHalflingsRegularTtf() (*asset, error) {
	path := "/Users/sergey.fedosenko/go/src/github.com/kihamo/shadow/components/dashboard/assets/vendors/bootstrap/fonts/glyphicons-halflings-regular.ttf"
	name := "assets/vendors/bootstrap/fonts/glyphicons-halflings-regular.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsVendorsBootstrapFontsGlyphiconsHalflingsRegularWoff reads file data from disk. It returns an error on failure.
func assetsVendorsBootstrapFontsGlyphiconsHalflingsRegularWoff() (*asset, error) {
	path := "/Users/sergey.fedosenko/go/src/github.com/kihamo/shadow/components/dashboard/assets/vendors/bootstrap/fonts/glyphicons-halflings-regular.woff"
	name := "assets/vendors/bootstrap/fonts/glyphicons-halflings-regular.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsVendorsBootstrapFontsGlyphiconsHalflingsRegularWoff2 reads file data from disk. It returns an error on failure.
func assetsVendorsBootstrapFontsGlyphiconsHalflingsRegularWoff2() (*asset, error) {
	path := "/Users/sergey.fedosenko/go/src/github.com/kihamo/shadow/components/dashboard/assets/vendors/bootstrap/fonts/glyphicons-halflings-regular.woff2"
	name := "assets/vendors/bootstrap/fonts/glyphicons-halflings-regular.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsVendorsBootstrapJsBootstrapMinJs reads file data from disk. It returns an error on failure.
func assetsVendorsBootstrapJsBootstrapMinJs() (*asset, error) {
	path := "/Users/sergey.fedosenko/go/src/github.com/kihamo/shadow/components/dashboard/assets/vendors/bootstrap/js/bootstrap.min.js"
	name := "assets/vendors/bootstrap/js/bootstrap.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsVendorsBootstrapProgressbarCssBootstrapProgressbarMinCss reads file data from disk. It returns an error on failure.
func assetsVendorsBootstrapProgressbarCssBootstrapProgressbarMinCss() (*asset, error) {
	path := "/Users/sergey.fedosenko/go/src/github.com/kihamo/shadow/components/dashboard/assets/vendors/bootstrap-progressbar/css/bootstrap-progressbar.min.css"
	name := "assets/vendors/bootstrap-progressbar/css/bootstrap-progressbar.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsVendorsBootstrapProgressbarJsBootstrapProgressbarMinJs reads file data from disk. It returns an error on failure.
func assetsVendorsBootstrapProgressbarJsBootstrapProgressbarMinJs() (*asset, error) {
	path := "/Users/sergey.fedosenko/go/src/github.com/kihamo/shadow/components/dashboard/assets/vendors/bootstrap-progressbar/js/bootstrap-progressbar.min.js"
	name := "assets/vendors/bootstrap-progressbar/js/bootstrap-progressbar.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsVendorsBootstrapShowPasswordJsBootstrapShowPasswordMinJs reads file data from disk. It returns an error on failure.
func assetsVendorsBootstrapShowPasswordJsBootstrapShowPasswordMinJs() (*asset, error) {
	path := "/Users/sergey.fedosenko/go/src/github.com/kihamo/shadow/components/dashboard/assets/vendors/bootstrap-show-password/js/bootstrap-show-password.min.js"
	name := "assets/vendors/bootstrap-show-password/js/bootstrap-show-password.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsVendorsDatatablesNetJsJqueryDatatablesMinJs reads file data from disk. It returns an error on failure.
func assetsVendorsDatatablesNetJsJqueryDatatablesMinJs() (*asset, error) {
	path := "/Users/sergey.fedosenko/go/src/github.com/kihamo/shadow/components/dashboard/assets/vendors/datatables.net/js/jquery.dataTables.min.js"
	name := "assets/vendors/datatables.net/js/jquery.dataTables.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsVendorsDatatablesNetBsCssDatatablesBootstrapMinCss reads file data from disk. It returns an error on failure.
func assetsVendorsDatatablesNetBsCssDatatablesBootstrapMinCss() (*asset, error) {
	path := "/Users/sergey.fedosenko/go/src/github.com/kihamo/shadow/components/dashboard/assets/vendors/datatables.net-bs/css/dataTables.bootstrap.min.css"
	name := "assets/vendors/datatables.net-bs/css/dataTables.bootstrap.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsVendorsDatatablesNetBsJsDatatablesBootstrapMinJs reads file data from disk. It returns an error on failure.
func assetsVendorsDatatablesNetBsJsDatatablesBootstrapMinJs() (*asset, error) {
	path := "/Users/sergey.fedosenko/go/src/github.com/kihamo/shadow/components/dashboard/assets/vendors/datatables.net-bs/js/dataTables.bootstrap.min.js"
	name := "assets/vendors/datatables.net-bs/js/dataTables.bootstrap.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsVendorsDatatablesNetFixedheaderJsDatatablesFixedheaderMinJs reads file data from disk. It returns an error on failure.
func assetsVendorsDatatablesNetFixedheaderJsDatatablesFixedheaderMinJs() (*asset, error) {
	path := "/Users/sergey.fedosenko/go/src/github.com/kihamo/shadow/components/dashboard/assets/vendors/datatables.net-fixedheader/js/dataTables.fixedHeader.min.js"
	name := "assets/vendors/datatables.net-fixedheader/js/dataTables.fixedHeader.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsVendorsDatatablesNetFixedheaderBsCssFixedheaderBootstrapMinCss reads file data from disk. It returns an error on failure.
func assetsVendorsDatatablesNetFixedheaderBsCssFixedheaderBootstrapMinCss() (*asset, error) {
	path := "/Users/sergey.fedosenko/go/src/github.com/kihamo/shadow/components/dashboard/assets/vendors/datatables.net-fixedheader-bs/css/fixedHeader.bootstrap.min.css"
	name := "assets/vendors/datatables.net-fixedheader-bs/css/fixedHeader.bootstrap.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsVendorsFastclickJsFastclickMinJs reads file data from disk. It returns an error on failure.
func assetsVendorsFastclickJsFastclickMinJs() (*asset, error) {
	path := "/Users/sergey.fedosenko/go/src/github.com/kihamo/shadow/components/dashboard/assets/vendors/fastclick/js/fastclick.min.js"
	name := "assets/vendors/fastclick/js/fastclick.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsVendorsFontAwesomeCssFontAwesomeMinCss reads file data from disk. It returns an error on failure.
func assetsVendorsFontAwesomeCssFontAwesomeMinCss() (*asset, error) {
	path := "/Users/sergey.fedosenko/go/src/github.com/kihamo/shadow/components/dashboard/assets/vendors/font-awesome/css/font-awesome.min.css"
	name := "assets/vendors/font-awesome/css/font-awesome.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsVendorsFontAwesomeFontsFontawesomeOtf reads file data from disk. It returns an error on failure.
func assetsVendorsFontAwesomeFontsFontawesomeOtf() (*asset, error) {
	path := "/Users/sergey.fedosenko/go/src/github.com/kihamo/shadow/components/dashboard/assets/vendors/font-awesome/fonts/FontAwesome.otf"
	name := "assets/vendors/font-awesome/fonts/FontAwesome.otf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsVendorsFontAwesomeFontsFontawesomeWebfontEot reads file data from disk. It returns an error on failure.
func assetsVendorsFontAwesomeFontsFontawesomeWebfontEot() (*asset, error) {
	path := "/Users/sergey.fedosenko/go/src/github.com/kihamo/shadow/components/dashboard/assets/vendors/font-awesome/fonts/fontawesome-webfont.eot"
	name := "assets/vendors/font-awesome/fonts/fontawesome-webfont.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsVendorsFontAwesomeFontsFontawesomeWebfontSvg reads file data from disk. It returns an error on failure.
func assetsVendorsFontAwesomeFontsFontawesomeWebfontSvg() (*asset, error) {
	path := "/Users/sergey.fedosenko/go/src/github.com/kihamo/shadow/components/dashboard/assets/vendors/font-awesome/fonts/fontawesome-webfont.svg"
	name := "assets/vendors/font-awesome/fonts/fontawesome-webfont.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsVendorsFontAwesomeFontsFontawesomeWebfontTtf reads file data from disk. It returns an error on failure.
func assetsVendorsFontAwesomeFontsFontawesomeWebfontTtf() (*asset, error) {
	path := "/Users/sergey.fedosenko/go/src/github.com/kihamo/shadow/components/dashboard/assets/vendors/font-awesome/fonts/fontawesome-webfont.ttf"
	name := "assets/vendors/font-awesome/fonts/fontawesome-webfont.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsVendorsFontAwesomeFontsFontawesomeWebfontWoff reads file data from disk. It returns an error on failure.
func assetsVendorsFontAwesomeFontsFontawesomeWebfontWoff() (*asset, error) {
	path := "/Users/sergey.fedosenko/go/src/github.com/kihamo/shadow/components/dashboard/assets/vendors/font-awesome/fonts/fontawesome-webfont.woff"
	name := "assets/vendors/font-awesome/fonts/fontawesome-webfont.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsVendorsFontAwesomeFontsFontawesomeWebfontWoff2 reads file data from disk. It returns an error on failure.
func assetsVendorsFontAwesomeFontsFontawesomeWebfontWoff2() (*asset, error) {
	path := "/Users/sergey.fedosenko/go/src/github.com/kihamo/shadow/components/dashboard/assets/vendors/font-awesome/fonts/fontawesome-webfont.woff2"
	name := "assets/vendors/font-awesome/fonts/fontawesome-webfont.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsVendorsIcheckCssGreenMinCss reads file data from disk. It returns an error on failure.
func assetsVendorsIcheckCssGreenMinCss() (*asset, error) {
	path := "/Users/sergey.fedosenko/go/src/github.com/kihamo/shadow/components/dashboard/assets/vendors/icheck/css/green.min.css"
	name := "assets/vendors/icheck/css/green.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsVendorsIcheckCssGreenPng reads file data from disk. It returns an error on failure.
func assetsVendorsIcheckCssGreenPng() (*asset, error) {
	path := "/Users/sergey.fedosenko/go/src/github.com/kihamo/shadow/components/dashboard/assets/vendors/icheck/css/green.png"
	name := "assets/vendors/icheck/css/green.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsVendorsIcheckCssGreen2xPng reads file data from disk. It returns an error on failure.
func assetsVendorsIcheckCssGreen2xPng() (*asset, error) {
	path := "/Users/sergey.fedosenko/go/src/github.com/kihamo/shadow/components/dashboard/assets/vendors/icheck/css/green@2x.png"
	name := "assets/vendors/icheck/css/green@2x.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsVendorsIcheckJsIcheckMinJs reads file data from disk. It returns an error on failure.
func assetsVendorsIcheckJsIcheckMinJs() (*asset, error) {
	path := "/Users/sergey.fedosenko/go/src/github.com/kihamo/shadow/components/dashboard/assets/vendors/icheck/js/icheck.min.js"
	name := "assets/vendors/icheck/js/icheck.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsVendorsJqueryJsJqueryMinJs reads file data from disk. It returns an error on failure.
func assetsVendorsJqueryJsJqueryMinJs() (*asset, error) {
	path := "/Users/sergey.fedosenko/go/src/github.com/kihamo/shadow/components/dashboard/assets/vendors/jquery/js/jquery.min.js"
	name := "assets/vendors/jquery/js/jquery.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsVendorsNprogressCssNprogressMinCss reads file data from disk. It returns an error on failure.
func assetsVendorsNprogressCssNprogressMinCss() (*asset, error) {
	path := "/Users/sergey.fedosenko/go/src/github.com/kihamo/shadow/components/dashboard/assets/vendors/nprogress/css/nprogress.min.css"
	name := "assets/vendors/nprogress/css/nprogress.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsVendorsNprogressJsNprogressMinJs reads file data from disk. It returns an error on failure.
func assetsVendorsNprogressJsNprogressMinJs() (*asset, error) {
	path := "/Users/sergey.fedosenko/go/src/github.com/kihamo/shadow/components/dashboard/assets/vendors/nprogress/js/nprogress.min.js"
	name := "assets/vendors/nprogress/js/nprogress.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsVendorsSwitcheryCssSwitcheryMinCss reads file data from disk. It returns an error on failure.
func assetsVendorsSwitcheryCssSwitcheryMinCss() (*asset, error) {
	path := "/Users/sergey.fedosenko/go/src/github.com/kihamo/shadow/components/dashboard/assets/vendors/switchery/css/switchery.min.css"
	name := "assets/vendors/switchery/css/switchery.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsVendorsSwitcheryJsSwitcheryMinJs reads file data from disk. It returns an error on failure.
func assetsVendorsSwitcheryJsSwitcheryMinJs() (*asset, error) {
	path := "/Users/sergey.fedosenko/go/src/github.com/kihamo/shadow/components/dashboard/assets/vendors/switchery/js/switchery.min.js"
	name := "assets/vendors/switchery/js/switchery.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsVendorsValidatorJsMultifieldMinJs reads file data from disk. It returns an error on failure.
func assetsVendorsValidatorJsMultifieldMinJs() (*asset, error) {
	path := "/Users/sergey.fedosenko/go/src/github.com/kihamo/shadow/components/dashboard/assets/vendors/validator/js/multifield.min.js"
	name := "assets/vendors/validator/js/multifield.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsVendorsValidatorJsValidatorMinJs reads file data from disk. It returns an error on failure.
func assetsVendorsValidatorJsValidatorMinJs() (*asset, error) {
	path := "/Users/sergey.fedosenko/go/src/github.com/kihamo/shadow/components/dashboard/assets/vendors/validator/js/validator.min.js"
	name := "assets/vendors/validator/js/validator.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsVendorsWaitmeCssWaitmeMinCss reads file data from disk. It returns an error on failure.
func assetsVendorsWaitmeCssWaitmeMinCss() (*asset, error) {
	path := "/Users/sergey.fedosenko/go/src/github.com/kihamo/shadow/components/dashboard/assets/vendors/waitMe/css/waitMe.min.css"
	name := "assets/vendors/waitMe/css/waitMe.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsVendorsWaitmeJsWaitmeMinJs reads file data from disk. It returns an error on failure.
func assetsVendorsWaitmeJsWaitmeMinJs() (*asset, error) {
	path := "/Users/sergey.fedosenko/go/src/github.com/kihamo/shadow/components/dashboard/assets/vendors/waitMe/js/waitMe.min.js"
	name := "assets/vendors/waitMe/js/waitMe.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/layouts/base.html": templatesLayoutsBaseHtml,
	"templates/layouts/simple.html": templatesLayoutsSimpleHtml,
	"templates/views/404.html": templatesViews404Html,
	"templates/views/405.html": templatesViews405Html,
	"templates/views/500.html": templatesViews500Html,
	"templates/views/bindata.html": templatesViewsBindataHtml,
	"templates/views/components.html": templatesViewsComponentsHtml,
	"templates/views/config.html": templatesViewsConfigHtml,
	"templates/views/environment.html": templatesViewsEnvironmentHtml,
	"assets/css/custom.css": assetsCssCustomCss,
	"assets/css/custom.min.css": assetsCssCustomMinCss,
	"assets/css/dashboard.css": assetsCssDashboardCss,
	"assets/css/dashboard.min.css": assetsCssDashboardMinCss,
	"assets/images/back_disabled.png": assetsImagesBack_disabledPng,
	"assets/images/back_enabled.png": assetsImagesBack_enabledPng,
	"assets/images/back_enabled_hover.png": assetsImagesBack_enabled_hoverPng,
	"assets/images/favicon.svg": assetsImagesFaviconSvg,
	"assets/images/forward_disabled.png": assetsImagesForward_disabledPng,
	"assets/images/forward_enabled.png": assetsImagesForward_enabledPng,
	"assets/images/forward_enabled_hover.png": assetsImagesForward_enabled_hoverPng,
	"assets/images/loading.gif": assetsImagesLoadingGif,
	"assets/js/config.js": assetsJsConfigJs,
	"assets/js/config.min.js": assetsJsConfigMinJs,
	"assets/js/custom.js": assetsJsCustomJs,
	"assets/js/custom.min.js": assetsJsCustomMinJs,
	"assets/js/functions.js": assetsJsFunctionsJs,
	"assets/js/functions.min.js": assetsJsFunctionsMinJs,
	"assets/vendors/autosize/js/autosize.min.js": assetsVendorsAutosizeJsAutosizeMinJs,
	"assets/vendors/bootstrap/css/bootstrap.min.css": assetsVendorsBootstrapCssBootstrapMinCss,
	"assets/vendors/bootstrap/fonts/glyphicons-halflings-regular.eot": assetsVendorsBootstrapFontsGlyphiconsHalflingsRegularEot,
	"assets/vendors/bootstrap/fonts/glyphicons-halflings-regular.svg": assetsVendorsBootstrapFontsGlyphiconsHalflingsRegularSvg,
	"assets/vendors/bootstrap/fonts/glyphicons-halflings-regular.ttf": assetsVendorsBootstrapFontsGlyphiconsHalflingsRegularTtf,
	"assets/vendors/bootstrap/fonts/glyphicons-halflings-regular.woff": assetsVendorsBootstrapFontsGlyphiconsHalflingsRegularWoff,
	"assets/vendors/bootstrap/fonts/glyphicons-halflings-regular.woff2": assetsVendorsBootstrapFontsGlyphiconsHalflingsRegularWoff2,
	"assets/vendors/bootstrap/js/bootstrap.min.js": assetsVendorsBootstrapJsBootstrapMinJs,
	"assets/vendors/bootstrap-progressbar/css/bootstrap-progressbar.min.css": assetsVendorsBootstrapProgressbarCssBootstrapProgressbarMinCss,
	"assets/vendors/bootstrap-progressbar/js/bootstrap-progressbar.min.js": assetsVendorsBootstrapProgressbarJsBootstrapProgressbarMinJs,
	"assets/vendors/bootstrap-show-password/js/bootstrap-show-password.min.js": assetsVendorsBootstrapShowPasswordJsBootstrapShowPasswordMinJs,
	"assets/vendors/datatables.net/js/jquery.dataTables.min.js": assetsVendorsDatatablesNetJsJqueryDatatablesMinJs,
	"assets/vendors/datatables.net-bs/css/dataTables.bootstrap.min.css": assetsVendorsDatatablesNetBsCssDatatablesBootstrapMinCss,
	"assets/vendors/datatables.net-bs/js/dataTables.bootstrap.min.js": assetsVendorsDatatablesNetBsJsDatatablesBootstrapMinJs,
	"assets/vendors/datatables.net-fixedheader/js/dataTables.fixedHeader.min.js": assetsVendorsDatatablesNetFixedheaderJsDatatablesFixedheaderMinJs,
	"assets/vendors/datatables.net-fixedheader-bs/css/fixedHeader.bootstrap.min.css": assetsVendorsDatatablesNetFixedheaderBsCssFixedheaderBootstrapMinCss,
	"assets/vendors/fastclick/js/fastclick.min.js": assetsVendorsFastclickJsFastclickMinJs,
	"assets/vendors/font-awesome/css/font-awesome.min.css": assetsVendorsFontAwesomeCssFontAwesomeMinCss,
	"assets/vendors/font-awesome/fonts/FontAwesome.otf": assetsVendorsFontAwesomeFontsFontawesomeOtf,
	"assets/vendors/font-awesome/fonts/fontawesome-webfont.eot": assetsVendorsFontAwesomeFontsFontawesomeWebfontEot,
	"assets/vendors/font-awesome/fonts/fontawesome-webfont.svg": assetsVendorsFontAwesomeFontsFontawesomeWebfontSvg,
	"assets/vendors/font-awesome/fonts/fontawesome-webfont.ttf": assetsVendorsFontAwesomeFontsFontawesomeWebfontTtf,
	"assets/vendors/font-awesome/fonts/fontawesome-webfont.woff": assetsVendorsFontAwesomeFontsFontawesomeWebfontWoff,
	"assets/vendors/font-awesome/fonts/fontawesome-webfont.woff2": assetsVendorsFontAwesomeFontsFontawesomeWebfontWoff2,
	"assets/vendors/icheck/css/green.min.css": assetsVendorsIcheckCssGreenMinCss,
	"assets/vendors/icheck/css/green.png": assetsVendorsIcheckCssGreenPng,
	"assets/vendors/icheck/css/green@2x.png": assetsVendorsIcheckCssGreen2xPng,
	"assets/vendors/icheck/js/icheck.min.js": assetsVendorsIcheckJsIcheckMinJs,
	"assets/vendors/jquery/js/jquery.min.js": assetsVendorsJqueryJsJqueryMinJs,
	"assets/vendors/nprogress/css/nprogress.min.css": assetsVendorsNprogressCssNprogressMinCss,
	"assets/vendors/nprogress/js/nprogress.min.js": assetsVendorsNprogressJsNprogressMinJs,
	"assets/vendors/switchery/css/switchery.min.css": assetsVendorsSwitcheryCssSwitcheryMinCss,
	"assets/vendors/switchery/js/switchery.min.js": assetsVendorsSwitcheryJsSwitcheryMinJs,
	"assets/vendors/validator/js/multifield.min.js": assetsVendorsValidatorJsMultifieldMinJs,
	"assets/vendors/validator/js/validator.min.js": assetsVendorsValidatorJsValidatorMinJs,
	"assets/vendors/waitMe/css/waitMe.min.css": assetsVendorsWaitmeCssWaitmeMinCss,
	"assets/vendors/waitMe/js/waitMe.min.js": assetsVendorsWaitmeJsWaitmeMinJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"css": &bintree{nil, map[string]*bintree{
			"custom.css": &bintree{assetsCssCustomCss, map[string]*bintree{}},
			"custom.min.css": &bintree{assetsCssCustomMinCss, map[string]*bintree{}},
			"dashboard.css": &bintree{assetsCssDashboardCss, map[string]*bintree{}},
			"dashboard.min.css": &bintree{assetsCssDashboardMinCss, map[string]*bintree{}},
		}},
		"images": &bintree{nil, map[string]*bintree{
			"back_disabled.png": &bintree{assetsImagesBack_disabledPng, map[string]*bintree{}},
			"back_enabled.png": &bintree{assetsImagesBack_enabledPng, map[string]*bintree{}},
			"back_enabled_hover.png": &bintree{assetsImagesBack_enabled_hoverPng, map[string]*bintree{}},
			"favicon.svg": &bintree{assetsImagesFaviconSvg, map[string]*bintree{}},
			"forward_disabled.png": &bintree{assetsImagesForward_disabledPng, map[string]*bintree{}},
			"forward_enabled.png": &bintree{assetsImagesForward_enabledPng, map[string]*bintree{}},
			"forward_enabled_hover.png": &bintree{assetsImagesForward_enabled_hoverPng, map[string]*bintree{}},
			"loading.gif": &bintree{assetsImagesLoadingGif, map[string]*bintree{}},
		}},
		"js": &bintree{nil, map[string]*bintree{
			"config.js": &bintree{assetsJsConfigJs, map[string]*bintree{}},
			"config.min.js": &bintree{assetsJsConfigMinJs, map[string]*bintree{}},
			"custom.js": &bintree{assetsJsCustomJs, map[string]*bintree{}},
			"custom.min.js": &bintree{assetsJsCustomMinJs, map[string]*bintree{}},
			"functions.js": &bintree{assetsJsFunctionsJs, map[string]*bintree{}},
			"functions.min.js": &bintree{assetsJsFunctionsMinJs, map[string]*bintree{}},
		}},
		"vendors": &bintree{nil, map[string]*bintree{
			"autosize": &bintree{nil, map[string]*bintree{
				"js": &bintree{nil, map[string]*bintree{
					"autosize.min.js": &bintree{assetsVendorsAutosizeJsAutosizeMinJs, map[string]*bintree{}},
				}},
			}},
			"bootstrap": &bintree{nil, map[string]*bintree{
				"css": &bintree{nil, map[string]*bintree{
					"bootstrap.min.css": &bintree{assetsVendorsBootstrapCssBootstrapMinCss, map[string]*bintree{}},
				}},
				"fonts": &bintree{nil, map[string]*bintree{
					"glyphicons-halflings-regular.eot": &bintree{assetsVendorsBootstrapFontsGlyphiconsHalflingsRegularEot, map[string]*bintree{}},
					"glyphicons-halflings-regular.svg": &bintree{assetsVendorsBootstrapFontsGlyphiconsHalflingsRegularSvg, map[string]*bintree{}},
					"glyphicons-halflings-regular.ttf": &bintree{assetsVendorsBootstrapFontsGlyphiconsHalflingsRegularTtf, map[string]*bintree{}},
					"glyphicons-halflings-regular.woff": &bintree{assetsVendorsBootstrapFontsGlyphiconsHalflingsRegularWoff, map[string]*bintree{}},
					"glyphicons-halflings-regular.woff2": &bintree{assetsVendorsBootstrapFontsGlyphiconsHalflingsRegularWoff2, map[string]*bintree{}},
				}},
				"js": &bintree{nil, map[string]*bintree{
					"bootstrap.min.js": &bintree{assetsVendorsBootstrapJsBootstrapMinJs, map[string]*bintree{}},
				}},
			}},
			"bootstrap-progressbar": &bintree{nil, map[string]*bintree{
				"css": &bintree{nil, map[string]*bintree{
					"bootstrap-progressbar.min.css": &bintree{assetsVendorsBootstrapProgressbarCssBootstrapProgressbarMinCss, map[string]*bintree{}},
				}},
				"js": &bintree{nil, map[string]*bintree{
					"bootstrap-progressbar.min.js": &bintree{assetsVendorsBootstrapProgressbarJsBootstrapProgressbarMinJs, map[string]*bintree{}},
				}},
			}},
			"bootstrap-show-password": &bintree{nil, map[string]*bintree{
				"js": &bintree{nil, map[string]*bintree{
					"bootstrap-show-password.min.js": &bintree{assetsVendorsBootstrapShowPasswordJsBootstrapShowPasswordMinJs, map[string]*bintree{}},
				}},
			}},
			"datatables.net": &bintree{nil, map[string]*bintree{
				"js": &bintree{nil, map[string]*bintree{
					"jquery.dataTables.min.js": &bintree{assetsVendorsDatatablesNetJsJqueryDatatablesMinJs, map[string]*bintree{}},
				}},
			}},
			"datatables.net-bs": &bintree{nil, map[string]*bintree{
				"css": &bintree{nil, map[string]*bintree{
					"dataTables.bootstrap.min.css": &bintree{assetsVendorsDatatablesNetBsCssDatatablesBootstrapMinCss, map[string]*bintree{}},
				}},
				"js": &bintree{nil, map[string]*bintree{
					"dataTables.bootstrap.min.js": &bintree{assetsVendorsDatatablesNetBsJsDatatablesBootstrapMinJs, map[string]*bintree{}},
				}},
			}},
			"datatables.net-fixedheader": &bintree{nil, map[string]*bintree{
				"js": &bintree{nil, map[string]*bintree{
					"dataTables.fixedHeader.min.js": &bintree{assetsVendorsDatatablesNetFixedheaderJsDatatablesFixedheaderMinJs, map[string]*bintree{}},
				}},
			}},
			"datatables.net-fixedheader-bs": &bintree{nil, map[string]*bintree{
				"css": &bintree{nil, map[string]*bintree{
					"fixedHeader.bootstrap.min.css": &bintree{assetsVendorsDatatablesNetFixedheaderBsCssFixedheaderBootstrapMinCss, map[string]*bintree{}},
				}},
			}},
			"fastclick": &bintree{nil, map[string]*bintree{
				"js": &bintree{nil, map[string]*bintree{
					"fastclick.min.js": &bintree{assetsVendorsFastclickJsFastclickMinJs, map[string]*bintree{}},
				}},
			}},
			"font-awesome": &bintree{nil, map[string]*bintree{
				"css": &bintree{nil, map[string]*bintree{
					"font-awesome.min.css": &bintree{assetsVendorsFontAwesomeCssFontAwesomeMinCss, map[string]*bintree{}},
				}},
				"fonts": &bintree{nil, map[string]*bintree{
					"FontAwesome.otf": &bintree{assetsVendorsFontAwesomeFontsFontawesomeOtf, map[string]*bintree{}},
					"fontawesome-webfont.eot": &bintree{assetsVendorsFontAwesomeFontsFontawesomeWebfontEot, map[string]*bintree{}},
					"fontawesome-webfont.svg": &bintree{assetsVendorsFontAwesomeFontsFontawesomeWebfontSvg, map[string]*bintree{}},
					"fontawesome-webfont.ttf": &bintree{assetsVendorsFontAwesomeFontsFontawesomeWebfontTtf, map[string]*bintree{}},
					"fontawesome-webfont.woff": &bintree{assetsVendorsFontAwesomeFontsFontawesomeWebfontWoff, map[string]*bintree{}},
					"fontawesome-webfont.woff2": &bintree{assetsVendorsFontAwesomeFontsFontawesomeWebfontWoff2, map[string]*bintree{}},
				}},
			}},
			"icheck": &bintree{nil, map[string]*bintree{
				"css": &bintree{nil, map[string]*bintree{
					"green.min.css": &bintree{assetsVendorsIcheckCssGreenMinCss, map[string]*bintree{}},
					"green.png": &bintree{assetsVendorsIcheckCssGreenPng, map[string]*bintree{}},
					"green@2x.png": &bintree{assetsVendorsIcheckCssGreen2xPng, map[string]*bintree{}},
				}},
				"js": &bintree{nil, map[string]*bintree{
					"icheck.min.js": &bintree{assetsVendorsIcheckJsIcheckMinJs, map[string]*bintree{}},
				}},
			}},
			"jquery": &bintree{nil, map[string]*bintree{
				"js": &bintree{nil, map[string]*bintree{
					"jquery.min.js": &bintree{assetsVendorsJqueryJsJqueryMinJs, map[string]*bintree{}},
				}},
			}},
			"nprogress": &bintree{nil, map[string]*bintree{
				"css": &bintree{nil, map[string]*bintree{
					"nprogress.min.css": &bintree{assetsVendorsNprogressCssNprogressMinCss, map[string]*bintree{}},
				}},
				"js": &bintree{nil, map[string]*bintree{
					"nprogress.min.js": &bintree{assetsVendorsNprogressJsNprogressMinJs, map[string]*bintree{}},
				}},
			}},
			"switchery": &bintree{nil, map[string]*bintree{
				"css": &bintree{nil, map[string]*bintree{
					"switchery.min.css": &bintree{assetsVendorsSwitcheryCssSwitcheryMinCss, map[string]*bintree{}},
				}},
				"js": &bintree{nil, map[string]*bintree{
					"switchery.min.js": &bintree{assetsVendorsSwitcheryJsSwitcheryMinJs, map[string]*bintree{}},
				}},
			}},
			"validator": &bintree{nil, map[string]*bintree{
				"js": &bintree{nil, map[string]*bintree{
					"multifield.min.js": &bintree{assetsVendorsValidatorJsMultifieldMinJs, map[string]*bintree{}},
					"validator.min.js": &bintree{assetsVendorsValidatorJsValidatorMinJs, map[string]*bintree{}},
				}},
			}},
			"waitMe": &bintree{nil, map[string]*bintree{
				"css": &bintree{nil, map[string]*bintree{
					"waitMe.min.css": &bintree{assetsVendorsWaitmeCssWaitmeMinCss, map[string]*bintree{}},
				}},
				"js": &bintree{nil, map[string]*bintree{
					"waitMe.min.js": &bintree{assetsVendorsWaitmeJsWaitmeMinJs, map[string]*bintree{}},
				}},
			}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"layouts": &bintree{nil, map[string]*bintree{
			"base.html": &bintree{templatesLayoutsBaseHtml, map[string]*bintree{}},
			"simple.html": &bintree{templatesLayoutsSimpleHtml, map[string]*bintree{}},
		}},
		"views": &bintree{nil, map[string]*bintree{
			"404.html": &bintree{templatesViews404Html, map[string]*bintree{}},
			"405.html": &bintree{templatesViews405Html, map[string]*bintree{}},
			"500.html": &bintree{templatesViews500Html, map[string]*bintree{}},
			"bindata.html": &bintree{templatesViewsBindataHtml, map[string]*bintree{}},
			"components.html": &bintree{templatesViewsComponentsHtml, map[string]*bintree{}},
			"config.html": &bintree{templatesViewsConfigHtml, map[string]*bintree{}},
			"environment.html": &bintree{templatesViewsEnvironmentHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() http.FileSystem {
	for k := range _bintree.Children {
		return http.Dir(k)
	}
	panic("unreachable")
}
