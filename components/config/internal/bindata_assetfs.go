// Code generated by go-bindata.
// sources:
// templates/views/manager.html
// assets/js/manager.min.js
// locales/ru/LC_MESSAGES/config.mo
// locales/ru/LC_MESSAGES/manage.mo
// DO NOT EDIT!

package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsManagerHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x5a\x5f\x93\xdb\xb6\x11\x7f\xf7\xa7\xd8\x41\xae\x19\x29\x36\x45\xdb\x75\x33\x6d\x22\x9d\x27\x93\x76\xe2\x4e\xdd\x76\x26\x71\xdc\x07\xd7\xbd\x01\x89\xe5\x09\x57\x0a\x50\x00\x50\xba\x8b\x46\xdf\xbd\x03\x80\x7f\x25\x52\xa2\xa8\xbb\x73\x9d\x7b\xb0\x29\x02\xd8\x5d\xfc\xf6\x1f\xb0\xdc\xcd\x06\x18\x26\x5c\x20\x90\x58\x0a\x83\xc2\x10\xd8\x6e\x9f\x4c\x19\x5f\x41\x9c\x52\xad\x67\x44\xc9\x35\xb9\x7c\x02\x00\x50\x7f\x7b\x7b\xb5\xa4\x02\xd3\x7c\x64\x7f\xd4\x70\x93\x62\x6d\xd4\xcd\x98\xbf\xbc\xdc\x6c\x80\xbf\xf8\xa3\x00\xf2\xbd\x14\x09\xbf\xce\x14\x35\x5c\x0a\x02\x13\xd8\x6e\xa7\xe1\xfc\xe5\xce\x8a\x1a\xcd\x38\x45\xaa\x12\x7e\x4b\x2e\xa7\x21\xe3\xab\x1a\xe3\x9d\x9f\x0d\x39\x8a\x5d\xed\xd0\x4d\xa4\x5a\x80\x92\x29\xce\x88\x7d\x24\x40\x63\x2b\xc7\x8c\x7c\x41\x60\x81\x66\x2e\xd9\x8c\x2c\xa5\x36\x04\x38\x9b\x59\x68\x12\x7e\xad\x09\x30\x6a\x68\x60\xe4\xf5\xb5\x5d\xb8\xa2\x29\x67\xd4\x48\xb5\x43\xbc\x14\xc2\xd3\x37\x34\xda\x85\xaa\x31\x33\x4b\x0b\x69\x05\x5d\x81\xa0\xab\xc0\xd0\x48\x43\x44\xd5\x95\x7d\x20\x15\x99\x94\xeb\xdd\x8d\xd4\xff\x36\x1b\x50\x54\x5c\x23\x5c\x08\xba\xc0\x67\x70\xb1\xa2\x4a\xc3\x37\x33\x98\xac\xa8\xe2\x34\x4a\x51\x5b\xdd\x76\x2d\x9f\xa6\x3c\x67\xb5\x54\xa8\x51\x98\x5c\x33\x56\x63\x09\xe0\x2f\x9e\x2c\xe4\x60\x58\x33\x29\xe4\xb6\xd8\xad\x90\x6c\x36\x80\x82\xc1\x76\xdb\x2d\xa2\xe3\x43\x61\xae\x30\x99\x91\x2f\x36\x9b\x9c\xe6\x76\x4b\xc0\x8a\x18\x58\x6d\x29\x99\xea\x19\x69\x8c\x95\x08\xec\x68\xc0\xbd\x71\x0b\xf1\x76\x49\x05\x43\xe6\x16\x76\x88\x6b\x54\x86\x56\xc6\x54\x5b\xaa\x09\x4d\x35\x96\x22\x1f\x80\xb5\x06\x6f\x21\xd1\xe1\xfd\x85\xb4\x9b\xd8\x34\x4c\xf9\x41\x0d\x7a\x71\xda\x2d\x25\xcc\xd2\xcb\x27\xed\x43\x35\x9b\x37\x34\x0a\xda\xad\x7e\x87\xd5\x59\xc6\xd2\x62\xdf\x75\x01\xec\x9b\x03\x86\xe3\x2d\x06\xb8\xa8\x14\xe0\x1c\xad\xae\xf5\x23\x56\xd4\xdc\x71\x8a\x81\x42\xbd\x94\x42\x5b\x4b\x3c\xae\xcc\xa9\x5b\xd3\x20\x00\x9e\xcc\x5c\xae\xb0\xcd\xa3\xdb\xa9\xcc\x91\xb2\xbe\x73\x55\xbf\x89\x39\x61\x58\x73\x66\xe6\x33\xf2\xf2\xf9\xef\x48\x15\x35\xff\x41\x17\x48\xe0\xc2\x05\x4b\x33\x1f\x46\xf0\x0f\x75\x82\xef\x69\x9a\x9d\x4b\xf1\x45\x83\xe2\x9f\x31\xa1\x59\x6a\xce\xa5\xd9\xd8\xf6\xbf\xa8\x89\xe7\xa8\xf4\x40\xa2\x75\xe1\x74\xac\xf8\xd2\x47\xb6\xd3\x68\x4d\xc3\xbe\x1a\xb4\x34\x4f\xb0\x8b\x48\xb2\xbb\x7e\x73\x2b\xa7\xe5\xcf\xe0\xc2\xfb\x93\xf5\x59\xef\xbc\x47\xe2\x52\x8d\x88\x9d\xff\x57\x66\x57\x2a\x5c\xa6\x34\xc6\x82\xd8\xe4\x7d\xee\xfc\x93\xbf\xe1\x1d\x90\x09\x01\x72\x45\xfa\x12\x3e\xd1\xc2\x7b\xe2\x53\x13\x9b\x27\xfb\x72\xfe\x85\x71\xef\xbd\x3d\x85\x2c\xf9\xa7\x34\xc2\x32\xf3\xe6\x79\x27\x70\x2f\x09\x24\x52\xf9\x58\xe4\x71\xb2\xd1\xc9\xe5\x9d\x6b\x25\xb3\xa5\x4f\x31\xd6\x9a\xf6\x84\xf9\xc1\x8e\xc3\x45\x15\xea\xaa\x60\x66\xa9\xb5\x61\x6c\x2d\xd0\x71\x3d\x19\x8d\x3c\x8f\xdd\xdf\xae\xff\x0f\xb7\xd8\x9d\x0c\x5b\x77\x17\x9e\x62\x54\x9f\xdc\x02\x6b\x19\xcc\x9e\x41\x3d\xf4\x3d\x33\x4f\xb7\x5c\x6f\xa8\x7e\xcf\x71\x0d\x04\x45\xb6\xe8\xed\xbb\x0d\xc1\x34\xa6\x18\x9b\x86\x6c\xb9\xa9\x80\x1f\x7a\x49\xc0\x6a\xdd\xfb\x48\xbb\xca\xab\x7c\x5e\xfa\xd0\xe9\x3b\x83\x46\xcc\x93\xcf\xe0\x42\xba\xd0\x6d\x23\xd7\xa8\x60\xfc\x03\x1a\xbb\xe1\x7f\xfa\x11\xe2\x67\x68\x32\x1e\xb2\x75\xb7\xfd\x9c\xc7\xca\x66\x46\xef\x09\x82\xe1\x6d\xc9\xfb\xb9\xdd\x4b\x79\xb6\x19\xed\x0c\x8e\xf7\x01\x71\x29\xd6\x9e\x7a\x3c\x78\xf6\x90\x5a\x3c\xd5\xce\xcc\x85\xc7\xed\x10\x7c\x31\x6e\x73\xb6\x69\xe8\x87\x07\x43\x7a\xa2\x67\x95\xd8\x84\x5e\xf2\x41\x46\xea\x02\x56\x9b\xa5\x1a\xbc\x35\x54\x21\x1d\x66\xad\xc5\xea\x56\x7b\x55\xa8\xf9\xaf\x56\x0b\x57\x15\x13\x25\xd7\x7a\x46\x5e\x0d\xb3\xe1\xb6\xd9\x85\x82\xa7\x61\xc1\xe4\x2c\x7c\xec\x89\x79\x97\xc5\xbb\xbb\x25\x02\x89\xa4\x4c\x87\x81\xc4\xc5\x32\x33\x60\xee\x96\x38\x23\xf1\x1c\xe3\xff\x46\xf2\xb6\x3c\xb0\xdf\xe8\x40\xaf\xb9\x89\xe7\x83\x20\xa9\x2e\x88\xa3\xa5\xe2\xc2\x74\xe0\x33\x06\x62\x2f\x60\xfe\xde\x68\x25\x40\x56\xda\x21\x84\x67\x01\x26\x15\x8c\xba\x41\xe3\xc2\x90\xf1\x91\x09\x5f\xbf\x1a\x16\x2f\x1a\xb8\x8a\x6c\x11\xa1\x22\x6d\x76\xd8\x07\xd8\x2a\xde\x74\x1a\x58\x1b\xfa\x4b\x6a\x0c\x2a\x31\x23\xff\xf9\x10\x3c\xfd\xf8\xfa\xc3\xf3\xe0\x4f\x1f\xbf\xba\x20\x0f\x89\x68\x76\x14\xd2\xec\x37\x83\xe9\xbd\x41\xda\x0d\x56\x92\x4a\x6a\xd1\xfa\xfc\xc1\xaa\x0c\x70\xf4\xef\x89\x7f\x18\xbf\x7e\x38\xe0\x58\x59\x3d\x3c\x17\x39\x1b\xb7\x3f\x31\x6e\xa3\x3d\xe0\x3e\xd0\xe0\xd7\x8f\x4f\xc7\x4f\xcf\x05\x70\x2f\xdf\x2e\xa9\xd6\x6b\xa9\xd8\xf9\xb8\x55\x94\xda\x92\x6f\x31\x1a\xe8\xb9\x5c\x3f\x1c\x92\xf7\x8c\x8e\xa1\xd7\x7a\x10\x32\x56\x28\xe6\x8b\x1f\xef\xf0\xd6\xb8\x8b\x79\xfb\x19\x35\x9f\x15\x78\xb3\x7b\x30\xe3\x05\xbf\x95\x87\xc2\x7d\xe8\xd9\xd3\x82\x5e\xc7\x69\xbb\x75\x37\xcf\x3a\x28\xb5\x0b\x68\x7d\x66\xdb\xb5\xb3\x3c\x44\x9c\x61\x06\x9f\x61\xf8\x18\xb8\xdb\xd3\x8f\xfd\x3b\x5f\x57\xfa\x32\x1a\x52\x9c\xd0\x4b\x2a\x8e\x1c\xb0\xdd\x94\xcf\xbb\x8c\xe0\xb6\xb9\xa7\xd0\xab\x95\x2f\xc4\x3a\x57\x38\x60\x12\x79\x75\x75\xd8\x7d\xba\xa3\x52\x70\x56\x3e\xf8\xca\xfd\x3d\xa6\xeb\x41\xb9\x13\x2a\xd8\x81\x7a\xcc\xc8\x0e\x8f\xda\xeb\x22\xe3\x6a\x60\x17\xda\xf1\xe0\xca\x01\x7c\x8a\x72\x45\x13\x91\x7e\x15\x89\xca\x88\xce\x62\x59\xb0\xed\x5d\xb6\x38\x77\x83\x03\xab\x16\xf7\x43\xe1\x4c\x8b\xcd\x49\xdc\xb7\x2e\x86\xef\x69\x68\x3a\x38\x2d\x04\x3f\x6a\x4d\xb6\xf8\x4c\x34\x2c\xf3\x0c\x41\x30\xf7\xf5\xf5\x33\xb8\x58\x7b\xe6\xf5\x63\xdf\x50\x79\x4a\x99\x8a\x33\x85\x2f\xdb\xbb\x7f\x8b\x73\x92\x2f\x45\xe5\x4c\x27\x3f\xc9\x4c\xc5\x43\x53\x24\x3c\x9a\x35\x0c\xe3\xf4\x18\x09\xf9\xb2\xf3\x8b\xc7\xcf\x9a\x5a\x15\x9f\x19\xcd\xaa\x84\x35\x12\x2d\x9f\xdb\xca\xa4\x65\x54\x86\xe3\xee\xac\x35\xc4\x90\x22\x05\x61\xf5\x05\xf4\xbb\x34\x95\x6b\x64\xfe\xd8\xa9\xbf\xf1\x5f\x41\x4f\x27\x9a\x9d\xf8\x35\x07\x3e\x45\x6e\x3c\x90\x13\xf7\xf3\xd5\xd0\xcf\x05\x29\xbf\x6c\xfd\x46\x70\xb8\xd5\xe3\x88\xd8\xe7\x64\x9a\x4e\x89\xe0\xcb\x05\xa3\x7a\xfe\xed\x69\x49\xfb\xbc\x7d\x3c\x66\x6e\x82\xb2\x49\xe6\xe1\x79\x3d\x5c\x1e\xec\xdf\x67\x70\x9a\xe4\xd3\xb0\x67\xa7\xc1\x34\x74\xa1\xe8\x48\xff\xcd\xe1\x6b\xe1\x91\xe1\x63\x8d\x4e\xad\x8b\xf3\xd7\xed\xbd\x76\x45\xa2\x14\x57\x5a\xa6\x9c\xed\x35\x09\xb6\x4d\x3e\xfa\xd5\xb5\xd1\x7e\x28\xd3\x60\xc1\x82\xaf\x21\x7f\x90\x49\xa2\xd1\x04\xbf\x3f\x70\x0d\x9b\x46\x99\x31\x52\xe4\x45\x02\x85\x1a\xab\x2a\x41\x64\x04\x44\x46\x04\x5c\x24\xb2\xac\x01\xf8\x29\x55\xac\xfe\xd1\x2f\xf1\xbd\x91\x9e\x58\x5f\x6e\x3a\x8b\x16\x7c\x9f\x9d\xce\xe2\x18\xb5\x2e\x39\x6a\xba\xb2\x97\x4e\xae\xad\xc6\xd9\x8c\x14\x4f\x35\x21\x7e\x72\x53\x8e\xcb\x70\x58\x6b\xcd\x57\x16\xf9\xd6\x06\xce\xfc\xb1\xf8\xaf\x86\xff\x42\x32\x9a\x42\x42\x19\xfa\x6a\x88\xfb\xfd\x7d\x1e\xab\x0c\x8d\x5c\x28\x9b\x91\xe0\x45\xd1\x2e\xc8\x38\x4d\xe5\x75\xde\x1f\xe8\x8e\x4e\x29\xb2\xe8\xae\xb1\xf2\xad\xeb\x7c\xf0\x82\xb8\x79\x73\xce\x18\x8a\x99\xff\x54\xb5\xdf\xf5\xea\x96\x06\x39\xe5\xf6\x96\x53\x3f\xa5\xa3\xed\x74\x6f\xde\x1c\x29\x6b\x6d\x37\x6b\x6a\xd3\xff\x20\x55\x2b\xac\xd4\x45\xad\x80\x71\xbd\xe0\x25\x41\xd2\xb6\x8d\x2f\x0d\x5f\xa0\xfe\xb6\x5b\x7d\xd3\xf9\xab\xa6\x58\xbe\x7b\x77\x17\x67\x8f\xd6\x4e\x0b\xaf\x5a\x80\x35\x22\x88\x5b\xfb\x79\x5f\xed\x6a\x7e\xdf\x18\xf6\x30\xb1\x51\xaa\xc6\xe5\x3b\x85\x70\x27\x33\xd0\x99\xc2\xd7\x05\xe1\x1e\x64\x12\x29\xcd\xe9\xd0\x16\x8e\x52\x9c\xb2\x5b\x41\xae\x41\xe0\x35\x71\xd8\x3b\x7a\x79\x26\xb3\x27\x23\x75\x8c\xdf\x31\x67\xec\x6e\x8d\x6e\x7a\x56\x15\x80\x9f\xd4\x5a\xc0\xad\x35\x96\x45\xa0\xcd\x06\xb4\xa1\x86\xc7\x6f\xde\xfd\xfd\x2d\x8c\xfc\xf3\xcf\x3f\xbe\x05\x12\xda\x53\x44\x24\xa9\x62\x21\xd5\x1a\x8d\x0e\x57\x28\x98\x54\x3a\xb4\xc2\xbb\xe4\xa1\x27\x02\x4d\x10\xe9\x30\xd6\xfe\xed\x3b\xff\x36\x92\xd2\x68\xa3\xe8\x72\xb2\xe0\x62\x12\xdb\x48\xe4\x1a\x71\xc7\xf7\xc8\x35\xe1\xb7\xc8\xbc\x63\x15\x12\xb8\x57\x6f\xdc\xab\xc3\x22\xb4\xe3\x72\xa3\xef\x11\x95\xf0\x46\x87\x37\xbf\x64\xa8\xee\x26\x35\x60\xac\x2c\x37\x0f\x81\x46\xa4\x2d\xc3\x4e\x15\x3c\x08\xcf\x9a\x06\x76\x98\xd7\x15\x71\x32\x7b\x1f\x62\x0a\xde\x37\x3a\x5c\x50\x41\xaf\x51\x39\x2a\xfe\xe2\x54\x57\xe1\xff\x02\x00\x00\xff\xff\x01\xc7\x9d\x2d\xdc\x30\x00\x00"

func templatesViewsManagerHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsManagerHtml,
		"templates/views/manager.html",
	)
}

func templatesViewsManagerHtml() (*asset, error) {
	bytes, err := templatesViewsManagerHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/manager.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsJsManagerMinJs = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x55\xcd\x6e\x23\x37\x0c\x7e\x15\x9b\x1b\x64\x25\x78\x56\xde\x1c\x0a\x14\xb6\xe5\x1c\xdc\x3d\x14\x58\x14\x05\xb2\xed\x25\x08\x0a\xce\x88\xf6\xa8\xd1\x48\x53\x49\x63\x6f\x10\xf8\xdd\x0b\x8e\x27\x5e\x27\xde\x04\x6d\x2f\xbd\x18\x34\x7f\x3e\x8a\xfc\x48\xce\x85\x30\xa1\xea\x1a\xf2\x59\xaa\x48\x68\x1e\xc4\xba\xf3\x55\xb6\xc1\x0b\xf9\x78\x21\xe0\x5d\x15\xfc\xda\x6e\xd2\xc8\xfa\xb6\xcb\xb7\xd6\xdc\x15\xa3\xa3\x2e\x91\xa3\x2a\x9f\x28\x32\x7d\xcd\x18\x09\xd9\x0f\xa4\xaa\x6a\xf4\x1b\x3a\x45\xdc\x62\x1c\x91\xbe\x10\xb9\xb6\x49\x16\x31\xec\x34\xa9\x16\x23\xf9\x9c\x7e\xf3\xd9\x3a\x01\xb9\x0c\xe6\x01\x0a\xc8\x11\x64\x51\x75\x91\x6d\x9a\xd4\x16\x9d\x90\x85\xa1\xb5\xe6\x50\x65\x68\x8d\x9d\xcb\xbf\xa3\xeb\x68\x0e\x55\x4d\xd5\x7d\x19\xbe\x82\x66\xb8\x18\x5a\x01\xf9\xa1\x25\x90\xd7\xe2\x09\x01\x60\x7c\xb4\xf5\xee\x64\xe0\x1c\x6f\x75\xb0\xc8\x19\xdc\x7c\xfa\xfc\x69\xf5\x05\xf4\xc1\x9c\x71\xf3\x0b\x36\x74\x79\x29\x38\x82\xd4\xda\x7a\x23\x20\xb4\x5c\x15\x48\xb5\xb6\x2e\x53\x3c\xad\x33\x52\xee\xa2\x1f\x0d\x85\x0e\x79\x87\x24\x37\x7d\xd7\x38\xff\x5e\x1e\xea\xfa\x56\xa8\x36\xb4\xbe\x8e\x61\xa7\x22\x35\x61\x4b\x2b\x87\x29\x09\xa8\x31\x7d\xa0\x18\x43\x04\x39\x63\x23\x1a\x73\x6e\x29\x4e\xd9\x2a\xbb\x9c\x83\xbf\xe5\x2e\xe8\xd4\x95\x8d\xcd\xcc\xc7\xf0\x0c\x9b\xb0\x74\x64\xa0\xf8\xa8\xf5\x69\x50\x8e\xea\x04\x4f\x39\xf2\x9b\x5c\xcb\xfd\xeb\xc8\x91\x12\xf5\xc0\x95\xb3\xd5\xfd\x6b\x93\xf3\x02\xf6\xb5\xca\xfe\xc3\xfb\xc7\x1f\xdf\x7a\xdd\xb7\xb8\xb3\xe7\xf1\x18\x36\x7d\xed\x4d\x30\xe8\x56\x7d\x34\xcf\x9b\x06\x98\x1f\xb9\xfb\x7e\x09\xa3\x6c\x86\x65\xf0\xd8\xd0\x5d\x9f\x6b\xac\x6b\x6b\x0c\xf9\xd3\xe5\x78\x19\x73\xbe\x2c\x2f\x1c\x9e\x96\x07\xa4\x22\xac\xea\x57\xd7\xe6\xad\x79\xdf\x9e\x0f\xf9\x6c\x7b\x5c\x9f\x6a\xa2\x61\xe1\xec\x72\x91\x72\x0c\x7e\xb3\x84\xc9\x93\x37\x97\x02\x72\x02\x8b\xe9\x60\x9a\x8d\x60\xb2\xe5\xff\xce\x2e\x61\x2f\x8b\x66\x98\x79\xd5\x37\xec\x43\xbf\xa4\x52\xd5\xb9\x71\x02\x56\xfd\x9a\xa7\xd1\x61\x1f\xd2\x6c\x51\xc6\xd1\x74\xb9\xe8\xdc\x12\x26\x15\x63\xb0\xc4\x10\x7d\xac\x90\xc5\xf8\x6a\xa0\xed\xa4\xfb\xff\x86\x3a\x83\x19\xf5\xe3\xfe\x9f\x33\x65\xcd\xff\xc1\x13\x3f\xf3\xf6\x79\x87\xef\xf4\x1b\xe4\x9d\x53\x37\x10\xc7\xdd\x52\x6d\x48\x59\xc0\x3b\x28\x18\xb6\x38\x49\xba\xb3\xde\x84\x9d\x72\xa1\x42\xd6\xa8\x48\x2e\xa0\xe9\xa3\x8e\x8d\x7e\x7e\xc5\xfb\x1e\xb7\x98\xd2\x2e\x44\x73\xa7\x9e\xa4\x0f\xa9\x0e\x3b\x90\x2a\x78\x01\x2c\xaa\x32\x1d\x6d\xa3\xda\x1a\x3a\x55\x40\xf1\x9d\xba\xe1\x1d\x4c\x9e\xdf\x3c\x6b\x78\xac\xfe\xd8\xf2\xa1\x06\x39\xb7\x6b\x41\x4f\x87\xa5\x8f\xe2\xdb\xce\x0d\x15\x72\x3e\x08\xa4\xb8\x40\x01\x43\x88\x2c\x9e\x2b\x8a\x2c\xf7\x7b\x39\x7f\xc6\x39\x9f\x03\x90\xea\x27\xcc\xf8\x85\x65\xf1\xe8\xd0\x6f\x3a\xdc\xd0\xec\xb1\x8b\x6e\x06\x53\x83\xa9\x2e\x03\x46\x33\x65\xac\x3e\x20\x4d\xed\xd5\x8f\x5e\xfd\x99\x82\xbf\xe6\xde\x39\xd2\x30\x19\x7a\x99\x6a\x34\x61\xf7\xb9\xd7\xee\x8b\xf2\x57\xdc\x58\x8f\x99\x66\xe3\xab\xa2\xfc\xd9\xaf\x03\x0b\x88\x37\x21\x66\xeb\x37\xb3\xdb\xbb\xc2\x44\xdc\xad\xd0\xb9\x12\xab\xfb\xd9\x8b\xc6\x60\x6b\x0f\x5f\x11\x6c\xad\xe8\x3f\x7a\x49\x63\x6b\x15\x0b\xe2\xb1\xe5\x57\xc2\x70\xff\x61\x2f\x95\x0f\x86\x92\x90\x85\xc3\x94\xb5\xef\x9c\x9b\xb3\x73\x15\x5c\xd7\x78\xf1\xb1\x38\x0f\xe8\xbb\xf3\x72\x16\x63\xd8\x15\xf6\x90\x9f\x27\x4f\x5f\xb0\x66\xf0\x85\x4d\x0c\x5d\x0b\x72\xce\x29\xc6\x5a\xfb\xfe\xd3\xc6\xbf\x03\x35\x97\x97\xbd\x7b\x92\x8a\xfe\x12\x56\xaa\x92\xd6\x21\x92\x78\xbf\xc8\x71\x54\xf1\xe1\xd6\x03\xc4\x72\x91\xcd\xa8\x0a\x2e\xb5\xe8\x35\xfc\x00\xcb\xf7\x13\x86\xe1\x9d\xcf\x66\xb9\x98\xe6\xc8\x8b\x7f\xa8\x04\x1b\xda\x33\x75\x7b\x39\xff\x3b\x00\x00\xff\xff\x3e\x40\x31\xc0\x75\x08\x00\x00"

func assetsJsManagerMinJsBytes() ([]byte, error) {
	return bindataRead(
		_assetsJsManagerMinJs,
		"assets/js/manager.min.js",
	)
}

func assetsJsManagerMinJs() (*asset, error) {
	bytes, err := assetsJsManagerMinJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/js/manager.min.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesConfigMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\x4f\x6b\xd4\x40\x18\xc6\x9f\xae\xf5\x12\x50\x50\x2f\x0a\x82\xaf\x07\xab\x22\x53\x27\x59\x0b\x65\x76\xb3\x55\xb7\x2d\x88\x5d\x2c\x25\x7a\xf2\x32\xee\x4e\xb3\xc1\xcd\x4c\x9c\x24\x45\xa1\xa0\xa8\x78\x15\x0f\x5e\x3c\x79\xf1\x5e\xf1\xdf\xe2\x9f\x7e\x86\xc9\x17\xf0\xb3\x48\xb2\x6a\xf5\x3d\x0c\xcf\xf3\x3e\xcf\xfc\x78\x7f\x1e\x9f\x7f\x0d\x00\xf3\x00\x4e\x03\xe8\x02\x38\x0c\xe0\x2e\x66\x93\x01\x38\x02\xe0\x01\x80\x63\x00\x1e\x03\x38\x01\xe0\x15\x80\xf1\x1c\xf0\x0e\xc0\x49\x00\x47\x5b\xc0\x29\x00\xe7\x5b\xc0\x19\x00\xd7\x5a\xc0\xdc\x6f\x6e\x3d\x2d\x00\x87\x6a\xd1\x37\x7a\x3b\x89\x4b\x2b\x8b\xc4\x68\x0c\x1b\x37\xbf\xaa\xee\x95\x31\xa5\x66\xa4\x0e\x36\x3b\x6a\x62\xb2\xd9\x6e\x4b\x65\xc6\x16\x6c\x90\xc7\xc9\x88\x5d\x2f\xe3\x9c\x45\x46\xd0\x48\xed\x5c\xbd\x9f\x8c\x65\x6a\x16\x6d\xe9\x6d\xde\x8a\x58\xdf\xaa\x06\xcb\x56\x65\xa1\x04\x05\xdc\x5f\x66\xbc\xcd\x82\x36\x05\x6d\xb1\xb4\x74\x89\xb7\x39\xf7\x36\x64\x5e\xb0\xc8\x4a\x9d\x4f\x64\x61\xac\xa0\x9b\x0d\x83\x06\xa5\x95\xa9\x19\x19\xea\xfe\x07\xee\x79\x1b\x52\xc7\xa5\x8c\x15\x8b\x94\x4c\x05\xfd\xf5\x82\xb6\xca\x3c\x4f\xa4\xf6\x06\x37\x06\x6b\xec\x8e\xb2\x79\x62\xb4\x20\x7f\x91\x7b\x7d\xa3\x0b\xa5\x0b\x16\x3d\xca\x94\xa0\x42\x3d\x2c\x2e\x67\x13\x99\xe8\x0e\x0d\xc7\xd2\xe6\xaa\x08\x6f\x47\xeb\x6c\xf9\xa0\x57\xdf\xb3\xad\x2c\x5b\xd3\x43\x33\x4a\x74\x2c\xc8\xdb\x9c\x94\x56\x4e\xd8\xba\xb1\x69\x2e\x48\x67\x8d\xcd\xc3\x76\x87\x66\x32\xd4\xe7\x7c\x1e\x86\x3e\x2d\x2c\x50\x2d\xf9\xd9\xd0\xf7\x69\x85\x38\x89\xc6\xf7\xc2\xe0\x4f\xd4\x0d\xaf\xd4\xf2\x42\x53\xeb\xfa\x9c\x76\x77\x67\x5f\x7a\x61\xc0\x2f\xd2\x0a\xf9\x24\x28\xe8\xc0\xbd\x71\xfb\xee\x47\xf5\xdc\x4d\xdd\x87\xea\x59\xf5\xc4\xed\x55\x2f\xdc\xb4\x7a\x09\xf7\xd6\x7d\x72\x9f\xdd\xd4\x7d\x27\xb7\x5f\x3d\x75\xdf\xdc\x9e\xfb\xe8\xbe\xba\xe9\xbf\x49\xdd\x77\x5f\x9a\xf7\x7d\xd3\xaa\xf3\x5f\x01\x00\x00\xff\xff\xa7\x17\xf2\x1f\x61\x02\x00\x00"

func localesRuLc_messagesConfigMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesConfigMo,
		"locales/ru/LC_MESSAGES/config.mo",
	)
}

func localesRuLc_messagesConfigMo() (*asset, error) {
	bytes, err := localesRuLc_messagesConfigMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/config.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesManageMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x4f\x4b\x6f\x1b\x55\x14\xfe\xa6\x2e\x2f\x97\x67\x85\x84\x84\x58\x9c\x0a\x11\x81\xd0\x94\x19\x9b\x4a\xd1\x24\x13\x53\x92\x14\x10\x0d\x54\xc1\x94\x2d\x57\xf6\x8d\x33\x62\x3c\x63\xdd\x3b\x13\x88\x14\x89\x38\x2e\x54\x60\x44\x11\x0f\x75\x05\xa8\x3b\x96\xa6\xc4\x74\x68\x6b\x77\xcf\xea\xdc\x35\x88\x9f\xc0\x2f\x40\x02\xcd\xa3\x0f\xee\xe2\x9e\xf3\x7d\xe7\x3b\xe7\x7c\xe7\xaf\xe3\x47\xbf\x03\x80\x87\x01\x3c\x03\x60\x0f\xc0\x13\x00\xfe\x44\xf9\xc8\x02\x1e\x03\x70\xc2\x02\x1e\x01\xe0\x5a\xc0\x7d\x00\x5a\x16\xf0\x34\x80\x75\x0b\x78\x00\xc0\xfb\x16\x70\x0c\xc0\xb6\x05\x1c\x05\x90\x54\xba\xdd\x0a\x7f\x5c\xe1\x0b\x16\xf0\x20\x80\xcf\xad\x52\xfb\x8d\x05\x2c\x00\xf8\xe7\x08\xf0\x24\x80\x67\x6b\xc0\xa3\x00\x16\x6b\xc0\xeb\x00\x5e\xab\x01\x4f\x01\xf8\xaa\x06\x3c\x0e\xe0\xa7\x2a\xfe\x56\xc5\xdf\x6b\xc0\x71\x00\x7f\x54\xf8\xef\x2a\xfe\x5b\x03\x2c\x94\xde\x6e\xbf\x7c\x7f\xad\xca\x8f\x55\xf1\xa1\xea\xf6\xdc\xd3\xfd\x28\xbd\xd6\xab\xda\x91\xfc\x3b\x1d\x86\xf1\x87\xb2\x4b\x3b\x22\x4c\xa5\xf6\x70\x5a\x49\xda\x8d\x53\xd2\xa9\x92\x2d\xac\x86\xb1\x96\x58\x8d\xa3\xad\x40\xf5\x49\x8b\x1d\x49\x9d\x1c\xf4\x52\x25\x92\x20\x8e\xb0\x26\xb7\x44\x1a\x26\x58\x93\xba\xa3\x82\x41\xc1\xbd\x25\xfa\x12\x9b\x52\xcb\x04\xef\x88\x1d\x89\xf3\xf9\x68\xbc\x27\x92\xce\xb6\x54\x1a\x9b\x72\x10\xab\xc4\xde\xd0\xbd\xa0\x6b\xbf\x9a\xf6\xb4\xdd\x8e\x3d\xea\xca\x9d\x57\x3e\x08\xb6\x45\x3f\x3e\xa9\xd2\xfa\xb9\xb7\xdb\xf6\xaa\x92\xc5\x0e\x7b\x4d\x24\xd2\xa3\x86\xe3\x2e\xda\x4e\xd3\x6e\x34\xa9\xd1\xf4\x4e\x9d\x7a\xd1\x69\x3a\x4e\xfd\xac\xd0\x89\xdd\x56\x22\xd2\xa1\x48\x62\xe5\xd1\x9b\xc5\x0c\xda\x48\x95\xe8\xc7\xdd\x98\x96\xff\x37\x78\xa5\x7e\x56\x44\xbd\x54\xf4\xa4\xdd\x96\xa2\xef\xd1\x1d\xec\xd1\x66\xaa\x75\x20\xa2\xfa\xc6\x1b\x1b\xeb\xf6\x79\xa9\x74\x10\x47\x1e\xb9\x27\x9d\xfa\x6a\x1c\x25\x32\x4a\xec\xf6\xee\x40\x7a\x94\xc8\x8f\x92\x97\x06\xa1\x08\xa2\x25\xea\x6c\x0b\xa5\x65\xe2\xbf\xdb\x3e\x63\x2f\xde\xd5\xe5\x7e\xb6\xa4\xb2\xd7\xa3\x4e\xdc\x0d\xa2\x9e\x47\xf5\x73\x61\xaa\x44\x68\x9f\x89\x55\x5f\x7b\x14\x0d\x0a\xa8\xfd\xe6\x12\x95\xa9\x1f\x3d\xe7\x3a\xbe\xef\xd2\xc2\x02\xe5\xa9\x73\xc2\x77\x5d\x6a\x91\x43\x5e\x81\x57\xfc\xc6\xed\xd2\xb2\xff\x72\x9e\x3e\x5f\xc8\x96\x5d\x87\xf6\xf6\xca\x96\x15\xbf\xe1\xbc\x40\x2d\x72\xc9\xa3\xc6\x12\xf8\x5b\x9e\xf3\x2d\x33\x32\x43\x73\xc0\x19\xdf\x34\x63\x9e\x12\x5f\xe3\x19\x4f\xcc\x45\x9e\xf2\x8c\x33\x73\xc9\x03\x7f\x6d\xc6\x64\x46\x7c\x95\xa7\x66\x3f\xa7\xcd\xb8\x05\xbe\xcc\x13\xbe\x6e\xf6\xcd\xd8\x1c\x98\x2f\xc0\x3f\xf2\x9c\x0f\xcd\x41\x25\xfa\x95\x0f\xcb\x7e\x9e\x92\x19\xf2\xdc\x7c\x62\xf6\x79\xc2\xb3\x3b\x24\x5f\xe7\x39\xcf\xcc\x05\xce\xf8\x17\x33\xca\x8b\xe6\x53\xce\x38\x2b\x06\xd9\x66\xc4\x37\x79\xce\x37\xcc\xc5\xa2\x29\x33\x5f\x82\x7f\xe0\x5b\x9c\x99\x61\x49\xf0\x14\xfc\x3d\x4f\xf8\x1a\x5f\xbd\x4b\x5c\xe1\x9f\xcd\x3e\xcf\xcd\x90\xb3\xd2\xd3\x95\x7b\x16\x57\xd4\xe5\x7b\x8f\x2b\x9b\x6e\xf0\x94\x0f\xcd\x25\xf3\x59\x41\xfc\x17\x00\x00\xff\xff\x0b\x24\x32\x8e\x10\x04\x00\x00"

func localesRuLc_messagesManageMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesManageMo,
		"locales/ru/LC_MESSAGES/manage.mo",
	)
}

func localesRuLc_messagesManageMo() (*asset, error) {
	bytes, err := localesRuLc_messagesManageMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/manage.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/manager.html":     templatesViewsManagerHtml,
	"assets/js/manager.min.js":         assetsJsManagerMinJs,
	"locales/ru/LC_MESSAGES/config.mo": localesRuLc_messagesConfigMo,
	"locales/ru/LC_MESSAGES/manage.mo": localesRuLc_messagesManageMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"js": &bintree{nil, map[string]*bintree{
			"manager.min.js": &bintree{assetsJsManagerMinJs, map[string]*bintree{}},
		}},
	}},
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"config.mo": &bintree{localesRuLc_messagesConfigMo, map[string]*bintree{}},
				"manage.mo": &bintree{localesRuLc_messagesManageMo, map[string]*bintree{}},
			}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"manager.html": &bintree{templatesViewsManagerHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
