// Code generated by go-bindata.
// sources:
// templates/views/manager.html
// assets/js/manager.min.js
// DO NOT EDIT!

package internal

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsManagerHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x5a\xdd\x93\xdb\xb6\x11\x7f\xf7\x5f\x81\x41\x2e\x99\xbb\xd8\x14\x6d\xd7\xcd\x4c\x13\x49\x9e\x8c\x93\xa9\x3b\x75\xdb\x99\xf4\xe2\x17\xd7\xbd\x01\x89\xa5\x84\x2b\x04\x30\x00\xa8\xbb\xab\xe6\xfe\xf7\x0e\x3e\x28\x91\x22\x29\x91\xd4\x9d\x5d\xe7\x1e\x4e\x24\x3e\x76\x17\xbf\xfd\xe0\x02\xd8\xcd\x06\x51\xc8\x98\x00\x84\x53\x29\x0c\x08\x83\xd1\xfd\xfd\x93\x29\x65\x6b\x94\x72\xa2\xf5\x0c\x2b\x79\x83\xe7\x4f\x10\x42\xa8\xda\x7a\x7b\x95\x13\x01\x3c\xf4\x34\x7b\x0d\x33\x1c\x2a\xbd\x6e\xc4\xf2\xe5\xfc\x8d\x14\x19\x5b\x14\x8a\x18\x26\xc5\x34\x5e\xbe\xdc\x1b\x52\x21\x92\x72\x20\x2a\x63\xb7\x78\x3e\x8d\x29\x5b\x57\x38\xed\xbd\xd6\x18\x97\xcb\xa8\xd3\xdd\x6c\x10\xcb\xd0\x04\x94\x92\xca\x2e\xb0\x8b\x27\xe1\xa0\x0c\x72\xff\x23\x4a\xc4\x02\x54\xf9\xc2\xf4\x8a\x69\x4d\x92\xc6\xaa\x1c\x89\xa4\x30\x46\x0a\x64\xee\x72\x98\x61\xff\x82\x77\xeb\x90\x1a\x30\xa2\xc4\x90\x92\x4c\x60\x84\x11\x51\x8c\x44\x4b\x46\x29\x88\x19\x36\xaa\x00\x3c\xff\xc6\xb0\x15\xe8\x1f\xa6\xb1\x27\xd3\x64\xb6\xd9\x84\x85\x4c\x7e\x6e\x5d\x4e\x1d\x9d\x30\x03\x04\xb5\x03\xeb\x23\x33\xa9\x56\x48\x49\x0e\x33\x6c\x1f\x31\x22\xa9\x55\xcb\x0c\x7f\x85\xd1\x0a\xcc\x52\xd2\x19\xce\xa5\x36\x18\x31\x3a\xb3\x06\x92\xb1\x85\x0e\x2b\x31\x72\xb1\xb0\x13\xd7\x84\x33\x4a\x8c\x54\x6d\xb0\x58\x64\x3d\x7d\x43\x92\x7d\x83\xa9\x8d\x2c\x78\x09\x97\x20\x6b\x24\xc8\x3a\x32\x24\xd1\x28\x21\xea\xca\x3e\xe0\x1d\x19\xce\xf4\xbe\x76\xf7\xd6\xaa\xac\xe2\xd0\x99\x20\x2b\x78\x86\xce\xd6\x44\x69\xf4\xfd\x0c\x4d\xd6\x16\xec\x84\x83\xde\x47\xac\x26\x08\x67\x81\x55\xae\x40\x83\x30\xce\x50\x71\x30\x20\xf8\xcd\x93\x45\x01\x0c\xeb\x2c\x5b\xd3\x49\x0d\x5b\x03\xde\x62\xdd\x2d\xa2\xe3\x43\xd0\x52\x41\x36\xc3\x5f\x6d\x36\x81\xe6\xfd\x7d\xb0\x07\x6b\xc2\x4a\x72\x3d\xc3\xb5\xbe\x2d\x02\x7b\x1a\x70\x2d\x6e\x22\xdc\xe6\x44\x50\xa0\x6e\x62\x87\xb8\xd6\xc8\xac\x8c\x5c\x5b\xaa\x19\xe1\x1a\xb6\x22\x1f\x80\xb5\x02\x6f\x29\xd1\xe1\xf5\xc5\xa4\x9b\xd8\x34\xe6\xec\xa0\x06\x83\xb5\xb6\xcf\x2d\xf8\xfc\x49\x7b\x57\xc5\x91\x0d\x49\xa2\xf6\x50\xb0\xc7\xea\x24\x63\x69\xb1\xef\xaa\x00\xb6\xe5\x80\xe1\x78\x8b\x41\x4c\xec\x14\xe0\x1c\xad\xaa\xf5\x23\x56\x54\x5f\x31\x87\x48\x81\xce\xa5\xd0\xd6\x12\x8f\x2b\x73\xea\xe6\xd4\x08\x20\x4f\x66\x29\xd7\xd0\xe6\xd1\xed\x54\x96\x40\x68\xdf\xb1\xaa\xdf\xc0\x40\x18\xdd\x30\x6a\x96\x33\xfc\xf2\xf9\xd7\x78\xfe\x77\xb2\x82\x69\x6c\x96\xe3\x28\xfc\xf1\x6b\x3c\x7f\x4f\x78\x31\x9e\xc4\x0b\x4b\xe2\x27\xc8\x48\xc1\xcd\x60\x22\xf3\x9f\x40\xa7\x8a\xe5\xfe\xbb\xd7\x77\xf2\x34\xee\x0b\x98\xa5\x39\x40\x0d\x89\xa4\x77\xfd\xc6\xee\x7c\x84\x3d\x43\x67\xde\x7c\xad\x8b\x78\x5f\x39\x12\x06\x2a\x44\xec\xf8\xbf\x50\x3b\x53\x41\xce\x49\x0a\x25\xb1\xc9\xfb\xe0\x6b\x93\xbf\xc2\x1d\xc2\x13\x8c\xf0\x15\xee\x4b\x78\xa0\x41\xf5\xc4\xa7\x22\x36\xcb\x9a\x72\xfe\x4c\x99\x77\x96\x9e\x42\x6e\xf9\x73\x92\xc0\xf6\x43\x17\xc2\x7c\xe4\x1a\x31\xca\xa4\xf2\xae\xef\x71\xb2\xbe\x6f\xdf\xda\x30\xba\xbf\x9f\xc6\x6e\xd6\xe0\xd5\x84\xb0\xff\x60\x52\x3f\x86\x88\xdd\xb1\xbf\x55\xba\x78\x88\x52\x3f\xbb\x05\x54\x02\xb6\x4d\xb9\xa2\x85\x92\x45\xde\x33\xd0\x76\xcb\xf5\x96\xe8\xf7\x0c\x6e\x10\x06\x51\xac\x7a\xfb\x4e\x4d\x30\x0d\x1c\x52\x53\x93\x2d\xa8\x1a\xf9\xae\x97\x18\xd9\x8f\x92\xb7\xd1\x76\x95\xef\x3e\x5f\x3b\x1b\x1e\x2c\x09\xaa\xc5\x1c\xf9\x0c\x9d\x49\x17\x34\x6d\xe4\x38\x2f\x19\xff\x19\x8c\x5d\xf0\x3f\x7c\x0f\xf6\x23\x34\xbe\x18\xb3\x74\xb7\xfc\xc0\x63\x6d\x3f\x10\x3e\x7d\x12\x14\x6e\xb7\xbc\x9f\xdb\xb5\x6c\x3f\xe5\xe7\x7b\x9d\x17\x4d\x40\xdc\x97\xc6\x7e\xe4\x3d\x78\x36\x27\x2b\x9f\x2a\x29\x62\x83\xcf\x0b\xe7\x38\xfe\x65\x34\x74\x03\x3d\x68\x8b\x41\xec\x25\x1c\x65\x8c\x2e\xb0\x84\x44\x67\x1f\x8b\xcb\xbb\x1c\x10\x4e\xa4\xe4\xe3\x4c\x93\x89\xbc\x30\x61\x6f\x95\x2e\x21\xfd\x4f\x22\x6f\xb7\x79\xd6\xb5\x8e\xf4\x0d\x33\xe9\x72\x94\x79\xee\xf2\xfa\xf3\x5c\x31\x61\x3a\x14\x79\x81\xfc\xe6\xcc\xa5\xfb\x56\x02\xa0\x5b\x9c\x51\x7c\x12\x60\x52\xa1\xf3\x6e\xd0\x98\x30\xf8\xe2\xc8\x80\xef\x5e\x8d\xb3\xfb\x1a\xae\xa2\x58\x25\xa0\x70\x9b\xff\xf7\x01\x76\xe7\x37\x9d\x9e\xd0\x86\x7e\x4e\x8c\x01\x25\x66\xf8\xdf\x1f\xa2\xa7\x1f\x5f\x7f\x78\x1e\xfd\xe9\xe3\xb7\x67\xf8\x31\x11\x2d\x8e\x42\x5a\xfc\x6e\x30\x7d\x30\x48\xbb\xc1\xca\xb8\x24\x16\xad\x2f\x1f\xac\x9d\x01\x9e\xff\x6b\xe2\x1f\x2e\x5e\x3f\x1e\x70\x34\x9c\x81\x9d\x8e\x9c\x81\x5b\xf3\x99\x71\x3b\x6f\x00\xf7\x81\x44\xff\xfd\xf8\xf4\xe2\xe9\xa9\x00\x36\x32\x9c\x9c\x68\x7d\x23\x15\x3d\x1d\xb7\x1d\xa5\xb6\xa4\xa7\xec\x8d\xf4\x52\xde\x3c\x1e\x92\x0f\x8c\x8e\x21\x0b\x3d\x0a\x19\x2b\x14\xf5\x5b\xdb\x4b\xb8\x35\x6e\x83\xd7\x9e\x6b\x85\x51\x91\x37\xbb\x47\x33\x5e\xe4\x97\xf2\x58\xb8\x8f\xcd\xad\x2c\xe8\x55\x9c\xee\xef\xfd\xb9\x6e\x05\x14\xcf\xa9\x3e\x68\x97\xf3\x9d\xa0\xf0\x2f\x30\x50\x8c\x5c\xed\xf0\x04\xb6\xe5\xd4\xbb\x0f\xa3\x31\xdb\x61\x9d\x13\xd1\xba\xef\x2d\x71\x98\xc6\x6e\xc8\x97\xbd\xf1\x75\xcb\x6c\x28\xf4\xca\x99\x41\x38\x80\x3e\x60\x12\xe1\x94\x6c\xdc\x0e\xb0\x63\x6f\x7b\x52\xe4\xff\xd6\xfd\x7d\x4a\xd7\x0b\xd3\x0f\x40\xf3\xc9\x5c\x63\x98\x39\x7e\x0a\xc3\x6a\xf5\x9f\x5f\x35\x59\x0c\x86\xda\x1b\x0b\x11\x14\x9d\x8b\x96\x23\xc5\xed\x41\x8d\xdd\xbf\x5d\xec\x0e\x10\xea\x27\x26\xe3\x72\xfd\x44\xa1\x78\xfe\x23\xe7\xf2\x06\xa8\x8f\x8f\xfa\xfb\xe1\x54\x8a\x81\x47\x64\xe8\x73\x9c\x8f\x1c\x38\xfa\xd8\x6b\x79\x31\xfe\x0c\x86\xb3\xe6\x81\xc8\x73\x7f\x92\x78\xe0\xba\xe8\x88\xd8\xa7\xb8\x6f\xa7\x44\xe8\x9b\x15\x25\x7a\xf9\x03\xea\x38\xc0\x39\x45\xde\x71\x87\x37\xa7\x1c\xfb\x0c\xb5\xc0\xff\xb7\x30\xd4\xff\x92\x64\x98\xe4\xd3\xb8\xe7\x35\xc9\x34\x76\x31\xe6\xc8\x5d\xdd\xe1\x0c\xe5\x48\xf7\xb1\x4b\xd1\xd6\xc9\xa1\xb9\xfd\x5e\x3e\xe4\x81\x5c\x5c\x69\xc9\x19\x6d\x54\x59\xb4\x0d\x3e\x7a\x64\x5d\xab\xdf\x90\x3c\x5a\xd1\xe8\x3b\x14\x1e\x64\x96\x69\x30\xd1\x1f\x0e\x64\x04\xf5\x3a\x0a\x05\x1a\x76\x09\x6b\x62\x04\x4a\x8c\x88\x98\xc8\xe4\x36\x1d\xf5\x43\xe6\xbf\xd8\x9f\xee\x8a\x89\x76\xf2\xba\x48\x56\xac\x49\x5f\x17\x69\x0a\x5a\x6f\x59\x68\xb2\xb6\x09\x0f\x73\xb5\x1f\x74\x86\xcb\x27\x3c\xff\x27\x59\xc3\x61\xa6\x87\xf5\x52\x6f\xb2\xd8\xb6\xd6\xb8\x84\xc7\xf2\xa7\x82\xf0\x4a\x52\xc2\x51\x46\x28\xf8\xd4\xdb\xbd\xbf\x09\x17\xcc\x86\x24\x2e\x34\xcd\x70\xf4\xa2\x2c\x1e\xa0\x8c\x70\xb9\x08\xd5\x02\xee\x7a\x86\x03\x4d\xee\x6a\x33\xdf\xb9\x8b\x1d\x2f\x48\x4b\x79\x4a\xa3\x12\xc8\x4d\x8d\x02\xe5\xf6\xaa\x1c\x3f\xa4\xfd\x3a\xbe\x39\x6e\x09\x84\xb6\x5e\x3e\x0f\xaf\xb2\x71\x04\xc7\x55\xd9\x4c\x97\xaf\xea\x62\xf9\x8a\xa6\x7d\x9c\x3d\x5a\xbe\xac\x49\xad\x90\x35\x16\x94\xee\xd5\x38\xbd\xda\x57\x75\x53\xfb\x0d\x10\x6c\xe0\xc1\xf3\x1f\x15\xa0\x3b\x59\x20\x5d\x28\x78\xdd\x6b\x5e\x26\xa5\x19\x0e\x5e\x69\xfb\x61\xd3\xda\x0e\xe3\xfc\x8d\x85\xf8\x00\x62\x7d\xbc\xcb\x17\x55\x75\x30\xe8\x76\xa8\xee\x0a\xb0\xba\x77\x54\x2a\x9d\x2a\xa5\x6d\xd6\xa2\xb6\xbb\x86\xcd\x06\x69\x43\x0c\x4b\xdf\x5e\xfe\xed\x1d\x3a\xf7\xcf\xbf\xfe\xf2\x0e\xe1\xd8\x7e\xd3\x13\x49\x14\x8d\x89\xd6\x60\x74\xbc\x06\x41\xa5\xd2\xb1\x95\xd6\x85\x78\x3d\x11\x60\xa2\x44\xc7\xa9\xf6\xad\x97\xbe\x35\x91\xd2\x68\xa3\x48\x3e\x59\x31\x31\x49\x6d\xf8\x70\xa5\x35\x17\x0f\xc8\x35\x63\xb7\x40\xbd\x73\x94\x12\xb8\xa6\xb7\xae\xe9\xb0\x08\xed\xb8\x5c\xeb\x07\x44\x25\xbe\xd6\xf1\xf5\x6f\x05\xa8\xbb\x49\x05\x18\x2b\xcb\xf5\x63\xa0\x91\x68\xcb\xb0\x53\x05\x8f\xc2\xb3\xa2\x81\x3d\xe6\x55\x45\x0c\x66\xef\xe3\x45\xc9\xfb\x5a\xc7\x2b\x22\xc8\x02\x94\xa3\xe2\xf7\x2d\x55\x15\xfe\x2f\x00\x00\xff\xff\x54\x4a\xbe\xee\xb4\x29\x00\x00")

func templatesViewsManagerHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsManagerHtml,
		"templates/views/manager.html",
	)
}

func templatesViewsManagerHtml() (*asset, error) {
	bytes, err := templatesViewsManagerHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/manager.html", size: 10676, mode: os.FileMode(420), modTime: time.Unix(1507068031, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsJsManagerMinJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\x51\x6f\xe3\x36\x0c\xfe\x2b\x0e\x5b\xf4\x24\xc4\x55\xd3\x61\x4f\x49\x94\x3e\x64\xf7\x30\x60\xd8\x06\xdc\x6d\x2f\x41\x30\xc8\x16\x9d\x08\x95\x25\x4f\x92\x93\x2b\x02\xff\xf7\x41\x8a\x9b\x73\x92\x6b\xb1\x0d\xf7\x46\x8b\xfa\x28\x7e\xe4\x47\xfa\x96\x48\x5b\xb6\x35\x9a\x40\x99\x43\x21\x5f\x48\xd5\x9a\x32\x28\x6b\x08\x3d\xdc\x12\xb8\x29\xad\xa9\xd4\xc6\x67\xca\x34\x6d\x58\x29\xb9\xce\xb3\xd3\x99\x47\x8d\x65\x00\xca\xca\xad\x30\x1b\x1c\x42\x77\xc2\x65\xc8\x6f\x49\xd8\x2a\x4f\x73\x67\xf7\x1c\x59\x23\x1c\x9a\xe0\xff\x30\x41\x69\x02\xa1\xb0\xf2\x05\x72\x08\x0e\x68\x5e\xb6\x2e\xfa\x38\xb2\x9d\xd0\x84\xe6\x12\x2b\x1e\xa1\x4c\x62\x25\x5a\x1d\xfe\x14\xba\xc5\x19\x94\x5b\x2c\x9f\x0b\xfb\x05\x78\x0c\xe7\x6c\x43\x20\xbc\x34\x08\xf4\x89\xbc\x46\x00\x18\x9d\x7c\xe9\x3a\x4a\xb8\x8e\xb7\x3c\x7a\xe8\x14\x3e\x7d\xfc\xe5\xe3\xf2\x33\xf0\xa3\x3b\x88\xcd\xaf\xa2\xc6\xbb\x3b\x12\x11\xc8\x2a\x65\x24\x01\xdb\x44\x56\x40\x59\xa5\x74\x40\x37\xe4\xe9\x30\xb4\xce\x64\x3d\xd1\xfe\xdd\xfe\x91\x4f\xa9\x3c\xf1\xfd\x8e\x1e\x79\x7d\x25\xca\x25\x56\x4f\xce\xee\x99\xc3\xda\xee\x70\xa9\x85\xf7\x04\xb6\xc2\xdf\xa3\x73\xd6\x01\x9d\x46\xa7\x90\xf2\xda\x93\x0f\xdb\x52\xb4\x21\x58\xb3\x8a\x55\xe0\xbe\x2d\x6a\x15\xd6\x70\x4a\x43\x79\x51\x68\x94\x90\x4f\x38\x1f\x82\x82\x63\x83\x78\x4c\xa3\xd9\x84\x2d\xed\xde\x8e\xec\xd0\x63\x0a\x5c\x6a\x55\x3e\xbf\x25\x91\x8b\xb0\x6f\x31\xfb\x1f\xf9\x8f\x26\xef\x65\xf7\x15\x77\x95\x5e\x94\x61\x9d\xb8\xd7\x56\x0a\xbd\x4c\xe8\xa8\x37\x0e\x30\x3b\xf5\xee\xdb\x14\xb2\x20\x7b\xd5\x1b\x51\xe3\x3a\xbd\x35\xe2\x5b\x25\x25\x9a\xe1\x14\x5c\x62\x4e\x53\x81\xa2\xdc\xbe\x39\x13\xef\x89\x79\x77\xad\xe0\xe9\xee\x34\x1b\xe5\x98\xc3\x5c\xab\xc5\xdc\x07\x67\xcd\x66\x01\xe3\xd7\xdb\x31\x4f\xa0\x63\x98\x3f\xf4\xae\x69\x06\xe3\x5d\xfc\xd6\x6a\x01\x1d\xcd\xeb\x5e\xd0\x2c\x55\xe3\x3e\x4d\x20\x65\xdb\x50\x6b\x02\xcb\x34\xc3\x3e\x3b\x8a\xdd\x4f\xe7\x85\xcb\x1e\x16\xf3\x56\x2f\x60\x5c\xc6\x18\xd1\x8a\x21\x12\x96\xd0\x7c\xf4\xd8\xf7\x64\x50\xda\xff\xd2\x17\x29\x82\xe0\x87\xee\xdf\xb7\x41\xc9\xef\xde\x84\x98\xc3\xea\xbc\x7c\x6b\xfe\x4e\x67\xae\xfb\xd2\x77\x25\x96\x82\x35\xd6\x07\x02\x37\x90\xc7\xb0\xf9\xe0\xd1\xbd\x32\xd2\xee\x99\xb6\xa5\x88\x27\xcc\xa1\xb6\x42\x26\xd4\xa9\x8a\xe7\x8b\x36\x15\xb0\x11\xde\xef\xad\x93\x6b\xf6\x6a\xdd\xfb\xad\xdd\x03\x65\xd6\x10\x88\x26\x2b\xfc\xc9\x97\x6d\x95\xc4\xe1\x01\xe4\xdf\xe0\x0d\x37\x30\x3e\xdf\x56\x4a\x46\xcd\xfc\xb5\x8b\x2b\x16\xe8\x4c\x55\x04\x5f\x57\x42\x42\xc5\xad\x1c\xf0\x4b\x20\x74\xd6\x1b\xc8\x22\x41\x02\x3d\x84\xe6\xe7\x07\x79\xa0\x5d\x47\x67\x09\x1b\x07\xf8\x7c\xf7\xc4\x13\xa0\xec\x27\x11\xc4\xe7\x68\x93\x43\xf1\xbb\xd8\x28\x23\x02\x4e\x47\x8f\x79\xf1\xb3\xa9\x6c\x34\xa4\x13\xfb\xa5\xd0\xba\x10\xe5\xf3\xf4\x82\x88\x68\xd4\x71\x5f\x8b\x46\x91\xf4\x7b\xf1\x5c\x34\x8a\x45\x83\x1c\x1a\xb1\xc1\x29\xf4\x9b\x16\x3a\xca\x8c\x95\xe8\x09\xcd\xb5\xf0\x81\x9b\x56\xeb\x59\xbc\x5c\x5a\xdd\xd6\x86\x4c\xf2\x6b\x40\x62\x73\xa9\x9d\x8d\xb3\x6d\x93\x2b\x7a\x50\x15\x89\x91\x46\x9c\xa7\xa3\x63\x4a\x8d\x70\xc1\xf3\xdb\xe3\x2d\xda\x17\x8c\xf9\x46\xab\x40\x80\x01\xcd\xa3\xba\x78\xba\xd5\x57\x77\xf1\xc3\x53\xfa\x5c\x3d\xae\xa7\x47\x63\xb2\x9e\xf5\x81\x4d\xfa\x09\xdd\x92\x48\x88\x32\xfc\x9b\x28\xca\x0a\xac\xac\x43\xf2\x61\x1e\x5c\x56\xc6\xad\xca\x21\x3d\x06\x8b\x79\x90\x59\x69\xb5\x6f\x84\xe1\xf0\x23\x2c\x3e\x8c\x23\x3e\xce\x6c\x90\x8b\xf9\x43\x70\x71\x70\x8f\xe4\x45\x8d\x5d\x97\xda\x73\xd6\x94\x7e\x13\x44\x59\xa5\x59\x4d\xff\x65\x76\x0c\x7f\xa9\xa2\xbe\x4e\xbf\x39\x89\x8e\xa7\x76\x32\x1b\x6d\x42\x23\x81\x09\xe7\x7c\x78\x63\x35\x59\xdf\xdd\x81\xf0\x25\x5c\x3a\x1e\xd7\x4f\x43\xf4\x6a\x92\x83\x44\x5f\xc2\x9a\xb2\xd8\x7b\x42\xa7\x97\x6e\x31\xf4\x76\xb4\xa3\xb3\x7f\x02\x00\x00\xff\xff\x59\xce\x70\xc9\xbf\x08\x00\x00")

func assetsJsManagerMinJsBytes() ([]byte, error) {
	return bindataRead(
		_assetsJsManagerMinJs,
		"assets/js/manager.min.js",
	)
}

func assetsJsManagerMinJs() (*asset, error) {
	bytes, err := assetsJsManagerMinJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/js/manager.min.js", size: 2239, mode: os.FileMode(420), modTime: time.Unix(1507068217, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/manager.html": templatesViewsManagerHtml,
	"assets/js/manager.min.js": assetsJsManagerMinJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"js": &bintree{nil, map[string]*bintree{
			"manager.min.js": &bintree{assetsJsManagerMinJs, map[string]*bintree{}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"manager.html": &bintree{templatesViewsManagerHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: AssetInfo, Prefix: k}
	}
	panic("unreachable")
}
