// Code generated by go-bindata.
// sources:
// templates/views/manager.html
// assets/js/manager.min.js
// DO NOT EDIT!

package internal

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsManagerHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x5a\xeb\x6f\xdb\xb6\x16\xff\xde\xbf\x82\x60\xd3\x8b\xa4\xad\xac\x36\xb7\xb7\xc0\xdd\x6c\x17\x43\x5b\xac\xc3\xba\x0d\xe8\xd2\x7e\xe9\xba\x80\x12\x8f\x6c\x66\x34\xa9\x92\x94\xe3\xcc\xf0\xff\x3e\xf0\x21\x5b\xb2\x25\x5b\x76\xe2\x16\x5d\x3e\xc4\x12\x1f\xe7\xf1\x3b\x0f\x3e\x8e\xe6\x73\x44\x21\x63\x02\x10\x4e\xa5\x30\x20\x0c\x46\x8b\xc5\xbd\x3e\x65\x53\x94\x72\xa2\xf5\x00\x2b\x79\x8d\x87\xf7\x10\x42\xa8\xda\x3a\xbb\xcc\x89\x00\x1e\x7a\x36\x7b\x0d\x33\x1c\x2a\xbd\x6e\xc4\xf8\x7c\xf8\x52\x8a\x8c\x8d\x0a\x45\x0c\x93\xa2\x1f\x8f\xcf\xd7\x86\x54\x88\xa4\x1c\x88\xca\xd8\x0c\x0f\xfb\x31\x65\xd3\x0a\xa7\xb5\xd7\x1a\xe3\x52\x8d\x3a\xdd\xf9\x1c\xb1\x0c\xf5\x40\x29\xa9\xac\x82\x6d\x3c\x09\x07\x65\x90\xfb\x1f\x51\x22\x46\xa0\xca\x17\xa6\x27\x4c\x6b\x92\x6c\x68\xe5\x48\x24\x85\x31\x52\x20\x73\x93\xc3\x00\xfb\x17\xbc\xd2\x43\x6a\xc0\x88\x12\x43\x4a\x32\x81\x11\x46\x44\x31\x12\x8d\x19\xa5\x20\x06\xd8\xa8\x02\xf0\xf0\x3f\x86\x4d\x40\x7f\xdf\x8f\x3d\x99\x4d\x66\xf3\x79\x50\xa4\xf7\xba\x51\x9d\x3a\x3a\x61\x06\x08\x6a\x07\xd6\x47\x66\x52\x4d\x90\x92\x1c\x06\xd8\x3e\x62\x44\x52\x6b\x96\x01\xbe\x8f\xd1\x04\xcc\x58\xd2\x01\xce\xa5\x36\x18\x31\x3a\xb0\x0e\x92\xb1\x91\x0e\x9a\x18\x39\x1a\xd9\x89\x53\xc2\x19\x25\x46\xaa\x26\x58\x2c\xb2\x9e\xbe\x21\xc9\xba\xc3\xd4\x46\x16\xbc\x84\x4b\x90\x29\x12\x64\x1a\x19\x92\x68\x94\x10\x75\x69\x1f\xf0\x8a\x0c\x67\x7a\xdd\xba\x6b\xba\x2a\x6b\x38\x74\x22\xc8\x04\x1e\xa3\x93\x29\x51\x1a\x7d\x37\x40\xbd\xa9\x05\x3b\xe1\xa0\xd7\x11\xab\x09\xc2\x59\x60\x95\x2b\xd0\x20\x8c\x73\x54\x1c\x1c\x08\x3e\x7b\xb2\x28\x80\x61\x83\x65\xe9\x3a\xa9\x61\x53\xc0\x4b\xac\xdb\x45\x74\x7c\x08\x1a\x2b\xc8\x06\xf8\xfe\x7c\x1e\x68\x2e\x16\xc1\x1f\xac\x0b\x2b\xc9\xf5\x00\xd7\xfa\x96\x08\xac\x59\xc0\xb5\xb8\x89\x30\xcb\x89\xa0\x40\xdd\xc4\x16\x71\xad\x93\x59\x19\xb9\xb6\x54\x33\xc2\x35\x2c\x45\xde\x02\x6b\x05\xde\x52\xa2\xed\xfa\xc5\xa4\x9d\x58\x3f\xe6\x6c\xab\x05\x83\xb7\x36\xcf\x2d\xf8\xf0\x5e\x73\x57\x25\x90\x0d\x49\xa2\xe6\x54\xb0\xc6\xea\x56\xce\xd2\xe0\xdf\x55\x01\x6c\xcb\x16\xc7\xf1\x1e\x83\x98\x58\x19\xc0\x05\x5a\xd5\xea\x3b\xbc\xa8\xae\x31\x87\x48\x81\xce\xa5\xd0\xd6\x13\x77\x1b\xb3\xef\xe6\xd4\x08\x20\x4f\x66\x2c\xa7\xd0\x14\xd1\xcd\x54\xc6\x40\x68\xd7\xb1\xaa\xdb\xc0\x40\x18\x5d\x33\x6a\xc6\x03\x7c\xfe\xe4\x01\x1e\xfe\x4a\x26\xd0\x8f\xcd\xf8\x30\x0a\xff\x7b\x80\x87\x1f\x08\x2f\x0e\x27\xf1\xd4\x92\x78\x05\x19\x29\xb8\xd9\x9b\xc8\xf0\x15\xe8\x54\xb1\xdc\xaf\x7b\x5d\x27\xf7\xe3\xae\x80\x59\x9a\x7b\x98\x21\x91\xf4\xa6\xdb\xd8\x55\x8c\xb0\xc7\xe8\xc4\xbb\xaf\x0d\x11\x1f\x2b\x3b\xd2\x40\x85\x88\x1d\xff\x13\xb5\x33\x15\xe4\x9c\xa4\x50\x12\xeb\x7d\x08\xb1\xd6\xfb\x19\x6e\x10\xee\x61\x84\x2f\x71\x57\xc2\x7b\x3a\x54\x47\x7c\x2a\x62\xb3\x6c\x53\xce\xd7\x94\xf9\x60\xe9\x28\xe4\x92\x3f\x27\x09\x2c\x17\xba\x90\xe6\x23\xd7\x88\x51\x26\x95\x0f\x7d\x8f\x93\x8d\x7d\xfb\xd6\x84\xd1\x62\xd1\x8f\xdd\xac\xbd\xb5\x09\x69\xff\xce\xa4\x3e\x86\x88\xed\xb9\xbf\x51\xba\x78\x1f\xa3\x7e\x75\x0f\xa8\x24\x6c\xbb\xe5\x8a\x46\x4a\x16\x79\xc7\x44\xdb\x2e\xd7\x1b\xa2\x3f\x30\xb8\x46\x18\x44\x31\xe9\x1c\x3b\x35\xc1\x34\x70\x48\x4d\x4d\xb6\x60\x6a\xe4\xbb\xce\x31\xb2\x8b\x92\xf7\xd1\x66\x93\xaf\x96\xaf\x95\x0f\xef\x2d\x09\xaa\xe5\x1c\xf9\x18\x9d\x48\x97\x34\x6d\xe6\x38\x2d\x19\xff\x08\xc6\x2a\xfc\x9b\xef\xc1\x7e\x84\xc6\x67\x87\xa8\xee\xd4\x0f\x3c\xa6\x76\x81\xf0\xdb\x27\x41\x61\xb6\xe4\xfd\xc4\xea\xb2\x5c\xca\x4f\xd7\x3a\xcf\x36\x01\x71\x2b\x8d\x5d\xe4\x3d\x78\x76\x4f\x56\x3e\x55\xb6\x88\x1b\x7c\x9e\xba\xc0\xf1\x2f\x07\x43\xb7\x67\x04\x2d\x31\x88\xbd\x84\x07\x39\xa3\x4b\x2c\x61\xa3\xb3\x8e\xc5\xc5\x4d\x0e\x08\x27\x52\xf2\xc3\x5c\x93\x89\xbc\x30\xe1\x6c\x95\x8e\x21\xfd\x2b\x91\xb3\xe5\x3e\xeb\x4a\x47\xfa\x9a\x99\x74\x7c\x90\x7b\xae\xf6\xf5\xa7\xb9\x62\xc2\xb4\x18\xf2\x0c\xf9\xc3\x99\xdb\xee\x5b\x09\x80\x2e\x71\x46\xf1\xad\x00\x93\x0a\x9d\xb6\x83\xc6\x84\xc1\x67\x3b\x06\x3c\x7f\x76\x98\xdf\xd7\x70\x15\xc5\x24\x01\x85\x9b\xe2\xbf\x0b\xb0\xab\xb8\x69\x8d\x84\x26\xf4\x73\x62\x0c\x28\x31\xc0\x7f\x7e\x8c\x1e\x7d\x7a\xf1\xf1\x49\xf4\xff\x4f\x0f\x4f\xf0\x31\x11\x2d\x76\x42\x5a\xfc\x6b\x30\xbd\x33\x48\xdb\xc1\xca\xb8\x24\x16\xad\x6f\x1f\xac\x95\x03\x9e\xfe\xd1\xf3\x0f\x67\x2f\x8e\x07\x1c\x0d\x77\x60\xb7\x47\xce\xc0\xcc\x7c\x65\xdc\x4e\x37\x80\xfb\x48\xa2\xbf\x3f\x3d\x3a\x7b\x74\x5b\x00\x37\x76\x38\x39\xd1\xfa\x5a\x2a\x7a\x7b\xdc\x56\x94\x9a\x36\x3d\x65\x6f\xa4\xc7\xf2\xfa\x78\x48\xde\x31\x3a\x86\x8c\xf4\x41\xc8\x58\xa1\xa8\x3f\xda\x5e\xc0\xcc\xb8\x03\x5e\xf3\x5e\x2b\x8c\x8a\xbc\xdb\x1d\xcd\x79\x91\x57\xe5\x58\xb8\x1f\xba\xb7\xb2\xa0\x57\x71\x5a\x2c\xfc\xbd\x6e\x05\x14\xcf\xa9\x3e\x68\xb5\xe7\xbb\x85\xc1\xbf\xc1\x44\x71\xa0\xb6\xfb\x6f\x60\x1b\x6e\xbd\xbb\x30\x3a\xe4\x38\xac\x73\x22\x1a\xcf\xbd\x25\x0e\xfd\xd8\x0d\xf9\xb6\x0f\xbe\x4e\xcd\x0d\x83\x5e\x3a\x37\x08\x17\xd0\x5b\x5c\x22\xdc\x92\x1d\x76\x02\x6c\x39\xdb\xde\x2a\xf3\x3f\x74\x7f\x5f\x32\xf4\xc2\xf4\x2d\xd0\x7c\xb1\xd0\xd8\xcf\x1d\xf7\x77\xac\xf6\x90\x78\xaf\xc9\xa8\x12\x12\xdd\x49\x77\xbf\xf8\xdc\x0f\x94\x7e\xdc\xf1\xea\xb3\x1f\xbb\x0b\x9e\x1d\xf7\xef\xdb\xb3\xce\x8e\xee\x5d\x85\x8e\xc6\xc9\xa1\xb9\xb9\xd6\x16\x72\x3b\x17\x97\x5a\x72\x46\x37\x2a\xa7\x4d\x83\x77\x5e\x43\xd5\x6a\xb2\x92\x47\x13\x1a\x3d\x47\xe1\x41\x66\x99\x06\x13\xfd\x77\x4b\x94\xd7\x6b\xa3\x0a\x34\xac\x16\xa1\xc4\x08\x94\x18\x11\x31\x91\xc9\xe5\x12\xe3\x87\x0c\xdf\xd9\x9f\xf6\x2a\x68\x33\x79\x5d\x24\x13\xb6\x49\x5f\x17\x69\x0a\x5a\x2f\x59\x68\x32\xb5\x49\x8c\xb9\x7a\x2e\x1d\xe0\xf2\x09\x0f\x7f\x27\x53\xd8\xce\x74\xbb\x5d\xea\x4d\x16\xdb\xc6\xba\x75\x78\x2c\x7f\x2a\x08\x4f\x24\x25\x1c\x65\x84\x82\x5f\x4e\xdd\xfb\xcb\x50\x34\x32\x24\x71\xf7\x45\x03\x1c\x3d\x2d\x0b\x82\x94\x11\x2e\x47\xa1\x02\xe8\xae\x5c\x39\xd0\xe4\xa6\x36\xf3\xad\xbb\xac\xf5\x82\x34\x94\x9c\x37\xaa\xfb\x6e\x6a\x14\x28\x37\x57\xda\xfd\x90\xe6\x12\xdb\xe6\xb8\x31\x10\xda\x58\x50\xda\xbf\x72\xee\x08\x1e\x56\x39\xef\x8f\x9f\xd5\xc5\xf2\x5f\x29\xac\xe3\xec\xd1\xf2\x9f\x2a\xa8\x09\xb2\xce\x82\xd2\xb5\xef\x16\x9e\xad\x9b\x7a\xd3\xfa\x1b\x20\xd8\xc4\x83\x87\x3f\x28\x40\x37\xb2\x40\xba\x50\xf0\xa2\xd3\xbc\x4c\x4a\xb3\x3f\x78\xa5\xef\x87\x8d\x68\x33\x8c\xc3\x97\x16\xe2\x2d\x88\x75\x89\x2e\xff\xa1\x44\x0b\x83\xf6\x80\x6a\xff\xaa\xa3\x1e\x1d\x95\xaf\x17\x2a\x9f\xab\x58\x8f\x5a\xee\x04\xe6\x73\xa4\x0d\x31\x2c\x7d\x73\xf1\xcb\x5b\x74\xea\x9f\xdf\xbf\x7b\x8b\x70\x4c\x89\x1e\x27\x92\x28\x1a\x13\xad\xc1\xe8\x78\x0a\x82\x4a\xa5\x63\x2b\xad\x4b\xf1\xba\x27\xc0\x44\x89\x8e\x53\xed\x5b\x2f\x7c\x6b\x22\xa5\xd1\x46\x91\xbc\x37\x61\xa2\x97\xda\xf4\xe1\xca\xe5\x67\x77\xc8\x35\x63\x33\xa0\x3e\x38\x4a\x09\x5c\xd3\x1b\xd7\xb4\x5d\x84\x66\x5c\xae\xf4\x1d\xa2\x12\x5f\xe9\xf8\xea\x73\x01\xea\xa6\x57\x01\xc6\xca\x72\x75\x0c\x34\x12\x6d\x19\xb6\x9a\xe0\x28\x3c\x2b\x16\x58\x63\x5e\x35\xc4\xde\xec\x7d\xbe\x28\x79\x5f\xe9\x78\x42\x04\x19\x81\x72\x54\x6c\xba\xaa\x9b\xf0\x9f\x00\x00\x00\xff\xff\x96\x44\xdb\x86\x88\x25\x00\x00")

func templatesViewsManagerHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsManagerHtml,
		"templates/views/manager.html",
	)
}

func templatesViewsManagerHtml() (*asset, error) {
	bytes, err := templatesViewsManagerHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/manager.html", size: 9608, mode: os.FileMode(420), modTime: time.Unix(1507064958, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsJsManagerMinJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\x51\x6f\xe3\x36\x0c\xfe\x2b\x0e\x5b\xf4\x24\xc4\x55\xd3\x61\x4f\x49\x94\x3e\x64\xf7\x30\x60\xd8\x06\xdc\x6d\x2f\x41\x30\xc8\x16\x9d\x08\x95\x25\x4f\x92\x93\x2b\x02\xff\xf7\x41\x8a\x9b\x73\x92\x6b\xb1\x0d\xf7\x46\x8b\xfa\x28\x7e\xe4\x47\xfa\x96\x48\x5b\xb6\x35\x9a\x40\x99\x43\x21\x5f\x48\xd5\x9a\x32\x28\x6b\x08\x3d\xdc\x12\xb8\x29\xad\xa9\xd4\xc6\x67\xca\x34\x6d\x58\x29\xb9\xce\xb3\xd3\x99\x47\x8d\x65\x00\xca\xca\xad\x30\x1b\x1c\x42\x77\xc2\x65\xc8\x6f\x49\xd8\x2a\x4f\x73\x67\xf7\x1c\x59\x23\x1c\x9a\xe0\xff\x30\x41\x69\x02\xa1\xb0\xf2\x05\x72\x08\x0e\x68\x5e\xb6\x2e\xfa\x38\xb2\x9d\xd0\x84\xe6\x12\x2b\x1e\xa1\x4c\x62\x25\x5a\x1d\xfe\x14\xba\xc5\x19\x94\x5b\x2c\x9f\x0b\xfb\x05\x78\x0c\xe7\x6c\x43\x20\xbc\x34\x08\xf4\x89\xbc\x46\x00\x18\x9d\x7c\xe9\x3a\x4a\xb8\x8e\xb7\x3c\x7a\xe8\x14\x3e\x7d\xfc\xe5\xe3\xf2\x33\xf0\xa3\x3b\x88\xcd\xaf\xa2\xc6\xbb\x3b\x12\x11\xc8\x2a\x65\x24\x01\xdb\x44\x56\x40\x59\xa5\x74\x40\x37\xe4\xe9\x30\xb4\xce\x64\x3d\xd1\xfe\xdd\xfe\x91\x4f\xa9\x3c\xf1\xfd\x8e\x1e\x79\x7d\x25\xca\x25\x56\x4f\xce\xee\x99\xc3\xda\xee\x70\xa9\x85\xf7\x04\xb6\xc2\xdf\xa3\x73\xd6\x01\x9d\x46\xa7\x90\xf2\xda\x93\x0f\xdb\x52\xb4\x21\x58\xb3\x8a\x55\xe0\xbe\x2d\x6a\x15\xd6\x70\x4a\x43\x79\x51\x68\x94\x90\x4f\x38\x1f\x82\x82\x63\x83\x78\x4c\xa3\xd9\x84\x2d\xed\xde\x8e\xec\xd0\x63\x0a\x5c\x6a\x55\x3e\xbf\x25\x91\x8b\xb0\x6f\x31\xfb\x1f\xf9\x8f\x26\xef\x65\xf7\x15\x77\x95\x5e\x94\x61\x9d\xb8\xd7\x56\x0a\xbd\x4c\xe8\xa8\x37\x0e\x30\x3b\xf5\xee\xdb\x14\xb2\x20\x7b\xd5\x1b\x51\xe3\x3a\xbd\x35\xe2\x5b\x25\x25\x9a\xe1\x14\x5c\x62\x4e\x53\x81\xa2\xdc\xbe\x39\x13\xef\x89\x79\x77\xad\xe0\xe9\xee\x34\x1b\xe5\x98\xc3\x5c\xab\xc5\xdc\x07\x67\xcd\x66\x01\xe3\xd7\xdb\x31\x4f\xa0\x63\x98\x3f\xf4\xae\x69\x06\xe3\x5d\xfc\xd6\x6a\x01\x1d\xcd\xeb\x5e\xd0\x2c\x55\xe3\x3e\x4d\x20\x65\xdb\x50\x6b\x02\xcb\x34\xc3\x3e\x3b\x8a\xdd\x4f\xe7\x85\xcb\x1e\x16\xf3\x56\x2f\x60\x5c\xc6\x18\xd1\x8a\x21\x12\x96\xd0\x7c\xf4\xd8\xf7\x64\x50\xda\xff\xd2\x17\x29\x82\xe0\x87\xee\xdf\xb7\x41\xc9\xef\xde\x84\x98\xc3\xea\xbc\x7c\x6b\xfe\x4e\x67\xae\xfb\xd2\x77\x25\x96\x82\x35\xd6\x07\x02\x37\x90\xc7\xb0\xf9\xe0\xd1\xbd\x32\xd2\xee\x99\xb6\xa5\x88\x27\xcc\xa1\xb6\x42\x26\xd4\xa9\x8a\xe7\x8b\x36\x15\xb0\x11\xde\xef\xad\x93\x6b\xf6\x6a\xdd\xfb\xad\xdd\x03\x65\xd6\x10\x88\x26\x2b\xfc\xc9\x97\x6d\x95\xc4\xe1\x01\xe4\xdf\xe0\x0d\x37\x30\x3e\xdf\x56\x4a\x46\xcd\xfc\xb5\x8b\x2b\x16\xe8\x4c\x55\x04\x5f\x57\x42\x42\xc5\xad\x1c\xf0\x4b\x20\x74\xd6\x1b\xc8\x22\x41\x02\x3d\x84\xe6\xe7\x07\x79\xa0\x5d\x47\x67\x09\x1b\x07\xf8\x7c\xf7\xc4\x13\xa0\xec\x27\x11\xc4\xe7\x68\x93\x43\xf1\xbb\xd8\x28\x23\x02\x4e\x47\x8f\x79\xf1\xb3\xa9\x6c\x34\xa4\x13\xfb\xa5\xd0\xba\x10\xe5\xf3\xf4\x82\x88\x68\xd4\x71\x5f\x8b\x46\x91\xf4\x7b\xf1\x5c\x34\x8a\x45\x83\x1c\x1a\xb1\xc1\x29\xf4\x9b\x16\x3a\xca\x8c\x95\xe8\x09\xcd\xb5\xf0\x81\x9b\x56\xeb\x59\xbc\x5c\x5a\xdd\xd6\x86\x4c\xf2\x6b\x40\x62\x73\xa9\x9d\x8d\xb3\x6d\x93\x2b\x7a\x50\x15\x89\x91\x46\x9c\xa7\xa3\x63\x4a\x8d\x70\xc1\xf3\xdb\xe3\x2d\xda\x17\x8c\xf9\x46\xab\x40\x80\x01\xcd\xa3\xba\x78\xba\xd5\x57\x77\xf1\xc3\x53\xfa\x5c\x3d\xae\xa7\x47\x63\xb2\x9e\xf5\x81\x4d\xfa\x09\xdd\x92\x48\x88\x32\xfc\x9b\x28\xca\x0a\xac\xac\x43\xf2\x61\x1e\x5c\x56\xc6\xad\xca\x21\x3d\x06\x8b\x79\x90\x59\x69\xb5\x6f\x84\xe1\xf0\x23\x2c\x3e\x8c\x23\x3e\xce\x6c\x90\x8b\xf9\x43\x70\x71\x70\x8f\xe4\x45\x8d\x5d\x97\xda\x73\xd6\x94\x7e\x13\x44\x59\xa5\x59\x4d\xff\x65\x76\x0c\x7f\xa9\xa2\xbe\x4e\xbf\x39\x89\x8e\xa7\x76\x32\x1b\x6d\x42\x23\x81\x09\xe7\x7c\x78\x63\x35\x59\xdf\xdd\x81\xf0\x25\x5c\x3a\x1e\xd7\x4f\x43\xf4\x6a\x92\x83\x44\x5f\xc2\x9a\xb2\xd8\x7b\x42\xa7\x97\x6e\x31\xf4\x76\xb4\xa3\xb3\x7f\x02\x00\x00\xff\xff\x59\xce\x70\xc9\xbf\x08\x00\x00")

func assetsJsManagerMinJsBytes() ([]byte, error) {
	return bindataRead(
		_assetsJsManagerMinJs,
		"assets/js/manager.min.js",
	)
}

func assetsJsManagerMinJs() (*asset, error) {
	bytes, err := assetsJsManagerMinJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/js/manager.min.js", size: 2239, mode: os.FileMode(420), modTime: time.Unix(1507066410, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/manager.html": templatesViewsManagerHtml,
	"assets/js/manager.min.js": assetsJsManagerMinJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"js": &bintree{nil, map[string]*bintree{
			"manager.min.js": &bintree{assetsJsManagerMinJs, map[string]*bintree{}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"manager.html": &bintree{templatesViewsManagerHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: AssetInfo, Prefix: k}
	}
	panic("unreachable")
}
