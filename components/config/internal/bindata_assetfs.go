// Code generated by go-bindata.
// sources:
// templates/views/manager.html
// assets/js/manager.min.js
// locales/ru/LC_MESSAGES/config.mo
// locales/ru/LC_MESSAGES/manage.mo
// DO NOT EDIT!

package internal

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsManagerHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x5a\xdd\x93\xdb\xb6\x11\x7f\xf7\x5f\xb1\x83\x5c\x33\xa7\xd8\x14\x6d\xd7\xcd\xb4\x89\x74\x9e\x4c\x9a\x89\x3b\x75\xdb\x99\xc4\x71\x1f\x5c\xf7\x06\x24\x96\x12\xae\x14\xa0\x00\xa0\x74\x57\xcd\xfd\xef\x1d\x00\x24\x45\x4a\xa0\x3e\xa8\xd3\xb9\x8e\x1f\xce\x14\x01\xec\xc7\x0f\xfb\x81\x05\x77\xb5\x02\x86\x19\x17\x08\x24\x95\xc2\xa0\x30\x04\xee\xef\x9f\x8c\x18\x5f\x40\x9a\x53\xad\xc7\x44\xc9\x25\xb9\x7a\x02\x00\xd0\x7c\x7b\x7b\x3d\xa7\x02\xf3\x72\x64\x7b\xd4\x70\x93\x63\x63\xd4\xcd\x98\xbe\xbc\x5a\xad\x80\xbf\xf8\xa3\x00\xf2\xbd\x14\x19\x9f\x14\x8a\x1a\x2e\x05\x81\x21\xdc\xdf\x8f\xe2\xe9\xcb\x8d\x15\x0d\x9a\x69\x8e\x54\x65\xfc\x96\x5c\x8d\x62\xc6\x17\x0d\xc6\x1b\x3f\x5b\x72\x54\x5a\xb5\xe9\x5a\x29\x32\x18\xa2\x52\x52\x59\x7d\xbb\x78\xd2\x1c\x95\x01\xf7\x37\x62\x54\x4c\x50\x55\x3f\xb8\x9e\x71\xad\x69\xb2\xa5\xa4\x23\x91\x14\xc6\x48\x01\xe6\x6e\x8e\x63\xe2\x7f\x90\xb5\x1e\x52\x23\x01\x46\x0d\xad\xc8\x94\x8c\x08\x50\xc5\x69\x34\xe5\x8c\xa1\x18\x13\xa3\x0a\x24\x57\x5f\x1a\x3e\x43\xfd\xed\x28\xf6\x64\xb6\x99\xad\x56\xa5\x22\xc3\x1f\x82\xea\xb4\xd1\x29\x57\xa0\x60\x76\x62\x7b\x66\x26\xd5\x0c\x94\xcc\x71\x4c\xec\x23\x01\x9a\xda\xcd\x19\x93\x2f\x08\xcc\xd0\x4c\x25\x1b\x93\xb9\xd4\x86\x00\x67\x63\x6b\x2f\x19\x9f\xe8\x52\x13\x23\x27\x13\xbb\x70\x41\x73\xce\xa8\x91\x2a\x04\x8b\x45\xd6\xd3\x37\x34\xd9\xb4\x9f\xd6\xcc\x22\xaf\xe0\x12\x74\x01\x82\x2e\x22\x43\x13\x0d\x09\x55\xd7\xf6\x81\xac\xc9\xe4\x5c\x6f\xee\xee\x86\xae\xca\x6e\x1c\x5c\x08\x3a\xc3\x67\x70\xb1\xa0\x4a\xc3\x37\x63\x18\x2e\x2c\xd8\x49\x8e\x7a\x13\xb1\x96\x20\x39\x2f\x59\xcd\x15\x6a\x14\xa6\x34\x57\x6f\x40\xf8\xab\x27\x0b\x25\x18\xd6\x77\x6a\xd3\x49\x0d\x5f\x20\xa9\xb1\xee\x16\xd1\xf1\xa1\x30\x55\x98\x8d\xc9\x17\xab\x55\x49\xf3\xfe\xbe\xb4\x07\x6b\xc2\x4a\xe6\x7a\x4c\x5a\x63\x35\x02\x1b\x3b\xe0\xde\xb8\x85\x78\x3b\xa7\x82\x21\x73\x0b\x3b\xc4\xb5\x46\x66\x65\xcc\xb5\xa5\x9a\xd1\x5c\x63\x2d\xf2\x0e\x58\x1b\xf0\x56\x12\xed\xd6\x2f\xa6\xdd\xc4\x46\x71\xce\x77\xee\x60\x69\xad\xe1\xb5\x45\x7e\xf5\x24\x3c\xd4\x70\x64\x43\x93\x28\x1c\x0a\x36\x58\x9d\x64\x2c\x01\xfb\x6e\x0a\x60\xdf\xec\x30\x1c\x6f\x31\xc0\xc5\x7a\x03\x9c\xa3\x35\x77\x7d\x8f\x15\xb5\x35\xce\x31\x52\xa8\xe7\x52\x68\x6b\x89\xfb\x37\x73\xe4\xd6\xb4\x08\x80\x27\x33\x95\x0b\x0c\x79\x74\x98\xca\x14\x29\x3b\x74\xae\x3a\x6c\x62\x49\x18\x96\x9c\x99\xe9\x98\xbc\x7c\xfe\x3b\xb2\x4e\x25\x7f\xa7\x33\x24\x70\xe1\x32\x88\x99\xf6\x23\xf8\x87\x26\xc1\xf7\x34\x2f\x4e\xa5\xf8\xa2\x45\xf1\xcf\x98\xd1\x22\x37\xa7\xd2\x6c\xa9\xfd\x4f\x6a\xd2\x29\x2a\xdd\x93\x68\x53\x38\x9d\x2a\x3e\xf7\x91\xed\x38\x5a\xa3\xf8\xd0\x1d\xb4\x34\x8f\xb0\x8b\x44\xb2\xbb\xc3\xe6\xae\x9d\x96\x3f\x83\x0b\xef\x4f\xd6\x67\xbd\xf3\xee\x89\x4b\x0d\x22\x76\xfe\x5f\x98\x5d\xa9\x70\x9e\xd3\x14\x2b\x62\xc3\xf7\xa5\xf3\x0f\xff\x8a\x77\x40\x86\x04\xc8\x35\x39\x94\xf0\x91\x16\x7e\x20\x3e\x0d\xb1\x79\xb6\x2d\xe7\x0f\x8c\x7b\xef\x3d\x50\xc8\x9a\x7f\x4e\x13\xac\x33\x6f\x99\x77\x22\xf7\x92\x40\x26\x95\x8f\x45\x1e\x27\x1b\x9d\x5c\xde\x99\x28\x59\xcc\x7d\x8a\xb1\xd6\xb4\x25\xcc\x8f\x76\x1c\x2e\xd6\xa1\x6e\x1d\xcc\x2c\xb5\x10\xc6\xd6\x02\x1d\xd7\xa3\xd1\x28\xf3\xd8\xc3\x69\xfd\x7f\xa8\x62\x77\x32\x0c\x6a\x17\x1f\x63\x54\x9f\xdc\x02\x1b\x19\xcc\x9e\x41\x3d\xf4\x07\x66\x9e\x6e\xb9\xde\x50\xfd\x9e\xe3\x12\x08\x8a\x62\x76\xb0\xef\xb6\x04\xd3\x98\x63\x6a\x5a\xb2\x95\xa6\x02\x7e\xe8\x25\x01\xbb\xeb\xde\x47\xc2\x5b\xbe\xce\xe7\xb5\x0f\x1d\xaf\x19\xb4\x62\x9e\x7c\x06\x17\xd2\x85\x6e\x1b\xb9\x2e\x2b\xc6\x3f\xa2\xb1\x0a\xff\xc3\x8f\x10\x3f\x43\x93\x41\x1f\xd5\x9d\xfa\x25\x8f\x85\xcd\x8c\xde\x13\x04\xc3\xdb\x9a\xf7\x73\xab\x4b\x7d\xb6\xb9\xdc\x18\x1c\x6c\x03\xe2\x52\xac\x3d\xf5\x78\xf0\xec\x21\xb5\x7a\x6a\x9c\x99\x2b\x8f\xdb\x20\xf8\x62\x10\x72\xb6\x51\xec\x87\x7b\x43\x7a\xa4\x67\xd5\xd8\xc4\x5e\xf2\x5e\x46\xea\x02\x56\x79\x22\xdc\xc4\xe8\xdd\xdd\x1c\x81\x24\x52\xe6\xfd\x4c\x96\x8b\x79\x61\xca\x22\x34\x9d\x62\xfa\x9f\x44\xde\xd6\x07\xd2\x1b\x1d\xe9\x25\x37\xe9\xb4\x97\xd9\xae\x0b\xa0\xcb\xb9\xe2\xc2\x74\x6c\xf0\x00\x7c\x15\xeb\xea\x22\x2b\x01\xb2\x1a\x67\x88\x4f\x02\x4c\x2a\xb8\xec\x06\x8d\x0b\x43\x06\x7b\x26\x7c\xfd\xaa\x9f\x3f\xb4\x70\x15\xc5\x2c\x41\x45\x42\x71\xe1\x10\x60\xd7\xfe\xd4\xe9\x21\x21\xf4\xe7\xd4\x18\x54\x62\x4c\xfe\xfd\x21\x7a\xfa\xf1\xf5\x87\xe7\xd1\x9f\x3e\x7e\x75\x41\xce\x89\x68\xb1\x17\xd2\xe2\x37\x83\xe9\x83\x41\xda\x0d\x56\x96\x4b\x6a\xd1\xfa\xfc\xc1\x5a\x1b\xe0\xe5\xbf\x86\xfe\x61\xf0\xfa\x7c\xc0\xb1\xfa\xca\xf0\x54\xe4\x0c\xde\x9a\x4f\x8c\xdb\xe5\x16\x70\x1f\x68\xf4\xdf\x8f\x4f\x07\x4f\x4f\x05\x70\xeb\xe4\x33\xa7\x5a\x2f\xa5\x62\xa7\xe3\xb6\xa6\x14\x3a\x0c\x55\xa3\x91\x9e\xca\xe5\xf9\x90\x7c\x60\x74\x0c\x9d\xe8\x5e\xc8\x58\xa1\x98\x2f\xee\xdf\xe1\xad\x71\x85\x67\xf8\x0c\x56\xce\x8a\xbc\xd9\x9d\xcd\x78\xc1\xab\x72\x2e\xdc\xfb\x9e\xad\x2c\xe8\x4d\x9c\xee\xef\xfd\x05\x78\x03\x94\x46\x81\xd5\x9c\x19\x2a\xab\xea\x43\xc4\x09\x66\xf0\x19\x86\x8f\x9e\xda\x1e\x7f\xac\x0d\x7c\x34\x38\x84\x51\x9f\xe2\x5b\xcf\xa9\x08\x56\xc9\x15\x0e\xa3\xd8\x4d\xf9\xbc\xcb\x64\xa7\xe6\xd6\x86\x5e\x2f\xfc\x45\xa3\x73\x85\x1d\x26\x51\xde\x1e\xf6\xab\x17\x3b\x2a\xe1\x93\xf2\xc1\x57\xee\xdf\x63\xba\x1e\xd4\x9a\x50\xc1\x76\xdc\x37\x5c\xda\xe1\xcb\x70\xdd\x3f\x58\x0f\x6c\x42\x3b\xe8\x5d\x19\xc3\xa7\x28\xc7\xdb\x88\x1c\x56\x71\xaf\x8d\xe8\x24\x96\x15\xdb\x76\x41\xfe\x00\x8a\xf4\xac\xbe\x1f\x86\xc2\x89\x96\x59\x92\x78\x68\xcc\xfb\xeb\xd4\x37\xec\x1f\x17\x6a\x1f\xf5\x6e\xb1\xfa\xdc\xd1\x2f\xc3\xf4\x41\xb0\xf4\xe9\xe5\x33\xb8\x58\x7a\xe6\xcd\xe3\x5d\x5f\x79\x6a\x99\xaa\xb3\x83\xbf\x7e\x76\x7f\xab\xf3\x90\xbf\x37\x2e\x99\x0e\x7f\x96\x85\x4a\xfb\xa6\x42\x78\x34\x6b\xe8\xc7\xe9\x31\x12\xef\x55\xe7\xcd\xfd\x2f\x9a\xda\x2d\xde\x3e\x62\xf6\x30\x54\x97\x79\x44\xe0\xb3\x51\x9d\x9c\x8c\x2a\x70\xd0\x9d\x9d\xfa\x18\x52\xa2\x20\x5e\x7f\xc9\xfb\x2e\xcf\xe5\x12\x99\x3f\x5e\xea\x6f\xfc\xd7\xbc\xe3\x89\x16\x47\x7e\x95\x80\x4f\x91\x03\x77\xe4\xbe\xed\xeb\xe2\xbe\xd7\xde\x39\xbf\x0a\xde\x75\xef\x6e\x59\xd8\x23\xf6\x29\x99\xa6\x53\x22\xf8\x72\xc6\xa8\x9e\x7e\x0b\x47\xde\x99\x9f\xa2\xc7\x63\xe6\x26\xa8\x9b\x3d\xce\xcf\xeb\x7c\x79\xf0\xf0\xef\xe5\xc7\x49\x3e\x8a\x0f\xfc\x62\x3e\x8a\x5d\x28\xda\xd3\x47\xb2\xbb\xfc\xdb\x33\xbc\xaf\x61\x27\xb8\xb8\x7c\x1d\xee\x19\xab\x12\xa5\xb8\xd6\x32\xe7\x6c\xab\x03\x30\x34\x79\xef\xd7\xc3\x56\x6f\xa1\xcc\xa3\x19\x8b\xbe\x86\xf2\x41\x66\x99\x46\x13\xfd\x7e\x47\xb9\xd5\xee\xf1\x53\xa8\x71\x7d\x1b\x90\x18\x01\x89\x11\x11\x17\x99\xac\x6b\x7d\x3f\x65\x1d\xab\x7f\xf2\x4b\x7c\xe3\x63\x57\x73\x5f\x98\x9b\x2e\x92\x19\xdf\x66\xa7\x8b\x34\x45\xad\x6b\x8e\x9a\x2e\x6c\x71\xc9\x5d\x9b\x22\x1b\x93\xea\xa9\x21\xc4\xcf\x6e\xca\x7e\x19\x76\xef\x5a\xfb\x95\x45\x3e\xd8\x9d\x59\x3e\x56\xff\x35\xf0\x9f\x49\x46\x73\xc8\x28\x43\x7f\xeb\xe1\x7e\x7f\x5f\xc6\x2a\x43\x13\x17\xca\xc6\x24\x7a\x51\xb5\xbd\x31\x4e\x73\x39\x29\xfb\xdc\xdc\xd1\x29\x47\x96\xdc\xb5\x56\xbe\x75\x5f\xf0\xbd\x20\x81\xc6\xca\x27\x9b\x46\xe0\x96\x46\x25\xe5\x70\x3f\xa9\x9f\x12\x6e\x24\xdb\x9e\x37\x45\xca\x82\x6d\x53\xc7\xf7\x87\x3a\x82\xfd\xfa\x43\x47\xd3\x57\x6d\xb1\x7c\x6b\xee\x26\xce\x1e\xad\x8d\xfe\x5c\x35\x03\x6b\x44\x90\x06\x9b\x75\x5f\x6d\xee\xfc\xb6\x31\x6c\x61\x62\xa3\x54\x83\xcb\x77\x0a\xe1\x4e\x16\xa0\x0b\x85\xaf\x2b\xc2\x07\x90\xc9\xa4\x34\xc7\x43\x5b\x39\x4a\x75\xca\x0e\x82\xdc\x80\xc0\xef\xc4\x6e\xef\x38\xc8\x33\x7d\xef\xf0\x3e\x7e\xfb\x9c\xb1\xbb\xef\xb9\xed\x59\x8d\xfe\xde\x46\x7f\xb7\xb5\xc6\xfa\xb2\x67\xb5\x02\x6d\xa8\xe1\xe9\x9b\x77\x7f\x7b\x0b\x97\xfe\xf9\x97\x9f\xde\x02\x89\xed\x29\x22\x91\x54\xb1\x98\x6a\x8d\x46\xc7\x0b\x14\x4c\x2a\x1d\x5b\xe1\x5d\xf2\xd0\x43\x81\x26\x4a\x74\x9c\x6a\xff\xf6\x9d\x7f\x9b\x48\x69\xb4\x51\x74\x3e\x9c\x71\x31\x4c\x6d\x24\x72\x0d\xa5\x83\x07\xe4\x9a\xf1\x5b\x64\xde\xb1\x2a\x09\xdc\xab\x37\xee\xd5\x6e\x11\xc2\xb8\xdc\xe8\x07\x44\x25\xbe\xd1\xf1\xcd\xaf\x05\xaa\xbb\x61\x03\x18\x2b\xcb\xcd\x39\xd0\x48\xb4\x65\xd8\xb9\x05\x67\xe1\xd9\xd8\x81\x0d\xe6\xcd\x8d\x38\x9a\xbd\x0f\x31\x15\xef\x1b\x1d\xcf\xa8\xa0\x13\x54\x8e\x8a\x2f\x9c\x9a\x5b\xf8\xbf\x00\x00\x00\xff\xff\x75\x95\x48\xde\xb9\x30\x00\x00")

func templatesViewsManagerHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsManagerHtml,
		"templates/views/manager.html",
	)
}

func templatesViewsManagerHtml() (*asset, error) {
	bytes, err := templatesViewsManagerHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/manager.html", size: 12473, mode: os.FileMode(420), modTime: time.Unix(1521987508, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsJsManagerMinJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\x4d\x6f\xe3\x36\x10\xfd\x2b\xf2\x24\xc8\x92\x30\x43\x27\x87\x02\x85\x6d\x7a\x0f\xee\x1e\x0a\x14\x45\x81\x6c\x7b\x09\x8c\x82\x12\xc7\x16\x1b\x8a\x54\x49\xca\xde\x20\xf0\x7f\x2f\x46\x56\xbc\x4e\xbc\x09\xda\x62\x2f\x06\xcd\xe1\x7b\x33\x6f\xbe\x74\xc9\x4c\xa8\xba\x06\x7d\xe6\x32\xa2\x36\x8f\x6c\xdd\xf9\x2a\xdb\xe0\x19\x7f\xba\x64\x70\x51\x05\xbf\xb6\x9b\x54\x58\xdf\x76\xf9\xde\x9a\x95\x28\x8e\x77\x09\x1d\x56\x19\xb8\xac\x6a\xed\x37\x78\x0a\xdd\xea\x58\xa0\xba\x64\xb9\xb6\x89\x8b\x18\x76\x0a\x65\xab\x23\xfa\x9c\x7e\xf7\xd9\x3a\x06\xb9\x0c\xe6\x11\x04\xe4\x08\x5c\x54\x5d\x24\x9b\x42\xb9\xd5\x8e\x71\x61\x70\xad\x08\x2a\x0d\xae\x75\xe7\xf2\x1f\xda\x75\x38\x83\xaa\xc6\xea\xa1\x0c\x5f\x40\x11\x5d\x0c\x2d\x83\xfc\xd8\x22\xf0\x8f\xec\x99\x01\x60\x74\xb4\xf5\xcf\xd1\xc0\x39\xdf\xf2\x60\xe1\x53\xb8\xfb\xf4\xcb\xa7\xe5\x67\x50\x07\x73\xd6\x9b\x5f\x75\x83\x57\x57\x8c\x10\x28\xd7\xd6\x1b\x06\xa1\x25\x55\xc0\xe5\xda\xba\x8c\xf1\x54\x67\xc4\xdc\x45\x5f\x0c\x42\x07\xbf\x83\x93\xbb\x3e\x3d\xe4\x7f\xcf\x0f\xba\xbe\x0a\x55\x06\xd7\x1f\x63\xd8\xc9\x88\x4d\xd8\xe2\xd2\xe9\x94\x18\xd4\x3a\x5d\x63\x8c\x21\x02\x9f\x92\x51\x1b\x73\x6e\x11\xa7\x65\x29\xbb\x9c\x83\xbf\xa7\x2c\xa8\xd4\x95\x8d\xcd\x2b\x38\x86\x61\x93\x2e\x1d\x1a\x10\x37\x4a\x9d\x82\x72\x94\x27\x7c\xd2\xa1\xdf\xe4\x9a\xef\xdf\x66\x8e\x98\xb0\x27\xae\x9c\xad\x1e\xde\x6a\x91\x57\xb4\x6f\x29\xfb\x1f\xf1\x8f\x6e\xde\x8b\xee\x2b\xee\x2c\x3c\x6a\xc3\xa6\xd7\xde\x04\xa3\xdd\xb2\x47\x53\xbf\x29\x80\xd9\xb1\x76\xdf\x96\x50\x64\x33\x74\xbd\xd7\x0d\xae\x7a\x5f\x23\x55\x5b\x63\xd0\x9f\x4e\xc1\x6b\xcc\x71\x2a\x50\x57\xf5\x9b\x33\xf1\x5e\x33\x6f\xcf\x3b\x78\xba\x3d\xce\x46\x35\x56\x30\x77\x76\x31\x4f\x39\x06\xbf\x59\xc0\xf8\xf9\x35\xc5\x09\x7c\x0c\xf3\xc9\x60\x9a\x16\x30\xde\xd2\x7f\x67\x17\xb0\xe7\xa2\x19\x1a\x5a\xf6\xd9\xb8\xee\x27\x90\xcb\x3a\x37\x8e\xc1\xb2\x9f\xe1\x54\x1c\x9a\x3d\x4d\xe7\x65\x2c\x26\x8b\x79\xe7\x16\x30\xae\x88\x83\x4e\x44\xd1\x63\x19\x17\xa3\xdb\xa1\x26\x27\xa9\xfd\x2f\x75\x31\x3a\x6b\xf5\xb4\xff\xf7\x65\xb0\xe6\xbb\x17\x81\x62\xb8\x7f\x99\xbe\x95\x7a\xa7\x32\xe7\x75\x19\xaa\x42\xa9\x90\x6d\x48\x99\xc1\x05\x08\xa2\x15\x27\x4e\x77\xd6\x9b\xb0\x93\x2e\x54\x9a\x6e\x64\x44\x17\xb4\xe9\x51\xc7\x2c\xbe\x5c\xb4\x7d\x02\x5b\x9d\xd2\x2e\x44\xb3\x92\xcf\xa7\xeb\x54\x87\x1d\x70\x19\x3c\x03\x3a\xca\x32\x1d\x6d\x45\x6d\x0d\x9e\x5e\x80\xf8\x86\x6e\xb8\x80\xf1\xcb\x6d\x65\x0d\xf5\xcc\x9f\x5b\x5a\xb1\xc0\x67\x76\xcd\xf0\x79\x25\xf4\x28\xda\xca\x19\xbf\x64\xc6\x67\xc3\x01\x25\x09\x64\x30\x40\xb8\x78\x79\x21\x32\xdf\xef\xf9\xec\x45\x41\x69\x90\x81\xcb\x9f\x74\xd6\x9f\xe9\xcc\x9e\x9c\xf6\x9b\x4e\x6f\x70\xfa\xd4\x45\x37\x85\x89\xd1\xa9\x2e\x83\x8e\x66\x42\x5c\x3d\x20\x4d\xec\xed\x8f\x5e\xfe\x95\x82\x87\xbd\x28\x7f\xd3\x1b\xeb\x75\xc6\xe9\xe8\x56\x94\x3f\xfb\x75\xa0\x83\xd6\x77\x21\x66\xeb\x37\xd3\xfb\x95\x30\x51\xef\x96\xda\xb9\x52\x57\x0f\xd3\x57\xe2\x75\x6b\x0f\x3b\x5e\xb7\x96\xf5\x9f\xa4\xa4\x74\x6b\x25\x1d\xd8\x53\x4b\x91\xc0\xb0\x9d\x61\xcf\xa5\x0f\x06\x13\xe3\xc2\xe9\x94\x95\xef\x9c\x9b\xd1\xe3\x2a\xb8\xae\xf1\xec\x46\x9c\x03\xfa\x0c\xbc\xee\xb7\x18\x76\xc2\x1e\xfc\x53\x77\xa9\x4b\xba\x19\xde\xc2\x26\x86\xae\x05\x3e\x23\x17\x23\xa5\x7c\xff\xe1\xa1\xdf\x21\xfd\x57\x57\xfd\xf3\xc4\x25\xfe\xcd\x2c\x97\x25\xae\x43\x44\xf6\x61\x9e\x63\x51\xd1\x5a\x55\x03\xc5\x62\x9e\x4d\x51\x05\x97\x5a\xed\x15\xfc\x00\x8b\x0f\x63\xa2\xa1\xa1\xcd\x66\x31\x9f\xe4\x48\x93\x7b\x50\xa2\x1b\xdc\x53\x79\xf6\x7c\xf6\x4f\x00\x00\x00\xff\xff\x96\x3a\x4d\x6b\xfc\x07\x00\x00")

func assetsJsManagerMinJsBytes() ([]byte, error) {
	return bindataRead(
		_assetsJsManagerMinJs,
		"assets/js/manager.min.js",
	)
}

func assetsJsManagerMinJs() (*asset, error) {
	bytes, err := assetsJsManagerMinJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/js/manager.min.js", size: 2044, mode: os.FileMode(420), modTime: time.Unix(1521987610, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesConfigMo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\x4f\x6b\xd4\x40\x18\xc6\x9f\xae\xf5\x12\x50\x50\x2f\x0a\x82\xaf\x07\xab\x22\x53\x27\x59\x0b\x65\x76\xb3\x55\xb7\x2d\x88\x5d\x2c\x25\x7a\xf2\x32\xee\x4e\xb3\xc1\xcd\x4c\x9c\x24\x45\xa1\xa0\xa8\x78\x15\x0f\x5e\x3c\x79\xf1\x5e\xf1\xdf\xe2\x9f\x7e\x86\xc9\x17\xf0\xb3\x48\xb2\x6a\xf5\x3d\x0c\xcf\xf3\x3e\xcf\xfc\x78\x7f\x1e\x9f\x7f\x0d\x00\xf3\x00\x4e\x03\xe8\x02\x38\x0c\xe0\x2e\x66\x93\x01\x38\x02\xe0\x01\x80\x63\x00\x1e\x03\x38\x01\xe0\x15\x80\xf1\x1c\xf0\x0e\xc0\x49\x00\x47\x5b\xc0\x29\x00\xe7\x5b\xc0\x19\x00\xd7\x5a\xc0\xdc\x6f\x6e\x3d\x2d\x00\x87\x6a\xd1\x37\x7a\x3b\x89\x4b\x2b\x8b\xc4\x68\x0c\x1b\x37\xbf\xaa\xee\x95\x31\xa5\x66\xa4\x0e\x36\x3b\x6a\x62\xb2\xd9\x6e\x4b\x65\xc6\x16\x6c\x90\xc7\xc9\x88\x5d\x2f\xe3\x9c\x45\x46\xd0\x48\xed\x5c\xbd\x9f\x8c\x65\x6a\x16\x6d\xe9\x6d\xde\x8a\x58\xdf\xaa\x06\xcb\x56\x65\xa1\x04\x05\xdc\x5f\x66\xbc\xcd\x82\x36\x05\x6d\xb1\xb4\x74\x89\xb7\x39\xf7\x36\x64\x5e\xb0\xc8\x4a\x9d\x4f\x64\x61\xac\xa0\x9b\x0d\x83\x06\xa5\x95\xa9\x19\x19\xea\xfe\x07\xee\x79\x1b\x52\xc7\xa5\x8c\x15\x8b\x94\x4c\x05\xfd\xf5\x82\xb6\xca\x3c\x4f\xa4\xf6\x06\x37\x06\x6b\xec\x8e\xb2\x79\x62\xb4\x20\x7f\x91\x7b\x7d\xa3\x0b\xa5\x0b\x16\x3d\xca\x94\xa0\x42\x3d\x2c\x2e\x67\x13\x99\xe8\x0e\x0d\xc7\xd2\xe6\xaa\x08\x6f\x47\xeb\x6c\xf9\xa0\x57\xdf\xb3\xad\x2c\x5b\xd3\x43\x33\x4a\x74\x2c\xc8\xdb\x9c\x94\x56\x4e\xd8\xba\xb1\x69\x2e\x48\x67\x8d\xcd\xc3\x76\x87\x66\x32\xd4\xe7\x7c\x1e\x86\x3e\x2d\x2c\x50\x2d\xf9\xd9\xd0\xf7\x69\x85\x38\x89\xc6\xf7\xc2\xe0\x4f\xd4\x0d\xaf\xd4\xf2\x42\x53\xeb\xfa\x9c\x76\x77\x67\x5f\x7a\x61\xc0\x2f\xd2\x0a\xf9\x24\x28\xe8\xc0\xbd\x71\xfb\xee\x47\xf5\xdc\x4d\xdd\x87\xea\x59\xf5\xc4\xed\x55\x2f\xdc\xb4\x7a\x09\xf7\xd6\x7d\x72\x9f\xdd\xd4\x7d\x27\xb7\x5f\x3d\x75\xdf\xdc\x9e\xfb\xe8\xbe\xba\xe9\xbf\x49\xdd\x77\x5f\x9a\xf7\x7d\xd3\xaa\xf3\x5f\x01\x00\x00\xff\xff\xa7\x17\xf2\x1f\x61\x02\x00\x00")

func localesRuLc_messagesConfigMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesConfigMo,
		"locales/ru/LC_MESSAGES/config.mo",
	)
}

func localesRuLc_messagesConfigMo() (*asset, error) {
	bytes, err := localesRuLc_messagesConfigMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/config.mo", size: 609, mode: os.FileMode(420), modTime: time.Unix(1521987618, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesManageMo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x4f\x4b\x6f\x1b\x55\x14\xfe\xa6\x2e\x2f\x97\x67\x85\x84\x84\x58\x9c\x0a\x11\x81\xd0\x94\x19\x9b\x4a\xd1\x24\x13\x53\x92\x14\x10\x0d\x54\xc1\x94\x2d\x57\xf6\x8d\x33\x62\x3c\x63\xdd\x3b\x13\x88\x14\x89\x38\x2e\x54\x60\x44\x11\x0f\x75\x05\xa8\x3b\x96\xa6\xc4\x74\x68\x6b\x77\xcf\xea\xdc\x35\x88\x9f\xc0\x2f\x40\x02\xcd\xa3\x0f\xee\xe2\x9e\xf3\x7d\xe7\x3b\xe7\x7c\xe7\xaf\xe3\x47\xbf\x03\x80\x87\x01\x3c\x03\x60\x0f\xc0\x13\x00\xfe\x44\xf9\xc8\x02\x1e\x03\x70\xc2\x02\x1e\x01\xe0\x5a\xc0\x7d\x00\x5a\x16\xf0\x34\x80\x75\x0b\x78\x00\xc0\xfb\x16\x70\x0c\xc0\xb6\x05\x1c\x05\x90\x54\xba\xdd\x0a\x7f\x5c\xe1\x0b\x16\xf0\x20\x80\xcf\xad\x52\xfb\x8d\x05\x2c\x00\xf8\xe7\x08\xf0\x24\x80\x67\x6b\xc0\xa3\x00\x16\x6b\xc0\xeb\x00\x5e\xab\x01\x4f\x01\xf8\xaa\x06\x3c\x0e\xe0\xa7\x2a\xfe\x56\xc5\xdf\x6b\xc0\x71\x00\x7f\x54\xf8\xef\x2a\xfe\x5b\x03\x2c\x94\xde\x6e\xbf\x7c\x7f\xad\xca\x8f\x55\xf1\xa1\xea\xf6\xdc\xd3\xfd\x28\xbd\xd6\xab\xda\x91\xfc\x3b\x1d\x86\xf1\x87\xb2\x4b\x3b\x22\x4c\xa5\xf6\x70\x5a\x49\xda\x8d\x53\xd2\xa9\x92\x2d\xac\x86\xb1\x96\x58\x8d\xa3\xad\x40\xf5\x49\x8b\x1d\x49\x9d\x1c\xf4\x52\x25\x92\x20\x8e\xb0\x26\xb7\x44\x1a\x26\x58\x93\xba\xa3\x82\x41\xc1\xbd\x25\xfa\x12\x9b\x52\xcb\x04\xef\x88\x1d\x89\xf3\xf9\x68\xbc\x27\x92\xce\xb6\x54\x1a\x9b\x72\x10\xab\xc4\xde\xd0\xbd\xa0\x6b\xbf\x9a\xf6\xb4\xdd\x8e\x3d\xea\xca\x9d\x57\x3e\x08\xb6\x45\x3f\x3e\xa9\xd2\xfa\xb9\xb7\xdb\xf6\xaa\x92\xc5\x0e\x7b\x4d\x24\xd2\xa3\x86\xe3\x2e\xda\x4e\xd3\x6e\x34\xa9\xd1\xf4\x4e\x9d\x7a\xd1\x69\x3a\x4e\xfd\xac\xd0\x89\xdd\x56\x22\xd2\xa1\x48\x62\xe5\xd1\x9b\xc5\x0c\xda\x48\x95\xe8\xc7\xdd\x98\x96\xff\x37\x78\xa5\x7e\x56\x44\xbd\x54\xf4\xa4\xdd\x96\xa2\xef\xd1\x1d\xec\xd1\x66\xaa\x75\x20\xa2\xfa\xc6\x1b\x1b\xeb\xf6\x79\xa9\x74\x10\x47\x1e\xb9\x27\x9d\xfa\x6a\x1c\x25\x32\x4a\xec\xf6\xee\x40\x7a\x94\xc8\x8f\x92\x97\x06\xa1\x08\xa2\x25\xea\x6c\x0b\xa5\x65\xe2\xbf\xdb\x3e\x63\x2f\xde\xd5\xe5\x7e\xb6\xa4\xb2\xd7\xa3\x4e\xdc\x0d\xa2\x9e\x47\xf5\x73\x61\xaa\x44\x68\x9f\x89\x55\x5f\x7b\x14\x0d\x0a\xa8\xfd\xe6\x12\x95\xa9\x1f\x3d\xe7\x3a\xbe\xef\xd2\xc2\x02\xe5\xa9\x73\xc2\x77\x5d\x6a\x91\x43\x5e\x81\x57\xfc\xc6\xed\xd2\xb2\xff\x72\x9e\x3e\x5f\xc8\x96\x5d\x87\xf6\xf6\xca\x96\x15\xbf\xe1\xbc\x40\x2d\x72\xc9\xa3\xc6\x12\xf8\x5b\x9e\xf3\x2d\x33\x32\x43\x73\xc0\x19\xdf\x34\x63\x9e\x12\x5f\xe3\x19\x4f\xcc\x45\x9e\xf2\x8c\x33\x73\xc9\x03\x7f\x6d\xc6\x64\x46\x7c\x95\xa7\x66\x3f\xa7\xcd\xb8\x05\xbe\xcc\x13\xbe\x6e\xf6\xcd\xd8\x1c\x98\x2f\xc0\x3f\xf2\x9c\x0f\xcd\x41\x25\xfa\x95\x0f\xcb\x7e\x9e\x92\x19\xf2\xdc\x7c\x62\xf6\x79\xc2\xb3\x3b\x24\x5f\xe7\x39\xcf\xcc\x05\xce\xf8\x17\x33\xca\x8b\xe6\x53\xce\x38\x2b\x06\xd9\x66\xc4\x37\x79\xce\x37\xcc\xc5\xa2\x29\x33\x5f\x82\x7f\xe0\x5b\x9c\x99\x61\x49\xf0\x14\xfc\x3d\x4f\xf8\x1a\x5f\xbd\x4b\x5c\xe1\x9f\xcd\x3e\xcf\xcd\x90\xb3\xd2\xd3\x95\x7b\x16\x57\xd4\xe5\x7b\x8f\x2b\x9b\x6e\xf0\x94\x0f\xcd\x25\xf3\x59\x41\xfc\x17\x00\x00\xff\xff\x0b\x24\x32\x8e\x10\x04\x00\x00")

func localesRuLc_messagesManageMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesManageMo,
		"locales/ru/LC_MESSAGES/manage.mo",
	)
}

func localesRuLc_messagesManageMo() (*asset, error) {
	bytes, err := localesRuLc_messagesManageMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/manage.mo", size: 1040, mode: os.FileMode(420), modTime: time.Unix(1521987618, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/manager.html": templatesViewsManagerHtml,
	"assets/js/manager.min.js": assetsJsManagerMinJs,
	"locales/ru/LC_MESSAGES/config.mo": localesRuLc_messagesConfigMo,
	"locales/ru/LC_MESSAGES/manage.mo": localesRuLc_messagesManageMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"js": &bintree{nil, map[string]*bintree{
			"manager.min.js": &bintree{assetsJsManagerMinJs, map[string]*bintree{}},
		}},
	}},
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"config.mo": &bintree{localesRuLc_messagesConfigMo, map[string]*bintree{}},
				"manage.mo": &bintree{localesRuLc_messagesManageMo, map[string]*bintree{}},
			}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"manager.html": &bintree{templatesViewsManagerHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
