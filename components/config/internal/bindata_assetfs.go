// Code generated by go-bindata.
// sources:
// templates/views/manager.html
// assets/js/manager.min.js
// DO NOT EDIT!

package internal

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsManagerHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x5a\x5f\x93\xdb\xb6\x11\x7f\xf7\xa7\xc0\x20\x97\x8c\x14\x9b\xa2\xed\xba\x99\x69\x22\xc9\x93\x71\x32\x75\xa7\x6e\x3b\x93\x38\xee\x83\xeb\xde\x80\xc4\x52\xc2\x95\x02\x14\x00\x94\xee\xaa\xb9\xef\xde\x01\x40\x52\x24\x05\x4a\x24\x75\x3a\x8f\xeb\x07\x1f\x45\x00\xfb\xe7\xb7\xbb\x58\x2c\xb8\xbb\x1d\xa2\x90\x30\x0e\x08\xc7\x82\x6b\xe0\x1a\xa3\xfb\xfb\x27\x53\xca\x36\x28\x4e\x89\x52\x33\x2c\xc5\x16\xcf\x9f\x20\x84\x50\xf5\xed\xed\xf5\x9a\x70\x48\xf3\x91\xc3\x51\xcd\x74\x0a\x95\x51\x3b\x63\xf9\x72\xfe\x46\xf0\x84\x2d\x32\x49\x34\x13\x7c\x1a\x2e\x5f\x36\xa6\x54\x88\xc4\x29\x10\x99\xb0\x5b\x3c\x9f\x86\x94\x6d\x2a\x9c\x1a\x3f\x6b\x8c\x0b\x35\xea\x74\x77\x3b\xc4\x12\x34\x01\x29\x85\x34\x0a\xb6\xf1\x24\x29\x48\x8d\xec\xff\x01\x25\x7c\x01\xb2\xf8\xc1\xd4\x8a\x29\x45\xa2\x03\xad\x2c\x89\x28\xd3\x5a\x70\xa4\xef\xd6\x30\xc3\xee\x07\xde\xeb\x21\x14\x60\x44\x89\x26\x05\x99\x9c\x11\x46\x44\x32\x12\x2c\x19\xa5\xc0\x67\x58\xcb\x0c\xf0\xfc\x1b\xcd\x56\xa0\x7e\x98\x86\x8e\xcc\x21\xb3\xdd\x2e\x57\x64\xf2\xb3\x57\x9d\x3a\x3a\xf9\x0a\xe0\xd4\x4c\xac\xcf\x4c\x84\x5c\x21\x29\x52\x98\x61\xf3\x88\x11\x89\x8d\x59\x66\xf8\x2b\x8c\x56\xa0\x97\x82\xce\xf0\x5a\x28\x8d\x11\xa3\x33\xe3\x20\x09\x5b\xa8\x5c\x13\x2d\x16\x0b\xb3\x70\x43\x52\x46\x89\x16\xd2\x07\x8b\x41\xd6\xd1\xd7\x24\x6a\x3a\x4c\x6d\x66\x96\x16\x70\x71\xb2\x41\x9c\x6c\x02\x4d\x22\x85\x22\x22\xaf\xcd\x03\xde\x93\x49\x99\x6a\x5a\xb7\xa1\xab\x34\x86\x43\x57\x9c\xac\xe0\x19\xba\xda\x10\xa9\xd0\xf7\x33\x34\xd9\x18\xb0\xa3\x14\x54\x13\xb1\x9a\x20\x29\xcb\x59\xad\x25\x28\xe0\xda\x3a\x2a\xce\x1d\x08\x7e\x77\x64\x51\x0e\x86\x09\x96\xd2\x75\x62\xcd\x36\x80\x4b\xac\xdb\x45\xb4\x7c\x08\x5a\x4a\x48\x66\xf8\xab\xdd\x2e\xa7\x79\x7f\x9f\xfb\x83\x71\x61\x29\x52\x35\xc3\xb5\xb1\x12\x81\x86\x05\xec\x1b\xbb\x10\x6e\xd7\x84\x53\xa0\x76\x61\x8b\xb8\xc6\xc9\x8c\x8c\xa9\x32\x54\x13\x92\x2a\x28\x45\x3e\x02\x6b\x05\xde\x42\xa2\xe3\xfa\x85\xa4\x9d\xd8\x34\x4c\xd9\x51\x0b\xe6\xde\xea\x5f\x9b\xa5\xf3\x27\xfe\xa1\x4a\x20\x6b\x12\x05\xfe\xad\xa0\xc1\xea\x2c\x67\xf1\xf8\x77\x55\x00\xf3\xe6\x88\xe3\x38\x8f\x41\x8c\xef\x0d\x60\x03\xad\x6a\xf5\x13\x5e\x54\xd7\x38\x85\x40\x82\x5a\x0b\xae\x8c\x27\x9e\x36\xe6\xd4\xae\xa9\x11\x40\x8e\xcc\x52\x6c\xc0\x17\xd1\x7e\x2a\x4b\x20\xb4\xeb\x5c\xd9\x6d\x62\x4e\x18\x6d\x19\xd5\xcb\x19\x7e\xf9\xfc\x6b\x3c\xff\x3b\x59\xc1\x34\xd4\xcb\x61\x14\xfe\xf8\x35\x9e\x7f\x20\x69\x36\x9c\xc4\x0b\x43\xe2\x27\x48\x48\x96\xea\xe1\x44\x8c\x26\xff\x24\x3a\x5e\x82\x54\xbd\xa9\xcc\x7f\x02\x15\x4b\xb6\x76\xd9\xb3\xeb\xe2\x69\xd8\x15\x76\x43\xb3\x87\x31\x23\x41\xef\xba\xcd\xdd\x47\x1a\x7b\x86\xae\x5c\x10\x98\x40\x73\x11\x77\x62\x33\xa9\x10\x31\xf3\xff\x42\xcd\x4a\x09\xeb\x94\xc4\x50\x10\x9b\x7c\xc8\x23\x76\xf2\x57\xb8\x43\x78\x82\x11\xbe\xc6\x5d\x09\xf7\x74\xcb\x8e\xf8\x54\xc4\x66\xc9\xa1\x9c\x3f\x53\xe6\x42\xae\xa3\x90\x25\xff\x94\x44\x50\xa6\xcb\x3c\x59\x04\xf6\x25\x46\x89\x90\x6e\x03\x71\x38\x99\x1d\xc4\xfc\xf2\x61\x74\x7f\x3f\x0d\xed\xaa\xde\xda\xe4\xc9\xe3\xc1\xa4\xbe\x84\x88\xed\x19\xc4\x2b\x5d\xd8\xc7\xa8\x9f\xdd\x03\x2a\xdb\xbe\x39\xb8\x05\x0b\x29\xb2\x75\xc7\xed\xba\x5d\xae\xb7\x44\x7d\x60\xb0\x45\x18\x78\xb6\xea\x1c\x3b\x35\xc1\x14\xa4\x10\xeb\x9a\x6c\xb9\xa9\x91\x1b\x7a\x89\x91\x49\x6d\xce\x47\xfd\x26\xdf\x27\xc1\xbd\x0f\xf7\x96\x04\xd5\xf6\x1c\xf1\x0c\x5d\x09\xbb\x69\x9a\x9d\x63\x54\x30\xfe\x33\x68\xa3\xf0\x3f\xdc\x08\x76\x33\x14\x1e\x0f\x51\xdd\xaa\x9f\xf3\xd8\x98\x34\xe3\x0e\x61\x9c\xc2\x6d\xc9\xfb\xb9\xd1\xa5\x3c\x10\x8c\x1a\x83\xe3\x43\x40\x6c\xbe\x32\x47\x05\x07\x9e\x39\xd9\x15\x4f\x95\x83\xe6\x01\x9f\x17\x36\x70\xdc\x8f\xc1\xd0\xf5\x8c\xa0\x12\x83\xd0\x49\x38\xc8\x19\xed\xc6\x92\x1f\x97\x9a\x58\xbc\xbf\x5b\x03\xc2\x91\x10\xe9\x30\xd7\x64\x7c\x9d\xe9\xbc\x42\x8b\x97\x10\xff\x27\x12\xb7\xe5\x69\xed\x46\x05\x6a\xcb\x74\xbc\x1c\xe4\x9e\xfb\xea\x60\xb4\x96\x8c\xeb\x16\x43\x8e\x91\x2b\xf1\x6c\xd1\x60\x24\x00\x5a\xe2\x8c\xc2\xb3\x00\x13\x12\x8d\xda\x41\x63\x5c\xe3\xf1\x89\x09\xdf\xbd\x1a\xe6\xf7\x35\x5c\x79\xb6\x8a\x40\x62\x5f\xfc\x77\x01\x76\x1f\x37\xad\x91\xe0\x43\x7f\x4d\xb4\x06\xc9\x67\xf8\xdf\x1f\x83\xa7\x9f\x5e\x7f\x7c\x1e\xfc\xe9\xd3\xb7\x57\xf8\x92\x88\x66\x27\x21\xcd\xfe\x6f\x30\x7d\x30\x48\xdb\xc1\x4a\x52\x41\x0c\x5a\x5f\x3e\x58\x7b\x07\x1c\xfd\x6b\xe2\x1e\xc6\xaf\x2f\x07\x1c\xcd\x6f\xd2\xce\x47\x4e\xc3\xad\xfe\xcc\xb8\x8d\x0e\x80\xfb\x48\x82\xff\x7e\x7a\x3a\x7e\x7a\x2e\x80\x07\x27\x9c\x35\x51\x6a\x2b\x24\x3d\x1f\xb7\x3d\x25\xdf\xa1\xa7\x18\x0d\xd4\x52\x6c\x2f\x87\xe4\x03\xa3\xa3\xc9\x42\x0d\x42\xc6\x08\x45\x5d\x81\xfc\x1e\x6e\xb5\x2d\xf0\xfc\x67\xad\x7c\x56\xe0\xdc\xee\x62\xce\x8b\x9c\x2a\x97\xc2\x7d\xe8\xd9\xca\x80\x5e\xc5\xe9\xfe\xde\xdd\x0e\x57\x40\x71\x9c\xea\x93\xf6\x67\xbe\x33\x0c\xfe\x05\x6e\x14\x03\xb5\xed\x7f\x80\xf5\xdc\x9d\x77\x61\x34\xa4\x1c\x56\x6b\xc2\xbd\x75\x6f\x81\xc3\x34\xb4\x53\xbe\xec\xc2\xd7\xaa\x79\x60\xd0\x6b\xeb\x06\xf9\x35\xf6\x11\x97\xc8\xef\xda\x86\x55\x80\x2d\xb5\xed\x59\x3b\xff\xb7\xf6\xdf\x63\x86\x1e\x2a\x35\x21\x9c\x1e\xb9\x41\x18\x99\xe1\x91\xbf\x92\x1f\xef\x07\x9a\xd0\x8e\x07\xd7\xba\xe8\x73\x14\xd8\x75\x44\xba\xd5\xd0\x7b\x27\x3a\x8b\x65\xc1\xf6\xa0\xd0\x3e\x57\x91\x81\x75\xf6\xc3\x50\x38\xd3\x33\x73\x12\x0f\x8d\xf9\x70\x9d\x86\x6e\xfb\xfd\xb6\xda\x47\xbd\x2d\x2c\xbe\x15\x0c\xcb\x30\x43\x10\xcc\x63\x7a\xfb\x0c\x5d\x6d\x1d\xf3\xea\x41\x6e\xa8\x3c\xa5\x4c\xc5\xd9\xc1\x5d\x08\xdb\xff\x8b\x93\x8f\xbb\x09\xce\x99\x4e\x7e\x15\x99\x8c\x87\xa6\x42\xf4\x68\xde\x30\x8c\xd3\x63\x24\x5e\xef\xf9\xe2\x37\x45\x16\xbd\x03\x7e\x9f\x82\x46\xdc\xf3\xc9\xa5\x4c\x43\x5a\x66\x30\x6e\xcf\x43\x43\x5c\x26\x92\x28\x9c\xff\x98\xa6\x62\x0b\xd4\x9d\x1f\xd5\xf7\xfd\xa9\x64\x3d\x3f\x21\xa0\xcf\x91\xde\x8e\xa4\xb5\xc6\x9b\x17\xc3\xef\xa8\x53\x76\x78\x61\xfc\xdc\x7d\x69\x39\xf2\x51\xfe\x84\xd8\xe7\x24\x91\x56\x89\xd0\x37\x2b\x4a\xd4\xf2\x07\x7f\xde\x3d\x4f\xde\xc7\x4c\x2f\xa8\x6c\x5b\xb8\x3c\xaf\xcb\xa5\xb2\xee\x1f\x91\xfb\x49\x3e\x0d\x3b\x7e\x46\x9e\x86\x76\x8f\x39\xd1\x11\x71\xbc\x82\x3b\x31\x7c\xaa\xf5\xc4\xbb\x38\x7f\xed\xef\x7e\x2a\x72\x1d\xbf\x56\x22\x65\xf4\xa0\x97\xcd\x37\xf9\xe4\x27\xbd\x5a\x97\x9c\x48\x83\x15\x0d\xbe\x43\xf9\x83\x48\x12\x05\x3a\xf8\xc3\x91\x8a\xa9\xde\xad\x26\x41\xc1\xbe\xa0\x8f\x34\x47\x91\xe6\x01\xe3\x89\x28\xcb\x75\x37\x65\xfe\x8b\xf9\xd3\xde\x97\xe6\x27\xaf\xb2\x68\xc5\x0e\xe9\xab\x2c\x8e\x41\xa9\x92\x85\x22\x1b\x53\x10\x32\xdb\x61\x47\x67\xb8\x78\xc2\xf3\x5f\xc9\x06\x8e\x33\x3d\x6e\x97\xfa\x2b\x83\xad\xb7\x93\x30\x7f\x2c\xfe\x54\x10\x5e\x09\x4a\x52\x94\x10\x0a\xee\x6a\xc2\xfe\x7e\x93\xb7\xf1\x68\x12\xd9\xad\x69\x86\x83\x17\x45\x8b\x16\x65\x24\x15\x8b\xbc\x27\xcb\x9e\x6f\x52\xa0\xd1\x5d\x6d\xe5\x3b\xfb\xe1\xdb\x09\xe2\x69\x02\x7c\xd2\x34\xb3\x5d\x1a\xe4\x94\xfd\xbd\x8f\x6e\x8a\xbf\xe9\xe9\x70\xde\x12\x08\xf5\xb6\xf8\xf4\xef\x65\xb4\x04\x87\xf5\x32\x4e\x97\xaf\xea\x62\xb9\xbe\xd1\x26\xce\x0e\x2d\xd7\x3c\x2a\x57\xc8\x38\x0b\x8a\x1b\x9d\xa4\xaf\x9a\xa6\x3e\xb4\xfe\x01\x08\x66\xe3\xc1\xf3\x1f\x25\xa0\x3b\x91\x21\x95\x49\x78\xdd\x69\x5d\x22\x84\xee\x0f\x5e\xe1\xfb\xc5\x61\xd7\x0b\xe3\xfc\x8d\x81\xf8\x08\x62\x5d\xa2\xcb\xb5\xae\xb6\x30\x68\x0f\xa8\xf6\x3e\xdb\x7a\x74\x54\xfa\x49\x2b\x0d\xc4\xc6\xa3\xca\x5b\x95\xdd\x0e\x29\x4d\x34\x8b\xdf\xbe\xff\xdb\x3b\x34\x72\xcf\xbf\xfd\xf2\x0e\xe1\xd0\xe4\xf4\x48\x10\x49\x43\xa2\x14\x68\x15\x6e\x80\x53\x21\x55\x68\xa4\xb5\x5b\xbc\x9a\x70\xd0\x41\xa4\xc2\x58\xb9\xb7\xef\xdd\xdb\x48\x08\xad\xb4\x24\xeb\xc9\x8a\xf1\x49\x6c\xb6\x0f\xdb\xc0\x38\x7e\x40\xae\x09\xbb\x05\xea\x82\xa3\x90\xc0\xbe\x7a\x6b\x5f\x1d\x17\xc1\x8f\xcb\x8d\x7a\x40\x54\xc2\x1b\x15\xde\xfc\x9e\x81\xbc\x9b\x54\x80\x31\xb2\xdc\x5c\x02\x8d\x48\x19\x86\xad\x26\xb8\x08\xcf\x8a\x05\x1a\xcc\xab\x86\xe8\xcd\xde\xed\x17\x05\xef\x1b\x15\xae\x08\x27\x0b\x90\x96\x8a\xab\x5b\xaa\x26\xfc\x5f\x00\x00\x00\xff\xff\xfe\x60\x50\x3b\x1a\x2f\x00\x00")

func templatesViewsManagerHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsManagerHtml,
		"templates/views/manager.html",
	)
}

func templatesViewsManagerHtml() (*asset, error) {
	bytes, err := templatesViewsManagerHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/manager.html", size: 12058, mode: os.FileMode(420), modTime: time.Unix(1507415296, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsJsManagerMinJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\x51\x6f\xe3\x36\x0c\xfe\x2b\x0e\x5b\xf4\x24\xc4\x55\xd3\x01\x7b\x49\xa2\xf4\x21\xbb\x87\x01\xc3\x36\xe0\x6e\x7b\x09\x82\x41\xb6\xe8\x44\xa8\x2c\x79\x92\x9c\x5c\x11\xf8\xbf\x0f\x52\xdc\x9c\x93\x5c\x8b\x6d\xb8\x37\x5a\xd4\x47\xf1\x23\x3f\xd2\xb7\x44\xda\xb2\xad\xd1\x04\xca\x1c\x0a\xf9\x42\xaa\xd6\x94\x41\x59\x43\xe8\xe1\x96\xc0\x4d\x69\x4d\xa5\x36\x3e\x53\xa6\x69\xc3\x4a\xc9\x75\x9e\x9d\xce\x3c\x6a\x2c\x03\x50\x56\x6e\x85\xd9\xe0\x10\xba\x13\x2e\x43\x7e\x4b\xc2\x56\x79\x9a\x3b\xbb\xe7\xc8\x1a\xe1\xd0\x04\xff\x87\x09\x4a\x13\x08\x85\x95\x2f\x90\x43\x70\x40\xf3\xb2\x75\xd1\xc7\x91\xed\x84\x26\x34\x97\x58\xf1\x08\x65\x12\x2b\xd1\xea\xf0\xa7\xd0\x2d\xce\xa0\xdc\x62\xf9\x5c\xd8\x2f\xc0\x63\x38\x67\x1b\x02\xe1\xa5\x41\xa0\x4f\xe4\x35\x02\xc0\xe8\xe4\x4b\xd7\x51\xc2\x75\xbc\xe5\xd1\x43\xa7\xf0\xe9\xe3\x2f\x1f\x97\x9f\x81\x1f\xdd\x41\x6c\x7e\x15\x35\xde\xdd\x91\x88\x40\x56\x29\x23\x09\xd8\x26\xb2\x02\xca\x2a\xa5\x03\xba\x21\x4f\x87\xa1\x75\x26\xeb\x89\xf6\xef\xf6\x8f\x7c\x4a\xe5\x89\xef\x77\xf4\xc8\xeb\x2b\x51\x2e\xb1\x7a\x72\x76\xcf\x1c\xd6\x76\x87\x4b\x2d\xbc\x27\xb0\x15\xfe\x1e\x9d\xb3\x0e\xe8\x34\x3a\x85\x94\xd7\x9e\x7c\xd8\x96\xa2\x0d\xc1\x9a\x55\xac\x02\xf7\x6d\x51\xab\xb0\x86\x53\x1a\xca\x8b\x42\xa3\x84\x7c\xc2\xf9\x10\x14\x1c\x1b\xc4\x63\x1a\xcd\x26\x6c\x69\xf7\x76\x64\x87\x1e\x53\xe0\x52\xab\xf2\xf9\x2d\x89\x5c\x84\x7d\x8b\xd9\xff\xc8\x7f\x34\x79\x2f\xbb\xaf\xb8\xab\xf4\xa2\x0c\xeb\xc4\xbd\xb6\x52\xe8\x65\x42\x47\xbd\x71\x80\xd9\xa9\x77\xdf\xa6\x90\x05\xd9\xab\xde\x88\x1a\xd7\xe9\xad\x11\xdf\x2a\x29\xd1\x0c\xa7\xe0\x12\x73\x9a\x0a\x14\xe5\xf6\xcd\x99\x78\x4f\xcc\xbb\x6b\x05\x4f\x77\xa7\xd9\x28\xc7\x1c\xe6\x5a\x2d\xe6\x3e\x38\x6b\x36\x0b\x18\xbf\xde\x8e\x79\x02\x1d\xc3\xfc\xa1\x77\x4d\x33\x18\xef\xe2\xb7\x56\x0b\xe8\x68\x5e\xf7\x82\x66\xa9\x1a\xf7\x69\x02\x29\xdb\x86\x5a\x13\x58\xa6\x19\xf6\xd9\x51\xec\x7e\x3a\x2f\x5c\xf6\xb0\x98\xb7\x7a\x01\xe3\x32\xc6\x88\x56\x0c\x91\xb0\x84\xe6\xa3\xc7\xbe\x27\x83\xd2\xfe\x97\xbe\x48\x11\x04\x3f\x74\xff\xbe\x0d\x4a\x7e\xf7\x26\xc4\x1c\x56\xe7\xe5\x5b\xf3\x77\x3a\x73\xdd\x97\xbe\x2b\xb1\x14\xac\xb1\x3e\x10\xb8\x81\x3c\x86\xcd\x07\x8f\xee\x95\x91\x76\xcf\xb4\x2d\x45\x3c\x61\x0e\xb5\x15\x32\xa1\x4e\x55\x3c\x5f\xb4\xa9\x80\x8d\xf0\x7e\x6f\x9d\x5c\xb3\x57\xeb\xde\x6f\xed\x1e\x28\xb3\x86\x40\x34\x59\xe1\x4f\xbe\x6c\xab\x24\x0e\x0f\x20\xff\x06\x6f\xb8\x81\xf1\xf9\xb6\x52\x32\x6a\xe6\xaf\x5d\x5c\xb1\x40\x67\xaa\x22\xf8\xba\x12\x12\x2a\x6e\xe5\x80\x5f\x02\xa1\xb3\xde\x40\x16\x09\x12\xe8\x21\x34\x3f\x3f\xc8\x03\xed\x3a\x3a\x4b\xd8\x38\xc0\xe7\xbb\x27\x9e\x00\x65\x3f\x89\x20\x3e\x47\x9b\x1c\x8a\xdf\xc5\x46\x19\x11\x70\x3a\x7a\xcc\x8b\x9f\x4d\x65\xa3\x21\x9d\xd8\x2f\x85\xd6\x85\x28\x9f\xa7\x17\x44\x44\xa3\x8e\xfb\x5a\x34\x8a\xa4\xdf\x8b\xe7\xa2\x51\x2c\x1a\xe4\xd0\x88\x0d\x4e\xa1\xdf\xb4\xd0\x51\x66\xac\x44\x4f\x68\xae\x85\x0f\xdc\xb4\x5a\xcf\xe2\xe5\xd2\xea\xb6\x36\x64\x92\x5f\x03\x12\x9b\x4b\xed\x6c\x9c\x6d\x9b\x5c\xd1\x83\xaa\x48\x8c\x34\xe2\x3c\x1d\x1d\x53\x6a\x84\x0b\x9e\xdf\x1e\x6f\xd1\xbe\x60\xcc\x37\x5a\x05\x02\x0c\x68\x1e\xd5\xc5\xd3\xad\xbe\xba\x8b\x1f\x9e\xd2\xe7\xea\x71\x3d\x3d\x1a\x93\xf5\xac\x0f\x6c\xd2\x4f\xe8\x96\x44\x42\x94\xe1\xdf\x44\x51\x56\x60\x65\x1d\x92\x0f\xf3\xe0\xb2\x32\x6e\x55\x0e\xe9\x31\x58\xcc\x83\xcc\x4a\xab\x7d\x23\x0c\x87\x1f\x61\xf1\x61\x1c\xf1\x71\x66\x83\x5c\xcc\x1f\x82\x8b\x83\x7b\x24\x2f\x6a\xec\xba\xd4\x9e\xb3\xa6\xf4\x9b\x20\xca\x2a\xcd\x6a\xfa\x2f\xb3\x63\xf8\x4b\x15\xf5\x75\xfa\xcd\x49\x74\x3c\xb5\x93\xd9\x68\x13\x1a\x09\x4c\x38\xe7\xc3\x1b\xab\xc9\xfa\xee\x0e\x84\x2f\xe1\xd2\xf1\xb8\x7e\x1a\xa2\x57\x93\x1c\x24\xfa\x12\xd6\x94\xc5\xde\x13\x3a\xbd\x74\x8b\xa1\xb7\xa3\x1d\x9d\xfd\x13\x00\x00\xff\xff\xcd\x92\xb1\x96\xbf\x08\x00\x00")

func assetsJsManagerMinJsBytes() ([]byte, error) {
	return bindataRead(
		_assetsJsManagerMinJs,
		"assets/js/manager.min.js",
	)
}

func assetsJsManagerMinJs() (*asset, error) {
	bytes, err := assetsJsManagerMinJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/js/manager.min.js", size: 2239, mode: os.FileMode(420), modTime: time.Unix(1507415337, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/manager.html": templatesViewsManagerHtml,
	"assets/js/manager.min.js": assetsJsManagerMinJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"js": &bintree{nil, map[string]*bintree{
			"manager.min.js": &bintree{assetsJsManagerMinJs, map[string]*bintree{}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"manager.html": &bintree{templatesViewsManagerHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: AssetInfo, Prefix: k}
	}
	panic("unreachable")
}
