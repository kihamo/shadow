// Code generated by go-bindata.
// sources:
// templates/views/manager.html
// assets/js/manager.min.js
// locales/ru/LC_MESSAGES/config.mo
// DO NOT EDIT!

package internal

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsManagerHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x5a\x5f\x93\xdb\xb6\x11\x7f\xf7\xa7\xc0\x20\x97\x8c\x14\x9b\xa2\xed\xba\x99\x69\x22\xc9\x93\x71\x32\x71\xa7\x6e\x3b\x93\x38\xee\x83\xeb\xde\x80\xc4\x52\xc2\x95\x02\x64\x00\x94\xee\xaa\xd1\x77\xef\x00\x20\x29\x92\x02\x25\x8a\x3a\xdd\x8d\xe3\x07\x1f\x45\x00\xfb\xe7\x87\x5d\xec\x2e\xb8\x9b\x0d\xa2\x90\x30\x0e\x08\xc7\x82\x6b\xe0\x1a\xa3\xed\xf6\xc9\x98\xb2\x15\x8a\x53\xa2\xd4\x04\x4b\xb1\xc6\xd3\x27\x08\x21\x54\x7d\x7b\x7b\xbd\x24\x1c\xd2\x7c\x64\x7f\x54\x33\x9d\x42\x65\xd4\xce\x98\xbf\x9c\xbe\x11\x3c\x61\xb3\x4c\x12\xcd\x04\x1f\x87\xf3\x97\x8d\x29\x15\x22\x71\x0a\x44\x26\xec\x16\x4f\xc7\x21\x65\xab\x0a\xa7\xc6\xcf\x1a\xe3\x42\x8d\x3a\xdd\xcd\x06\xb1\x04\x8d\x40\x4a\x21\x8d\x82\x6d\x3c\x49\x0a\x52\x23\xfb\x7f\x40\x09\x9f\x81\x2c\x7e\x30\xb5\x60\x4a\x91\x68\x4f\x2b\x4b\x22\xca\xb4\x16\x1c\xe9\xbb\x25\x4c\xb0\xfb\x81\x77\x7a\x08\x05\x18\x51\xa2\x49\x41\x26\x67\x84\x11\x91\x8c\x04\x73\x46\x29\xf0\x09\xd6\x32\x03\x3c\xfd\x46\xb3\x05\xa8\x1f\xc6\xa1\x23\xb3\xcf\x6c\xb3\xc9\x15\x19\xfd\xec\x55\xa7\x8e\x4e\xbe\x02\x38\x35\x13\xeb\x33\x13\x21\x17\x48\x8a\x14\x26\xd8\x3c\x62\x44\x62\xb3\x2d\x13\xfc\x15\x46\x0b\xd0\x73\x41\x27\x78\x29\x94\xc6\x88\xd1\x89\x31\x90\x84\xcd\x54\xae\x89\x16\xb3\x99\x59\xb8\x22\x29\xa3\x44\x0b\xe9\x83\xc5\x20\xeb\xe8\x6b\x12\x35\x0d\xa6\x36\x33\x4b\x0b\xb8\x38\x59\x21\x4e\x56\x81\x26\x91\x42\x11\x91\xd7\xe6\x01\xef\xc8\xa4\x4c\x35\x77\xb7\xa1\xab\x34\x1b\x87\xae\x38\x59\xc0\x33\x74\xb5\x22\x52\xa1\xef\x27\x68\xb4\x32\x60\x47\x29\xa8\x26\x62\x35\x41\x52\x96\xb3\x5a\x4a\x50\xc0\xb5\x35\x54\x9c\x1b\x10\x7c\x76\x64\x51\x0e\x86\x71\x96\xd2\x74\x62\xcd\x56\x80\x4b\xac\xdb\x45\xb4\x7c\x08\x9a\x4b\x48\x26\xf8\xab\xcd\x26\xa7\xb9\xdd\xe6\xf6\x60\x4c\x58\x8a\x54\x4d\x70\x6d\xac\x44\xa0\xb1\x03\xf6\x8d\x5d\x08\xb7\x4b\xc2\x29\x50\xbb\xb0\x45\x5c\x63\x64\x46\xc6\x54\x19\xaa\x09\x49\x15\x94\x22\x1f\x80\xb5\x02\x6f\x21\xd1\x61\xfd\x42\xd2\x4e\x6c\x1c\xa6\xec\xe0\x0e\xe6\xd6\xea\x5f\x9b\xa5\xd3\x27\xfe\xa1\x8a\x23\x6b\x12\x05\xfe\xa3\xa0\xc1\xea\x2c\x63\xf1\xd8\x77\x55\x00\xf3\xe6\x80\xe1\x38\x8b\x41\x8c\xef\x36\xc0\x3a\x5a\x75\xd7\x8f\x58\x51\x5d\xe3\x14\x02\x09\x6a\x29\xb8\x32\x96\x78\x7c\x33\xc7\x76\x4d\x8d\x00\x72\x64\xe6\x62\x05\x3e\x8f\xf6\x53\x99\x03\xa1\x5d\xe7\xca\x6e\x13\x73\xc2\x68\xcd\xa8\x9e\x4f\xf0\xcb\xe7\x5f\xe3\xe9\x3f\xc8\x02\xc6\xa1\x9e\xf7\xa3\xf0\xe7\xaf\xf1\xf4\x03\x49\xb3\xfe\x24\x5e\x18\x12\x3f\x41\x42\xb2\x54\xf7\x27\x62\x34\xf9\x17\xd1\xf1\x1c\xa4\x3a\x99\xca\xf4\x27\x50\xb1\x64\x4b\x17\x3d\xbb\x2e\x1e\x87\x5d\x61\x37\x34\x4f\xd8\xcc\x48\xd0\xbb\x6e\x73\x77\x9e\xc6\x9e\xa1\x2b\xe7\x04\xc6\xd1\x9c\xc7\x1d\x39\x4c\x2a\x44\xcc\xfc\xbf\x52\xb3\x52\xc2\x32\x25\x31\x14\xc4\x46\x1f\x72\x8f\x1d\xfd\x0d\xee\x10\x1e\x61\x84\xaf\x71\x57\xc2\x27\x9a\x65\x47\x7c\x2a\x62\xb3\x64\x5f\xce\x9f\x29\x73\x2e\xd7\x51\xc8\x92\x7f\x4a\x22\x28\xc3\x65\x1e\x2c\x02\xfb\x12\xa3\x44\x48\x77\x80\x38\x9c\xcc\x91\x62\x83\xc5\x4c\x8a\x6c\xe9\x46\x9a\x72\xfc\x62\x86\xec\x59\xe3\x1b\x35\x68\x6e\xb7\xe3\xd0\xd2\x3f\x59\xef\x3c\xcc\xdc\x9f\x7e\x8f\xaa\x4c\x7b\x54\xf2\xea\x11\x9e\x62\x28\x8f\x6e\x55\x95\x50\x62\x92\x41\x07\x72\xc7\x10\xd0\x2e\xd7\x5b\xa2\x3e\x30\x58\x23\x0c\x3c\x5b\x74\xf6\xc7\x9a\x60\x0a\x52\x88\x75\x4d\xb6\xdc\x28\x90\x1b\x7a\x89\x91\x09\x97\x7e\x83\x70\x5b\xbe\x0b\xac\xa5\x5f\x9c\xae\x19\xaa\x9d\x63\xe2\x19\xba\x12\xf6\x20\x36\xa7\xd1\xa0\x60\xfc\x0b\x68\xa3\xf0\x3f\xdd\x08\x76\x33\x14\x1e\xf6\x51\xdd\xaa\x9f\xf3\x58\x99\xd0\xe5\x12\x3b\x4e\xe1\xb6\xe4\xfd\xdc\xe8\x52\x26\x19\x83\xc6\xe0\x70\x1f\x10\x1b\x03\x4d\xfa\xe1\xc0\x33\xd9\x62\xf1\x54\x49\x5e\xf7\xf8\xbc\xb0\x8e\xe3\x7e\xf4\x86\xee\x44\x0f\x2a\x31\x08\x9d\x84\xbd\x8c\xd1\x1e\x41\x79\x0a\xd6\xc4\xe2\xfd\xdd\x12\x10\x8e\x84\x48\xfb\x99\x26\xe3\xcb\x4c\xe7\x55\x5f\x3c\x87\xf8\xbf\x91\xb8\x2d\x33\xc0\x1b\x15\xa8\x35\xd3\xf1\xbc\x97\x79\xee\x2a\x8e\xc1\x52\x32\xae\x5b\x36\x72\x88\x5c\xd9\x68\x0b\x11\x23\x01\xd0\x12\x67\x14\x9e\x05\x98\x90\x68\xd0\x0e\x1a\xe3\x1a\x0f\x8f\x4c\xf8\xee\x55\x3f\xbb\xaf\xe1\xca\xb3\x45\x04\x12\xfb\xfc\xbf\x0b\xb0\x3b\xbf\x69\xf5\x04\x1f\xfa\x4b\xa2\x35\x48\x3e\xc1\xff\xf9\x18\x3c\xfd\xf4\xfa\xe3\xf3\xe0\x2f\x9f\xbe\xbd\xc2\x97\x44\x34\x3b\x0a\x69\xf6\x87\xc1\xf4\xde\x20\x6d\x07\x2b\x49\x05\x31\x68\x7d\xf9\x60\xed\x0c\x70\xf0\xef\x91\x7b\x18\xbe\xbe\x1c\x70\x34\xbf\x9d\x3b\x1f\x39\x0d\xb7\xfa\x91\x71\x1b\xec\x01\xf7\x91\x04\xff\xfb\xf4\x74\xf8\xf4\x5c\x00\xf7\x32\x9c\x25\x51\x6a\x2d\x24\x3d\x1f\xb7\x1d\x25\x5f\xd2\x53\x8c\x06\x6a\x2e\xd6\x97\x43\xf2\x9e\xd1\xd1\x64\xa6\x7a\x21\x63\x84\xa2\xae\xe8\x7e\x0f\xb7\xda\x16\x8d\xfe\x5c\x2b\x9f\x15\x38\xb3\xbb\x98\xf1\x22\xa7\xca\xa5\x70\xef\x9b\x5b\x19\xd0\xab\x38\x6d\xb7\xee\xc6\xb9\x02\x8a\xe3\x54\x9f\xb4\xcb\xf9\xce\xd8\xf0\x2f\xf0\xa0\xe8\xa9\xed\xe9\x09\xac\xe7\x3e\xbe\x0b\xa3\x3e\x85\xb3\x5a\x12\xee\xad\x7b\x0b\x1c\xc6\xa1\x9d\xf2\x65\x17\xbe\x56\xcd\xbd\x0d\xbd\xb6\x66\x90\x5f\x10\x1c\x30\x89\xfc\xfe\xae\x5f\x05\xd8\x52\xdb\x9e\x75\xf2\x7f\x6b\xff\x3d\xa4\xeb\xa1\x52\x13\xc2\xe9\x81\x1b\x84\x81\x19\x1e\xf8\x2b\xf9\xe1\x6e\xa0\x09\xed\xb0\x77\xad\x8b\x1e\xa3\xc0\xae\x23\xd2\xad\x86\xde\x19\xd1\x59\x2c\x0b\xb6\x7b\x85\xf6\xb9\x8a\xf4\xac\xb3\xef\x87\xc2\x99\x96\x99\x93\xb8\x6f\xcc\xfb\xeb\xd4\xf7\xd8\x3f\xed\xa8\x7d\xd0\xdb\xc2\xe2\xfb\x43\xbf\x08\xd3\x07\xc1\xdc\xa7\xd7\xcf\xd0\xd5\xda\x31\xaf\x26\x72\x7d\xe5\x29\x65\x2a\x72\x07\x77\x75\x6c\xff\x2f\x32\x1f\x77\x13\x9c\x33\x1d\xfd\x26\x32\x19\xf7\x0d\x85\xe8\xc1\xac\xa1\x1f\xa7\x87\x08\xbc\xde\xfc\xe2\x77\x45\x66\x27\x3b\xfc\x2e\x04\x0d\xb8\xe7\x33\x4e\x19\x86\xb4\xcc\x60\xd8\x1e\x87\xfa\x98\x4c\x24\x51\x38\xfd\x31\x4d\xc5\x1a\xa8\xcb\x1f\xd5\xf7\xa7\x53\xc9\x4e\xfc\x84\x80\x1e\x23\xbc\x1d\x08\x6b\x8d\x37\x2f\xfa\xdf\x51\xa7\x6c\xff\xc2\xf8\xb9\xfb\xd2\x72\xe0\x43\xff\x11\xb1\xcf\x09\x22\xad\x12\xa1\x6f\x16\x94\xa8\xf9\x0f\xfe\xb8\x7b\x9e\xbc\x0f\x19\x5e\x50\xd9\x0a\x71\x79\x5e\x97\x0b\x65\xdd\x3f\x4c\x9f\x26\xf9\x38\xec\xf8\x69\x7a\x1c\xda\x33\xe6\x48\x97\xc5\xe1\x0a\xee\xc8\xf0\xb1\x76\x16\xef\xe2\xfc\xb5\xbf\xa3\xaa\x88\x75\xfc\x5a\x89\x94\xd1\xbd\xfe\x38\xdf\xe4\xa3\x9f\xf4\x6a\x9d\x77\x22\x0d\x16\x34\xf8\x0e\xe5\x0f\x22\x49\x14\xe8\xe0\x4f\x07\x2a\xa6\x7a\x07\x9c\x04\x05\xbb\x82\x3e\xd2\x1c\x45\x9a\x07\x8c\x27\xa2\x2c\xd7\xdd\x94\xe9\xaf\xe6\x4f\x7b\xaf\x9b\x9f\xbc\xca\xa2\x05\xdb\xa7\xaf\xb2\x38\x06\xa5\x4a\x16\x8a\xac\x4c\x41\xc8\x6c\xd7\x1e\x9d\xe0\xe2\x09\x4f\x7f\x23\x2b\x38\xcc\xf4\xf0\xbe\xd4\x5f\x19\x6c\xbd\xdd\x89\xf9\x63\xf1\xa7\x82\xf0\x42\x50\x92\xa2\x84\x50\x70\x57\x13\xf6\xf7\x9b\xbc\x35\x48\x93\xc8\x1e\x4d\x13\x1c\xbc\x28\xda\xbe\x28\x23\xa9\x98\xe5\x7d\x5e\x36\xbf\x49\x81\x46\x77\xb5\x95\xef\xec\x27\x72\x27\x88\xa7\xb1\xf0\x49\x73\x9b\xed\xd2\x20\xa7\xec\xef\xa7\x74\x53\xfc\x8d\x54\xfb\xf3\xe6\x40\xa8\xb7\x6d\xe8\xf4\xfe\x48\x4b\xb0\x5f\x7f\xe4\x78\xfe\xaa\x2e\x96\xeb\x45\x6d\xe2\xec\xd0\x72\x0d\xa9\x72\x81\x8c\xb1\xa0\xb8\xd1\x9d\xfa\xaa\xb9\xd5\xfb\xbb\xbf\x07\x82\x39\x78\xf0\xf4\x47\x09\xe8\x4e\x64\x48\x65\x12\x5e\x77\x5a\x97\x08\xa1\x4f\x07\xaf\xb0\xfd\x22\xd9\xf5\xc2\x38\x7d\x63\x20\x3e\x80\x58\x17\xef\x72\xed\xb0\x2d\x0c\xda\x1d\xaa\xbd\x77\xb7\xee\x1d\x95\x1e\xd5\x4a\x53\xb2\xb1\xa8\xf2\x56\x65\xb3\x41\x4a\x13\xcd\xe2\xb7\xef\xff\xfe\x0e\x0d\xdc\xf3\xef\xbf\xbe\x43\x38\x34\x31\x3d\x12\x44\xd2\x90\x28\x05\x5a\x85\x2b\xe0\x54\x48\x15\x1a\x69\xed\x11\xaf\x46\x1c\x74\x10\xa9\x30\x56\xee\xed\x7b\xf7\x36\x12\x42\x2b\x2d\xc9\x72\xb4\x60\x7c\x14\x9b\xe3\xc3\x36\x45\x0e\xef\x91\x6b\xc2\x6e\x81\x3a\xe7\x28\x24\xb0\xaf\xde\xda\x57\x87\x45\xf0\xe3\x72\xa3\xee\x11\x95\xf0\x46\x85\x37\x9f\x33\x90\x77\xa3\x0a\x30\x46\x96\x9b\x4b\xa0\x11\x29\xc3\xb0\x75\x0b\x2e\xc2\xb3\xb2\x03\x0d\xe6\xd5\x8d\x38\x99\xbd\x3b\x2f\x0a\xde\x37\x2a\x5c\x10\x4e\x66\x20\x2d\x15\x57\xb7\x54\xb7\xf0\xff\x01\x00\x00\xff\xff\xc4\x5c\xb0\x00\x6e\x2f\x00\x00")

func templatesViewsManagerHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsManagerHtml,
		"templates/views/manager.html",
	)
}

func templatesViewsManagerHtml() (*asset, error) {
	bytes, err := templatesViewsManagerHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/manager.html", size: 12142, mode: os.FileMode(420), modTime: time.Unix(1518469364, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsJsManagerMinJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\xdf\x8f\xe2\x36\x10\xfe\x57\xc2\xdc\x8a\xb3\x45\xce\xb0\x0f\x95\x2a\xc0\xec\x03\xbd\x87\x4a\x55\x5b\xe9\xae\x7d\x41\xa8\x72\xe2\x81\xb8\xeb\xd8\xa9\xed\xc0\xad\x56\xf9\xdf\x2b\x9b\x2c\x17\xe0\x76\xd5\x56\x7d\x41\x83\xc7\xdf\x37\xfe\xe6\x57\xee\x88\xb4\x65\x5b\xa3\x09\x94\x39\x14\xf2\x89\xec\x5a\x53\x06\x65\x0d\xa1\xcf\x77\x04\xde\x95\xd6\xec\xd4\xde\x67\xca\x34\x6d\xd8\x28\xb9\xcd\xb3\xf3\x99\x47\x8d\x65\x00\xca\xca\x4a\x98\x3d\x0e\xa1\x07\xe1\x32\xe4\x77\x24\x54\xca\xd3\xdc\xd9\x23\x47\xd6\x08\x87\x26\xf8\xdf\x4c\x50\x9a\x40\x28\xac\x7c\x82\x1c\x82\x03\x9a\x97\xad\x8b\x3e\x8e\xec\x20\x34\xa1\xb9\xc4\x1d\x8f\x50\x26\x71\x27\x5a\x1d\x7e\x17\xba\xc5\x05\x94\x15\x96\x8f\x85\xfd\x02\x3c\xd2\x39\xdb\x10\x08\x4f\x0d\x02\x7d\x20\x2f\x0c\x00\xa3\xb3\x2f\x5d\x47\x09\xb7\x7c\xeb\x93\x87\xce\xe1\xd3\xc7\x9f\x3e\xae\x3f\x03\x3f\xb9\x83\xd8\xff\x2c\x6a\x1c\x8f\x49\x44\x20\xdb\x29\x23\x09\xd8\x26\xaa\x02\xca\x76\x4a\x07\x74\x43\x9d\x0e\x43\xeb\x4c\xd6\x0b\xed\xe3\xf6\x41\x3e\xa5\xf4\xc4\xf8\x1d\x3d\xe9\xfa\x2a\x94\x4b\xdc\x3d\x38\x7b\x64\x0e\x6b\x7b\xc0\xb5\x16\xde\x13\xa8\x84\xff\x80\xce\x59\x07\x74\x1e\x9d\x42\xca\x5b\x4f\x3e\x2c\x4b\xd1\x86\x60\xcd\x26\x66\x81\xfb\xb6\xa8\x55\xd8\xc2\xf9\x19\xca\x8b\x42\xa3\x84\x7c\xc6\xf9\x10\x14\x1c\x1b\xf0\x31\x8d\x66\x1f\x2a\xda\xbd\xce\xec\xd0\x63\x22\x2e\xb5\x2a\x1f\x5f\x6b\x91\x2b\xda\xd7\x94\xfd\x87\xf7\x8f\x66\x6f\xbd\xee\x2b\xee\xe6\x79\xb1\x0d\xeb\xa4\xbd\xb6\x52\xe8\x75\x42\xc7\x7e\xe3\x00\x8b\x73\xed\xbe\x2d\x21\x0b\xb2\xef\x7a\x23\x6a\xdc\xa6\x58\x23\x5e\x29\x29\xd1\x0c\xa7\xe0\x1a\x73\x9e\x0a\x14\x65\xf5\xea\x4c\xbc\xd5\xcc\x87\xdb\x0e\x9e\x1f\xce\xb3\x51\x4e\x38\x2c\xb5\x5a\x2d\x7d\x70\xd6\xec\x57\x30\x79\xb9\x1d\xdf\x09\x74\x02\xcb\x69\xef\x9a\x67\x30\x39\xc4\xff\x5a\xad\xa0\xa3\x79\xdd\x37\x34\x4b\xd9\xf8\x90\x26\x90\xb2\x2a\xd4\x9a\xc0\x3a\xcd\xb0\xcf\x4e\xcd\xee\xe7\xcb\xc2\x65\xd3\xd5\xb2\xd5\x2b\x98\x94\x91\x23\x5a\x91\x22\x61\x09\xcd\x47\xf7\x7d\x4d\x06\xa9\xfd\x37\x75\x91\x22\x08\xfe\xdc\xfd\xf3\x32\x28\xf9\xbf\x17\x21\xbe\x61\x73\x99\xbe\x2d\x7f\xa3\x32\xb7\x75\xe9\xab\x12\x53\xc1\x1a\xeb\x03\x81\x77\x90\x47\xda\x7c\x10\xf4\xa8\x8c\xb4\x47\xa6\x6d\x29\xe2\x09\x73\xa8\xad\x90\x09\x75\xce\xe2\xe5\xa2\x4d\x09\x6c\x84\xf7\x47\xeb\xe4\x96\xbd\x58\x1f\x7c\x65\x8f\x40\x99\x35\x04\xa2\xc9\x0a\x7f\xf6\x65\x95\x92\x38\x3c\x80\xfc\x1b\xba\xe1\x1d\x4c\x2e\xb7\x95\x92\xb1\x67\xfe\x38\xc4\x15\x0b\x74\xa1\x76\x04\x5f\x56\x42\x42\xc5\xad\x1c\xf0\x4b\x20\x74\xd1\x1b\xc8\xa2\x40\x02\x3d\x84\xe6\x97\x07\x79\xa0\x5d\x47\x17\x09\x1b\x07\xf8\x72\xf7\xc4\x13\xa0\xec\x07\x11\xc4\xe7\x68\x93\x67\x2d\xcc\xbe\x15\x7b\x9c\x3f\xb7\x4e\xcf\x61\x2a\x85\xaf\x0a\x2b\x9c\x9c\x46\xd6\x04\xf0\x53\x75\xff\xbd\x61\x7f\x7a\x6b\xa0\xcb\x8b\x5f\xc5\x5e\x19\x11\x70\x3e\xba\xcf\x8b\x1f\xcd\xce\x46\x43\x3a\x71\x5c\x0b\xad\x0b\x51\x3e\xce\xaf\x94\x8b\x46\x9d\x16\xbc\x68\x14\x49\xdf\x23\xcf\x45\xa3\x58\x34\xc8\x73\x13\x83\x43\xbf\x9a\xa1\xa3\xcc\x58\x89\x9e\xd0\x5c\x0b\x1f\xb8\x69\xb5\x5e\xc4\xcb\xa5\xd5\x6d\x6d\xc8\x2c\xbf\x05\x24\xf9\xd7\xcd\xe6\xec\x31\x57\xa7\xf8\xb1\xb5\xf8\x5d\x3c\xe9\xef\xc2\xde\xd9\xb6\x01\xba\x88\x21\x46\x9c\x9b\xf4\xd5\x89\xbf\x7d\xee\xc7\xe3\x74\xdd\x53\x86\x7f\x11\x45\x59\x81\x3b\xeb\x90\xbc\x5f\x06\x97\x95\x71\xa7\xf2\x9e\x62\xb5\x0c\x32\x2b\xad\xf6\x8d\x30\x1c\xbe\x83\xd5\xfb\x49\xa4\x89\x13\x1b\xe4\x6a\x39\x0d\x2e\x8e\xed\x49\x89\xa8\xb1\x4b\xb5\xb9\xa8\x48\xbf\x06\x62\x4f\xa5\x41\x4d\x1f\x65\x76\x62\xbf\x6e\xa1\x5e\xf3\x2f\x4e\xa2\xe3\xa9\x34\xcc\x46\x9b\xd0\xcd\x6c\xbb\x98\x71\xce\x87\x37\x36\xb3\xed\x78\x0c\xc2\x97\x70\xed\xb8\xdf\x3e\x0c\xd1\x9b\x59\x0e\x12\x7d\x09\x5b\xca\x62\x1d\x09\x9d\x5f\xbb\xc5\xd0\xdb\xd1\x8e\x2e\xfe\x0e\x00\x00\xff\xff\x73\xa6\x1f\xe9\xbc\x08\x00\x00")

func assetsJsManagerMinJsBytes() ([]byte, error) {
	return bindataRead(
		_assetsJsManagerMinJs,
		"assets/js/manager.min.js",
	)
}

func assetsJsManagerMinJs() (*asset, error) {
	bytes, err := assetsJsManagerMinJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/js/manager.min.js", size: 2236, mode: os.FileMode(420), modTime: time.Unix(1521881436, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesConfigMo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\x31\x6b\x14\x41\x1c\xc5\xdf\x05\x6d\x16\x6c\xac\x2c\x2c\xfe\x16\x06\x45\x27\xce\xec\x1a\x08\x73\x37\x17\xf1\x4c\x40\xcc\xe1\x19\x56\x5b\x19\x72\x93\xbd\xc1\xbb\x99\x65\x66\x56\x14\x52\x08\x8a\xad\x95\x8d\x9f\x42\xb0\x49\xa3\xb5\xe5\xee\x17\xf0\xb3\xc8\xed\x11\x83\xaf\xfa\x3d\xfe\xef\x3d\xfe\x7f\xae\x5f\xf9\x0a\x00\x5b\x00\x6e\x02\xb8\x0f\xe0\x2a\x80\x11\x36\x9a\x01\xb8\x06\xe0\x05\x80\xc5\x00\x78\x0d\xe0\x06\x80\xdf\x03\x60\x80\x4b\x6d\x5d\xc0\xc4\xbb\x53\x5b\x35\x41\x27\xeb\x1d\x8e\x4d\xed\x43\x62\xd3\x58\xd9\x39\x7b\xdc\x54\x91\x95\x5e\xd2\xdc\xbc\x7d\xf4\xc6\x2e\xf4\xca\xef\x84\x26\x9b\x3d\x2f\xd9\x24\x98\xbe\xc0\x9e\xe8\x64\x24\xe5\x5c\xec\x31\x5e\xb0\xbc\xa0\xbc\x90\xbb\xbb\xf7\x78\xc1\x79\x76\xa4\x63\x62\x65\xd0\x2e\x2e\x75\xf2\x41\xd2\xb3\x7e\x83\xa6\x4d\xd0\x2b\x3f\xf7\x34\xfa\x6f\x78\x9c\x1d\x69\x57\x35\xba\x32\xac\x34\x7a\x25\xe9\x9f\x97\x74\xdc\xc4\x68\xb5\xcb\xa6\x4f\xa7\x07\xec\x95\x09\xd1\x7a\x27\x49\xec\xf0\x6c\xe2\x5d\x32\x2e\xb1\xf2\x7d\x6d\x24\x25\xf3\x2e\x3d\xa8\x97\xda\xba\x21\x9d\x2c\x74\x88\x26\xa9\x97\xe5\x21\xdb\xbb\xcc\xad\xff\x39\x35\x81\x1d\xb8\x13\x3f\xb7\xae\x92\x94\xcd\x96\x4d\xd0\x4b\x76\xe8\xc3\x2a\x4a\x72\x75\x6f\xa3\x2a\x86\xb4\x41\xe5\x6e\x0b\xae\x94\xa0\xed\x6d\x5a\x23\xbf\xa5\x84\xa0\x7d\xe2\x24\x7b\x3f\x56\xf9\xc5\x69\xa4\x1e\xae\xf1\x4e\x1f\x1b\x09\x4e\x67\x67\x9b\xca\x58\xe5\xfc\x2e\xed\x93\x20\x49\xf9\x10\xed\xb7\xf6\x57\xfb\xb3\xfb\xd4\x9e\xb7\x3f\xba\x8f\xdd\x87\xf6\x7b\xf7\xb9\x3d\xef\xbe\xe0\x6f\x00\x00\x00\xff\xff\x8c\x78\x87\x66\xe1\x01\x00\x00")

func localesRuLc_messagesConfigMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesConfigMo,
		"locales/ru/LC_MESSAGES/config.mo",
	)
}

func localesRuLc_messagesConfigMo() (*asset, error) {
	bytes, err := localesRuLc_messagesConfigMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/config.mo", size: 481, mode: os.FileMode(420), modTime: time.Unix(1521887357, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/manager.html": templatesViewsManagerHtml,
	"assets/js/manager.min.js": assetsJsManagerMinJs,
	"locales/ru/LC_MESSAGES/config.mo": localesRuLc_messagesConfigMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"js": &bintree{nil, map[string]*bintree{
			"manager.min.js": &bintree{assetsJsManagerMinJs, map[string]*bintree{}},
		}},
	}},
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"config.mo": &bintree{localesRuLc_messagesConfigMo, map[string]*bintree{}},
			}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"manager.html": &bintree{templatesViewsManagerHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
