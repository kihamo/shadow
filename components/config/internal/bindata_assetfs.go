// Code generated by go-bindata.
// sources:
// templates/views/manager.html
// assets/js/manager.min.js
// locales/ru/LC_MESSAGES/config.mo
// locales/ru/LC_MESSAGES/manage.mo
// DO NOT EDIT!

package internal

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsManagerHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x5a\x5b\x93\xdb\xb6\x15\x7e\xf7\xaf\xc0\x20\xdb\x8c\x14\x9b\xa2\xed\xba\x99\x36\x91\xd6\x93\x49\x33\x71\xa7\x6e\x3b\x93\x38\xee\x83\xeb\xee\x80\xc4\xa1\x84\x2d\x05\x28\x00\x28\xed\x46\xa3\xff\xde\x01\xc0\xbb\x40\x89\xa2\x56\xeb\xba\x7e\x58\x53\x04\x70\x2e\xdf\xb9\x01\xe0\xd9\x6e\x11\x85\x84\x71\x40\x38\x16\x5c\x03\xd7\x18\xed\x76\x4f\xa6\x94\xad\x51\x9c\x12\xa5\x66\x58\x8a\x0d\xbe\x7e\x82\x10\x42\xf5\xb7\x77\x37\x2b\xc2\x21\xcd\x47\xf6\x47\x35\xd3\x29\xd4\x46\xed\x8c\xc5\xcb\xeb\xed\x16\xb1\x17\x7f\xe4\x08\x7f\x2f\x78\xc2\xe6\x99\x24\x9a\x09\x8e\xd1\x04\xed\x76\xd3\x70\xf1\xb2\xb5\xa2\x46\x33\x4e\x81\xc8\x84\xdd\xe1\xeb\x69\x48\xd9\xba\xc6\xb8\xf5\xb3\x21\x47\xa1\x55\x93\xae\x91\x22\x41\x13\x90\x52\x48\xa3\x6f\x17\x4f\x92\x82\xd4\xc8\xfe\x0d\x28\xe1\x73\x90\xc5\x0f\xa6\x96\x4c\x29\x12\xed\x29\x69\x49\x44\x99\xd6\x82\x23\x7d\xbf\x82\x19\x76\x3f\x70\xa5\x87\x50\x80\x11\x25\x9a\x14\x64\x72\x46\x18\x11\xc9\x48\xb0\x60\x94\x02\x9f\x61\x2d\x33\xc0\xd7\x5f\x6a\xb6\x04\xf5\xed\x34\x74\x64\xf6\x99\x6d\xb7\xb9\x22\x93\x1f\xbc\xea\x34\xd1\xc9\x57\x00\xa7\x66\x62\x73\x66\x22\xe4\x12\x49\x91\xc2\x0c\x9b\x47\x8c\x48\x6c\x8c\x33\xc3\x5f\x60\xb4\x04\xbd\x10\x74\x86\x57\x42\x69\x8c\x18\x9d\x19\x7f\x49\xd8\x5c\xe5\x9a\x68\x31\x9f\x9b\x85\x6b\x92\x32\x4a\xb4\x90\x3e\x58\x0c\xb2\x8e\xbe\x26\x51\xdb\x7f\x1a\x33\xb3\xb4\x80\x8b\x93\x35\xe2\x64\x1d\x68\x12\x29\x14\x11\x79\x63\x1e\x70\x45\x26\x65\xaa\x6d\xdd\x96\xae\xd2\x18\x0e\x5d\x71\xb2\x84\x67\xe8\x6a\x4d\xa4\x42\xdf\xcc\xd0\x64\x6d\xc0\x8e\x52\x50\x6d\xc4\x1a\x82\xa4\x2c\x67\xb5\x92\xa0\x80\xeb\xdc\x5d\x9d\x03\xc1\xaf\x8e\x2c\xca\xc1\x30\xb1\x53\xba\x4e\xac\xd9\x1a\x70\x89\x75\xb7\x88\x96\x0f\x41\x0b\x09\xc9\x0c\x7f\xb1\xdd\xe6\x34\x77\xbb\xdc\x1f\x8c\x0b\x4b\x91\xaa\x19\x6e\x8c\x95\x08\xb4\x2c\x60\xdf\xd8\x85\x70\xb7\x22\x9c\x02\xb5\x0b\x3b\xc4\x35\x4e\x66\x64\x4c\x95\xa1\x9a\x90\x54\x41\x29\xf2\x01\x58\x6b\xf0\x16\x12\x1d\xd6\x2f\x24\xdd\xc4\xa6\x61\xca\x0e\x5a\x30\xf7\x56\xff\xda\x2c\xbd\x7e\xe2\x1f\xaa\x05\xb2\x26\x51\xe0\x4f\x05\x2d\x56\x67\x39\x8b\xc7\xbf\xeb\x02\x98\x37\x07\x1c\xc7\x79\x0c\x62\xbc\x32\x80\x0d\xb4\xba\xd5\x8f\x78\x51\x53\xe3\x14\x02\x09\x6a\x25\xb8\x32\x9e\x78\xdc\x98\x53\xbb\xa6\x41\x00\x39\x32\x0b\xb1\x06\x5f\x44\xfb\xa9\x2c\x80\xd0\xbe\x73\x65\xbf\x89\x39\x61\xb4\x61\x54\x2f\x66\xf8\xe5\xf3\xdf\xe1\xaa\x94\xfc\x9d\x2c\x01\xa3\x2b\x5b\x41\xf4\x62\x18\xc1\x3f\xd4\x09\xbe\x27\x69\x76\x2e\xc5\x17\x0d\x8a\x7f\x86\x84\x64\xa9\x3e\x97\x66\x43\xed\x7f\x12\x1d\x2f\x40\xaa\x81\x44\xeb\xc2\xa9\x58\xb2\x95\xcb\x6c\xa7\xd1\x9a\x86\x7d\x2d\x68\x68\x9e\xe0\x17\x91\xa0\xf7\xfd\xe6\x56\x41\xcb\x9e\xa1\x2b\x17\x4f\x26\x66\x5d\xf0\x1e\xc9\x4b\x35\x22\x66\xfe\x5f\xa8\x59\x29\x61\x95\x92\x18\x0a\x62\x93\xf7\x79\xf0\x4f\xfe\x0a\xf7\x08\x4f\x30\xc2\x37\xb8\x2f\xe1\x13\x3d\xbc\x27\x3e\x35\xb1\x59\xb2\x2f\xe7\x0f\x94\xb9\xe8\xed\x29\x64\xc9\x3f\x25\x11\x94\x95\x37\xaf\x3b\x81\x7d\x89\x51\x22\xa4\xcb\x45\x0e\x27\x93\x9d\x6c\xdd\x99\x4b\x91\xad\x5c\x89\x31\xde\xb4\x27\xcc\x8f\x66\x1c\x5d\x55\xa9\xae\x4a\x66\x86\x9a\x0f\x63\xe3\x81\x96\xeb\xc9\x68\xe4\x75\xec\xe1\xb4\xfe\x1f\x54\xb1\xbb\x18\x7a\xb5\x0b\x4f\x71\xaa\x4f\xee\x81\xb5\x0a\x66\xf6\xa0\x0e\xfa\x9e\x95\xa7\x5b\xae\x37\x44\xbd\x67\xb0\x41\x18\x78\xb6\xec\x1d\xbb\x0d\xc1\x14\xa4\x10\xeb\x86\x6c\xb9\xab\x20\x37\xf4\x12\x23\x63\x75\x17\x23\x7e\x93\x57\xf5\xbc\x8c\xa1\xd3\x35\x43\x8d\x9c\x27\x9e\xa1\x2b\x61\x53\xb7\xc9\x5c\xa3\x82\xf1\x8f\xa0\x8d\xc2\xff\x70\x23\xd8\xcd\x50\x78\x3c\x44\x75\xab\x7e\xce\x63\x6d\x2a\xa3\x8b\x04\x4e\xe1\xae\xe4\xfd\xdc\xe8\x52\xee\x6d\x46\xad\xc1\xf1\x3e\x20\xb6\xc4\x9a\x5d\x8f\x03\xcf\x6c\x52\x8b\xa7\xda\x9e\xb9\x88\xb8\x16\xc1\x17\x63\x5f\xb0\x4d\x43\x37\x3c\x18\xd2\x13\x23\xab\xc4\x26\x74\x92\x0f\x72\x52\x9b\xb0\x7c\x9e\xaa\xe1\x4e\x13\x09\x64\x98\xb7\x16\xab\xbd\xfe\x2a\x41\xb1\xdf\x8c\x15\x6e\x2a\x26\x52\x6c\xd4\x0c\xbf\x1a\xe6\xc3\xbe\xd9\x85\x81\xa7\x61\xc1\xe4\x2c\x7c\xcc\x8e\xb9\xcd\xe2\xdd\xfd\x0a\x10\x8e\x84\x48\x87\x81\xc4\xf8\x2a\xd3\xf9\x21\x3d\x5e\x40\xfc\x9f\x48\xdc\x95\x1b\xf6\x5b\x15\xa8\x0d\xd3\xf1\x62\x10\x24\xd5\x01\x71\xb4\x92\x8c\xeb\x0e\x7c\xc6\xc8\x9d\xf2\xed\xb9\xd1\x48\x00\xb4\xf4\x43\x14\x9e\x05\x98\x90\x68\xd4\x0d\x1a\xe3\x1a\x8f\x8f\x4c\xf8\xfa\xd5\xb0\x7c\xd1\xc0\x95\x67\xcb\x08\x24\xf6\xf9\x61\x1f\x60\xab\x7c\xd3\xe9\x60\x3e\xf4\x57\x44\x6b\x90\x7c\x86\xff\xfd\x21\x78\xfa\xf1\xf5\x87\xe7\xc1\x9f\x3e\x7e\x75\x85\x2f\x89\x68\x76\x14\xd2\xec\xff\x06\xd3\x07\x83\xb4\x1b\xac\x24\x15\xc4\xa0\xf5\xf9\x83\x55\x39\xe0\xe8\x5f\x13\xf7\x30\x7e\x7d\x39\xe0\x68\x79\xa5\x7a\x2e\x72\x26\x6f\x7f\x62\xdc\x46\x7b\xc0\x7d\x20\xc1\x6f\x1f\x9f\x8e\x9f\x9e\x0b\xe0\x5e\xbd\x5d\x11\xa5\x36\x42\xd2\xf3\x71\xab\x28\xf9\x8a\x6f\x31\x1a\xa8\x85\xd8\x5c\x0e\xc9\x07\x46\x47\x93\xb9\x1a\x84\x8c\x11\x8a\xba\xcb\x8f\x77\x70\xa7\xed\xc1\xdc\xbf\x47\xcd\x67\x05\xce\xed\x2e\xe6\xbc\xc8\xa9\x72\x29\xdc\x87\xee\x3d\x0d\xe8\x75\x9c\x76\x3b\xf7\x81\xa0\x06\x4a\xed\x00\x5a\x9f\xe9\x3b\x76\x96\x9b\x88\x33\xdc\xe0\x33\x4c\x1f\x03\xb5\x3d\x7d\xdb\xef\xf9\xa8\xd2\x87\xd1\x90\xcb\x09\xb5\x22\xfc\xc8\x06\xdb\x4e\xf9\xbc\xaf\x11\xac\x9a\x7b\x06\xbd\x59\xbb\x8b\x58\x1b\x0a\x07\x5c\x22\xbf\x5d\x1d\x76\x9e\xee\xb8\x29\x38\xab\x1e\x7c\x65\xff\x3d\x66\xe8\xa1\x52\x13\xc2\xe9\x81\xfb\x98\x91\x19\x1e\xf9\xef\x45\xc6\xd5\x40\x1b\xda\xf1\xe0\x9b\x03\xf4\x29\xae\x2b\x9a\x88\xf4\xbb\x91\xa8\x9c\xe8\x2c\x96\x05\xdb\xde\xd7\x16\xe7\x2a\x38\xf0\xd6\xe2\x61\x28\x9c\xe9\xb1\x39\x89\x87\xb6\xc5\x70\x9d\x86\x96\x83\xd3\x52\xf0\xa3\xde\xc9\x16\x9f\x89\x86\x55\x9e\x21\x08\xe6\xb1\xbe\x79\x86\xae\x36\x8e\x79\x7d\xdb\x37\x54\x9e\x52\xa6\x62\x4f\xe1\xae\xed\xed\xdf\x62\x9f\xe4\xae\xa2\x72\xa6\x93\x9f\x45\x26\xe3\xa1\x25\x12\x3d\x9a\x37\x0c\xe3\xf4\x18\x05\xf9\xba\xf3\x8b\xc7\x2f\x8a\x18\x13\x9f\x99\xcd\xaa\x82\x35\xe2\x9e\xcf\x6d\x65\xd1\xd2\x32\x83\x71\x77\xd5\x1a\xe2\x48\x91\x44\x61\xf5\x05\xf4\xbb\x34\x15\x1b\xa0\x6e\xdb\xa9\xbe\x71\x5f\x41\x4f\x27\x9a\x9d\xf8\x35\x07\x7d\x8a\xda\x78\xa0\x26\xee\xd7\xab\xa1\x9f\x0b\x52\x76\xed\xfd\x46\x70\xb8\xd5\xe3\x88\xd8\xe7\x54\x9a\x4e\x89\xd0\x97\x4b\x4a\xd4\xe2\xdb\xd3\x8a\xf6\x79\x7a\x3c\x66\x6d\x42\x65\x93\xcc\xe5\x79\x5d\xae\x0e\xf6\xef\x33\x38\x4d\xf2\x69\xd8\xb3\xd3\x60\x1a\xda\x54\x74\xa4\xff\xe6\xf0\xb1\xf0\xc8\xf0\xb1\x46\x27\xef\xe2\xfc\xb5\xbf\xd7\xae\x28\x94\xfc\x46\x89\x94\xd1\xbd\xce\x49\xdf\xe4\xa3\x5f\x5d\x1b\x3d\x99\x22\x0d\x96\x34\xf8\x1a\xe5\x0f\x22\x49\x14\xe8\xe0\xf7\x07\x8e\x61\xcd\xde\x48\x09\x0a\xaa\x5b\x82\x48\x73\x14\x69\x1e\x30\x9e\x88\xf2\x0e\xc0\x4d\xa9\x72\xf5\x4f\x6e\x89\x6b\x18\xed\x6a\x8a\xf4\x73\x53\x59\xb4\x64\xfb\xec\x54\x16\xc7\xa0\x54\xc9\x51\x91\xb5\x39\x74\x32\xdb\xde\x49\x67\xb8\x78\xaa\x09\xf1\xb3\x9d\x72\x5c\x86\xc3\x56\x6b\xbe\x32\xc8\x7b\xbb\x5a\xf3\xc7\xe2\xbf\x1a\xfe\x4b\x41\x49\x8a\x12\x42\xc1\xdd\x86\xd8\xdf\xdf\xe7\xb9\x4a\x93\xc8\xa6\xb2\x19\x0e\x5e\x14\xed\x82\x94\x91\x54\xcc\xf3\xfe\x40\xbb\x75\x4a\x81\x46\xf7\x8d\x95\x6f\x6d\xe7\x83\x13\xc4\xd3\x90\xfa\xa4\xed\x04\x76\x69\x90\x53\xf6\xf7\xe1\xba\x29\xfe\x06\xbc\xfd\x79\x0b\x20\xd4\xdb\x6e\x76\x7a\x5f\xad\x25\x38\xac\xaf\x76\xba\x78\xd5\x14\xcb\xb5\x34\xb7\x71\x76\x68\xb5\xfa\x9a\xe5\x12\x19\x27\x42\xb1\xb7\xc9\xf9\x55\xdb\xf2\xfb\xce\xb0\x87\x89\xc9\x52\x35\x2e\xdf\x49\x40\xf7\x22\x43\x2a\x93\xf0\xba\x20\xdc\x83\x4c\x22\x84\x3e\x1d\xda\x22\x50\x8a\x5d\xb6\x17\xe4\x1a\x04\xce\x12\x87\xa3\xa3\x57\x64\xba\x9e\xeb\x63\xfc\x8e\x05\x63\x77\xbf\x78\x33\xb2\x6a\x7d\xd1\xb5\xbe\x78\xe3\x8d\xe5\x25\xd0\x76\x8b\x94\x26\x9a\xc5\x6f\xde\xfd\xed\x2d\x1a\xb9\xe7\x5f\x7e\x7a\x8b\x70\x68\x76\x11\x91\x20\x92\x86\x44\x29\xd0\x2a\x5c\x03\xa7\x42\xaa\xd0\x08\x6f\x8b\x87\x9a\x70\xd0\x41\xa4\xc2\x58\xb9\xb7\xef\xdc\xdb\x48\x08\xad\xb4\x24\xab\xc9\x92\xf1\x49\x6c\x32\x91\x6d\xc4\x1d\x3f\x20\xd7\x84\xdd\x01\x75\x81\x55\x48\x60\x5f\xbd\xb1\xaf\x0e\x8b\xe0\xc7\xe5\x56\x3d\x20\x2a\xe1\xad\x0a\x6f\x7f\xcd\x40\xde\x4f\x6a\xc0\x18\x59\x6e\x2f\x81\x46\xa4\x0c\xc3\x4e\x13\x5c\x84\x67\xcd\x02\x2d\xe6\x75\x43\x9c\xcc\xde\xa5\x98\x82\xf7\xad\x0a\x97\x84\x93\x39\x48\x4b\xc5\x1d\x9c\xea\x26\xfc\x6f\x00\x00\x00\xff\xff\x8e\x43\x70\xd0\xf1\x31\x00\x00"

func templatesViewsManagerHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsManagerHtml,
		"templates/views/manager.html",
	)
}

func templatesViewsManagerHtml() (*asset, error) {
	bytes, err := templatesViewsManagerHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/manager.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsJsManagerMinJs = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x55\xcd\x6e\x23\x37\x0c\x7e\x15\x9b\x1b\x64\x25\x78\x56\xde\x1c\x0a\x14\xb6\xe5\x1c\xdc\x3d\x14\x58\x14\x05\xb2\xed\x25\x08\x0a\xce\x88\xf6\xa8\xd1\x48\x53\x49\x63\x6f\x10\xf8\xdd\x0b\x8e\x27\x5e\x27\xde\x04\x6d\x2f\xbd\x18\x34\x7f\x3e\x8a\xfc\x48\xce\x85\x30\xa1\xea\x1a\xf2\x59\xaa\x48\x68\x1e\xc4\xba\xf3\x55\xb6\xc1\x0b\xf9\x78\x21\xe0\x5d\x15\xfc\xda\x6e\xd2\xc8\xfa\xb6\xcb\xb7\xd6\xdc\x15\xa3\xa3\x2e\x91\xa3\x2a\x9f\x28\x32\x7d\xcd\x18\x09\xd9\x0f\xa4\xaa\x6a\xf4\x1b\x3a\x45\xdc\x62\x1c\x91\xbe\x10\xb9\xb6\x49\x16\x31\xec\x34\xa9\x16\x23\xf9\x9c\x7e\xf3\xd9\x3a\x01\xb9\x0c\xe6\x01\x0a\xc8\x11\x64\x51\x75\x91\x6d\x9a\xd4\x16\x9d\x90\x85\xa1\xb5\xe6\x50\x65\x68\x8d\x9d\xcb\xbf\xa3\xeb\x68\x0e\x55\x4d\xd5\x7d\x19\xbe\x82\x66\xb8\x18\x5a\x01\xf9\xa1\x25\x90\xd7\xe2\x09\x01\x60\x7c\xb4\xf5\xee\x64\xe0\x1c\x6f\x75\xb0\xc8\x19\xdc\x7c\xfa\xfc\x69\xf5\x05\xf4\xc1\x9c\x71\xf3\x0b\x36\x74\x79\x29\x38\x82\xd4\xda\x7a\x23\x20\xb4\x5c\x15\x48\xb5\xb6\x2e\x53\x3c\xad\x33\x52\xee\xa2\x1f\x0d\x85\x0e\x79\x87\x24\x37\x7d\xd7\x38\xff\x5e\x1e\xea\xfa\x56\xa8\x36\xb4\xbe\x8e\x61\xa7\x22\x35\x61\x4b\x2b\x87\x29\x09\xa8\x31\x7d\xa0\x18\x43\x04\x39\x63\x23\x1a\x73\x6e\x29\x4e\xd9\x2a\xbb\x9c\x83\xbf\xe5\x2e\xe8\xd4\x95\x8d\xcd\xcc\xc7\xf0\x0c\x9b\xb0\x74\x64\xa0\xf8\xa8\xf5\x69\x50\x8e\xea\x04\x4f\x39\xf2\x9b\x5c\xcb\xfd\xeb\xc8\x91\x12\xf5\xc0\x95\xb3\xd5\xfd\x6b\x93\xf3\x02\xf6\xb5\xca\xfe\xc3\xfb\xc7\x1f\xdf\x7a\xdd\xb7\xb8\xb3\xe7\xf1\x18\x36\x7d\xed\x4d\x30\xe8\x56\x7d\x34\xcf\x9b\x06\x98\x1f\xb9\xfb\x7e\x09\xa3\x6c\x86\x65\xf0\xd8\xd0\x5d\x9f\x6b\xac\x6b\x6b\x0c\xf9\xd3\xe5\x78\x19\x73\xbe\x2c\x2f\x1c\x9e\x96\x07\xa4\x22\xac\xea\x57\xd7\xe6\xad\x79\xdf\x9e\x0f\xf9\x6c\x7b\x5c\x9f\x6a\xa2\x61\xe1\xec\x72\x91\x72\x0c\x7e\xb3\x84\xc9\x93\x37\x97\x02\x72\x02\x8b\xe9\x60\x9a\x8d\x60\xb2\xe5\xff\xce\x2e\x61\x2f\x8b\x66\x98\x79\xd5\x37\xec\x43\xbf\xa4\x52\xd5\xb9\x71\x02\x56\xfd\x9a\xa7\xd1\x61\x1f\xd2\x6c\x51\xc6\xd1\x74\xb9\xe8\xdc\x12\x26\x15\x63\xb0\xc4\x10\x7d\xac\x90\xc5\xf8\x6a\xa0\xed\xa4\xfb\xff\x86\x3a\x83\x19\xf5\xe3\xfe\x9f\x33\x65\xcd\xff\xc1\x13\x3f\xf3\xf6\x79\x87\xef\xf4\x1b\xe4\x9d\x53\x37\x10\xc7\xdd\x52\x6d\x48\x59\xc0\x3b\x28\x18\xb6\x38\x49\xba\xb3\xde\x84\x9d\x72\xa1\x42\xd6\xa8\x48\x2e\xa0\xe9\xa3\x8e\x8d\x7e\x7e\xc5\xfb\x1e\xb7\x98\xd2\x2e\x44\x73\xa7\x9e\xa4\x0f\xa9\x0e\x3b\x90\x2a\x78\x01\x2c\xaa\x32\x1d\x6d\xa3\xda\x1a\x3a\x55\x40\xf1\x9d\xba\xe1\x1d\x4c\x9e\xdf\x3c\x6b\x78\xac\xfe\xd8\xf2\xa1\x06\x39\xb7\x6b\x41\x4f\x87\xa5\x8f\xe2\xdb\xce\x0d\x15\x72\x3e\x08\xa4\xb8\x40\x01\x43\x88\x2c\x9e\x2b\x8a\x2c\xf7\x7b\x39\x7f\xc6\x39\x9f\x03\x90\xea\x27\xcc\xf8\x85\x65\xf1\xe8\xd0\x6f\x3a\xdc\xd0\xec\xb1\x8b\x6e\x06\x53\x83\xa9\x2e\x03\x46\x33\x65\xac\x3e\x20\x4d\xed\xd5\x8f\x5e\xfd\x99\x82\xbf\xe6\xde\x39\xd2\x30\x19\x7a\x99\x6a\x34\x61\xf7\xb9\xd7\xee\x8b\xf2\x57\xdc\x58\x8f\x99\x66\xe3\xab\xa2\xfc\xd9\xaf\x03\x0b\x88\x37\x21\x66\xeb\x37\xb3\xdb\xbb\xc2\x44\xdc\xad\xd0\xb9\x12\xab\xfb\xd9\x8b\xc6\x60\x6b\x0f\x5f\x11\x6c\xad\xe8\x3f\x7a\x49\x63\x6b\x15\x0b\xe2\xb1\xe5\x57\xc2\x70\xff\x61\x2f\x95\x0f\x86\x92\x90\x85\xc3\x94\xb5\xef\x9c\x9b\xb3\x73\x15\x5c\xd7\x78\xf1\xb1\x38\x0f\xe8\xbb\xf3\x72\x16\x63\xd8\x15\xf6\x90\x9f\x27\x4f\x5f\xb0\x66\xf0\x85\x4d\x0c\x5d\x0b\x72\xce\x29\xc6\x5a\xfb\xfe\xd3\xc6\xbf\x03\x35\x97\x97\xbd\x7b\x92\x8a\xfe\x12\x56\xaa\x92\xd6\x21\x92\x78\xbf\xc8\x71\x54\xf1\xe1\xd6\x03\xc4\x72\x91\xcd\xa8\x0a\x2e\xb5\xe8\x35\xfc\x00\xcb\xf7\x13\x86\xe1\x9d\xcf\x66\xb9\x98\xe6\xc8\x8b\x7f\xa8\x04\x1b\xda\x33\x75\x7b\x39\xff\x3b\x00\x00\xff\xff\x3e\x40\x31\xc0\x75\x08\x00\x00"

func assetsJsManagerMinJsBytes() ([]byte, error) {
	return bindataRead(
		_assetsJsManagerMinJs,
		"assets/js/manager.min.js",
	)
}

func assetsJsManagerMinJs() (*asset, error) {
	bytes, err := assetsJsManagerMinJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/js/manager.min.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesConfigMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\x4f\x6b\xd4\x40\x18\xc6\x9f\xae\xf5\x12\x50\x50\x2f\x0a\x82\xaf\x07\xab\x22\x53\x27\x59\x0b\x65\x76\xb3\x55\xb7\x2d\x88\x5d\x2c\x25\x7a\xf2\x32\xee\x4e\xb3\xc1\xcd\x4c\x9c\x24\x45\xa1\xa0\xa8\x78\x15\x0f\x5e\x3c\x79\xf1\x5e\xf1\xdf\xe2\x9f\x7e\x86\xc9\x17\xf0\xb3\x48\xb2\x6a\xf5\x3d\x0c\xcf\xf3\x3e\xcf\xfc\x78\x7f\x1e\x9f\x7f\x0d\x00\xf3\x00\x4e\x03\xe8\x02\x38\x0c\xe0\x2e\x66\x93\x01\x38\x02\xe0\x01\x80\x63\x00\x1e\x03\x38\x01\xe0\x15\x80\xf1\x1c\xf0\x0e\xc0\x49\x00\x47\x5b\xc0\x29\x00\xe7\x5b\xc0\x19\x00\xd7\x5a\xc0\xdc\x6f\x6e\x3d\x2d\x00\x87\x6a\xd1\x37\x7a\x3b\x89\x4b\x2b\x8b\xc4\x68\x0c\x1b\x37\xbf\xaa\xee\x95\x31\xa5\x66\xa4\x0e\x36\x3b\x6a\x62\xb2\xd9\x6e\x4b\x65\xc6\x16\x6c\x90\xc7\xc9\x88\x5d\x2f\xe3\x9c\x45\x46\xd0\x48\xed\x5c\xbd\x9f\x8c\x65\x6a\x16\x6d\xe9\x6d\xde\x8a\x58\xdf\xaa\x06\xcb\x56\x65\xa1\x04\x05\xdc\x5f\x66\xbc\xcd\x82\x36\x05\x6d\xb1\xb4\x74\x89\xb7\x39\xf7\x36\x64\x5e\xb0\xc8\x4a\x9d\x4f\x64\x61\xac\xa0\x9b\x0d\x83\x06\xa5\x95\xa9\x19\x19\xea\xfe\x07\xee\x79\x1b\x52\xc7\xa5\x8c\x15\x8b\x94\x4c\x05\xfd\xf5\x82\xb6\xca\x3c\x4f\xa4\xf6\x06\x37\x06\x6b\xec\x8e\xb2\x79\x62\xb4\x20\x7f\x91\x7b\x7d\xa3\x0b\xa5\x0b\x16\x3d\xca\x94\xa0\x42\x3d\x2c\x2e\x67\x13\x99\xe8\x0e\x0d\xc7\xd2\xe6\xaa\x08\x6f\x47\xeb\x6c\xf9\xa0\x57\xdf\xb3\xad\x2c\x5b\xd3\x43\x33\x4a\x74\x2c\xc8\xdb\x9c\x94\x56\x4e\xd8\xba\xb1\x69\x2e\x48\x67\x8d\xcd\xc3\x76\x87\x66\x32\xd4\xe7\x7c\x1e\x86\x3e\x2d\x2c\x50\x2d\xf9\xd9\xd0\xf7\x69\x85\x38\x89\xc6\xf7\xc2\xe0\x4f\xd4\x0d\xaf\xd4\xf2\x42\x53\xeb\xfa\x9c\x76\x77\x67\x5f\x7a\x61\xc0\x2f\xd2\x0a\xf9\x24\x28\xe8\xc0\xbd\x71\xfb\xee\x47\xf5\xdc\x4d\xdd\x87\xea\x59\xf5\xc4\xed\x55\x2f\xdc\xb4\x7a\x09\xf7\xd6\x7d\x72\x9f\xdd\xd4\x7d\x27\xb7\x5f\x3d\x75\xdf\xdc\x9e\xfb\xe8\xbe\xba\xe9\xbf\x49\xdd\x77\x5f\x9a\xf7\x7d\xd3\xaa\xf3\x5f\x01\x00\x00\xff\xff\xa7\x17\xf2\x1f\x61\x02\x00\x00"

func localesRuLc_messagesConfigMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesConfigMo,
		"locales/ru/LC_MESSAGES/config.mo",
	)
}

func localesRuLc_messagesConfigMo() (*asset, error) {
	bytes, err := localesRuLc_messagesConfigMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/config.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesManageMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x4f\x4b\x6f\x1b\x55\x14\xfe\xa6\x2e\x2f\x97\x67\x85\x84\x84\x58\x9c\x0a\x11\x81\xd0\x94\x19\x9b\x4a\xd1\x24\x13\x53\x92\x14\x10\x0d\x54\xc1\x94\x2d\x57\xf6\x8d\x33\x62\x3c\x63\xdd\x3b\x13\x88\x14\x89\x38\x2e\x54\x60\x44\x11\x0f\x75\x05\xa8\x3b\x96\xa6\xc4\x74\x68\x6b\x77\xcf\xea\xdc\x35\x88\x9f\xc0\x2f\x40\x02\xcd\xa3\x0f\xee\xe2\x9e\xf3\x7d\xe7\x3b\xe7\x7c\xe7\xaf\xe3\x47\xbf\x03\x80\x87\x01\x3c\x03\x60\x0f\xc0\x13\x00\xfe\x44\xf9\xc8\x02\x1e\x03\x70\xc2\x02\x1e\x01\xe0\x5a\xc0\x7d\x00\x5a\x16\xf0\x34\x80\x75\x0b\x78\x00\xc0\xfb\x16\x70\x0c\xc0\xb6\x05\x1c\x05\x90\x54\xba\xdd\x0a\x7f\x5c\xe1\x0b\x16\xf0\x20\x80\xcf\xad\x52\xfb\x8d\x05\x2c\x00\xf8\xe7\x08\xf0\x24\x80\x67\x6b\xc0\xa3\x00\x16\x6b\xc0\xeb\x00\x5e\xab\x01\x4f\x01\xf8\xaa\x06\x3c\x0e\xe0\xa7\x2a\xfe\x56\xc5\xdf\x6b\xc0\x71\x00\x7f\x54\xf8\xef\x2a\xfe\x5b\x03\x2c\x94\xde\x6e\xbf\x7c\x7f\xad\xca\x8f\x55\xf1\xa1\xea\xf6\xdc\xd3\xfd\x28\xbd\xd6\xab\xda\x91\xfc\x3b\x1d\x86\xf1\x87\xb2\x4b\x3b\x22\x4c\xa5\xf6\x70\x5a\x49\xda\x8d\x53\xd2\xa9\x92\x2d\xac\x86\xb1\x96\x58\x8d\xa3\xad\x40\xf5\x49\x8b\x1d\x49\x9d\x1c\xf4\x52\x25\x92\x20\x8e\xb0\x26\xb7\x44\x1a\x26\x58\x93\xba\xa3\x82\x41\xc1\xbd\x25\xfa\x12\x9b\x52\xcb\x04\xef\x88\x1d\x89\xf3\xf9\x68\xbc\x27\x92\xce\xb6\x54\x1a\x9b\x72\x10\xab\xc4\xde\xd0\xbd\xa0\x6b\xbf\x9a\xf6\xb4\xdd\x8e\x3d\xea\xca\x9d\x57\x3e\x08\xb6\x45\x3f\x3e\xa9\xd2\xfa\xb9\xb7\xdb\xf6\xaa\x92\xc5\x0e\x7b\x4d\x24\xd2\xa3\x86\xe3\x2e\xda\x4e\xd3\x6e\x34\xa9\xd1\xf4\x4e\x9d\x7a\xd1\x69\x3a\x4e\xfd\xac\xd0\x89\xdd\x56\x22\xd2\xa1\x48\x62\xe5\xd1\x9b\xc5\x0c\xda\x48\x95\xe8\xc7\xdd\x98\x96\xff\x37\x78\xa5\x7e\x56\x44\xbd\x54\xf4\xa4\xdd\x96\xa2\xef\xd1\x1d\xec\xd1\x66\xaa\x75\x20\xa2\xfa\xc6\x1b\x1b\xeb\xf6\x79\xa9\x74\x10\x47\x1e\xb9\x27\x9d\xfa\x6a\x1c\x25\x32\x4a\xec\xf6\xee\x40\x7a\x94\xc8\x8f\x92\x97\x06\xa1\x08\xa2\x25\xea\x6c\x0b\xa5\x65\xe2\xbf\xdb\x3e\x63\x2f\xde\xd5\xe5\x7e\xb6\xa4\xb2\xd7\xa3\x4e\xdc\x0d\xa2\x9e\x47\xf5\x73\x61\xaa\x44\x68\x9f\x89\x55\x5f\x7b\x14\x0d\x0a\xa8\xfd\xe6\x12\x95\xa9\x1f\x3d\xe7\x3a\xbe\xef\xd2\xc2\x02\xe5\xa9\x73\xc2\x77\x5d\x6a\x91\x43\x5e\x81\x57\xfc\xc6\xed\xd2\xb2\xff\x72\x9e\x3e\x5f\xc8\x96\x5d\x87\xf6\xf6\xca\x96\x15\xbf\xe1\xbc\x40\x2d\x72\xc9\xa3\xc6\x12\xf8\x5b\x9e\xf3\x2d\x33\x32\x43\x73\xc0\x19\xdf\x34\x63\x9e\x12\x5f\xe3\x19\x4f\xcc\x45\x9e\xf2\x8c\x33\x73\xc9\x03\x7f\x6d\xc6\x64\x46\x7c\x95\xa7\x66\x3f\xa7\xcd\xb8\x05\xbe\xcc\x13\xbe\x6e\xf6\xcd\xd8\x1c\x98\x2f\xc0\x3f\xf2\x9c\x0f\xcd\x41\x25\xfa\x95\x0f\xcb\x7e\x9e\x92\x19\xf2\xdc\x7c\x62\xf6\x79\xc2\xb3\x3b\x24\x5f\xe7\x39\xcf\xcc\x05\xce\xf8\x17\x33\xca\x8b\xe6\x53\xce\x38\x2b\x06\xd9\x66\xc4\x37\x79\xce\x37\xcc\xc5\xa2\x29\x33\x5f\x82\x7f\xe0\x5b\x9c\x99\x61\x49\xf0\x14\xfc\x3d\x4f\xf8\x1a\x5f\xbd\x4b\x5c\xe1\x9f\xcd\x3e\xcf\xcd\x90\xb3\xd2\xd3\x95\x7b\x16\x57\xd4\xe5\x7b\x8f\x2b\x9b\x6e\xf0\x94\x0f\xcd\x25\xf3\x59\x41\xfc\x17\x00\x00\xff\xff\x0b\x24\x32\x8e\x10\x04\x00\x00"

func localesRuLc_messagesManageMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesManageMo,
		"locales/ru/LC_MESSAGES/manage.mo",
	)
}

func localesRuLc_messagesManageMo() (*asset, error) {
	bytes, err := localesRuLc_messagesManageMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/manage.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/manager.html": templatesViewsManagerHtml,
	"assets/js/manager.min.js": assetsJsManagerMinJs,
	"locales/ru/LC_MESSAGES/config.mo": localesRuLc_messagesConfigMo,
	"locales/ru/LC_MESSAGES/manage.mo": localesRuLc_messagesManageMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"js": &bintree{nil, map[string]*bintree{
			"manager.min.js": &bintree{assetsJsManagerMinJs, map[string]*bintree{}},
		}},
	}},
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"config.mo": &bintree{localesRuLc_messagesConfigMo, map[string]*bintree{}},
				"manage.mo": &bintree{localesRuLc_messagesManageMo, map[string]*bintree{}},
			}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"manager.html": &bintree{templatesViewsManagerHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
