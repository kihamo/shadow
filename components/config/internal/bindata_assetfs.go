// Code generated by go-bindata.
// sources:
// templates/views/manager.html
// assets/js/manager.min.js
// locales/ru/LC_MESSAGES/config.mo
// locales/ru/LC_MESSAGES/manage.mo
// DO NOT EDIT!

package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsManagerHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x5a\x5f\x93\xdb\xb6\x11\x7f\xf7\xa7\xd8\x41\xae\x19\x29\x36\x45\xdb\x75\x33\x6d\x22\x9d\x27\x93\x76\xe2\x4e\xdd\x76\x26\x71\xdc\x07\xd7\xbd\x01\x85\x95\x84\x2b\x05\x28\x00\x28\xdd\x45\xa3\xef\xde\x01\xc0\xff\x22\x25\x8a\x3a\x9d\xeb\xdc\x83\x4d\x11\xe0\xee\xe2\xb7\xff\x80\xc5\x6e\xb7\xc0\x70\xc6\x05\x02\x99\x4a\x61\x50\x18\x02\xbb\xdd\x93\x31\xe3\x6b\x98\xc6\x54\xeb\x09\x51\x72\x43\xae\x9f\x00\x00\x94\xdf\xde\xdd\xac\xa8\xc0\x38\x1d\xd9\x1f\x35\xdc\xc4\x58\x1a\x75\x33\x16\x2f\xaf\xb7\x5b\xe0\x2f\xfe\x28\x80\x7c\x2f\xc5\x8c\xcf\x13\x45\x0d\x97\x82\xc0\x08\x76\xbb\x71\xb8\x78\x59\xfb\xa2\x44\x73\x1a\x23\x55\x33\x7e\x47\xae\xc7\x21\xe3\xeb\x12\xe3\xda\xcf\x8a\x1c\xd9\xaa\x6a\x74\x67\x52\x2d\x41\xc9\x18\x27\xc4\x3e\x12\xa0\x53\x2b\xc7\x84\x7c\x41\x60\x89\x66\x21\xd9\x84\xac\xa4\x36\x04\x38\x9b\x58\x68\x66\x7c\xae\x09\x30\x6a\x68\x60\xe4\x7c\x6e\x3f\x5c\xd3\x98\x33\x6a\xa4\xaa\x11\xcf\x85\xf0\xf4\x0d\x8d\xea\x50\x55\x66\x26\x71\x26\xad\xa0\x6b\x10\x74\x1d\x18\x1a\x69\x88\xa8\xba\xb1\x0f\xa4\x20\x13\x73\x5d\x5f\x48\xf9\x6f\xbb\x05\x45\xc5\x1c\xe1\x4a\xd0\x25\x3e\x83\xab\x35\x55\x1a\xbe\x99\xc0\x68\x4d\x15\xa7\x51\x8c\xda\xea\xb6\xed\xf3\x71\xcc\x53\x56\x2b\x85\x1a\x85\x49\x35\x63\x35\x36\x03\xfc\xc5\x93\x85\x14\x0c\x6b\x26\x99\xdc\x16\xbb\x35\x92\xed\x16\x50\x30\xd8\xed\xda\x45\x74\x7c\x28\x2c\x14\xce\x26\xe4\x8b\xed\x36\xa5\xb9\xdb\x11\xb0\x22\x06\x56\x5b\x4a\xc6\x7a\x42\x2a\x63\x39\x02\x35\x0d\xb8\x37\xee\x43\xbc\x5b\x51\xc1\x90\xb9\x0f\x5b\xc4\x35\x2a\x41\x2b\x63\xac\x2d\xd5\x19\x8d\x35\xe6\x22\x1f\x80\xb5\x04\xaf\xb3\x5c\x4f\xf7\x2a\xa3\x1c\x38\x21\x32\x59\x0f\xaf\x3c\xa4\xed\x6c\xc6\x61\xcc\x0f\xea\xd6\x0b\xda\x6c\x43\x61\x12\x5f\x3f\x69\x1e\x2a\x79\x83\xa1\x51\xd0\xec\x0f\x35\x56\x67\x99\x51\x83\xe5\x97\x05\xb0\x6f\x0e\x98\x94\xb7\x25\xe0\xa2\x50\x8d\x73\xc1\xb2\x3d\x1c\xb1\xaf\xea\x8a\x63\x0c\x14\xea\x95\x14\xda\xda\xe8\x71\x35\x8f\xdd\x37\x15\x02\xe0\xc9\x2c\xe4\x1a\x9b\x7c\xbd\x99\xca\x02\x29\xeb\x3a\x57\x75\x9b\x98\x12\x86\x0d\x67\x66\x31\x21\x2f\x9f\xff\x8e\x14\xf1\xf4\x1f\x74\x89\x04\xae\x5c\x18\x35\x8b\x7e\x04\xff\x50\x26\xf8\x9e\xc6\xc9\xb9\x14\x5f\x54\x28\xfe\x19\x67\x34\x89\xcd\xb9\x34\x2b\xcb\xfe\x17\x35\xd3\x05\x2a\xdd\x93\x68\x59\x38\x3d\x55\x7c\xe5\x63\xde\x69\xb4\xc6\x61\x57\x0d\x5a\x9a\x27\xd8\x45\x24\xd9\x7d\xb7\xb9\x85\xd3\xf2\x67\x70\xe5\xfd\xc9\xfa\xac\x77\xde\x23\x71\xa9\x44\xc4\xce\xff\x2b\xb3\x5f\x2a\x5c\xc5\x74\x8a\x19\xb1\xd1\xfb\xd4\xf9\x47\x7f\xc3\x7b\x20\x23\x02\xe4\x86\x74\x25\x7c\xa2\x85\x77\xc4\xa7\x24\x36\x9f\xed\xcb\xf9\x17\xc6\xbd\xf7\x76\x14\x32\xe7\x1f\xd3\x08\xf3\x9c\x9c\x66\xa4\xc0\xbd\x24\x30\x93\xca\xc7\x22\x8f\x93\x8d\x4e\x2e\x23\xcd\x95\x4c\x56\x3e\xf9\xb8\x1c\x51\x17\xe6\x07\x3b\x5e\x24\x0d\x52\x0a\x66\x96\x5a\x13\xc6\xd6\x02\x1d\xd7\x93\xd1\x48\x33\xdc\xc3\xad\xfa\xff\x70\x89\xed\xc9\xb0\x71\x75\xe1\x29\x46\xf5\xc9\x2d\xb0\x94\xc1\xec\xee\xd4\x43\xdf\x31\xf3\xb4\xcb\xf5\x86\xea\xf7\x1c\x37\x40\x50\x24\xcb\xce\xbe\x5b\x11\x4c\x63\x8c\x53\x53\x91\x2d\x35\x15\xf0\x43\x2f\x09\x58\xad\x7b\x1f\x69\x56\x79\x91\xcf\x73\x1f\x3a\x7d\x65\x50\x89\x79\xf2\x19\x5c\x49\x17\xba\x6d\xe4\x1a\x64\x8c\x7f\x40\x63\x17\xfc\x4f\x3f\x42\xfc\x0c\x4d\x86\x7d\x96\xee\x96\x9f\xf2\x58\xdb\xcc\xe8\x3d\x41\x30\xbc\xcb\x79\x3f\xb7\x6b\xc9\xf7\x36\x83\xda\xe0\x70\x1f\x10\x97\x62\xed\xae\xc7\x83\x67\xb7\xaf\xd9\x53\x69\x37\x9d\x79\x5c\x8d\xe0\x8b\x61\x93\xb3\x8d\x43\x3f\xdc\x1b\xd2\x13\x3d\x2b\xc7\x26\xf4\x92\xf7\x32\x52\x17\xb0\x9a\x2c\xd5\xe0\x9d\xa1\x0a\x69\x3f\x6b\xcd\xbe\x6e\xb4\x57\x85\x9a\xff\x6a\xb5\x70\x53\x30\x51\x72\xa3\x27\xe4\x55\x3f\x1b\x6e\x9a\x9d\x29\x78\x1c\x66\x4c\xce\xc2\xc7\xee\x98\xeb\x2c\xde\xdd\xaf\x10\x48\x24\x65\xdc\x0f\x24\x2e\x56\x89\x01\x73\xbf\xc2\x09\x99\x2e\x70\xfa\xdf\x48\xde\xe5\x1b\xf6\x5b\x1d\xe8\x0d\x37\xd3\x45\x2f\x48\x8a\xa3\xe3\x60\xa5\xb8\x30\x2d\xf8\x0c\x81\xd8\xa3\x99\x3f\x51\x5a\x09\x90\xe5\x76\x08\xe1\x59\x80\x49\x05\x83\x76\xd0\xb8\x30\x64\x78\x64\xc2\xd7\xaf\xfa\xc5\x8b\x0a\xae\x22\x59\x46\xa8\x48\x93\x1d\x76\x01\xb6\x88\x37\xad\x06\xd6\x84\xfe\x8a\x1a\x83\x4a\x4c\xc8\x7f\x3e\x04\x4f\x3f\xbe\xfe\xf0\x3c\xf8\xd3\xc7\xaf\xae\xc8\x25\x11\x4d\x8e\x42\x9a\xfc\x66\x30\x7d\x30\x48\xdb\xc1\x9a\xc5\x92\x5a\xb4\x3e\x7f\xb0\x0a\x03\x1c\xfc\x7b\xe4\x1f\x86\xaf\x2f\x07\x1c\xcb\xeb\x8a\xe7\x22\x67\xe3\xf6\x27\xc6\x6d\xb0\x07\xdc\x07\x1a\xfc\xfa\xf1\xe9\xf0\xe9\xb9\x00\xee\xe5\xdb\x15\xd5\x7a\x23\x15\x3b\x1f\xb7\x82\x52\x53\xf2\xcd\x46\x03\xbd\x90\x9b\xcb\x21\xf9\xc0\xe8\x18\x3a\xd7\xbd\x90\xb1\x42\x31\x5f\xfc\x78\x87\x77\xc6\x1d\xcc\x9b\xf7\xa8\xe9\xac\xc0\x9b\xdd\xc5\x8c\x17\xfc\x52\x2e\x85\x7b\xdf\xbd\xa7\x05\xbd\x8c\xd3\x6e\xe7\x4e\x9e\x65\x50\x4a\x07\xd0\xf2\xcc\xa6\x63\x67\xbe\x89\x38\xc3\x0c\x3e\xc3\xf0\xd1\x73\xb5\xa7\x6f\xfb\x6b\xf7\x2e\x5d\x19\xf5\x29\x4e\xe8\x15\x15\x47\x36\xd8\x6e\xca\xe7\x5d\x46\x70\xcb\xdc\x53\xe8\xcd\xda\x17\x62\x9d\x2b\x1c\x30\x89\xb4\xba\xda\xef\x3c\xdd\x52\x29\x38\x2b\x1f\x7c\xe5\xfe\x1e\xd3\xf5\x20\x5f\x09\x15\xec\x40\x3d\x66\x60\x87\x07\xcd\x75\x91\x61\x31\x50\x87\x76\xd8\xbb\x72\x00\x9f\xa2\x5c\x51\x45\xa4\x5b\x45\xa2\x30\xa2\xb3\x58\x42\xe9\xbe\xac\x53\xd9\xe2\xdc\x05\xf6\xac\x5a\x3c\x0c\x85\x33\x2d\x36\x25\xf1\xd0\xba\xe8\xbf\xa6\xbe\xe9\xe0\xb4\x10\xfc\xa8\x35\xd9\xec\x9a\xa8\x5f\xe6\xe9\x83\x60\xea\xeb\x9b\x67\x70\xb5\xf1\xcc\xcb\xdb\xbe\xbe\xf2\xe4\x32\x65\x7b\x0a\x5f\xb6\x77\xff\x66\xfb\x24\x5f\x8a\x4a\x99\x8e\x7e\x92\x89\x9a\xf6\x4d\x91\xf0\x68\xd6\xd0\x8f\xd3\x63\x24\xe4\xeb\xd6\x1b\x8f\x9f\x35\x9d\xe3\xd9\xd1\xac\x48\x58\x03\xd1\x70\xdd\x96\x27\x2d\xa3\x12\x1c\xb6\x67\xad\x3e\x86\x14\x29\x08\x8b\x1b\xd0\xef\xe2\x58\x6e\x90\xf9\x6d\xa7\xfe\xc6\xdf\x82\x9e\x4e\x34\x39\xf1\x36\x07\x3e\x45\x6e\x3c\x90\x13\xf7\xf3\x55\xdf\xeb\x82\x98\x5f\x37\xde\x11\x1c\x6e\xf5\x38\x22\xf6\x39\x99\xa6\x55\x22\xf8\x72\xc9\xa8\x5e\x7c\x7b\x5a\xd2\x3e\x6f\x1d\x8f\x99\x9b\x20\x6f\x92\xb9\x3c\xaf\xcb\xe5\xc1\xee\x7d\x06\xa7\x49\x3e\x0e\x3b\x76\x1a\x8c\x43\x17\x8a\x8e\xf4\xdf\x1c\x3e\x16\x1e\x19\x3e\xd6\xe8\xd4\xf8\x71\xfa\xba\xb9\x0b\x2f\x4b\x94\xe2\x46\xcb\x98\xb3\xbd\xf6\xc1\xa6\xc9\x47\x6f\x5d\x2b\x8d\x89\x32\x0e\x96\x2c\xf8\x1a\xd2\x07\x39\x9b\x69\x34\xc1\xef\x0f\x1c\xc3\xc6\x51\x62\x8c\x14\x69\x91\x40\xa1\xc6\xa2\x4a\x10\x19\x01\x91\x11\x01\x17\x33\x99\xd7\x00\xfc\x94\x22\x56\xff\xe8\x3f\xf1\x5d\x93\x9e\x58\x57\x6e\x3a\x89\x96\x7c\x9f\x9d\x4e\xa6\x53\xd4\x3a\xe7\xa8\xe9\xda\x1e\x3a\xb9\xb6\x1a\x67\x13\x92\x3d\x95\x84\xf8\xc9\x4d\x39\x2e\xc3\x61\xad\x55\x5f\x59\xe4\x1b\x5b\x3b\xd3\xc7\xec\xbf\x12\xfe\x4b\xc9\x68\x0c\x33\xca\xd0\x57\x43\xdc\xef\xef\xd3\x58\x65\x68\xe4\x42\xd9\x84\x04\x2f\xb2\x46\x42\xc6\x69\x2c\xe7\x69\xe7\xa0\xdb\x3a\xc5\xc8\xa2\xfb\xca\x97\x6f\x5d\xe7\x83\x17\xc4\xcd\x5b\x70\xc6\x50\x4c\xfc\x55\xd5\x7e\x3f\xac\xfb\x34\x48\x29\x37\x37\xa3\xfa\x29\x2d\x0d\xa9\x7b\xf3\x16\x48\x59\x63\xbb\x59\x55\x9b\xfe\x07\x29\x9a\x64\xa5\xce\x6a\x05\x8c\xeb\x25\xcf\x09\x92\xa6\x65\x7c\x69\xf8\x12\xf5\xb7\xed\xea\x1b\x2f\x5e\x55\xc5\xf2\x7d\xbd\x75\x9c\x3d\x5a\xb5\xe6\x5e\xb5\x04\x6b\x44\x30\x6d\xec\xf4\x7d\x55\xd7\xfc\xbe\x31\xec\x61\x62\xa3\x54\x89\xcb\x77\x0a\xe1\x5e\x26\xa0\x13\x85\xaf\x33\xc2\x1d\xc8\xcc\xa4\x34\xa7\x43\x9b\x39\x4a\xb6\xcb\x6e\x04\xb9\x04\x81\xd7\xc4\x61\xef\xe8\xe4\x99\xcc\xee\x8c\xd4\x31\x7e\xc7\x9c\xb1\xbd\x69\xba\xea\x59\x45\x00\x7e\x52\x6a\x0e\xb7\xd6\x98\x17\x81\xb6\x5b\xd0\x86\x1a\x3e\x7d\xf3\xee\xef\x6f\x61\xe0\x9f\x7f\xfe\xf1\x2d\x90\xd0\xee\x22\x22\x49\x15\x0b\xa9\xd6\x68\x74\xb8\x46\xc1\xa4\xd2\xa1\x15\xde\x25\x0f\x3d\x12\x68\x82\x48\x87\x53\xed\xdf\xbe\xf3\x6f\x23\x29\x8d\x36\x8a\xae\x46\x4b\x2e\x46\x53\x1b\x89\x5c\x8b\xee\xf0\x01\xb9\xce\xf8\x1d\x32\xef\x58\x99\x04\xee\xd5\x1b\xf7\xea\xb0\x08\xcd\xb8\xdc\xea\x07\x44\x25\xbc\xd5\xe1\xed\x2f\x09\xaa\xfb\x51\x09\x18\x2b\xcb\xed\x25\xd0\x88\xb4\x65\xd8\xaa\x82\x8b\xf0\x2c\x69\xa0\xc6\xbc\xac\x88\x93\xd9\xfb\x10\x93\xf1\xbe\xd5\xe1\x92\x0a\x3a\x47\xe5\xa8\xf8\x83\x53\x59\x85\xff\x0b\x00\x00\xff\xff\x2d\x86\x9f\xfb\xf6\x30\x00\x00"

func templatesViewsManagerHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsManagerHtml,
		"templates/views/manager.html",
	)
}

func templatesViewsManagerHtml() (*asset, error) {
	bytes, err := templatesViewsManagerHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/manager.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsJsManagerMinJs = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x55\xcd\x6e\x23\x37\x0c\x7e\x15\x9b\x1b\x64\x25\x78\x56\xde\x1c\x0a\x14\xb6\xe5\x1c\xdc\x3d\x14\x58\x14\x05\xb2\xed\x25\x08\x0a\xce\x88\xf6\xa8\xd1\x48\x53\x49\x63\x6f\x10\xf8\xdd\x0b\x8e\x27\x5e\x27\xde\x04\x6d\x2f\xbd\x18\x34\x7f\x3e\x8a\xfc\x48\xce\x85\x30\xa1\xea\x1a\xf2\x59\xaa\x48\x68\x1e\xc4\xba\xf3\x55\xb6\xc1\x0b\xf9\x78\x21\xe0\x5d\x15\xfc\xda\x6e\xd2\xc8\xfa\xb6\xcb\xb7\xd6\xdc\x15\xa3\xa3\x2e\x91\xa3\x2a\x9f\x28\x32\x7d\xcd\x18\x09\xd9\x0f\xa4\xaa\x6a\xf4\x1b\x3a\x45\xdc\x62\x1c\x91\xbe\x10\xb9\xb6\x49\x16\x31\xec\x34\xa9\x16\x23\xf9\x9c\x7e\xf3\xd9\x3a\x01\xb9\x0c\xe6\x01\x0a\xc8\x11\x64\x51\x75\x91\x6d\x9a\xd4\x16\x9d\x90\x85\xa1\xb5\xe6\x50\x65\x68\x8d\x9d\xcb\xbf\xa3\xeb\x68\x0e\x55\x4d\xd5\x7d\x19\xbe\x82\x66\xb8\x18\x5a\x01\xf9\xa1\x25\x90\xd7\xe2\x09\x01\x60\x7c\xb4\xf5\xee\x64\xe0\x1c\x6f\x75\xb0\xc8\x19\xdc\x7c\xfa\xfc\x69\xf5\x05\xf4\xc1\x9c\x71\xf3\x0b\x36\x74\x79\x29\x38\x82\xd4\xda\x7a\x23\x20\xb4\x5c\x15\x48\xb5\xb6\x2e\x53\x3c\xad\x33\x52\xee\xa2\x1f\x0d\x85\x0e\x79\x87\x24\x37\x7d\xd7\x38\xff\x5e\x1e\xea\xfa\x56\xa8\x36\xb4\xbe\x8e\x61\xa7\x22\x35\x61\x4b\x2b\x87\x29\x09\xa8\x31\x7d\xa0\x18\x43\x04\x39\x63\x23\x1a\x73\x6e\x29\x4e\xd9\x2a\xbb\x9c\x83\xbf\xe5\x2e\xe8\xd4\x95\x8d\xcd\xcc\xc7\xf0\x0c\x9b\xb0\x74\x64\xa0\xf8\xa8\xf5\x69\x50\x8e\xea\x04\x4f\x39\xf2\x9b\x5c\xcb\xfd\xeb\xc8\x91\x12\xf5\xc0\x95\xb3\xd5\xfd\x6b\x93\xf3\x02\xf6\xb5\xca\xfe\xc3\xfb\xc7\x1f\xdf\x7a\xdd\xb7\xb8\xb3\xe7\xf1\x18\x36\x7d\xed\x4d\x30\xe8\x56\x7d\x34\xcf\x9b\x06\x98\x1f\xb9\xfb\x7e\x09\xa3\x6c\x86\x65\xf0\xd8\xd0\x5d\x9f\x6b\xac\x6b\x6b\x0c\xf9\xd3\xe5\x78\x19\x73\xbe\x2c\x2f\x1c\x9e\x96\x07\xa4\x22\xac\xea\x57\xd7\xe6\xad\x79\xdf\x9e\x0f\xf9\x6c\x7b\x5c\x9f\x6a\xa2\x61\xe1\xec\x72\x91\x72\x0c\x7e\xb3\x84\xc9\x93\x37\x97\x02\x72\x02\x8b\xe9\x60\x9a\x8d\x60\xb2\xe5\xff\xce\x2e\x61\x2f\x8b\x66\x98\x79\xd5\x37\xec\x43\xbf\xa4\x52\xd5\xb9\x71\x02\x56\xfd\x9a\xa7\xd1\x61\x1f\xd2\x6c\x51\xc6\xd1\x74\xb9\xe8\xdc\x12\x26\x15\x63\xb0\xc4\x10\x7d\xac\x90\xc5\xf8\x6a\xa0\xed\xa4\xfb\xff\x86\x3a\x83\x19\xf5\xe3\xfe\x9f\x33\x65\xcd\xff\xc1\x13\x3f\xf3\xf6\x79\x87\xef\xf4\x1b\xe4\x9d\x53\x37\x10\xc7\xdd\x52\x6d\x48\x59\xc0\x3b\x28\x18\xb6\x38\x49\xba\xb3\xde\x84\x9d\x72\xa1\x42\xd6\xa8\x48\x2e\xa0\xe9\xa3\x8e\x8d\x7e\x7e\xc5\xfb\x1e\xb7\x98\xd2\x2e\x44\x73\xa7\x9e\xa4\x0f\xa9\x0e\x3b\x90\x2a\x78\x01\x2c\xaa\x32\x1d\x6d\xa3\xda\x1a\x3a\x55\x40\xf1\x9d\xba\xe1\x1d\x4c\x9e\xdf\x3c\x6b\x78\xac\xfe\xd8\xf2\xa1\x06\x39\xb7\x6b\x41\x4f\x87\xa5\x8f\xe2\xdb\xce\x0d\x15\x72\x3e\x08\xa4\xb8\x40\x01\x43\x88\x2c\x9e\x2b\x8a\x2c\xf7\x7b\x39\x7f\xc6\x39\x9f\x03\x90\xea\x27\xcc\xf8\x85\x65\xf1\xe8\xd0\x6f\x3a\xdc\xd0\xec\xb1\x8b\x6e\x06\x53\x83\xa9\x2e\x03\x46\x33\x65\xac\x3e\x20\x4d\xed\xd5\x8f\x5e\xfd\x99\x82\xbf\xe6\xde\x39\xd2\x30\x19\x7a\x99\x6a\x34\x61\xf7\xb9\xd7\xee\x8b\xf2\x57\xdc\x58\x8f\x99\x66\xe3\xab\xa2\xfc\xd9\xaf\x03\x0b\x88\x37\x21\x66\xeb\x37\xb3\xdb\xbb\xc2\x44\xdc\xad\xd0\xb9\x12\xab\xfb\xd9\x8b\xc6\x60\x6b\x0f\x5f\x11\x6c\xad\xe8\x3f\x7a\x49\x63\x6b\x15\x0b\xe2\xb1\xe5\x57\xc2\x70\xff\x61\x2f\x95\x0f\x86\x92\x90\x85\xc3\x94\xb5\xef\x9c\x9b\xb3\x73\x15\x5c\xd7\x78\xf1\xb1\x38\x0f\xe8\xbb\xf3\x72\x16\x63\xd8\x15\xf6\x90\x9f\x27\x4f\x5f\xb0\x66\xf0\x85\x4d\x0c\x5d\x0b\x72\xce\x29\xc6\x5a\xfb\xfe\xd3\xc6\xbf\x03\x35\x97\x97\xbd\x7b\x92\x8a\xfe\x12\x56\xaa\x92\xd6\x21\x92\x78\xbf\xc8\x71\x54\xf1\xe1\xd6\x03\xc4\x72\x91\xcd\xa8\x0a\x2e\xb5\xe8\x35\xfc\x00\xcb\xf7\x13\x86\xe1\x9d\xcf\x66\xb9\x98\xe6\xc8\x8b\x7f\xa8\x04\x1b\xda\x33\x75\x7b\x39\xff\x3b\x00\x00\xff\xff\x3e\x40\x31\xc0\x75\x08\x00\x00"

func assetsJsManagerMinJsBytes() ([]byte, error) {
	return bindataRead(
		_assetsJsManagerMinJs,
		"assets/js/manager.min.js",
	)
}

func assetsJsManagerMinJs() (*asset, error) {
	bytes, err := assetsJsManagerMinJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/js/manager.min.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesConfigMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x4e\x4d\x6b\x13\x41\x18\x7e\x1a\x23\xc2\x82\x07\xf5\xa2\x20\xf8\x7a\xb0\x28\x32\x75\x77\x63\xa1\x4c\xbb\xa9\x98\xb4\x20\x36\x58\xcb\xea\x7d\x9a\x4c\x37\x4b\x37\x33\x61\x76\xb6\x28\xf4\x20\x2a\xa2\x78\xf0\x24\x82\x27\xaf\xde\x2a\x7e\x05\xb5\xfd\x0b\xce\xfe\x01\x7f\x8b\x64\x53\x6d\x3c\xf8\x1e\x86\xe7\x6b\x9e\xf7\xfd\x75\xba\xfe\x1a\x00\x8e\x03\x38\x0f\xa0\x0d\xe0\x04\x80\x0c\x93\x79\x0e\xe0\x24\x80\x17\x00\x4e\x01\x78\x03\xe0\x0c\x80\xf7\x87\x7c\x1f\x40\x7f\x06\xf8\x09\xe0\x2c\x80\x85\x1a\x70\x0e\xc0\xdd\x1a\x70\x01\xc0\x76\x6d\xa2\xbf\xac\x01\x33\x00\x8e\x1d\xee\xaa\x03\xa8\x61\x6a\x5a\x5a\x6d\xa5\x49\x61\x84\x4d\xb5\x42\xb7\x62\xf5\xb6\xdc\x2c\x12\x1a\xe8\x9e\x3c\x52\x76\x64\xa6\x87\xd3\x1a\xb3\x62\xb3\x3e\x81\xd8\x90\x43\x6d\x2c\xeb\xe4\x49\xda\x63\x37\x8b\x24\x67\xb1\xe6\xd4\x93\x3b\x37\xb6\xd3\xbe\x18\xe8\x39\x53\x78\xeb\x77\x62\xd6\x32\xb2\x5a\xc4\xda\xc2\x4a\x4e\xa1\x1f\x2c\x30\xbf\xc1\xc2\x06\x85\x0d\x3e\x3f\x7f\xd5\x6f\xf8\xbe\xb7\x26\x72\xcb\x62\x23\x54\x9e\x09\xab\x0d\xa7\xdb\x55\x07\x75\x0a\x23\x06\xba\xa7\x69\xe9\x9f\xe2\xa6\xb7\x26\x54\x52\x88\x44\xb2\x58\x8a\x01\xa7\xbf\x9c\xd3\x46\x91\xe7\xa9\x50\x5e\xe7\x56\x67\x85\xdd\x97\x26\x4f\xb5\xe2\x14\xcc\xf9\x5e\x4b\x2b\x2b\x95\x65\xf1\xc3\xa1\xe4\x64\xe5\x03\x7b\x6d\x98\x89\x54\x2d\x52\xb7\x2f\x4c\x2e\x6d\x74\x2f\x5e\x65\x0b\x47\xb9\xf1\x3d\x5b\xd2\xb0\x15\xd5\xd5\xbd\x54\x25\x9c\xbc\xf5\xac\x30\x22\x63\xab\xda\x0c\x72\x4e\x6a\x58\xd1\x3c\x6a\x2c\xd2\x04\x46\xea\x52\xe0\x47\x51\x40\xb3\xb3\x34\x86\xfe\xc5\x28\x08\x68\x99\x7c\xe2\x15\x6f\x46\xe1\x1f\x6b\x29\xba\x3e\x86\x97\xab\xd8\x52\xe0\xd3\xee\xee\xe4\x4b\x33\x0a\xfd\x2b\xb4\x4c\x01\x71\x0a\x17\xe1\xde\xba\x03\xb7\x5f\x3e\x75\x23\xf7\xb1\x7c\x52\x3e\x72\x7b\xe5\x33\x37\x2a\x5f\xc1\xbd\x73\x9f\xdd\x17\x37\x72\x3f\xc8\x1d\x94\x8f\xdd\x77\xb7\xe7\x3e\xb9\x6f\x6e\x34\xed\x8c\xf3\xee\x6b\xf5\x7e\xa8\x52\x95\xff\xbf\xca\xdf\x01\x00\x00\xff\xff\xd5\xbf\x79\xe1\xa4\x02\x00\x00"

func localesRuLc_messagesConfigMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesConfigMo,
		"locales/ru/LC_MESSAGES/config.mo",
	)
}

func localesRuLc_messagesConfigMo() (*asset, error) {
	bytes, err := localesRuLc_messagesConfigMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/config.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesManageMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x4f\x4b\x6f\x1b\x55\x14\xfe\xa6\x2e\x2f\x97\x67\x85\x84\x84\x58\x9c\x0a\x11\x81\xd0\x94\x19\x9b\x4a\xd1\x24\x13\x53\x92\x14\x10\x0d\x54\xc1\x94\x2d\x57\xf6\x8d\x33\x62\x3c\x63\xdd\x3b\x13\x88\x14\x89\x38\x2e\x54\x60\x44\x11\x0f\x75\x05\xa8\x3b\x96\xa6\xc4\x74\x68\x6b\x77\xcf\xea\xdc\x35\x88\x9f\xc0\x2f\x40\x02\xcd\xa3\x0f\xee\xe2\x9e\xf3\x7d\xe7\x3b\xe7\x7c\xe7\xaf\xe3\x47\xbf\x03\x80\x87\x01\x3c\x03\x60\x0f\xc0\x13\x00\xfe\x44\xf9\xc8\x02\x1e\x03\x70\xc2\x02\x1e\x01\xe0\x5a\xc0\x7d\x00\x5a\x16\xf0\x34\x80\x75\x0b\x78\x00\xc0\xfb\x16\x70\x0c\xc0\xb6\x05\x1c\x05\x90\x54\xba\xdd\x0a\x7f\x5c\xe1\x0b\x16\xf0\x20\x80\xcf\xad\x52\xfb\x8d\x05\x2c\x00\xf8\xe7\x08\xf0\x24\x80\x67\x6b\xc0\xa3\x00\x16\x6b\xc0\xeb\x00\x5e\xab\x01\x4f\x01\xf8\xaa\x06\x3c\x0e\xe0\xa7\x2a\xfe\x56\xc5\xdf\x6b\xc0\x71\x00\x7f\x54\xf8\xef\x2a\xfe\x5b\x03\x2c\x94\xde\x6e\xbf\x7c\x7f\xad\xca\x8f\x55\xf1\xa1\xea\xf6\xdc\xd3\xfd\x28\xbd\xd6\xab\xda\x91\xfc\x3b\x1d\x86\xf1\x87\xb2\x4b\x3b\x22\x4c\xa5\xf6\x70\x5a\x49\xda\x8d\x53\xd2\xa9\x92\x2d\xac\x86\xb1\x96\x58\x8d\xa3\xad\x40\xf5\x49\x8b\x1d\x49\x9d\x1c\xf4\x52\x25\x92\x20\x8e\xb0\x26\xb7\x44\x1a\x26\x58\x93\xba\xa3\x82\x41\xc1\xbd\x25\xfa\x12\x9b\x52\xcb\x04\xef\x88\x1d\x89\xf3\xf9\x68\xbc\x27\x92\xce\xb6\x54\x1a\x9b\x72\x10\xab\xc4\xde\xd0\xbd\xa0\x6b\xbf\x9a\xf6\xb4\xdd\x8e\x3d\xea\xca\x9d\x57\x3e\x08\xb6\x45\x3f\x3e\xa9\xd2\xfa\xb9\xb7\xdb\xf6\xaa\x92\xc5\x0e\x7b\x4d\x24\xd2\xa3\x86\xe3\x2e\xda\x4e\xd3\x6e\x34\xa9\xd1\xf4\x4e\x9d\x7a\xd1\x69\x3a\x4e\xfd\xac\xd0\x89\xdd\x56\x22\xd2\xa1\x48\x62\xe5\xd1\x9b\xc5\x0c\xda\x48\x95\xe8\xc7\xdd\x98\x96\xff\x37\x78\xa5\x7e\x56\x44\xbd\x54\xf4\xa4\xdd\x96\xa2\xef\xd1\x1d\xec\xd1\x66\xaa\x75\x20\xa2\xfa\xc6\x1b\x1b\xeb\xf6\x79\xa9\x74\x10\x47\x1e\xb9\x27\x9d\xfa\x6a\x1c\x25\x32\x4a\xec\xf6\xee\x40\x7a\x94\xc8\x8f\x92\x97\x06\xa1\x08\xa2\x25\xea\x6c\x0b\xa5\x65\xe2\xbf\xdb\x3e\x63\x2f\xde\xd5\xe5\x7e\xb6\xa4\xb2\xd7\xa3\x4e\xdc\x0d\xa2\x9e\x47\xf5\x73\x61\xaa\x44\x68\x9f\x89\x55\x5f\x7b\x14\x0d\x0a\xa8\xfd\xe6\x12\x95\xa9\x1f\x3d\xe7\x3a\xbe\xef\xd2\xc2\x02\xe5\xa9\x73\xc2\x77\x5d\x6a\x91\x43\x5e\x81\x57\xfc\xc6\xed\xd2\xb2\xff\x72\x9e\x3e\x5f\xc8\x96\x5d\x87\xf6\xf6\xca\x96\x15\xbf\xe1\xbc\x40\x2d\x72\xc9\xa3\xc6\x12\xf8\x5b\x9e\xf3\x2d\x33\x32\x43\x73\xc0\x19\xdf\x34\x63\x9e\x12\x5f\xe3\x19\x4f\xcc\x45\x9e\xf2\x8c\x33\x73\xc9\x03\x7f\x6d\xc6\x64\x46\x7c\x95\xa7\x66\x3f\xa7\xcd\xb8\x05\xbe\xcc\x13\xbe\x6e\xf6\xcd\xd8\x1c\x98\x2f\xc0\x3f\xf2\x9c\x0f\xcd\x41\x25\xfa\x95\x0f\xcb\x7e\x9e\x92\x19\xf2\xdc\x7c\x62\xf6\x79\xc2\xb3\x3b\x24\x5f\xe7\x39\xcf\xcc\x05\xce\xf8\x17\x33\xca\x8b\xe6\x53\xce\x38\x2b\x06\xd9\x66\xc4\x37\x79\xce\x37\xcc\xc5\xa2\x29\x33\x5f\x82\x7f\xe0\x5b\x9c\x99\x61\x49\xf0\x14\xfc\x3d\x4f\xf8\x1a\x5f\xbd\x4b\x5c\xe1\x9f\xcd\x3e\xcf\xcd\x90\xb3\xd2\xd3\x95\x7b\x16\x57\xd4\xe5\x7b\x8f\x2b\x9b\x6e\xf0\x94\x0f\xcd\x25\xf3\x59\x41\xfc\x17\x00\x00\xff\xff\x0b\x24\x32\x8e\x10\x04\x00\x00"

func localesRuLc_messagesManageMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesManageMo,
		"locales/ru/LC_MESSAGES/manage.mo",
	)
}

func localesRuLc_messagesManageMo() (*asset, error) {
	bytes, err := localesRuLc_messagesManageMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/manage.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/manager.html":     templatesViewsManagerHtml,
	"assets/js/manager.min.js":         assetsJsManagerMinJs,
	"locales/ru/LC_MESSAGES/config.mo": localesRuLc_messagesConfigMo,
	"locales/ru/LC_MESSAGES/manage.mo": localesRuLc_messagesManageMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"js": &bintree{nil, map[string]*bintree{
			"manager.min.js": &bintree{assetsJsManagerMinJs, map[string]*bintree{}},
		}},
	}},
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"config.mo": &bintree{localesRuLc_messagesConfigMo, map[string]*bintree{}},
				"manage.mo": &bintree{localesRuLc_messagesManageMo, map[string]*bintree{}},
			}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"manager.html": &bintree{templatesViewsManagerHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
