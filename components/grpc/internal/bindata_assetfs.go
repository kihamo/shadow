// Code generated by go-bindata.
// sources:
// templates/views/manager.html
// assets/js/manager.min.js
// DO NOT EDIT!

package internal

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsManagerHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x6d\x73\xdb\xb8\x11\xfe\x9e\x5f\x81\xc1\xf9\x3a\x71\x1b\x8a\x8e\x9d\x74\xa6\x8a\xa4\x4c\xe7\xda\x4e\xd3\x49\x72\x9d\xdc\xf5\xd3\xf5\xea\x81\xc8\xa5\x08\x17\x02\x58\x00\x94\xe4\x6a\xfc\xdf\x3b\x00\xdf\x65\xbd\x91\x84\x1c\x3b\x35\x3f\x24\x32\x09\x3c\xbb\xd8\x5d\x2c\x16\xd0\x43\xad\xd7\x28\x84\x88\x72\x40\x38\x10\x5c\x03\xd7\x18\xdd\xdd\xbd\x18\x85\x74\x81\x02\x46\x94\x1a\xe3\x84\xcc\xc0\xd3\x54\x33\xc0\x93\x17\x08\x21\x54\x7f\x68\xef\x5f\x33\x88\x74\xfe\xd0\x36\x88\xaf\x26\xb3\x2f\x7f\xff\x61\xe4\xc7\x57\x79\x17\x3f\xa4\x8b\xc9\x8b\xfc\xbf\x06\x7c\xc0\x80\xc8\x88\xae\xf0\xa4\x78\xba\x5e\x23\x1a\xa1\x01\x48\x29\xe4\xa6\x32\x84\x81\xd4\xc8\xfe\xeb\x85\x84\xcf\x40\x16\x7f\x50\x35\xa7\x4a\x91\x69\xa5\xe6\x34\xd5\x5a\x70\xa4\x6f\x13\x18\xe3\xec\x0f\x5c\x49\x15\x0a\x30\x0a\x89\x26\x45\xd7\x1c\x1c\x23\x22\x29\xf1\x62\x1a\x86\xc0\xc7\x58\xcb\x14\xf0\xe4\x37\x9a\xce\x41\xbd\x1b\xf9\x19\x4c\x26\x60\xbd\xae\x2b\x99\x29\xbf\x5e\x23\xe0\xa1\xb9\xd1\x50\x5b\x8a\xe5\x16\xe3\x05\x82\x79\xf3\xd0\x7b\x7d\x89\x4b\x40\x69\xc6\x84\xce\xd4\x2b\x74\xa6\x40\x2e\x68\x00\x68\x38\x46\x83\xfc\xb3\x32\xc0\x85\x95\xd7\xeb\xb2\xcd\x87\xd0\xb4\x92\x90\x30\x12\x40\x79\x77\xf0\x99\xcc\x01\xe1\x01\x46\xf8\xda\x7a\xb5\x72\x50\x4d\x89\xd5\x75\x42\x38\xb0\x9a\xfb\xee\xb7\xa8\x7b\xbf\xd1\x2a\xbe\x9c\xd4\xd4\xc8\x04\xde\xdd\x8d\xfc\xf8\x72\x4b\xe3\x7d\x4e\x6f\x34\xdc\x72\xab\xa1\x4e\x11\xa9\x93\x17\x7b\x85\x90\x20\x10\x32\xa4\xc6\xeb\x34\x1c\x63\xe2\x35\x2d\x76\x77\x87\x91\x14\x0c\xc6\x58\x93\x29\xa3\xaa\xf0\xfc\x3c\x65\x9a\x2a\x60\x10\x98\xfb\x50\x84\xc0\x3d\x51\x4d\x8f\xcd\x5f\xa1\xb3\x39\xe8\x58\x58\x57\x94\x16\xf9\x64\x6f\x35\xfc\xb6\x4f\xe5\x6d\xae\xd8\x90\x97\x4b\xd9\x70\x79\x76\x73\xb7\xc7\xb7\x00\xd1\xa8\xec\xf6\x81\x27\xa9\xfe\xf9\x36\x81\x7d\x7a\x5a\x5d\x49\x43\x53\x2f\x06\x12\x52\x3e\xab\x19\x32\xb3\x75\x7c\xcf\xd6\x5e\x43\x75\x63\x7b\x3b\xf7\xb4\x98\xcd\x4c\xcf\x40\x30\x46\x92\x72\x4a\x26\x44\x02\xd7\x63\xfc\xdd\x36\xa7\xc5\x12\xa2\x31\xfe\x2e\x38\x42\x86\x75\x28\xac\x12\xc2\x43\x08\xc7\x38\x22\xcc\x88\xb0\x77\x4d\x10\x49\xc1\x4c\x30\x1e\x06\xda\xed\x91\xd2\x32\xf1\x9b\xa6\x69\xf2\x39\x53\x21\xd5\x66\xc7\x9b\xfd\x78\x23\x9f\x1c\x68\x60\x42\xc6\xd8\xf9\x18\x1b\x34\xb4\x2a\xec\x8c\x2a\x83\x97\xae\xcb\x82\x2f\xb3\x0e\x23\x53\x60\x0c\xc2\xe9\xed\x51\xce\x3c\xc2\x3e\x9b\x51\xee\x4d\x45\x78\x7b\x44\xc7\xcd\xce\xdb\xf3\xd5\xf1\xbd\x77\xe5\xb2\xbd\x08\x87\x3c\xb6\xb5\x13\x2d\x84\x46\x04\x45\xc4\x23\x52\x8a\xa5\x27\xe9\x2c\xd6\xe6\xcf\x68\x69\x92\x1f\x6d\x8f\x5b\x8b\xa8\x72\xde\x16\xb1\xd5\x05\x6c\x33\x0f\xfc\xa4\x25\x90\x79\x17\x30\x73\x8d\x54\x42\x78\x31\x70\x1b\x45\xc8\xfe\xeb\x2d\x89\xe4\x26\x55\x4c\x94\xc5\x1f\xf9\xa6\x61\xa7\xd1\xe7\x0b\x6c\x2b\xad\xec\x9c\x6b\xd7\xe5\xd8\xe5\x6a\xbf\xdc\x76\xcd\x77\x2c\x73\xad\xf4\x8e\x84\x9c\xa3\xcc\xa1\x63\x9c\x08\xbb\xae\x05\x9a\x0a\x3e\xc6\xef\xf3\x0f\x01\x61\xac\x2a\x85\x08\x63\xc8\x74\xf2\x62\x21\xe9\x7f\x05\xd7\x84\xe5\x69\x58\x82\x4a\x99\x1e\x63\x79\x44\x9a\xc9\xd2\x88\xc1\xd9\x48\xed\x0b\xc2\x68\x48\xb4\x90\x2d\x07\x62\x07\x43\x4d\x44\xe6\x25\x5c\x56\x92\x61\xc4\xc9\x1c\xc6\xf8\x3a\x57\x07\xa3\x05\x61\x29\x8c\xf1\x96\x42\xc4\xb1\xc4\x6c\xbc\x0d\x81\xcd\xd4\xbe\xad\x22\x39\x74\xed\x58\x89\x07\x7f\xa1\xc0\xf6\x17\x0e\x3b\x87\x50\xaf\xcf\x4d\x09\x63\xfc\x98\x08\xae\xe8\xa2\x6d\xe2\x2b\x21\x2d\x4e\x03\x14\x65\xd0\xb1\x58\x80\xcc\x3f\x2b\x2d\x69\x02\x61\x47\x19\x99\x1c\x53\x51\xf4\xe9\x2f\xbb\x77\xce\x15\x40\x4b\x1a\xea\x78\x8c\x5f\x5f\x7c\x8f\x27\xd6\x0b\x23\x5f\xc7\xce\x60\xdf\x1a\x58\xe3\x61\xa7\xa8\x56\xd9\x8f\x26\xd1\x3a\x85\xbd\x32\xb0\x7f\xb4\x49\xa3\x1f\xee\xc8\xef\xe3\x19\x23\xbb\x67\x5c\x98\x6a\xa3\x7b\xff\xaa\xce\x8f\x5e\xa1\xb3\xc8\x04\x85\x2d\xf3\x1d\xce\xda\x9a\xa8\xb3\x05\x91\x1b\xf5\xbd\x15\x79\xaf\xbc\xef\x2a\xc3\xc1\x34\x09\x6d\x65\x5b\x53\xcb\x14\xb6\xba\x87\x8b\x0a\xd8\x5e\x00\xa8\x4a\xa8\x99\x6a\x1f\xd4\x27\x50\x8a\xcc\x3a\x15\x47\x5b\x55\x24\xf9\xfe\xe3\x86\x2c\x88\x0a\x24\x4d\xf4\x70\x21\x68\xf8\xf2\xe2\x7c\xff\x96\x46\x13\x39\x03\xb3\xa5\x39\xbc\x98\x7a\x55\x0c\xdc\xdd\x79\x37\x4a\x70\x5c\xb3\x76\xbe\x4f\x3b\xb8\x49\x38\x7a\x44\x89\x04\xbb\x99\xe8\xa4\x58\xed\x2c\x23\xdb\x58\x88\x54\x5b\x6d\x25\x59\x16\x1a\xff\xed\xa7\x1f\x3f\x5b\x8d\x13\x09\x4e\xfc\x0b\x4c\x39\x73\xe8\x3d\xc3\x3a\x51\xb0\x7d\x89\xba\x79\xb9\x99\x4d\x3b\xcb\x71\x95\x06\x01\x28\x55\x0f\x2c\xbb\x7c\x58\x3f\xd9\xd2\xdc\x89\x02\xd5\x59\x8c\x59\x43\x7a\x54\x06\xc5\x95\xcd\x6e\x2e\x74\x35\xc3\xbf\x40\x02\x44\x43\x6f\x8b\x97\x6a\xd7\xea\x27\x5b\x0d\x7a\x33\x29\xd2\xc4\x81\xf2\xc5\x95\x0d\x42\x48\xf4\x12\xfe\xd3\x88\x3e\x1c\x8a\x74\xca\x00\x9f\xdf\x7f\x12\x31\x41\x34\x3e\x77\x35\xc8\xe2\x6a\xd4\xbb\x3c\x9d\x4f\x41\x16\xf5\xee\xbd\x04\x5f\x4e\x76\xbb\x5b\xc8\x0f\x50\x30\x4a\x88\xd6\x20\xf9\x18\xff\xeb\x17\xef\x77\xbf\xbe\xff\xe5\xc2\xfb\xc3\xaf\xbf\x7d\xf9\xcf\x41\xf6\xe1\xfc\xfd\x59\xa3\x62\xce\x10\xff\x04\x11\x49\x99\xb6\xa0\xbe\x53\xc3\xda\xdc\xb0\xc3\xba\x94\xeb\xab\xcb\x6d\xc6\xa5\x5c\xff\xfe\xcd\xb6\x07\x6a\x67\x17\xb5\xbb\x4f\x44\x57\x10\xee\xe8\x65\x9f\xd9\x7e\x4f\xc4\x91\x8f\xc7\x7b\xe9\x4e\x5f\xa4\x3b\x7d\xb1\xc7\x15\x4f\xc4\x13\x5f\xd9\x11\x9b\x56\x9b\x0a\xa3\xdf\x29\x2d\x16\xc4\x10\xfc\x7b\x2a\x56\x87\x6d\x76\xa3\x3c\xb5\xa4\x3a\x88\x51\xd3\x7a\x8d\x0a\xb0\x32\x91\x05\x86\xb0\x5a\x9f\x1f\x2e\x74\xcd\xce\x98\xcf\xb6\x45\xe1\xf4\x56\x83\x3a\x71\x0c\x6a\x58\xe9\xb6\x11\xf8\xd0\xa1\xe6\x78\xfc\x1b\x9b\x80\x3f\xf3\xb4\xf3\x89\xe6\xbe\x6b\x94\x7d\x4f\xd4\xca\xb6\x28\xeb\x73\xe9\xb0\x9e\xa8\x5f\xd5\x56\x15\x5e\xa1\x33\x30\x03\x37\x3b\xd5\x4c\xaf\x53\xd9\xc1\x5c\x23\x91\x98\x1a\xaf\x1e\x39\x46\xfa\xe0\xb3\xcd\x80\xc6\x1a\xb9\x53\xec\xdd\x0f\xaa\x0a\xa8\xdc\x22\x10\x8e\x71\xf1\x09\x97\x93\x74\x52\x01\x15\xdb\xcc\x4c\xd0\xc9\xcc\xe7\xa0\x78\xdf\x76\x8d\xfc\x6c\x70\x6e\xf5\x3e\xd1\xfc\x41\xb6\x7c\x87\x95\x26\x12\x48\xbb\xd4\x51\xdb\x51\x94\x1b\xbf\x02\xc9\xfd\xd8\xdd\xfa\xca\x2d\x62\xcb\xd3\xff\x7d\x4a\x39\x74\xf1\xe9\xb7\x37\xdf\xd6\x9e\x62\x87\xbd\xbc\xa9\x76\xb1\x9f\x6d\x48\xda\xc7\x58\x99\x6a\x8e\xa6\x9a\xe7\xac\x97\x13\x2c\x1e\x8d\xa3\x82\xec\x2b\x4b\x2d\x89\x8a\x3d\x81\x27\x5d\xbf\xad\xdb\x2b\xaf\x41\xa6\x71\x86\x7a\x8c\x0d\x29\x8f\xc4\xc3\x58\x30\x61\xa9\x7a\x2a\xe6\x73\x94\xae\x5c\x43\x3d\xa7\xab\x76\xa3\x79\x4e\x57\x4f\x64\xbe\xa1\xe7\x74\xd5\x0f\xf1\xff\x34\x5d\x3d\xae\x09\xfe\x1c\x9c\xdb\x11\x1f\x5b\x70\x3e\x86\x6f\xa5\xfa\xb1\x00\xfa\x8f\x60\xe4\xf7\xe0\x01\x8c\x7c\xcb\x72\xe9\x40\x29\xea\xe6\xc0\x1a\x95\xbc\xb5\xc4\x82\x1f\x7a\x0c\x71\xab\x46\x03\xcb\x09\x5f\x18\x29\x7d\xcb\x60\x8c\x43\xaa\x12\x46\x6e\x87\x5c\xf0\xce\xcc\xa1\x58\x76\xad\x6e\x8e\x20\xf0\x6f\x27\xe6\xb7\x16\x54\x67\xea\x67\x54\x29\xc8\x5e\x2b\x68\x4d\xf8\x2b\x21\xf3\x77\x19\xfa\xa8\xc2\xf8\xb5\x12\x8c\x86\xd5\x9b\x11\x7d\xd0\x6c\xc1\xda\x67\x2d\x6a\xd0\xca\x60\xa5\xbd\x00\xb8\xee\x55\xda\x35\x0a\x6f\x95\x4e\xe7\x54\xdf\x5b\x5e\x8a\xef\xa9\x8b\xfa\xf9\x07\x4b\x5d\xec\x1a\x51\xbd\x9c\xd9\xae\x8b\xb1\xf7\x49\x88\xa2\x6d\x82\xe1\x1b\x22\x4e\x33\x88\x9c\xf1\xa6\x7f\x4c\xb5\x5b\xe2\x74\x05\xf8\xcc\x9b\x7e\xaa\xbc\x69\xb7\xac\xd9\x87\x60\xcc\xf6\x61\xcb\xf6\xa2\x00\xd6\x89\xa7\x6f\xdd\xb0\x64\xeb\xa4\xd3\xb7\x4e\x18\xb2\x9b\x9c\xdb\x9e\xec\xd8\xee\xb5\x6b\x2f\xf6\x6a\x1f\xe6\xea\x01\xd6\x6a\x2d\x0b\xf6\xa3\xad\x9e\x9a\xb2\xda\x33\x56\x9d\x53\x55\x7b\xd3\x54\x4f\x47\x51\xed\x4f\x4f\x5d\x3e\x22\x7a\x6a\x49\x4d\xed\xa4\xd4\xc3\x52\x53\x1d\x7e\x4b\xe7\x96\x92\xea\x64\xdb\xfc\x35\x67\x4b\x0f\x0e\x6b\xfb\x2d\x53\xfd\xda\x9c\xa6\x24\x71\x32\x45\x0f\x0e\x67\x4e\x12\x17\xa7\x5c\x5f\xd3\xf1\xdd\x57\xcb\x7e\x5a\x77\x3e\xe1\xe9\x74\xba\x73\xba\xaa\xf6\xc8\xa6\x47\x34\x3b\xd0\xe4\xc8\xb4\x75\xcc\x8b\xdf\x3b\x96\x97\x9d\xeb\xd1\x23\x7a\xa9\xfa\x70\xd0\xed\x31\xe3\xee\xce\x87\x7f\xdc\xa0\xbe\x99\x6f\xe2\x34\x7f\x32\xa3\x76\x18\x58\xfb\xc9\x0e\xe3\x85\xec\xf7\x3a\xec\x81\x5d\x8d\xee\xe7\x07\x26\x91\x58\xa0\x41\x79\xa4\xb5\x2e\xc5\x2e\x63\xaa\xc1\x53\x09\x09\x60\x88\x12\x09\xde\x52\x92\xe4\x5d\xf9\xd8\xec\x50\x22\x26\x96\xde\xed\x10\x91\x54\x8b\xea\xc9\x9c\xac\xbc\x18\xe8\x2c\xd6\x43\x74\x75\x01\xf3\xea\x89\x2d\xb5\x87\xe8\xf5\xc5\xc5\xf7\xd9\xcd\xfc\xdc\x72\xb0\xf1\x1d\x05\xca\x4f\xf5\xd6\x35\x4c\x39\xa3\x3c\x7b\x33\x7a\x88\x2e\xde\x6d\x3e\x98\x0a\xad\xc5\xdc\x3e\x69\x00\xd7\x4e\x2c\x6b\x68\x89\x50\x54\x53\xc1\x87\x48\x02\x23\x9a\x2e\xa0\xa9\x8e\x3d\x38\xdc\xda\x9e\x4c\x95\x60\xa9\x86\x4a\x81\x5c\xa5\xb7\xc9\xaa\xba\xa7\x45\x32\x44\x97\xe5\xad\x02\x36\x7b\xc1\xa1\x31\xda\xba\xbd\xef\x1b\x67\xe4\x5b\x9f\xed\x72\xed\x8d\xb2\x8e\x5d\xaf\x91\xd2\x44\xd3\xe0\xaf\x3f\x7f\xfa\x88\x5e\x66\x9f\xff\xf1\xe5\x23\xc2\x7e\x48\x54\x3c\x15\x44\x86\x3e\x51\x0a\xb4\xf2\x17\xc0\x43\x21\x95\x5f\xbe\x70\xeb\xdf\xd4\xfe\x18\xcc\x29\x1f\x18\x54\xfb\x23\x08\xe7\x07\xc0\x67\x32\x09\x0a\xdc\x1b\xe5\xcf\x09\x27\x33\x90\xb6\xbf\x96\x69\xd9\x3d\x53\xfc\x7f\x01\x00\x00\xff\xff\x7c\x8c\x08\xed\x45\x46\x00\x00")

func templatesViewsManagerHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsManagerHtml,
		"templates/views/manager.html",
	)
}

func templatesViewsManagerHtml() (*asset, error) {
	bytes, err := templatesViewsManagerHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/manager.html", size: 17989, mode: os.FileMode(420), modTime: time.Unix(1509433276, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsJsManagerMinJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\xcb\x6e\xdb\x30\x10\xfc\x15\x75\x6b\x04\x5c\x58\x21\x7a\xe8\x49\x86\x10\x14\xe9\xa9\x40\xdb\x43\xd1\x53\x92\x03\x23\xad\x2c\xc6\x34\xc9\x2e\x57\x4e\x5c\x43\xff\x5e\x58\xaf\xc4\x39\x15\x3a\x10\x33\x3b\x3b\x1a\x0d\xb5\x52\x4d\xe7\x2b\xb1\xc1\x2b\x3c\xad\x14\xe8\xca\x38\x77\xcd\x94\x3a\x27\xd9\x63\x27\x12\xbc\xae\x5c\x48\x04\xa8\x2b\x67\xab\xdd\xa5\x5e\x5a\x9b\x50\x47\xc3\xe4\x45\xa1\x6e\x6d\x4d\x0a\x7b\xcc\x57\x0a\x9a\xc0\xfb\xc1\x0d\x50\xa7\xee\x71\x6f\xe5\xed\x2a\x1d\xc8\x8b\x8e\x3c\x9c\x5f\xa9\x31\x9d\x13\x85\x9b\x83\xe1\x8c\xca\xc9\x37\x6f\x4b\x5a\xbc\xf3\x31\x53\xb9\x52\xf0\x11\xd6\xa4\x6b\x23\x46\xc1\x48\x02\x0e\xe3\x18\x7c\xa2\x72\xa4\x74\x63\x7d\xad\x40\xcf\x34\x60\x2e\x61\xbb\x75\x54\x2e\x21\x88\x39\x30\x9e\x66\x85\x66\xda\x87\x03\xdd\x3a\x93\xd2\xdb\xa4\x4c\xd2\xb1\xcf\x06\xf5\x0d\x18\x47\x2c\xd7\xa9\xab\x2a\x4a\x09\x8a\x09\xd7\xc6\x6f\x89\xa1\x47\x6d\xea\xfa\xbf\x1c\xa6\x8d\xe2\x9d\x61\x8f\xfd\xa6\xd5\xcf\xc6\xca\x77\x52\x27\x6a\x1a\xaa\xa4\x80\xc6\x54\xf4\x18\xc2\x0e\xce\xcd\x6a\xf3\x64\x5e\xd4\x49\x8e\x91\x0a\xd2\x46\x84\x15\xec\x49\xda\x50\x03\xe6\x1d\xbb\x85\x34\xc3\xfb\x01\xf3\x73\x55\x05\xe9\x44\x6c\x8d\xb3\x7f\x49\x61\x5e\x85\x7d\x74\x24\x54\x5c\xc4\x1c\x8a\x4b\x6d\x78\x56\x98\x2f\x29\xe0\x7c\xa9\x80\x7d\x3e\xe4\x7f\xb7\x30\x36\xd7\xca\xde\x29\xf8\xf2\x64\x5e\x32\xa6\x3f\x1d\x25\xc9\x1a\x63\x1d\xd5\x4b\xeb\xea\xc3\x27\xec\xf3\xe9\x2b\x5f\x3d\x18\x4f\xe7\x1b\x8f\x25\xc0\xc6\x36\x8a\x75\x4b\xa6\x26\x4e\x23\x3d\x81\xf2\xee\x61\xd3\x04\x56\x67\x6a\x47\xc7\xcc\xfa\xec\x55\x38\x0f\x0e\xc6\x5d\x0c\xee\x76\x74\x7c\xc0\x19\x4c\xa7\x76\xe4\xb7\xd2\x3e\x94\x3b\x3a\x6a\x09\xbf\x63\x24\xbe\x35\x89\x14\xae\xa1\xc8\x60\x7d\x30\x6e\x13\xcb\x59\xfc\x14\xac\x57\x70\xef\x01\xd7\x70\xef\xef\x3d\xf4\xac\xc7\x8e\x6e\xe2\xba\xfc\xf6\xeb\xe7\x0f\x9d\x84\xad\xdf\xda\xe6\xa8\x06\x18\x0d\x27\x52\xb3\x0a\x73\xdf\x39\x97\x7f\xc6\x82\xf5\xd0\xdd\xd5\x95\x8a\xeb\x72\x02\xaf\x7f\xec\x58\x5f\x5c\xaa\x9a\x05\x7d\x8f\xe7\x67\xf3\x2f\x00\x00\xff\xff\xc0\x59\x03\x3e\xa3\x03\x00\x00")

func assetsJsManagerMinJsBytes() ([]byte, error) {
	return bindataRead(
		_assetsJsManagerMinJs,
		"assets/js/manager.min.js",
	)
}

func assetsJsManagerMinJs() (*asset, error) {
	bytes, err := assetsJsManagerMinJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/js/manager.min.js", size: 931, mode: os.FileMode(420), modTime: time.Unix(1509434352, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/manager.html": templatesViewsManagerHtml,
	"assets/js/manager.min.js": assetsJsManagerMinJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"js": &bintree{nil, map[string]*bintree{
			"manager.min.js": &bintree{assetsJsManagerMinJs, map[string]*bintree{}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"manager.html": &bintree{templatesViewsManagerHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: AssetInfo, Prefix: k}
	}
	panic("unreachable")
}
