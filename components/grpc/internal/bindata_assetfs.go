// Code generated by go-bindata.
// sources:
// templates/views/manager.html
// assets/js/manager.min.js
// DO NOT EDIT!

package internal

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsManagerHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x5f\x73\xdb\xb8\x11\x7f\xcf\xa7\xc0\xe0\x7c\x9d\xb8\x0d\x45\xc7\x49\x3a\x53\x47\x52\xa6\x73\x6d\xa7\xee\x24\xb9\x4e\xee\xfa\x74\xbd\x7a\x20\x72\x29\xc2\x85\x00\x16\x00\x25\xbb\x1a\x7f\xf7\x0e\xc0\xff\xb2\x28\x89\x24\xe4\xd8\xa9\xf9\x60\x4b\x24\xf1\xdb\xc5\xee\x62\xb1\x00\x7f\xd4\x7a\x8d\x42\x88\x28\x07\x84\x03\xc1\x35\x70\x8d\xd1\xdd\xdd\x8b\x71\x48\x97\x28\x60\x44\xa9\x09\x4e\xc8\x1c\x3c\x4d\x35\x03\x3c\x7d\x81\x10\x42\xf5\x8b\xf6\xfc\x15\x83\x48\xe7\x17\xed\x0d\xf1\x9b\xe9\xfc\xcb\xdf\x7f\x18\xfb\xf1\x9b\xbc\x89\x1f\xd2\xe5\xf4\x45\xfe\xaf\x01\x1f\x30\x20\x32\xa2\x37\x78\x5a\x5c\x5d\xaf\x11\x8d\xd0\x08\xa4\x14\x72\x53\x19\xc2\x40\x6a\x64\xff\x7a\x21\xe1\x73\x90\xc5\x17\xaa\x16\x54\x29\x32\xab\xd4\x9c\xa5\x5a\x0b\x8e\xf4\x6d\x02\x13\x9c\x7d\xc1\x95\x54\xa1\x00\xa3\x90\x68\x52\x34\xcd\xc1\x31\x22\x92\x12\x2f\xa6\x61\x08\x7c\x82\xb5\x4c\x01\x4f\x7f\xa3\xe9\x02\xd4\xfb\xb1\x9f\xc1\x64\x02\xd6\xeb\xba\x92\x99\xf2\xeb\x35\x02\x1e\x9a\x13\x0d\xb5\xa5\x58\x6d\x31\x5e\x20\x98\xb7\x08\xbd\xd7\xe7\xb8\x04\x94\xa6\x4f\xe8\x44\xbd\x42\x27\x0a\xe4\x92\x06\x80\x2e\x26\x68\x94\x7f\x56\x06\xb8\xb0\xf2\x7a\x5d\xde\x73\x19\x9a\xbb\x24\x24\x8c\x04\x50\x9e\x1d\x7d\x26\x0b\x40\x78\x84\x11\xbe\xb2\x5e\xad\x1c\x54\x53\xe2\xe6\x2a\x21\x1c\x58\xcd\x7d\xf7\xef\xa8\x7b\xbf\x71\x57\x7c\x3e\xad\xa9\x91\x09\xbc\xbb\x1b\xfb\xf1\xf9\x96\x9b\x77\x39\xbd\x71\xe3\x96\x53\x0d\x75\x8a\x48\x9d\xbe\xd8\x29\x84\x04\x81\x90\x21\x35\x5e\xa7\xe1\x04\x13\xaf\x69\xb1\xbb\x3b\x8c\xa4\x60\x30\xc1\x9a\xcc\x18\x55\x85\xe7\x17\x29\xd3\x54\x01\x83\xc0\x9c\x87\x22\x04\xee\x89\x6a\x7a\x6c\xf1\x0a\x9d\x2c\x40\xc7\xc2\xba\xa2\xb4\xc8\x27\x7b\xaa\xe1\xb7\x5d\x2a\x6f\x73\xc5\x86\xbc\x5c\xca\x86\xcb\xb3\x93\xed\x1e\xdf\x02\x44\xa3\xb2\xd9\x25\x4f\x52\xfd\xf3\x6d\x02\xbb\xf4\xb4\xba\x92\x86\xa6\x5e\x0c\x24\xa4\x7c\x5e\x33\x64\x66\xeb\xf8\x9e\xad\xbd\x86\xea\xc6\xf6\x76\xec\x69\x31\x9f\x9b\x96\x81\x60\x8c\x24\xe5\x90\x4c\x88\x04\xae\x27\xf8\xbb\x6d\x4e\x8b\x25\x44\x13\xfc\x5d\x70\x80\x0c\xeb\x50\xb8\x49\x08\x0f\x21\x9c\xe0\x88\x30\x23\xc2\x9e\x35\x41\x24\x05\x33\xc1\xb8\x1f\xa8\xdd\x23\xa5\x65\xe2\xb7\x4d\xd3\xe4\x63\xa6\x42\xaa\x8d\x8e\xb7\xbb\xf1\xc6\x3e\xd9\x73\x83\x09\x19\x63\xe7\x43\x6c\xd0\xd0\xaa\xb0\x33\xaa\x0c\x5e\xba\x2e\x0b\xbe\xcc\x3a\x8c\xcc\x80\x31\x08\x67\xb7\x07\x39\xf3\x00\xfb\x6c\x46\xb9\x37\x13\xe1\xed\x01\x0d\x37\x1b\x6f\xcf\x57\x87\xb7\x6e\xcb\x65\x3b\x11\xf6\x79\x6c\x6b\x23\x5a\x08\x8d\x08\x8a\x88\x47\xa4\x14\x2b\x4f\xd2\x79\xac\xcd\xd7\x68\x65\x92\x1f\xed\x8e\x5b\x8b\xa8\x72\xdc\x16\xb1\xd5\x07\x6c\x33\x0f\xfc\xa4\x25\x90\x45\x1f\x30\x73\x8c\x55\x42\x78\xd1\x71\x1b\x45\xc8\xfe\xf5\x56\x44\x72\x93\x2a\xa6\xca\xe2\x8f\x7d\x73\x63\xaf\xde\xe7\x13\x6c\x27\xad\xec\x98\xeb\xd6\xe4\xd0\xe9\x6a\xb7\xdc\x6e\xb7\xb7\x4c\x73\x9d\xf4\x8e\x84\x5c\xa0\xcc\xa1\x13\x9c\x08\x3b\xaf\x05\x9a\x0a\x3e\xc1\x1f\xf2\x0f\x01\x61\xac\x2a\x85\x08\x63\xc8\x34\xf2\x62\x21\xe9\x7f\x05\xd7\x84\xe5\x69\x58\x82\x4a\x99\x9e\x60\x79\x40\x9a\xc9\xd2\x88\xc1\xd9\x48\xed\x4b\xc2\x68\x48\xb4\x90\x1d\x3b\x62\x3b\x43\x4d\x44\xe6\x25\x5c\x56\x92\x61\xc4\xc9\x02\x26\xf8\x2a\x57\x07\xa3\x25\x61\x29\x4c\xf0\x96\x42\xc4\xb1\xc4\xac\xbf\x0d\x81\xcd\xd4\xbe\xad\x22\xd9\x77\xb4\xcc\xc4\xa3\xbf\x50\x60\xbb\x0b\x87\xd6\x2e\xd4\xeb\x73\x53\xc2\x18\x3f\x26\x82\x2b\xba\xec\x9a\xf8\x4a\x48\x8b\xd3\x00\x45\x19\x74\x2c\x96\x20\xf3\xcf\x4a\x4b\x9a\x40\xd8\x53\x46\x26\xc7\x54\x14\x43\xda\xcb\xfe\x8d\x73\x05\xd0\x8a\x86\x3a\x9e\xe0\xd7\x67\xdf\xe3\xa9\xf5\xc2\xd8\xd7\xb1\x33\xd8\x77\x06\xd6\x78\xd8\x29\xaa\x55\xf6\xa3\x49\xb4\x4e\x61\xdf\x18\xd8\x3f\xda\xa4\x31\x0c\x77\xec\x0f\xf1\x8c\x91\x3d\x30\x2e\x4c\xb5\xd1\xbf\x7d\x55\xe7\x47\xaf\xd0\x49\x64\x82\xc2\x96\xf9\x0e\x47\x6d\x4d\xd4\xc9\x92\xc8\x8d\xfa\xde\x8a\xbc\x57\xde\xf7\x95\xe1\x60\x98\x84\xb6\xb2\xad\xa9\x65\x0a\x5b\x3d\xc0\x45\x05\xec\x20\x00\x54\x25\xd4\x4c\xb5\x4b\xf5\x09\x94\x22\xf3\x5e\xc5\xd1\x56\x15\x49\xbe\xfe\xb8\x26\x4b\xa2\x02\x49\x13\x7d\xb1\x14\x34\x7c\x79\x76\xba\x7b\x49\xa3\x89\x9c\x83\x59\xd2\xec\x9f\x4c\xbd\x2a\x06\xee\xee\xbc\x6b\x25\x38\xae\x59\x3b\x5f\xa7\xed\x5d\x24\x1c\xdc\xa3\x44\x82\x5d\x4c\xf4\x52\xac\xb6\x97\x91\x2d\x2c\x44\xaa\xad\xb6\x92\xac\x0a\x8d\xff\xf6\xd3\x8f\x9f\xad\xc6\x89\x04\x27\xfe\x05\xa6\x9c\x39\xf4\x9e\x61\x9d\x28\xd8\xbd\x44\xdd\x3c\xdc\x8c\xa6\xd6\x72\x5c\xa5\x41\x00\x4a\xd5\x03\xcb\x4e\x1f\xd6\x4f\xb6\x34\x77\xa2\x40\xb5\x17\x63\xe6\x90\x01\x95\x41\x71\x64\xa3\x9b\x0b\x5d\x8d\xf0\x2f\x90\x00\xd1\x30\xd8\xe2\xa5\xda\xb5\xfa\xc9\x56\x83\xde\x5c\x8a\x34\x71\xa0\x7c\x71\x64\x9d\x10\x12\xbd\x84\xff\x34\xa2\x0f\x87\x22\x9d\x31\xc0\xa7\xf7\xaf\x44\x4c\x10\x8d\x4f\x5d\x75\xb2\x38\x1a\xf5\x2e\x4f\x17\x33\x90\x45\xbd\x7b\x2f\xc1\x97\x83\xdd\xae\x16\xf2\x0d\x14\x8c\x12\xa2\x35\x48\x3e\xc1\xff\xfa\xc5\xfb\xdd\xaf\x1f\x7e\x39\xf3\xfe\xf0\xeb\x6f\x5f\xfe\x73\x94\x7d\x38\xfd\x70\xd2\xa8\x98\x33\xc4\x3f\x41\x44\x52\xa6\x2d\xa8\xef\xd4\xb0\x36\x37\xb4\x58\x97\x72\xfd\xe6\x7c\x9b\x71\x29\xd7\xbf\x7f\xbb\xed\x82\x6a\x6d\xa2\xda\xdb\x44\xf4\x06\xc2\x96\x56\xf6\x9a\x6d\xf7\x44\x1c\xf9\x78\xbc\x97\xb6\xfa\x22\x6d\xf5\xc5\x0e\x57\x3c\x11\x4f\x7c\x65\x47\x6c\x5a\x6d\x26\x8c\x7e\xc7\xb4\x58\x10\x43\xf0\xef\x99\xb8\xd9\x6f\xb3\x6b\xe5\xa9\x15\xd5\x41\x8c\x9a\xd6\x6b\x54\x80\x95\x89\x2c\x30\x84\xd5\xfc\xfc\x70\xa1\x6b\x56\xc6\x7c\xbe\x2d\x0a\x67\xb7\x1a\xd4\x91\x63\x50\xc3\x8d\xee\x1a\x81\x0f\x1d\x6a\x8e\xfb\xbf\xb1\x08\xf8\x33\x4f\x7b\xef\x68\xee\x3a\xc6\xd9\x73\xa2\x4e\xb6\x45\x59\x9b\x73\x87\xf5\x44\xfd\xa8\x96\xaa\xf0\x0a\x9d\x80\xe9\xb8\x59\xa9\x66\x7a\x1d\xcb\x0e\xe6\x18\x8b\xc4\xd4\x78\xf5\xc8\x31\xd2\x47\x9f\x6d\x06\x34\xd6\xc8\x9d\x62\xcf\x5e\xaa\x2a\xa0\x72\x8b\x40\x38\xc1\xc5\x27\x5c\x0e\xd2\x69\x05\x54\x2c\x33\x33\x41\x47\x33\x9f\x83\xe2\x7d\xdb\x31\xf6\xb3\xce\xb9\xd5\xfb\x48\xe3\x07\xd9\xf2\x1d\x6e\x34\x91\x40\xba\xa5\x8e\xda\x8a\xa2\x5c\xf8\x15\x48\xee\xfb\xee\xd6\x57\x6e\x11\x3b\xee\xfe\xef\x52\xca\xa1\x8b\x8f\xbf\xbc\xf9\xb6\xd6\x14\x2d\xf6\xf2\x66\xda\xc5\x7a\xb6\x21\x69\x17\x63\x65\xa6\x39\x9a\x69\x9e\xb3\x5e\x8e\x30\x79\x34\xb6\x0a\xb2\x47\x96\x5a\x12\x15\x7b\x02\x4f\xfb\x3e\xad\xdb\x29\xaf\x41\xa6\x71\x86\x7a\x88\x0d\x29\x8f\xc4\xc3\x58\x30\x61\xa9\x7a\x2a\xe6\x73\x94\xae\x5c\x43\x3d\xa7\xab\x6e\xbd\x79\x4e\x57\x4f\x64\xbc\xa1\xe7\x74\x35\x0c\xf1\xff\x34\x5d\x3d\xae\x01\xfe\x1c\x9c\xdb\x11\x1f\x5b\x70\x3e\x86\xa7\x52\xc3\x58\x00\xc3\x7b\x30\xf6\x07\xf0\x00\xc6\xbe\x65\xb9\xf4\xa0\x14\xf5\x73\x60\x8d\x4a\xde\x59\x62\xc1\x0f\x3d\x84\xb8\x55\xa3\x81\xe5\x84\x2f\x8c\x94\xbe\x65\x30\xc1\x21\x55\x09\x23\xb7\x17\x5c\xf0\xde\xcc\xa1\x58\xf6\xad\x6e\x0e\x20\xf0\x6f\x27\xe6\x77\x16\x54\x67\xea\x67\x54\x29\xc8\x5e\x2b\xe8\x4c\xf8\x2b\x21\xf3\x77\x19\x86\xa8\xc2\xf8\x95\x12\x8c\x86\xd5\x9b\x11\x43\xd0\x6c\xc1\x3a\x64\x2e\x6a\xd0\xca\xe0\x46\x7b\x01\x70\x3d\xa8\xb4\x6b\x14\xde\x2a\x9d\x2d\xa8\xbe\x37\xbd\x14\xcf\xa9\x8b\xfa\xf9\x07\x4b\x5d\xec\x1b\x51\x83\x9c\xd9\xad\x89\xb1\xf7\x51\x88\xa2\x5d\x82\xe1\x1b\x22\x4e\x33\x88\x9c\xf1\xa6\x7f\x4c\xb5\x5b\xe2\x74\x05\xf8\xcc\x9b\x7e\xaa\xbc\x69\xb7\xac\xd9\x87\x60\xcc\x0e\x61\xcb\x0e\xa2\x00\xd6\x89\xa7\xef\xdc\xb0\x64\xeb\xa4\xd3\x77\x4e\x18\xb2\x9b\x9c\xdb\x81\xec\xd8\xfe\xb5\xeb\x20\xf6\xea\x10\xe6\xea\x1e\xd6\x6a\x2d\x0b\x0e\xa3\xad\x1e\x9b\xb2\x3a\x30\x56\x9d\x53\x55\x07\xd3\x54\x8f\x47\x51\x1d\x4e\x4f\x5d\x3d\x22\x7a\x6a\x49\x4d\xed\xa5\xd4\xc3\x52\x53\x1d\x3e\xa5\x73\x4b\x49\x75\xb2\x6c\xfe\x9a\xa3\x65\x00\x87\xb5\xfb\x92\xa9\x7e\x6c\x0e\x53\x92\x38\x19\xa2\x7b\xbb\xb3\x20\x89\x8b\x5d\xae\xaf\xe9\xf8\xfe\xb3\xe5\x30\xad\x7b\xef\xf0\xf4\xda\xdd\x39\x5e\x55\x7b\xe0\xad\x07\xdc\xb6\xe7\x96\x03\xd3\xd6\x21\x2f\x7e\xb7\x4c\x2f\xad\xf3\xd1\x23\x7a\xa9\x7a\x7f\xd0\xed\x30\x63\x7b\xe3\xfd\x3f\x6e\x50\x5f\xcc\x37\x71\x9a\x3f\x99\x51\xdb\x0c\xac\xfd\x64\x87\xf1\x42\xf6\x7b\x1d\x76\xc3\xae\x46\xf7\xf3\x03\x93\x48\x2c\xd0\xa8\xdc\xd2\x5a\x97\x62\x57\x31\xd5\xe0\xa9\x84\x04\x70\x81\x12\x09\xde\x4a\x92\xe4\xbd\xbd\x9c\x6f\x37\x8e\x36\x1e\x2d\xa0\x7c\x33\xae\xc2\x58\x10\x39\xa7\x3c\x7b\xa1\xf9\x02\x9d\xbd\xdf\xbc\x30\x13\x5a\x8b\x45\x79\xa5\xc0\xcd\xde\x04\x68\xe0\xd7\x15\x33\x05\xfb\x05\x7a\x7d\x76\xf6\x7d\xd1\x6c\xec\xdb\xce\xb5\xd9\xe0\x5a\x59\x0b\xac\xd7\x48\x69\xa2\x69\xf0\xd7\x9f\x3f\x7d\x44\x2f\xb3\xcf\xff\xf8\xf2\x11\x61\x3f\x24\x2a\x9e\x09\x22\x43\x9f\x28\x05\x5a\xf9\x4b\xe0\xa1\x90\xca\x2f\xdf\x4c\xf5\xaf\x6b\x5f\x46\x0b\xca\x47\x06\xd5\xfe\x5a\xc0\xe9\x1e\xf0\xb9\x4c\x82\x02\xf7\x5a\xf9\x0b\xc2\xc9\x1c\xa4\x6d\xaf\x65\x5a\x36\xcf\x14\xff\x5f\x00\x00\x00\xff\xff\x0a\x8e\xff\x96\x6e\x45\x00\x00")

func templatesViewsManagerHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsManagerHtml,
		"templates/views/manager.html",
	)
}

func templatesViewsManagerHtml() (*asset, error) {
	bytes, err := templatesViewsManagerHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/manager.html", size: 17774, mode: os.FileMode(420), modTime: time.Unix(1509223443, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsJsManagerMinJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\xcb\x6e\xdb\x30\x10\xfc\x15\x75\x6b\x04\x5c\x58\x21\x7a\xe8\x49\x86\x10\x14\xe9\xa9\x40\xdb\x43\xd1\x53\x92\x03\x23\xad\x2c\xc6\x34\xc9\x2e\x57\x4e\x5c\x43\xff\x5e\x58\xaf\xc4\x39\x15\x3a\x10\x33\x3b\x3b\x1a\x0d\xb5\x52\x4d\xe7\x2b\xb1\xc1\x2b\x3c\xad\x14\xe8\xca\x38\x77\xcd\x94\x3a\x27\xd9\x63\x27\x12\xbc\xae\x5c\x48\x04\xa8\x2b\x67\xab\xdd\xa5\x5e\x5a\x9b\x50\x47\xc3\xe4\x45\xa1\x6e\x6d\x4d\x0a\x7b\xcc\x57\x0a\x9a\xc0\xfb\xc1\x0d\x50\xa7\xee\x71\x6f\xe5\xed\x2a\x1d\xc8\x8b\x8e\x3c\x9c\x5f\xa9\x31\x9d\x13\x85\x9b\x83\xe1\x8c\xca\xc9\x37\x6f\x4b\x5a\xbc\xf3\x31\x53\xb9\x52\xf0\x11\xd6\xa4\x6b\x23\x46\xc1\x48\x02\x0e\xe3\x18\x7c\xa2\x72\xa4\x74\x63\x7d\xad\x40\xcf\x34\x60\x2e\x61\xbb\x75\x54\x2e\x21\x88\x39\x30\x9e\x66\x85\x66\xda\x87\x03\xdd\x3a\x93\xd2\xdb\xa4\x4c\xd2\xb1\xcf\x06\xf5\x0d\x18\x47\x2c\xd7\xa9\xab\x2a\x4a\x09\x8a\x09\xd7\xc6\x6f\x89\xa1\x47\x6d\xea\xfa\xbf\x1c\xa6\x8d\xe2\x9d\x61\x8f\xfd\xa6\xd5\xcf\xc6\xca\x77\x52\x27\x6a\x1a\xaa\xa4\x80\xc6\x54\xf4\x18\xc2\x0e\xce\xcd\x6a\xf3\x64\x5e\xd4\x49\x8e\x91\x0a\xd2\x46\x84\x15\xec\x49\xda\x50\x03\xe6\x1d\xbb\x85\x34\xc3\xfb\x01\xf3\x73\x55\x05\xe9\x44\x6c\x8d\xb3\x7f\x49\x61\x5e\x85\x7d\x74\x24\x54\x5c\xc4\x1c\x8a\x4b\x6d\x78\x56\x98\x2f\x29\xe0\x7c\xa9\x80\x7d\x3e\xe4\x7f\xb7\x30\x36\xd7\xca\xde\x29\xf8\xf2\x64\x5e\x32\xa6\x3f\x1d\x25\xc9\x1a\x63\x1d\xd5\x4b\xeb\xea\xc3\x27\xec\xf3\xe9\x2b\x5f\x3d\x18\x4f\xe7\x1b\x8f\x25\xc0\xc6\x36\x8a\x75\x4b\xa6\x26\x4e\x23\x3d\x81\xf2\xee\x61\xd3\x04\x56\x67\x6a\x47\xc7\xcc\xfa\xec\x55\x38\x0f\x0e\xc6\x5d\x0c\xee\x76\x74\x7c\xc0\x19\x4c\xa7\x76\xe4\xb7\xd2\x3e\x94\x3b\x3a\x6a\x09\xbf\x63\x24\xbe\x35\x89\x14\xae\xa1\xc8\x60\x7d\x30\x6e\x13\xcb\x59\xfc\x14\xac\x57\x70\xef\x01\xd7\x70\xef\xef\x3d\xf4\xac\xc7\x8e\x6e\xe2\xba\xfc\xf6\xeb\xe7\x0f\x9d\x84\xad\xdf\xda\xe6\xa8\x06\x18\x0d\x27\x52\xb3\x0a\x73\xdf\x39\x97\x7f\xc6\x82\xf5\xd0\xdd\xd5\x95\x8a\xeb\x72\x02\xaf\x7f\xec\x58\x5f\x5c\xaa\x9a\x05\x7d\x8f\xe7\x67\xf3\x2f\x00\x00\xff\xff\xc0\x59\x03\x3e\xa3\x03\x00\x00")

func assetsJsManagerMinJsBytes() ([]byte, error) {
	return bindataRead(
		_assetsJsManagerMinJs,
		"assets/js/manager.min.js",
	)
}

func assetsJsManagerMinJs() (*asset, error) {
	bytes, err := assetsJsManagerMinJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/js/manager.min.js", size: 931, mode: os.FileMode(420), modTime: time.Unix(1509223976, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/manager.html": templatesViewsManagerHtml,
	"assets/js/manager.min.js": assetsJsManagerMinJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"js": &bintree{nil, map[string]*bintree{
			"manager.min.js": &bintree{assetsJsManagerMinJs, map[string]*bintree{}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"manager.html": &bintree{templatesViewsManagerHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: AssetInfo, Prefix: k}
	}
	panic("unreachable")
}
