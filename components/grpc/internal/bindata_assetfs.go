// Code generated by go-bindata.
// sources:
// templates/views/manager.html
// assets/js/manager.min.js
// DO NOT EDIT!

package internal

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsManagerHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x5f\x8f\xdb\xb8\x11\x7f\xcf\xa7\x60\x79\x8b\x22\x9b\x46\xd6\x75\x13\x14\x68\x6a\x39\x28\xae\x2d\x9a\x22\xc9\x15\xb9\xeb\xd3\xf5\x1a\xd0\xd2\xc8\xe2\x96\x26\x55\x92\xf2\xee\xc2\xd8\xef\x5e\x90\xfa\x63\xc9\xb6\x6c\x49\xa4\xb7\x49\x71\x7a\xd8\x95\x25\xce\x1f\xce\x6f\x38\x1c\x92\xa3\xed\x16\x25\x90\x52\x0e\x08\xc7\x82\x6b\xe0\x1a\xa3\xc7\xc7\x67\xf3\x84\x6e\x50\xcc\x88\x52\x11\xce\xc9\x0a\x02\x4d\x35\x03\xbc\x78\x86\x10\x42\xed\x97\xf6\xf9\x67\x06\xa9\xae\x5e\xda\x06\xd9\xab\xc5\xea\xd3\xdf\xbf\x9b\x87\xd9\xab\x8a\x24\x4c\xe8\x66\xf1\xac\xfa\xd7\x61\x1f\x33\x20\x32\xa5\xf7\x78\x51\xbf\xdd\x6e\x11\x4d\xd1\x0c\xa4\x14\x72\x5f\x19\xc2\x40\x6a\x64\xff\x06\x09\xe1\x2b\x90\xf5\x0f\xaa\xd6\x54\x29\xb2\xdc\xa9\xb9\x2c\xb4\x16\x1c\xe9\x87\x1c\x22\x5c\xfe\xc0\x3b\xa9\x42\x01\x46\x09\xd1\xa4\x26\xad\x98\x63\x44\x24\x25\x41\x46\x93\x04\x78\x84\xb5\x2c\x00\x2f\x7e\xad\xe9\x1a\xd4\x1f\xe6\x61\xc9\xa6\x14\xb0\xdd\xb6\x95\x2c\x95\xdf\x6e\x11\xf0\xc4\x3c\xe8\xa8\x2d\xc5\xdd\x11\xe3\xc5\x82\x05\xeb\x24\xf8\xed\x0d\x6e\x18\x4a\xd3\x27\x74\xa5\x5e\xa2\x2b\x05\x72\x43\x63\x40\x6f\x22\x34\xab\xee\x95\x61\x5c\x5b\x79\xbb\x6d\xda\xbc\x4b\x4c\x2b\x09\x39\x23\x31\x34\x4f\x67\x1f\xc9\x1a\x10\x9e\x61\x84\x3f\x5b\x54\x77\x00\xb5\x94\xb8\xff\x9c\x13\x0e\xac\x05\xdf\x61\x8b\x36\xfa\x9d\x56\xd9\xcd\xa2\xa5\x46\x29\xf0\xf1\x71\x1e\x66\x37\x47\x1a\x9f\x02\xbd\xd3\xf0\xc8\xa3\x8e\x3a\xb5\xa7\x2e\x9e\x9d\x14\x42\xe2\x58\xc8\x84\x1a\xd4\x69\x12\x61\x12\x74\x2d\xf6\xf8\x88\x91\x14\x0c\x22\xac\xc9\x92\x51\x55\x23\xbf\x2e\x98\xa6\x0a\x18\xc4\xe6\x39\xd4\x2e\x70\x20\xaa\x8b\xd8\xfa\x25\xba\x5a\x83\xce\x84\x85\xa2\xb1\xc8\x07\xfb\xa8\x83\xdb\x29\x95\x8f\x41\xb1\x27\xaf\x92\xb2\x07\x79\xf9\xb0\x1f\xf1\x23\x8c\x68\xda\x90\xbd\xe3\x79\xa1\x7f\x7c\xc8\xe1\x94\x9e\x56\x57\xd2\xd1\x34\xc8\x80\x24\x94\xaf\x5a\x86\x2c\x6d\x9d\x1d\xd8\x3a\xe8\xa8\x6e\x6c\x6f\xc7\x9e\x16\xab\x95\xa1\x8c\x05\x63\x24\x6f\x86\x64\x4e\x24\x70\x1d\xe1\x6f\x8e\x81\x96\x49\x48\x23\xfc\x4d\x3c\x40\x86\x05\x14\xee\x73\xc2\x13\x48\x22\x9c\x12\x66\x44\xd8\xa7\xc6\x89\xa4\x60\xc6\x19\xcf\x33\xea\x47\xa4\xb1\x4c\xf6\xba\x6b\x9a\x6a\xcc\xec\x38\xb5\x46\xc7\xeb\xd3\xfc\xe6\x21\x39\xd3\xc0\xb8\x8c\xb1\xf3\x10\x1b\x74\xb4\xaa\xed\x8c\x76\x06\x6f\xa0\x2b\x9d\xaf\xb4\x0e\x23\x4b\x60\x0c\x92\xe5\xc3\x20\x30\x07\xd8\x67\xdf\xcb\x83\xa5\x48\x1e\x06\x10\xee\x13\x1f\x8f\x57\xc3\xa9\xfb\x62\xd9\x49\x0e\xe7\x10\x3b\x4a\x44\x6b\xa1\x29\x41\x29\x09\x88\x94\xe2\x2e\x90\x74\x95\x69\xf3\x33\xbd\x33\xc1\x8f\x8e\xe7\xdb\xf2\xa8\x66\xdc\xd6\xbe\x35\x85\xd9\x7e\x1c\xf8\x41\x4b\x20\xeb\x29\xcc\xcc\x35\x57\x39\xe1\x75\xc7\xad\x17\x21\xfb\x37\xb8\x23\x92\x9b\x50\xb1\x50\x96\xff\x3c\x34\x0d\x27\xf5\xbe\x9a\x60\x47\x69\x65\xc7\xdc\x38\x92\xa1\xd3\xd5\x69\xb9\xe3\x9a\xf7\x4c\x73\xa3\xf4\x4e\x85\x5c\xa3\x12\xd0\x08\xe7\xc2\xce\x6b\xb1\xa6\x82\x47\xf8\x6d\x75\x13\x13\xc6\x76\xa9\x90\xfd\x61\xc3\xae\x04\x55\x30\x1d\x61\x39\x36\x7c\x6f\x08\xa3\x09\xd1\x42\x8e\x54\xd6\x2a\x4c\x8d\xd7\x55\x69\x5a\x99\x76\x61\xc4\xc9\x1a\x22\x5c\x69\x80\xd1\x86\xb0\x02\x22\x7c\x24\xd7\xf0\x2b\xb0\xec\x61\x47\x5e\x37\x78\x1f\xcb\x39\xce\x5d\x3d\x73\xed\xec\x2f\x14\xd8\xe9\xd4\xa0\xb7\x07\xed\x0c\xdc\x24\x29\x06\xb9\x5c\x70\x45\x37\x63\x43\x5b\xc3\xd2\xf2\xe9\x30\x45\x25\xeb\x4c\x6c\x40\x56\xf7\x4a\x4b\x9a\x43\x32\x51\x46\x29\xc7\xe4\x0c\x2e\xf4\x72\x3a\x71\xa5\xc0\xc2\x5a\x7e\x1e\xea\xcc\x9d\x95\x41\xd2\x0f\xa7\xf7\x26\x4c\xfa\x61\xf5\x47\x3b\xcc\xdd\x78\xcd\x43\x17\x4b\x1b\xd9\x8e\x38\x9b\xfc\x60\x3a\xfd\x2e\x33\x4f\x5f\xa2\xab\xd4\x00\x6e\x13\x73\x8f\xa3\xb0\x25\xea\x6a\x43\xe4\x5e\x46\x6e\x45\x1e\x24\xe4\x53\x65\x78\x70\xfb\xc4\xe6\xa2\x2d\xb5\x4c\x2a\xaa\x1d\x20\x3a\x64\x3b\x64\x09\x31\xe4\xda\x6e\xc3\x17\xce\x4c\xe6\xb9\x84\x85\x75\x83\xbb\x5a\xbf\xbf\xfd\xf0\xfd\x47\xdb\x6d\xf3\xca\x83\x96\x36\xae\x97\xac\xdf\xa9\x0f\xa0\x14\x59\x79\xe9\x3f\x2a\x97\x5a\xe5\x42\xe7\x96\x6c\x88\x8a\x25\xcd\xf5\x9b\x8d\xa0\xc9\xf3\x6f\xaf\xf1\xa1\xc9\xcf\x2e\x19\x06\x76\x08\x98\xf2\xd6\x83\x4b\xf8\xc5\x94\xe4\xef\xd8\xf5\x22\x74\x64\xe2\x67\xe8\xf4\x66\xcb\xaa\x88\x63\x50\xaa\x8d\xb4\x9d\x1f\x2c\xd4\x36\x73\xf6\x35\x76\x7d\x8c\xb4\x56\x3a\x62\x73\xab\x60\x25\x45\x91\x3b\x64\x09\xed\xab\x1c\x66\x5c\xe8\xdd\x50\xfb\x04\x39\x10\x0d\x5e\x3c\xa1\x2b\x46\x48\xf4\x1c\xfe\xd3\xf1\x5b\x9c\x88\x62\xc9\x00\x5f\x1f\xbe\x49\x99\x20\x1a\x5f\xfb\x54\x03\xed\x27\xa8\xbc\x58\x2f\x41\xd6\x09\xea\x41\x08\x6f\xd2\x78\x93\xf6\xd7\x9b\x1a\x18\xe5\x44\x6b\x90\x3c\xc2\xff\xfa\x29\xf8\xcd\xcf\x6f\x7f\xfa\x36\xf8\xfd\xcf\x2f\x9e\xff\x73\x56\xde\x5c\xbf\xbd\xea\xe4\xb8\x25\xc7\x3f\x41\x4a\x0a\xa6\x2d\xd3\xd0\x0f\x76\xa8\x15\x55\x7a\xac\x4b\xb9\x7e\x75\x73\xcc\xb8\x94\xeb\xdf\xbd\x3e\xf6\x42\xf5\x92\xa8\x7e\x9a\x94\xde\x43\xd2\x43\x65\xdf\x59\xba\xaf\x04\xc8\x2f\x07\xbd\xa2\x17\x8b\xa2\x17\x8b\x13\x50\x7c\x25\x48\xfc\x8f\x81\xd8\xb7\xda\x52\x18\xfd\x2e\x69\xb1\x38\x83\xf8\xdf\x4b\x71\x7f\xde\x66\xb7\x2a\x50\x77\x54\xc7\x19\xea\x5a\xaf\x93\x2c\xed\x4c\x64\x19\x43\xb2\x9b\xd9\x9f\xce\x75\xcd\x5a\x96\xaf\x8e\x79\xe1\xf2\x41\x83\xba\xb0\x0f\x6a\xb8\xd7\x63\x3d\xf0\xa9\x5d\xcd\x73\xff\xf7\xf2\xe5\x3f\xf3\x62\xf2\x2e\xe3\xa9\x6b\x5e\x9e\xdd\x8c\xb2\x2d\x2a\x69\x6e\x3c\xa5\x2c\xfb\xd7\x6e\x31\x0a\x2f\xd1\x15\x98\x8e\x9b\xb5\x68\xa9\xd7\xa5\xec\x60\xae\xb9\xc8\x35\x15\xbc\xed\x39\x46\xfa\xec\xa3\x8d\x80\xc6\x1a\x15\x28\xf6\xe9\x3b\xb5\x73\xa8\xca\x22\x90\x44\xb8\xbe\xc3\xcd\x20\x5d\xec\x18\xd5\x0b\xc9\x52\xd0\xc5\xcc\xe7\x29\xed\xdf\xbf\xe6\x61\xd9\x39\xbf\x7a\x5f\x68\xfc\x20\x9b\xb3\xc3\xbd\x26\x12\xc8\xb8\xd0\x61\x56\x0b\x15\xa1\xff\xae\xfa\x85\xc6\x2f\xc7\xd6\x79\xbc\x27\x76\x34\x45\x84\x27\x97\x5b\x8b\xf4\x2c\xa6\x82\xa5\xe6\x1e\xa3\xd3\xfc\x57\x41\xe0\x8f\xd9\xa9\x4a\x8b\xa5\xe6\x68\xa9\x79\x55\xad\xe1\x39\xc0\x76\xd6\xcf\xe5\x31\x9b\x96\x44\x65\x81\x30\x2e\x3f\xed\x84\xa9\x57\x56\xa7\xf8\xc3\xc7\x15\x04\x1e\xb5\x1b\x82\x01\xe5\xa9\xb8\x3c\x02\x39\x2b\xd4\x97\x6e\xfe\x91\x07\x73\xa7\x2e\x7f\x01\xcb\x83\x52\x2f\x42\xd7\x5d\x5d\xb7\x7d\x7f\x77\x63\xcc\x43\x87\x9d\xff\x79\x68\xcf\xa9\x26\x9c\x09\x4e\x33\xbd\xc3\xf4\xd2\xd4\x70\x0c\x39\x6c\x6d\x1d\xd5\x56\x87\xb4\x18\x29\xfd\xc0\x20\xc2\x09\x55\x39\x23\x0f\x6f\xb8\xe0\x93\xcf\xfe\x32\x39\x75\xf9\x30\xa0\xc8\xee\x78\xf1\xdc\x68\x41\xed\x6a\xba\xf2\xb0\x13\x1a\x1b\xdc\x65\x54\x43\xa0\x72\x12\xc3\x9b\x5c\x42\x70\x27\x49\x3e\xfa\xac\xbe\x91\x54\x95\x21\xba\x68\xc8\xf8\x67\x25\x18\x4d\x76\x45\x8d\x2e\xdc\x6c\x2a\xe7\xb2\xa5\xda\x39\x2f\x86\x7b\x1d\xc4\xc0\xb5\xd3\x64\xdc\x59\xcb\xaa\x62\xb9\xa6\xfa\x60\xb6\xa9\xf7\xb0\xeb\xd5\xc7\x77\xb6\xd0\x60\xaa\xa3\x39\x81\x39\x8e\xc4\xd8\xfb\x22\x35\x1e\x63\x9c\xe1\xff\xa8\xe6\x89\x41\xea\xad\xe4\xe9\xfb\x42\xfb\xad\x79\xda\x31\xfc\xa5\xe4\xe9\x6b\x2d\x79\xf2\x5b\x0e\xf3\x14\xa5\x30\x2e\x65\x30\x4e\xb5\x00\x9e\xca\x5f\xfc\x94\xbe\x78\x28\x7b\x99\x9e\xae\x3a\x95\xa8\xb8\x94\xa7\x9c\x29\x4d\x69\x45\x38\xb7\xda\x14\x47\x3f\xf1\x5e\x2f\xe2\xbf\x56\xc4\xf9\xf4\xfa\x6c\x8d\x88\xa3\x7a\x97\x2a\x10\x99\x50\x1c\xe2\xda\x13\x5f\x3b\x9a\xbe\x3d\xc0\xc7\xe2\xdb\xa9\x1a\xc4\x7d\x50\xb8\xb9\xf0\xf4\x12\x12\xbf\xde\x4d\x72\x2f\x9e\x7d\xb6\x3b\x6b\x92\xfb\xd8\x5b\xf2\xb2\x53\x31\x75\xf6\x98\x3c\x69\xb9\x69\x3d\x79\x6f\x65\xd2\xbe\xca\xe5\x12\xc7\x81\x4d\x07\x34\x3b\xd3\x64\x60\xdc\x1b\xf2\x59\x54\xcf\xe7\x4e\xfd\x61\xfc\x7c\xf7\x9e\xea\x93\xa3\xf3\x4e\x77\xc2\x8c\xfd\xc4\xe7\x3f\xfd\x6b\xaf\x97\xbb\x7c\xba\x1f\x94\xb6\xb6\xe1\x5a\x1f\xb4\xde\x2a\x5b\x14\xb1\xdd\x22\xa5\x89\xa6\xf1\x5f\x7f\xfc\xf0\x1e\x3d\x2f\xef\xff\xf1\xe9\x3d\xc2\x61\x42\x54\xb6\x14\x44\x26\x21\x51\x0a\xb4\x0a\x37\xc0\x13\x21\x55\xd8\x7c\xcf\x10\xde\xb6\x7e\xcc\xd6\x94\xcf\x0c\x57\xfb\x1d\xd9\xf5\x19\xe6\x2b\x99\xc7\x35\xdf\x5b\x15\xae\x09\x27\x2b\x90\x96\x5e\xcb\xa2\x21\x2f\x15\xff\x6f\x00\x00\x00\xff\xff\x38\xe3\x64\x4b\x88\x3b\x00\x00")

func templatesViewsManagerHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsManagerHtml,
		"templates/views/manager.html",
	)
}

func templatesViewsManagerHtml() (*asset, error) {
	bytes, err := templatesViewsManagerHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/manager.html", size: 15240, mode: os.FileMode(420), modTime: time.Unix(1508076907, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsJsManagerMinJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\xc1\x6e\x14\x31\x0c\x86\x5f\xa5\x32\xab\xca\x16\xc1\x27\x4e\xb3\x1a\x71\xe1\x84\x04\x1c\x78\x82\x6c\xd6\x61\x42\xb3\x49\xe4\x38\x2d\x65\xb4\xef\x8e\x66\x5a\x56\x80\x72\x48\x62\xd9\xbf\x3f\x7d\x07\x8c\xa3\x04\x4b\xb5\x20\xad\x07\x04\x0e\x3e\xe7\x77\x2a\x7d\x64\xbb\x3b\x0d\xb3\x5a\x38\xe4\xda\x05\x88\x43\x4e\xe1\xe1\xdf\x7e\x5b\x52\x27\x6e\x5e\xa5\x18\x12\x2f\xe9\x2c\x48\x57\x72\x07\x84\x58\xf5\xb2\xa7\x01\x71\x1f\xa7\x4b\xb2\xbf\x47\xe5\x51\x8a\x71\xd3\xfd\xfe\x28\xd1\x8f\x6c\x48\xc7\x47\xaf\x77\x32\xbf\xe6\xba\x65\xfe\x7f\xc3\x71\xe1\x27\x9f\xec\xb3\xe0\x2a\x31\x4a\xb0\x09\xa2\x0f\x72\xaa\xf5\x01\xb6\xb5\xec\x7f\xf8\x9f\xb8\xda\x73\x93\x49\xd8\x9b\x29\xc2\x45\x6c\xa9\x67\x20\x37\x34\xdf\x8a\x7e\x07\x01\x72\x67\x6f\x7e\x12\xee\xa2\xc9\xe7\xf4\x4b\x90\x5c\x1f\x21\x48\xef\xd3\x0d\x57\x69\xdd\xc0\xda\x0c\x70\x54\x7e\x91\xf3\xa1\xcd\x9f\xbe\x7d\xfd\xc2\xdd\x34\x95\xef\x29\x3e\xe3\xfe\x6d\x5e\xbb\xe0\x9f\x26\x72\x65\xe4\xec\xde\xd3\xa4\x2c\xaa\x55\xef\xef\xb1\xcd\xaf\x6f\x72\xa8\xf3\x01\xe1\x0d\xbc\x15\xde\x30\x10\x5e\xa6\x80\x88\x38\xa6\x72\x46\xd8\x72\x5a\x2d\xbb\xfe\xc5\x2e\x19\x1b\x39\xe5\xbe\xd4\x27\x24\x77\x73\x01\x9b\x77\xa0\xeb\x95\xb6\x73\xfc\x1d\x00\x00\xff\xff\x66\xf4\x41\x35\xd4\x01\x00\x00")

func assetsJsManagerMinJsBytes() ([]byte, error) {
	return bindataRead(
		_assetsJsManagerMinJs,
		"assets/js/manager.min.js",
	)
}

func assetsJsManagerMinJs() (*asset, error) {
	bytes, err := assetsJsManagerMinJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/js/manager.min.js", size: 468, mode: os.FileMode(420), modTime: time.Unix(1508077016, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/manager.html": templatesViewsManagerHtml,
	"assets/js/manager.min.js": assetsJsManagerMinJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"js": &bintree{nil, map[string]*bintree{
			"manager.min.js": &bintree{assetsJsManagerMinJs, map[string]*bintree{}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"manager.html": &bintree{templatesViewsManagerHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: AssetInfo, Prefix: k}
	}
	panic("unreachable")
}
