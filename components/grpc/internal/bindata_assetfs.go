// Code generated by go-bindata.
// sources:
// templates/views/manager.html
// assets/js/manager.min.js
// locales/ru/LC_MESSAGES/config.mo
// locales/ru/LC_MESSAGES/grpc.mo
// locales/ru/LC_MESSAGES/manager.mo
// DO NOT EDIT!

package internal

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsManagerHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x1b\xef\x73\xdb\xba\xed\x7b\xff\x0a\x1e\x5f\xde\xae\xd9\x2a\x3b\x4d\x5e\x77\x9b\x6b\xa7\xb7\xeb\xb6\x5b\x77\x6d\xdf\xae\xef\xed\x53\xd7\xe5\x68\x09\xb6\x98\xd1\xa4\x1e\x49\xd9\xc9\x7c\xf9\xdf\x77\x24\xf5\x83\x72\x24\xd9\x96\xe4\x36\xdb\x4d\x1f\x5a\x47\x20\x01\x10\x00\x41\x00\x84\xb6\x5b\x14\xc1\x82\x72\x40\x38\x14\x5c\x03\xd7\x18\x3d\x3c\x3c\x9b\x46\x74\x8d\x42\x46\x94\x9a\xe1\x84\x2c\x21\xd0\x54\x33\xc0\xd7\xcf\x10\x42\xc8\x07\xda\xf7\x37\x0c\x16\x3a\x03\xda\x01\xf1\xd5\xf5\xf2\xd3\xdf\xde\x4e\xc7\xf1\x55\x36\x65\x1c\xd1\xf5\xf5\xb3\xec\xbf\x0a\xfa\x90\x01\x91\x0b\x7a\x87\xaf\x73\xe8\x76\x8b\xe8\x02\x8d\x40\x4a\x21\x77\x99\x21\x0c\xa4\x46\xf6\xdf\x20\x22\x7c\x09\x32\xff\x83\xaa\x15\x55\x8a\xcc\x4b\x36\xe7\xa9\xd6\x82\x23\x7d\x9f\xc0\x0c\xbb\x3f\x70\x49\x55\x28\xc0\x28\x22\x9a\xe4\x53\x33\xe4\x18\x11\x49\x49\x10\xd3\x28\x02\x3e\xc3\x5a\xa6\x80\xaf\x7f\xa5\xe9\x0a\xd4\xeb\xe9\xd8\xa1\x71\x04\xb6\x5b\x9f\x49\xc7\xfc\x76\x8b\x80\x47\xe6\x45\x85\x6d\x29\x36\x35\xc2\x0b\x05\x0b\x56\x51\xf0\xf2\x12\x17\x08\xa5\x59\x13\x3a\x53\x2f\xd0\x99\x02\xb9\xa6\x21\xa0\xc9\x0c\x8d\xb2\xdf\xca\x20\xce\xa5\xbc\xdd\x16\x63\xde\x45\x66\x94\x84\x84\x91\x10\x8a\xb7\xa3\x8f\x64\x05\x08\x8f\x30\xc2\x37\x56\xab\xa5\x82\x3c\x26\xee\x6e\x12\xc2\x81\x79\xea\x7b\x3c\xc2\xd7\x7e\x65\x54\x7c\x79\xed\xb1\xe1\x08\x3e\x3c\x4c\xc7\xf1\x65\xcd\xe0\x36\xa5\x57\x06\xd6\xbc\xaa\xb0\x93\x5b\xea\xf5\xb3\x56\x22\x24\x0c\x85\x8c\xa8\xd1\x3a\x8d\x66\x98\x04\x55\x89\x3d\x3c\x60\x24\x05\x83\x19\xd6\x64\xce\xa8\xca\x35\xbf\x4a\x99\xa6\x0a\x18\x84\xe6\x3d\xe4\x26\xf0\x88\x54\x55\x63\xab\x17\xe8\x6c\x05\x3a\x16\x56\x15\x85\x44\x3e\xd8\x57\x15\xbd\xb5\xb1\x5c\xa7\x8a\x1d\x7a\x19\x95\x1d\x95\xbb\x97\xcd\x1a\xaf\x41\x44\x17\xc5\xb4\x77\x3c\x49\xf5\xcf\xf7\x09\xb4\xf1\x69\x79\x25\x15\x4e\x83\x18\x48\x44\xf9\xd2\x13\xa4\x93\x75\xfc\x48\xd6\x41\x85\x75\x23\x7b\xbb\xf7\xb4\x58\x2e\xcd\xcc\x50\x30\x46\x92\x62\x4b\x26\x44\x02\xd7\x33\xfc\x5d\x9d\xd2\x62\x09\x8b\x19\xfe\x2e\x3c\x80\x86\x55\x28\xdc\x25\x84\x47\x10\xcd\xf0\x82\x30\x43\xc2\xbe\x35\x46\x24\x05\x33\xc6\xb8\x1f\x51\xb3\x46\x0a\xc9\xc4\x3f\x54\x45\x93\xed\x99\x12\x93\xb7\x3b\x7e\x68\xc7\x37\x1d\x93\x3d\x03\x8c\xc9\x18\x39\x1f\x22\x83\x0a\x57\xb9\x9c\x51\x29\xf0\x42\x75\xce\xf8\x9c\x74\x18\x99\x03\x63\x10\xcd\xef\x0f\x52\xe6\x01\xf2\xd9\xb5\xf2\x60\x2e\xa2\xfb\x03\x26\xee\x4e\xae\xf7\x57\x87\xcf\x6e\xf2\x65\xad\x18\xf6\x69\xac\x76\x12\xcd\x89\x2e\x08\x5a\x90\x80\x48\x29\x36\x81\xa4\xcb\x58\x9b\x3f\x17\x1b\xe3\xfc\xe8\xf1\x78\x3d\x8b\x2a\xf6\x6d\x6e\x5b\x5d\x90\xed\xfa\x81\x9f\xb4\x04\xb2\xea\x82\xcc\x3c\x53\x95\x10\x9e\x2f\xdc\x5a\x11\xb2\xff\x06\x1b\x22\xb9\x71\x15\x66\x47\xd0\x97\xbf\xe3\x08\x2b\x4b\x08\xa3\x33\xbb\x29\xcc\xbc\x4e\xc2\xc8\xce\xdb\xa3\x98\xb4\x5b\xf0\xb8\x29\x87\x9e\x5e\xed\x74\x8f\x1b\xde\x70\xea\x1d\xc5\xf7\x42\xc8\x15\x72\xfa\x9d\xe1\x44\xd8\x63\x2e\xd4\x54\xf0\x19\x7e\x93\xfd\x08\x09\x63\x65\x64\x44\x18\x43\x66\x52\x10\x0b\x49\xff\x2d\xb8\x26\x2c\xf3\xca\x12\x54\xca\xf4\x0c\xcb\x03\xbc\x8e\xf3\x2a\x06\xcf\x8e\xa7\x5f\x13\x46\x23\xa2\x85\x3c\x72\x21\x76\x31\xd4\x18\x68\x16\xd1\xb9\x08\x0d\x23\x4e\x56\x30\xc3\x37\x19\x3b\x18\xad\x09\x4b\x61\x86\x6b\xe2\x92\x81\x29\xba\xf5\x56\x08\x56\x3d\x7d\x5d\x80\xb2\xef\x69\x38\x98\x47\x7f\xa6\xc0\xda\xe3\x88\xc6\x25\xf8\xe1\xba\x89\x68\x8c\x1e\x13\xc1\x15\x5d\x1f\xeb\x07\x0b\x94\x16\x4f\x05\x29\x72\xa8\x63\xb1\x06\x99\xfd\x56\x5a\xd2\x04\xa2\x8e\x34\x1c\x1d\x13\x60\xf4\x99\x2f\xbb\x4f\xce\x18\x40\x1b\x1a\xe9\x78\x86\x5f\x5e\x7c\xef\xf9\x2e\xab\x8e\xdc\x75\xe9\x78\x30\x2a\xaf\x2a\x54\x8c\xe6\x4f\x40\xa4\xba\x94\xf7\xc6\x3d\x9f\x80\xca\x55\x85\xca\x1f\xac\xab\x19\x82\xcc\x74\xdc\x47\xab\x86\x76\x4f\x9b\x32\x81\x4b\xf7\xf9\x65\xca\xb0\x78\x81\xce\x16\xc6\x8e\x6c\xc6\x30\xe0\x8e\xf7\x48\x9d\xad\x89\xdc\x49\x15\x2c\xc9\x47\x99\x42\x57\x1a\x03\x6c\xb1\xc8\x06\xc9\x1e\x5b\xd6\x42\x7a\xa8\x28\x47\xdb\x0b\x01\x2a\x9d\xb1\x63\xed\x9d\xfa\x00\x4a\x91\x65\xa7\x38\xab\x96\x45\x92\xa5\x32\xb7\x64\x4d\x54\x28\x69\xa2\x27\x6b\x41\xa3\xe7\x17\xe7\xed\xd9\x91\x26\x72\x09\x26\x3b\xda\x7f\x10\x07\xa5\x0d\x3c\x3c\x04\xb7\x4a\x70\xec\x49\x3b\x4b\xf9\xf6\xe6\x1b\x07\xaf\x28\x91\x60\xf3\x92\x4e\x8c\x79\x65\x11\x97\xa3\x88\x54\x5b\x6e\x25\xd9\xe4\x1c\xff\xf5\xa7\x1f\x3f\x5a\x8e\x13\x09\x83\xe8\x17\x98\x1a\x4c\xa1\x8f\x04\x3b\x08\x83\xc7\x87\xb7\xbb\xcf\x30\xbb\xa9\x31\xb2\x57\x69\x18\x82\x52\xbe\x61\xd9\x33\xa5\x0c\xeb\x07\x61\xa0\x2c\xeb\xd8\x93\xa4\xbf\xf6\xfd\xc0\xc8\x86\x79\xc1\x52\x8a\x34\x29\x82\xdd\x5f\x52\x2a\x21\xb2\x81\x9d\xef\x05\x3e\x65\x00\xf4\xf0\xa0\x65\x0a\xa5\x0d\xd9\xea\x42\xa1\xb1\x02\x4d\x02\x44\xd7\xa2\x71\x80\x7d\x68\x06\xda\x99\x95\xba\x98\x11\x60\x60\x97\xec\x98\xe2\x42\xd7\xae\x0f\xc5\x34\x1a\x9c\x15\x47\x52\x48\xf4\x1c\x7e\xa9\xec\x17\x1c\x89\x74\xce\x00\x9f\x3f\x86\x7c\xfe\xd2\x0c\x5b\x30\x41\x74\xfd\xa4\x1c\x34\x94\xc3\xf6\x93\x01\x9e\xae\xe6\x20\xf3\x64\xe0\xd1\x09\x56\x78\x33\x9b\x4a\x65\xc5\x26\x8c\x12\xa2\x35\x48\x3e\xc3\xff\xfc\x1c\xfc\xe6\xcb\x9b\xcf\x17\xc1\xef\xbf\xfc\xfa\xf9\x3f\x46\xee\xc7\xf9\x9b\xb3\x4a\x3a\xe1\x30\xfe\x11\x16\x24\x65\xda\x22\x1d\x0f\xa6\x03\x6b\x6d\x0d\x8a\xa0\x5c\x5f\x5d\xd6\x8b\xb4\x11\x44\xb9\xfe\xed\x0f\x8d\x73\xea\x41\xaa\x85\x50\x33\x4c\xb5\x90\x6a\x86\xa9\x05\xbd\x83\xa8\x91\x5a\x0b\xd4\xc1\x1a\x29\x96\xd0\x27\x6e\x66\x4f\xc3\xb6\xd2\x16\x9d\x37\xc3\xd2\x16\x9d\x37\xc3\x5a\x55\xde\x02\x6c\x55\xf8\x13\xd7\xf7\x13\x53\xf7\x5c\x08\x56\x2f\xc7\x0c\x72\x0a\x21\x86\x31\x84\xff\x9a\x8b\xbb\xfd\x62\xbc\x55\x81\xda\x50\x1d\xc6\xa8\x2a\xd0\xca\x61\x5d\x4a\xcd\x22\x86\xa8\x8c\xcb\xbe\x8e\x10\x95\x96\x94\x2f\x1b\xfc\x4f\x23\x6c\x7e\xaf\x41\x35\xc8\x3e\x03\x9d\x42\xf8\x1a\xee\xf4\xb1\xf6\xfb\x35\x0d\x75\xa0\x35\xa3\xc7\xf9\xe1\x9f\x78\xda\xb9\x6e\x5e\xf7\x4c\xdd\x2d\xe4\x51\xb2\x44\x6e\xce\xe5\x40\xc1\x5a\xfe\x94\x55\x0b\x78\x81\xce\xc0\x2c\x74\x32\xcb\xf9\x19\x7a\xdd\xe6\x99\x8a\xc4\x44\xa9\xbe\x65\x18\xaa\xa3\x8f\xd6\x3f\x9a\xd5\x67\xc2\xb7\x6f\xdf\xa9\xd2\x60\x32\x09\x98\x90\x3b\xff\x85\x8b\xfd\x7a\x5d\x22\xca\x2b\x0d\x8e\xd0\xe0\xe2\x1a\x20\x6f\xf3\x9f\xe9\xd8\x2d\x66\x38\x3e\x4f\xb0\x1f\xa6\x66\xef\x13\x09\xe4\xc8\xed\x2f\xc5\x46\xcd\xf0\x95\x9f\x41\x16\x89\x7e\x8e\x72\xd8\x85\x0f\xa7\x9c\x61\xb1\xe5\x3d\x30\x43\xe0\x2a\x13\xad\xda\xfc\xee\xbc\x36\x17\x1d\x3c\xdb\xf4\x32\xeb\x60\xae\x87\xc8\xdb\x0b\x2a\x6d\x0d\x3e\x73\xcd\xd1\x5c\xf3\xa2\x49\xc8\xe5\xbc\x12\x56\x62\x0d\xdf\x20\xe9\x2d\x78\xf6\x8b\x28\xee\x5e\x58\x4b\xa2\xe2\x40\xe0\xeb\xae\x77\xa0\x8d\xb4\x2a\xdd\x4a\x83\x60\x3c\x44\xe2\x94\x2f\x44\x2e\x6f\x12\xf5\xb9\xfe\xa9\x65\xe1\xb1\x00\x13\x96\xaa\xa7\x2e\xbd\x23\x6f\x7e\xdb\x9e\xe1\x1c\xce\x00\x4c\xf5\xab\xec\xf5\xbb\xca\xe9\x2f\x88\xe9\xb8\xc7\x65\xce\x74\x6c\xaf\x39\x3b\xdc\x29\x77\x13\xbb\xd7\x5a\x78\x34\xc5\xbc\x5f\xe8\x90\x9b\x7b\xaf\x0f\x20\xbb\xf1\xc7\x48\xe9\x7b\x06\x33\x1c\x51\x95\x30\x72\x3f\xe1\x82\x77\xbe\x3a\x8e\x65\xd7\x80\xfe\x80\x86\xce\xfa\x46\xcd\xa3\x09\xf9\x9d\x9b\xee\xae\x1c\x5c\x9b\xe9\xd1\x1d\x1f\x05\xca\x8e\xe7\xba\xcf\x0a\xe3\x37\x4a\x30\x1a\x95\x9d\xb2\x7d\xb0\xd9\x08\xcc\x15\xbc\xfb\x4b\xc9\x04\x69\x41\x08\x5c\x43\x97\xb6\x8e\x02\xa3\x9f\x46\xaa\x74\xbe\xa2\xfa\xd1\xe9\x92\x5f\x36\x78\x89\x81\xbb\x60\x7e\x6b\x9b\x58\xce\xfa\x64\x8c\xfd\x74\x7b\xdc\x14\x23\xfe\x93\x34\x0e\x1d\x63\x1b\xff\x43\x7d\x75\x0c\x16\x83\xb5\xd5\xfd\x98\xea\x61\xfb\xea\x4a\x84\xff\x6f\xab\xdb\x99\xf2\xdf\xda\x56\x37\x6c\x53\xd5\xd7\x68\xa8\xea\xd3\x4c\xd5\xab\xcb\xc3\xef\x3c\x7a\x75\x92\x26\x2a\xbf\xeb\xe8\xd5\x29\x1a\xa8\x1a\x3b\xb4\x06\x69\x9e\xea\x1e\x06\xf7\xea\x66\xea\xd3\xc9\xb4\xa7\x8b\xc9\xf3\xa0\xfd\xda\x98\x4e\xdd\xc2\xd4\xd3\xb0\x07\x6f\x5d\xea\xdd\xb6\x74\xba\x96\xa5\xfe\xed\x4a\x9b\x27\xd4\xae\x54\xb4\x2a\x75\x62\xea\xeb\xb6\x2a\x0d\x58\xa9\x1d\xb6\x45\x69\x90\x0c\xfc\x5b\xee\x96\x1e\x3d\x4d\xfd\x6a\xb4\xbb\xdb\x94\x24\x83\x6c\xd1\xbd\xcb\x59\x91\x64\x88\x42\xd9\xb7\x54\x7c\xf7\xd3\xb2\x1f\xd7\x9d\x8b\x45\x9d\x0a\x45\xa7\x0b\x81\x0f\x1c\x7a\xc0\xb0\x3d\x43\x0e\x74\x5b\x87\x7c\x53\xd8\x70\xbc\x34\x9e\x47\x4f\xe8\x7b\xbd\xfd\x46\xd7\x22\xc6\xe6\xc9\xfb\xbf\x9b\xf5\x0b\x01\x55\x3c\xd5\xaf\xb1\xbd\xba\xa2\xf7\x35\xb8\xd1\x82\xfb\x14\xdc\xd6\xfe\xbc\xbb\xfd\x71\x68\x1c\x89\x45\x34\x2a\xaa\x63\xdb\x82\xec\x26\xa6\x1a\x02\x95\x90\x10\x26\x28\x91\x10\x6c\x24\x49\x5e\x17\x60\x93\xce\x2c\x98\xd8\x04\xf7\x13\x44\x52\x2d\x4a\xc8\x8a\xdc\x05\x31\xd0\x65\xac\x27\xe8\xea\x02\x56\x25\xc4\x46\xde\x13\xf4\xf2\xe2\xe2\x7b\xf7\x32\x2b\x81\x8e\x76\xee\x96\x50\x56\x20\xdc\x7a\x38\xe5\x92\x72\xf7\xd1\xdd\x04\x5d\xbc\xde\x05\xcc\x85\xd6\x62\x65\x21\x15\xc4\x5e\xf1\xd3\xc3\x96\x08\x45\x35\x15\x7c\x82\x24\x30\xa2\xe9\x1a\xaa\xec\xd8\x1a\x64\xed\x78\x32\x57\x82\xa5\x1a\x4a\x06\x32\x96\x5e\x25\x77\xe5\x3b\x2d\x92\x09\xba\x2c\x5e\xe5\x68\xdd\x5d\x8a\x87\xd7\x56\xdb\x08\xa3\x4b\xc3\x89\xc1\x53\x3b\x7e\xe4\xf7\x79\x36\xcc\x66\xb0\x68\x98\xec\x89\xd6\x57\x6e\x93\x26\x6a\xa6\x59\x8d\x94\x53\xd7\x20\x35\x0d\x09\xcb\x49\x6b\x91\xe4\x28\xa6\x63\x6b\x63\x4d\xa6\x78\xab\xac\x21\x6e\xb7\x48\x69\xa2\x69\xf8\x97\x9f\x3f\xbc\x47\xcf\xdd\xef\xbf\x7f\x7a\x8f\xf0\x38\x22\x2a\x9e\x0b\x22\xa3\x31\x51\x0a\xb4\x1a\xaf\x81\x47\x42\xaa\x71\xf1\xb1\xd9\xf8\xd6\xfb\x63\xb4\xa2\x7c\x64\xb0\xda\x56\xdb\xf3\x56\xe4\xcf\x13\x49\xb9\x46\x78\x8c\xd1\xe8\xad\x58\x25\x82\x03\xd7\x2e\xf3\xc8\x89\xdd\xaa\xf1\x8a\x70\xb2\x04\x69\x90\x9e\x23\x2d\xd3\x02\xa9\x5b\xce\x7f\x02\x00\x00\xff\xff\xf2\x29\x65\xaa\x66\x41\x00\x00")

func templatesViewsManagerHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsManagerHtml,
		"templates/views/manager.html",
	)
}

func templatesViewsManagerHtml() (*asset, error) {
	bytes, err := templatesViewsManagerHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/manager.html", size: 16742, mode: os.FileMode(420), modTime: time.Unix(1543014117, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsJsManagerMinJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x4d\x6f\xdb\x38\x10\xfd\x2b\x5a\xae\x61\x90\xb0\x4c\xec\x2e\xf6\x24\x2d\x11\x2c\xd2\x53\x81\xb6\x87\xa2\xa7\x24\x07\x46\x1a\x59\x8c\x69\x92\x1d\x52\x4a\x5c\x47\xff\xbd\xa0\x3e\xfc\x15\xbb\x0d\x74\x10\x66\x38\xf3\x38\xf3\xde\x70\x66\xb4\x6a\x4c\x11\x94\x35\x94\xed\x66\x94\x70\xd9\x1b\xc9\x63\x13\x82\x35\xa3\xb5\x44\xd8\xd8\x16\x08\xe3\x85\x56\xc5\xfa\x38\xa5\x95\x98\x80\x98\xd1\x50\x2b\xcf\x52\x14\xc0\x0b\x6d\x3d\xf8\x40\x09\x57\xc6\x35\x61\xb9\x42\xdb\x38\xc2\x52\x27\x90\x3b\x89\x60\x02\x65\xb9\xaa\x28\xf2\x52\x06\x49\x09\x82\x03\x19\xa0\x24\x6c\x40\x43\x2f\x1c\xaf\x94\x29\xcf\x11\xf2\xbf\xff\x43\xcf\x35\x98\x55\xa8\x6f\x28\xf2\xa1\x28\xca\xd2\x7f\x84\x10\xfb\x93\xf9\xfc\x00\xfc\xbd\x51\x18\x81\xa3\x6f\x44\x3c\x6f\x48\x96\xe5\xad\x96\xde\x53\x52\xab\x12\x08\x63\x19\x7d\x77\x6c\xfa\xf6\xa6\xd7\xd7\xf3\xec\xbe\x85\x4b\x17\x75\xa0\x3d\x24\x70\x09\xf5\x14\x41\x96\x25\x61\x63\xb7\xbf\x8e\xbc\x76\x57\xc7\xd2\xab\xd2\x0e\xe8\xef\xd0\x75\xd2\xee\xaa\xc0\xad\xb8\x52\xcf\xa0\xf6\x15\x52\x2f\xf7\xf5\x66\x34\x54\x45\x5b\x5e\x4b\x7f\xca\x61\x7b\x29\x3d\x8f\xc4\xf6\x0d\x14\x02\x63\xb5\x06\xe8\x1f\x7f\xb1\xfc\x30\x7e\x5c\x3a\x07\xa6\xa4\xc5\x28\xc2\x45\x98\xf4\xad\x34\x23\x8f\x85\xd4\x7a\x89\xe0\x1b\x1d\x26\x32\x7b\x4e\x2e\xf1\x38\x32\x78\xb8\x3a\x22\xd1\x11\xa9\xb2\xb8\xe9\xd1\x08\xe3\xbe\x79\xdc\xa8\x70\x9c\x0a\x2d\x98\xc0\x1d\xf6\xff\x0f\x50\xc9\x46\xc7\xa7\x73\xaa\x4c\x7d\xa4\x4c\x3a\xd4\x24\x66\x94\xfc\x49\x16\xb0\x27\x31\x3a\x09\xeb\x8f\x9d\x35\x1e\xc4\xe0\x9a\x14\x99\xdc\x84\xa5\xc1\xae\x56\x1a\xc4\xbe\x08\x40\xb4\xc8\x76\x53\xc4\x09\x4d\x47\x95\x22\x84\x06\x4d\xd2\x47\xdf\x10\xa9\x01\xc3\xd2\x37\x45\x01\xde\x93\x6c\xb4\x4b\x69\x56\x80\xa4\x3b\x9a\xce\xdf\x20\x8c\x19\xd9\x19\x60\xc7\xba\xbc\xe6\xcf\x52\x85\x4f\x40\x77\x50\x55\x50\x84\x8c\x54\xb2\x80\x47\x6b\xd7\x24\x32\xcb\xe5\x93\x7c\xa1\xbb\xb0\x75\x90\x01\x97\x21\x20\x25\x1b\x08\xb5\x2d\x09\x4b\x1b\xd4\x7b\xe7\x30\x8c\x84\xa5\x91\xaa\x0c\xb8\x07\x54\x52\xab\x1f\x71\xab\x14\x76\xe3\x34\x04\xc8\x4e\xca\xec\x89\xf3\xb5\x7d\xa6\x2c\xdd\x57\x31\x8d\x47\xda\xd7\x7f\x96\x30\x30\x57\x87\x8d\xa6\xe4\xff\x27\xf9\x92\xc4\x6d\x01\x3e\x24\x95\x54\x3a\xce\xf6\xc8\x7a\x9c\xd1\x2e\x1d\xbb\x3c\x60\xe0\xf0\x16\x9d\x20\x64\x78\x47\x35\xc8\x12\xd0\x0f\xee\xd1\x10\x77\x0f\x79\x65\x91\x46\xd7\x1a\xb6\x89\x32\xc9\x21\x70\x3a\x68\xa5\x3e\x39\xb8\x5b\xc3\xf6\x81\x4d\xc6\xf8\x1f\xb7\xe8\x83\x58\xc3\x96\x07\xfb\xcd\x39\xc0\x5b\xe9\x81\xb2\x05\xc9\x12\xb2\x68\xa5\xce\x9d\x98\x82\x9f\xac\x32\x94\xdc\x1b\xc2\x16\xe4\xde\xdc\x1b\xd2\xc5\xb5\x1c\x39\xba\x71\x0b\xf1\xf1\xeb\x97\xcf\xdc\x07\x54\x66\xa5\xaa\x2d\xed\x4d\x27\xd1\x03\x9d\xa2\x58\x6a\x1a\xad\xd3\x7f\x59\x86\xbc\xe7\x6e\x3e\xa7\x6e\x21\x46\xe3\x30\xb1\x03\x7d\x6e\x4f\xd5\x14\xd0\x75\x2c\x7e\xf9\xcf\x00\x00\x00\xff\xff\x8a\x1d\x3b\x9a\xc6\x06\x00\x00")

func assetsJsManagerMinJsBytes() ([]byte, error) {
	return bindataRead(
		_assetsJsManagerMinJs,
		"assets/js/manager.min.js",
	)
}

func assetsJsManagerMinJs() (*asset, error) {
	bytes, err := assetsJsManagerMinJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/js/manager.min.js", size: 1734, mode: os.FileMode(420), modTime: time.Unix(1543056274, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesConfigMo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\xcb\x6b\x1b\x57\x14\xc6\x3f\xc9\xee\x03\xb5\xdd\x18\x0a\x5d\x74\x71\x5c\xa8\x69\x29\xe3\xce\x48\x35\x75\xc7\x1e\xbb\xd4\x0f\x5a\x6a\x61\x63\xd4\xee\xaf\xa5\xab\xd1\x90\xd1\x1d\x71\x67\x64\x6c\xf0\x42\x96\x43\xb2\x88\xf0\x22\x24\xbb\x64\x91\x40\xf6\x22\x46\x20\xbf\xe4\x7f\xe1\xdc\x7d\x92\x65\xc8\x3e\x90\x75\x18\x59\xb2\xc9\x5d\x9c\xf9\x7e\x67\x7e\xe7\x70\xde\x4c\x4d\x3e\x06\x80\x2f\x00\x7c\x0f\xa0\x04\xe0\x2b\x00\x1d\x5c\xbf\x3e\x80\x1f\x00\x9c\x8e\xfa\xaf\x00\x7c\x03\xe0\x1d\x80\x69\x00\x1f\x46\xfc\x5d\x06\x98\x02\x30\x93\x01\x6a\x19\xe0\x8f\x0c\xe0\x02\x78\x9e\x05\xbe\x04\xf0\x3a\x0b\x7c\x0d\xe0\x6d\x16\x58\x01\xf0\x7e\xc4\xbf\x4f\x00\xdf\x02\x58\x9d\x00\x32\xb8\x7d\x9f\x8f\xbe\x13\xa3\xdb\xb2\x00\x26\x47\xbd\xcf\xd2\x52\x8e\x54\x35\xf0\x27\xd7\x94\xd8\x09\x65\x85\xb4\xf4\x83\x38\x91\x9a\xb4\xac\x86\xb2\x9c\x04\x91\x1a\x2b\x7f\x47\x71\x32\xce\x1b\x43\x69\x4c\x45\xb1\x47\xa1\xdc\x95\x21\x45\x55\x6a\x08\x1d\x07\xca\xa7\x64\xbf\x21\xe3\xb1\xb1\x99\xd4\xa4\xbe\xa1\xad\x48\x27\xa4\x9a\xf5\x1d\xa9\xb1\x2d\x1b\x91\x4e\xac\x62\xec\x07\x15\xeb\xaf\xa6\x1f\x5b\xa5\xc8\xa5\x8a\xdc\xfd\xf3\x4e\x50\x13\xf5\x68\x56\x37\x73\x5b\x9b\x25\x6b\x45\x4b\x91\x5e\x63\xad\x8a\x44\xba\x94\xb7\x9d\x79\xcb\x2e\x58\xf9\x02\xe5\x0b\xee\xdc\xdc\x2f\x76\xc1\xb6\x73\x1b\x22\x4e\xac\x92\x16\x2a\x0e\x45\x12\x69\x97\xfe\x1d\xee\xa0\x62\x53\x8b\x7a\x54\x89\x68\xf1\x93\xc5\x4b\xb9\x0d\xa1\xfc\xa6\xf0\xa5\x55\x92\xa2\xee\xd2\x0d\xbb\xb4\xdd\x8c\xe3\x40\xa8\x5c\xf1\x9f\xe2\x9a\xf5\xbf\xd4\x71\x10\x29\x97\x9c\x59\x3b\xb7\x12\xa9\x44\xaa\xc4\x2a\xed\x37\xa4\x4b\x89\xdc\x4b\x7e\x6d\x84\x22\x50\x0b\x54\xae\x09\x1d\xcb\xc4\xfb\xaf\xb4\x6e\xcd\xdf\x7a\xe9\x3d\x55\xa9\xad\x35\x55\x8e\x2a\x81\xf2\x5d\xca\x6d\x85\x4d\x2d\x42\x6b\x3d\xd2\xf5\xd8\x25\xd5\x18\x62\xec\x15\x16\xe8\x3a\x7a\xea\x47\xc7\xf6\x3c\x87\x66\x66\x28\x8d\xf6\xb4\xe7\x38\xb4\x4c\x36\xb9\x43\x5e\xf2\xf2\xe3\x5f\x8b\xde\x6f\x69\xfc\x69\xa8\x2d\x3a\x36\x1d\x1c\x5c\x8f\x2c\x79\x79\xfb\x67\x5a\x26\x87\x5c\xca\x2f\x80\x1f\xf2\x19\x9f\x9b\x63\x73\x9f\xfb\xa6\x6d\x3a\x64\x5a\xdc\xe3\x13\xee\x9b\x43\xd3\x36\x2d\xee\x9a\x7b\xdc\x37\xc7\xc3\xb6\xb9\xcb\xe7\xdc\xe3\x33\x73\xc8\x7d\xee\x83\x5f\xf0\x20\xb5\xc0\xcf\xb8\x67\x5a\xfc\x32\xad\xe0\x27\xdc\x1d\x29\x17\xdc\xe5\x73\xd3\xe1\x4b\xf3\x80\x4f\xc9\x1c\x99\x16\x0f\x52\x8b\x2f\x4d\x87\xf8\x8a\xbb\xa6\x35\xf4\x2e\xf9\x84\xbb\x64\xda\xdc\xe7\xab\xd4\x00\x3f\x32\x2d\x73\xc4\x27\x3c\xe0\x1e\xf8\x29\x0f\xf8\x22\xdd\x9d\xce\x0c\x4c\xcb\xb4\xb9\x8b\x8f\x01\x00\x00\xff\xff\x6e\xd3\x27\x73\x5a\x03\x00\x00")

func localesRuLc_messagesConfigMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesConfigMo,
		"locales/ru/LC_MESSAGES/config.mo",
	)
}

func localesRuLc_messagesConfigMo() (*asset, error) {
	bytes, err := localesRuLc_messagesConfigMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/config.mo", size: 858, mode: os.FileMode(420), modTime: time.Unix(1543056281, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesGrpcMo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x90\xcd\x6e\xd4\x30\x14\x85\xcf\x54\x65\x93\x25\x6b\x16\x97\x05\x15\x08\x5c\xec\x84\x4a\x95\x27\x9e\x22\x86\x56\x42\x34\x22\x8c\x42\xf7\xd6\xc4\x64\x22\x12\x3b\xb2\x1d\x04\xd2\xbc\x06\xcf\xc3\x9b\xf0\x2c\x68\x92\xe1\xa7\x67\x75\x3e\xdd\x73\x8f\xae\xee\xaf\x87\xa7\x3f\x00\xe0\x04\xc0\x23\x00\x2f\x00\x3c\x00\x90\x63\x56\x09\xe0\x14\xc0\x47\x00\xbb\x05\x70\x77\xe4\x9f\x0b\x60\x71\xcc\x9c\xe0\x3f\x35\x9b\x72\x8d\x8d\x19\x9c\x8f\xac\x08\x4d\x5b\xb3\x37\x63\x13\x58\xe5\x24\xd5\xe6\xeb\xeb\x2f\xed\x4e\xf7\xee\xdc\x8f\x49\xf9\xa1\x62\x6b\x6f\x74\x6c\x9d\x65\x6f\x75\x34\x92\x52\x2e\x2e\x19\xcf\x58\x9a\x51\x9a\xc9\x8b\x8b\xe7\x3c\xe3\x3c\xb9\xd5\x21\xb2\xca\x6b\x1b\x3a\x1d\x9d\x97\xf4\x7e\xea\xa0\x62\xf4\xba\x77\xb5\xa3\xfc\x5e\xf1\x2a\xb9\xd5\xb6\x19\x75\x63\x58\x65\x74\x2f\xe9\x2f\x4b\xda\x8c\x21\xb4\xda\x26\xc5\xbb\xe2\x9a\xdd\x19\x1f\x5a\x67\x25\x89\x73\x9e\xac\x9d\x8d\xc6\x46\x56\x7d\x1f\x8c\xa4\x68\xbe\xc5\x97\x43\xa7\x5b\xbb\xa4\xed\x4e\xfb\x60\xa2\xfa\x54\xdd\xb0\xcb\x7f\xb9\xc3\x3d\x9f\x8d\x67\xd7\x76\xeb\xea\xd6\x36\x92\x92\xb2\x1b\xbd\xee\xd8\x8d\xf3\x7d\x90\x64\x87\x09\x83\xca\x96\x34\x5b\x65\x9f\x08\xae\x94\xa0\xb3\x33\x3a\x58\xfe\x58\x09\x41\x57\xc4\x49\x4e\xbc\x52\xe9\x9f\x51\xae\x5e\x1d\xec\xd3\x29\x96\x0b\x4e\xfb\xfd\xbc\xb2\x52\x29\x7f\x46\x57\x24\x48\x52\xba\x9c\xbf\xfd\x3b\x00\x00\xff\xff\x73\x83\x3e\x08\xc4\x01\x00\x00")

func localesRuLc_messagesGrpcMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesGrpcMo,
		"locales/ru/LC_MESSAGES/grpc.mo",
	)
}

func localesRuLc_messagesGrpcMo() (*asset, error) {
	bytes, err := localesRuLc_messagesGrpcMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/grpc.mo", size: 452, mode: os.FileMode(420), modTime: time.Unix(1543056281, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesManagerMo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8f\x4f\x6b\x13\x51\x14\xc5\x4f\xc7\xfa\x87\x11\x44\x5c\xbb\xb8\x2e\x2c\x8a\xbc\x3a\x33\xb1\x50\x5e\x3b\xa9\x1a\x1b\x10\x13\x2c\x65\xd4\xf5\x33\x79\x4d\x06\x27\xef\x85\x37\x33\xa2\xd2\x4d\xb3\xb5\x2b\xd1\x9d\x20\xf8\x09\x4a\x21\x98\x56\x48\xdd\xb8\x72\xf3\x66\xe3\x4e\x3f\x8b\x4c\x32\x5a\xbc\x9b\x7b\xce\x9d\xdf\x9c\x7b\xdf\xef\x2b\x8b\x1f\x00\xe0\x3c\x80\xab\x00\x22\x00\x17\x01\xec\x63\x5e\x13\x00\xe7\x00\x1c\x01\x58\x04\xf0\x0d\xc0\x59\x00\xdf\xab\xfe\xa3\x9a\x17\x15\xf7\x13\x40\x7f\x01\xf8\x05\xe0\x32\x80\xa6\x03\x5c\x02\xf0\xcc\x01\x2e\x00\xd8\x71\x00\x17\x80\x76\xe6\xfc\x9b\xca\xef\x39\xc0\x42\xb5\xd3\xa9\xfa\x22\x4e\xab\x64\xcf\x54\x77\x96\x7b\x71\xaf\x93\xc5\x5a\xa1\x21\x92\x04\xcd\x58\x26\x5d\xb4\xc4\x73\x99\x20\x7a\x3d\x94\x48\x33\x23\xc5\x00\xdb\x72\xa8\x4d\xc6\xda\x69\x2f\xee\xb2\xfb\x79\x2f\x65\x91\xe6\xd4\x95\x2f\xef\xbe\x88\xfb\x62\xa0\x97\x4d\xee\x6e\x3d\x8e\x58\xc3\x48\x51\xa6\xb1\x07\x22\x93\x9c\x02\xcf\x5f\x65\x5e\x8d\x05\x35\x0a\x6a\x7c\x65\xe5\x96\x57\xf3\x3c\xb7\x25\xd2\x8c\x45\x46\xa8\x34\x11\x99\x36\x9c\x1e\xcd\x32\xa8\x9d\x1b\x31\xd0\x5d\x4d\xeb\xff\x05\xd7\xdd\x96\x50\xbd\x5c\xf4\x24\x8b\xa4\x18\x70\xfa\xe7\x39\x6d\xe7\x69\x1a\x0b\xe5\xb6\x1f\xb6\x37\xd9\x53\x69\xd2\x58\x2b\x4e\xfe\xb2\xe7\x36\xb4\xca\xa4\xca\x58\xf9\x0a\x4e\x99\x7c\x95\xdd\x1e\x26\x22\x56\x6b\xd4\xe9\x0b\x93\xca\x2c\x7c\x12\x35\xd9\xea\x29\x57\xde\xb3\x23\x0d\xdb\x54\x1d\xdd\x8d\x55\x8f\x93\xbb\x95\xe4\x46\x24\xac\xa9\xcd\x20\xe5\xa4\x86\x33\x9b\x86\xb5\x35\x9a\xcb\x50\x5d\xf7\xbd\x30\xf4\x69\x69\x89\x4a\xe9\x5d\x0b\x7d\x9f\x36\xc8\x23\x3e\xf3\xf5\x30\xf8\xfb\x69\x3d\xbc\x53\xca\x1b\x33\x6c\xdd\xf7\x68\x77\x77\xfe\x4b\x3d\x0c\xbc\x9b\xb4\x41\x3e\x71\x0a\xd6\x60\xdf\xdb\xb1\x3d\x2a\xf6\x8a\x91\x3d\xb4\x13\x3b\x86\x7d\x57\xbc\xb5\x5f\xec\xa1\x3d\x28\x46\xc5\x3e\xec\x27\x3b\xb5\x5f\xcb\xf9\x47\x3b\x2e\x46\xf6\xd8\x1e\xc0\x7e\xb6\x13\x7b\x02\x7b\x62\xa7\xc5\xc8\x4e\xed\x31\xfe\x04\x00\x00\xff\xff\x12\x91\x5c\x79\x8c\x02\x00\x00")

func localesRuLc_messagesManagerMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesManagerMo,
		"locales/ru/LC_MESSAGES/manager.mo",
	)
}

func localesRuLc_messagesManagerMo() (*asset, error) {
	bytes, err := localesRuLc_messagesManagerMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/manager.mo", size: 652, mode: os.FileMode(420), modTime: time.Unix(1543056281, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/manager.html": templatesViewsManagerHtml,
	"assets/js/manager.min.js": assetsJsManagerMinJs,
	"locales/ru/LC_MESSAGES/config.mo": localesRuLc_messagesConfigMo,
	"locales/ru/LC_MESSAGES/grpc.mo": localesRuLc_messagesGrpcMo,
	"locales/ru/LC_MESSAGES/manager.mo": localesRuLc_messagesManagerMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"js": &bintree{nil, map[string]*bintree{
			"manager.min.js": &bintree{assetsJsManagerMinJs, map[string]*bintree{}},
		}},
	}},
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"config.mo": &bintree{localesRuLc_messagesConfigMo, map[string]*bintree{}},
				"grpc.mo": &bintree{localesRuLc_messagesGrpcMo, map[string]*bintree{}},
				"manager.mo": &bintree{localesRuLc_messagesManagerMo, map[string]*bintree{}},
			}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"manager.html": &bintree{templatesViewsManagerHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
