// Code generated by go-bindata.
// sources:
// templates/views/manager.html
// assets/js/manager.min.js
// DO NOT EDIT!

package internal

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsManagerHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x5f\x8f\xdb\xb8\x11\x7f\xcf\xa7\x20\x78\x7b\x45\xd2\x46\xd6\x66\x37\x29\x50\xc7\x76\x50\x5c\x5b\x34\x45\x92\x2b\x72\xd7\xa7\x34\x0d\x68\x69\x64\x71\x4b\x8b\x3a\x92\xb2\x77\x6b\xec\x77\x2f\x48\xfd\xa3\x6c\x49\xb6\x25\x6e\xb2\x2d\x4e\x0f\x89\x57\x43\xfe\x66\x38\x33\x24\x67\xc8\xd1\x6e\x87\x42\x88\x68\x02\x08\x07\x3c\x51\x90\x28\x8c\xee\xef\x9f\xcc\x42\xba\x41\x01\x23\x52\xce\x71\x4a\x56\xe0\x29\xaa\x18\xe0\xc5\x13\x84\x10\xb2\x89\xe6\xfd\x17\x06\x91\x2a\x88\xa6\x41\x7c\xbd\x58\x7d\xfc\xfb\x0f\x33\x3f\xbe\x2e\xba\xf8\x21\xdd\x2c\x9e\x14\xff\x35\xe0\x03\x06\x44\x44\xf4\x16\x2f\x4a\xea\x6e\x87\x68\x84\x26\x20\x04\x17\xfb\xc2\x10\x06\x42\x21\xf3\xaf\x17\x92\x64\x05\xa2\xfc\x83\xca\x35\x95\x92\x2c\x6b\x31\x97\x99\x52\x3c\x41\xea\x2e\x85\x39\xce\xff\xc0\x35\x57\x2e\x01\xa3\x90\x28\x52\x76\x2d\xc0\x31\x22\x82\x12\x2f\xa6\x61\x08\xc9\x1c\x2b\x91\x01\x5e\xfc\x46\xd1\x35\xc8\xd7\x33\x3f\x87\xc9\x19\xec\x76\xb6\x90\xb9\xf0\xbb\x1d\x82\x24\xd4\x2f\x1a\x62\x0b\xbe\x6d\x51\x5e\xc0\x99\xb7\x0e\xbd\x17\x57\xb8\x02\x14\x7a\x4c\xe8\x42\x3e\x47\x17\x12\xc4\x86\x06\x80\xa6\x73\x34\x29\x7e\x4b\x0d\x5c\x6a\x79\xb7\xab\xda\xbc\x0d\x75\x2b\x01\x29\x23\x01\x54\x6f\x27\x1f\xc8\x1a\x10\x9e\x60\x84\xbf\x18\xab\xd6\x06\xb2\x84\xb8\xfd\x92\x92\x04\x98\x65\xbe\xc3\x16\xb6\xf5\x1b\xad\xe2\xab\x85\x25\x46\xce\xf0\xfe\x7e\xe6\xc7\x57\x2d\x8d\xfb\x8c\xde\x68\xd8\xf2\xaa\x21\x4e\xe9\xa9\x8b\x27\xbd\x4c\x48\x10\x70\x11\x52\x6d\x75\x1a\xce\x31\xf1\x9a\x1a\xbb\xbf\xc7\x48\x70\x06\x73\xac\xc8\x92\x51\x59\x5a\x7e\x9d\x31\x45\x25\x30\x08\xf4\x7b\x28\x5d\xe0\x80\x55\xd3\x62\xeb\xe7\xe8\x62\x0d\x2a\xe6\xc6\x14\x95\x46\xde\x9b\x57\x0d\xbb\xf5\x89\xdc\x66\x8a\x3d\x7e\x05\x97\x3d\x93\xe7\x2f\xbb\x2d\xde\x02\x44\xa3\xaa\xdb\xdb\x24\xcd\xd4\xcf\x77\x29\xf4\xc9\x69\x64\x25\x0d\x49\xbd\x18\x48\x48\x93\x95\xa5\xc8\x5c\xd7\xf1\x81\xae\xbd\x86\xe8\x5a\xf7\x66\xee\x29\xbe\x5a\xe9\x9e\x01\x67\x8c\xa4\xd5\x94\x4c\x89\x80\x44\xcd\xf1\x77\x6d\x46\x8b\x05\x44\x73\xfc\x5d\x70\x02\x0f\x63\x50\xb8\x4d\x49\x12\x42\x38\xc7\x11\x61\x9a\x85\x79\xab\x9d\x48\x70\xa6\x9d\xf1\x38\x50\xb7\x45\x2a\xcd\xc4\x2f\x9b\xaa\x29\xe6\x4c\x8d\x64\xcd\x8e\x97\xfd\x78\x33\x9f\x1c\x69\xa0\x5d\x46\xeb\xf9\x14\x1d\x34\xa4\x2a\xf5\x8c\x6a\x85\x57\xa6\xcb\x9d\x2f\xd7\x0e\x23\x4b\x60\x0c\xc2\xe5\xdd\x49\xc6\x3c\x41\x3f\xfb\x5e\xee\x2d\x79\x78\x77\x42\xc7\xfd\xce\xed\xeb\xd5\xe9\xbd\xbb\xd6\xb2\x5e\x84\x63\x16\x6b\xed\x44\x4b\xa6\x11\x41\x11\xf1\x88\x10\x7c\xeb\x09\xba\x8a\x95\xfe\x33\xda\xea\xc5\x8f\x9e\x8f\x6b\x79\x54\x35\x6f\x4b\xdf\x1a\x02\xb6\xbf\x0e\xfc\xa4\x04\x90\xf5\x10\x30\xfd\xcc\x64\x4a\x92\x72\xe0\xc6\x8b\x90\xf9\xd7\xdb\x12\x91\xe8\xa5\x62\x21\x0d\xfe\xcc\xd7\x0d\x07\x8d\xbe\xd8\x60\xcf\x92\xca\xcc\xb9\xf3\xba\x9c\xba\x5d\xf5\xf3\x3d\xaf\x79\xc7\x36\x77\x96\xdc\x11\x17\x6b\x94\x1b\x74\x8e\x53\x6e\xf6\xb5\x40\x51\x9e\xcc\xf1\x9b\xe2\x47\x40\x18\xab\x43\x21\xc2\x18\xd2\x9d\xbc\x98\x0b\xfa\x1f\x9e\x28\xc2\x8a\x65\x58\x80\xcc\x98\x9a\x63\x71\xc2\x32\x93\x2f\x23\x1a\x67\x6f\x69\xdf\x10\x46\x43\xa2\xb8\x38\x73\x20\x66\x30\x54\x7b\x64\x11\xc2\xe5\x21\x19\x46\x09\x59\xc3\x1c\x7f\x29\xc4\xc1\x68\x43\x58\x06\x73\xdc\x12\x88\x38\xe6\x98\x8f\xb7\xc1\xb0\xb9\xb4\xb7\x45\x24\xc7\x9e\x8e\x9d\x78\xf2\x17\x0a\xac\x3f\x70\xe8\x1c\x82\x1d\x9f\xeb\x10\x46\xdb\x31\xe5\x89\xa4\x9b\x73\x17\xbe\x0a\xd2\xe0\x34\x40\x51\x0e\x1d\xf3\x0d\x88\xe2\xb7\x54\x82\xa6\x10\x0e\xe4\x91\xf3\xd1\x11\xc5\x98\xfe\x62\x78\xe7\x42\x00\xb4\xa5\xa1\x8a\xe7\xf8\xc5\xe5\xf7\x78\x61\xac\x30\xf3\x55\xec\x0c\xf6\x95\x86\xd5\x16\x76\x8a\x6a\x84\x7d\xa7\x17\x5a\xa7\xb0\xd7\x1a\xf6\x8f\x66\xd1\x18\x87\x3b\xf3\xc7\x58\x46\xf3\x1e\xe9\x17\x3a\xda\x18\xde\xbf\x8e\xf3\xa3\xe7\xe8\x22\xd2\x4e\x61\xc2\x7c\x87\xb3\xd6\x62\x75\xb1\x21\x62\x2f\xbe\x37\x2c\x0f\xc2\xfb\xa1\x3c\x1c\x4c\x93\xd0\x44\xb6\x96\x58\x3a\xb0\x55\x23\x4c\x54\xc2\x8e\x02\x40\xf5\x82\x9a\x8b\xf6\x56\xbe\x07\x29\xc9\x6a\x50\x70\xd4\x2a\x22\x29\xf2\x8f\x1b\xb2\x21\x32\x10\x34\x55\xd3\x0d\xa7\xe1\xd3\xcb\x67\xfd\x29\x8d\x22\x62\x05\x3a\xa5\x39\xbe\x99\x7a\xb5\x0f\xdc\xdf\x7b\x37\x92\x27\xd8\xd2\x76\x91\xa7\x1d\x4d\x12\x4e\x1e\x51\x2a\xc0\x24\x13\x83\x04\xb3\xce\x32\xf2\xc4\x82\x67\xca\x48\x2b\xc8\xb6\x94\xf8\x6f\x3f\xfd\xf8\xc1\x48\x9c\x0a\x70\x62\x5f\x60\xd2\x99\x41\x0f\x14\xeb\x44\xc0\xf3\x43\xd4\xfd\xc7\xcd\x6c\xea\x0c\xc7\x65\x16\x04\x20\xa5\xed\x58\x66\xfb\x30\x76\x32\xa1\xb9\x13\x01\xea\xb3\x18\xbd\x87\x8c\x88\x0c\x2a\x4c\x2b\xb8\x31\xa1\x9a\xb7\x12\x3c\x4b\xab\x80\xf5\x97\x8c\x0a\x9d\xea\xef\xad\x02\x1f\x0b\x02\xba\xbf\x57\x22\x83\xda\x87\xcc\x91\x40\x65\xb1\x0a\x26\x05\xa2\x5a\x61\x72\xc2\x31\x18\x47\x33\xb3\x71\x98\xa5\x15\xe8\x99\x21\xe7\x42\x25\x5c\xb5\x8e\x0f\xc5\x34\x74\x2e\x4a\xce\x92\x0b\xf4\x14\x7e\x69\xcc\x17\x1c\xf2\x6c\xc9\x00\x3f\x3b\xa4\x7c\xfa\xdc\x4d\x8b\x18\x27\xaa\xbd\x53\x49\x72\xb5\x60\xdb\x01\x7d\x92\xad\x97\x20\xca\x80\xfe\x60\x07\xab\x56\x33\x93\x0e\x15\x27\x44\x18\xa5\x44\x29\x10\xc9\x1c\xff\xeb\x93\xf7\xbb\xcf\x6f\x3e\x5d\x7a\x7f\xf8\xfc\xdb\xa7\xff\x9c\xe4\x3f\x9e\xbd\xb9\x68\xa4\x04\x39\xe2\x9f\x20\x22\x19\x53\x06\xd4\x77\x66\x03\xe3\x6d\x1d\x86\xa0\x89\xba\xbe\x6a\x57\x69\x27\x89\x26\xea\xf7\x2f\x3b\xfb\xb4\x93\x64\x0f\xa3\x6e\x9a\xec\x61\xd5\x4d\x93\x11\xbd\x85\xb0\x93\x5b\x0f\x35\xa7\x75\x72\xac\xa9\x8f\xdc\xcd\x1e\x87\x6f\x65\x3d\x36\xef\xa6\x65\x3d\x36\xef\xa6\xf5\x9a\xbc\x87\xd8\x6b\xf0\x47\x6e\xef\x47\x66\xee\x25\xe7\xac\x5d\x8f\x05\xe5\x21\x94\x18\xc4\x10\xfc\x7b\xc9\x6f\x8f\xab\xf1\x46\x7a\x72\x4b\x55\x10\xa3\xa6\x42\x1b\x9b\x75\xad\x35\x03\x0c\x61\x1d\x97\x7d\x1d\x25\x4a\x25\x68\xb2\xea\x58\x7f\x3a\x69\xcb\x3b\x05\xb2\x43\xf7\x05\xe9\x21\x94\xaf\xe0\x56\x9d\xeb\xbf\x5f\xd3\x51\x1d\x8d\x19\x1d\xe6\x87\x7f\x4e\xb2\xc1\x87\xdd\x6d\xcf\x2c\xbf\x3a\x3c\x4b\x97\x28\xef\x73\xe5\x28\x58\x2b\x9f\xfa\xd4\x02\x9e\xa3\x0b\xd0\x03\x9d\xce\x4b\x79\x5c\x8f\x5b\x3f\x33\x9e\xea\x28\xd5\xf6\x0c\xcd\x75\xf2\xc1\xac\x8f\x7a\xf4\x85\xf2\xcd\xdb\xb7\xb2\x76\x98\x42\x03\x3a\xe4\x2e\x7f\xe1\x6a\xbe\x2e\x6a\xa0\xf2\xa4\x21\x67\xe4\x5c\x5d\x0e\xf2\x36\xfb\x99\xf9\xf9\x60\xdc\xc9\xf9\x00\xf3\x61\xa6\xe7\x3e\x11\x40\xce\x9c\xfe\x82\x6f\xe5\x1c\x5f\xdb\x19\x64\x95\xe8\x97\x90\x6e\x07\xee\xce\x38\x6e\xd1\xca\xc2\x15\x17\x58\x75\xa2\xd5\x9a\xdf\x3d\x6b\xcd\x45\x9d\x67\x9b\x56\x66\xed\x2d\x95\x8b\xbc\xbd\xe2\xd2\x57\x95\xb3\x54\x09\x5a\xaa\xa4\xaa\xec\xc9\x73\x5e\x01\x6b\xbe\x81\x6f\x90\xf4\x56\x32\xdb\x87\x28\xf9\x65\xae\x12\x44\xc6\x1e\xc7\x8b\xa1\xf7\x98\x9d\xbc\x1a\x25\x46\x4e\x10\x4f\xd1\x38\x4d\x22\x5e\xea\x9b\x84\x63\xae\x70\x5a\x45\x38\x54\x60\xca\x32\xf9\xd8\xb5\x77\xe6\xed\x6d\xdf\xe3\x6e\xc1\x71\x20\xd4\xb8\x93\xbd\x71\x57\x39\xe3\x15\x31\xf3\x47\x5c\xe6\xcc\x7c\x73\x55\x39\xe0\x5e\x78\x98\xda\xad\x7a\xc0\xb3\x39\x96\x45\x3e\xa7\xdc\xbe\x5b\x77\xf9\xc5\xad\x3d\x46\x52\xdd\x31\x98\xe3\x90\xca\x94\x91\xbb\x69\xc2\x93\xc1\xd7\xbf\xb1\x18\x1a\xd0\x9f\x50\x85\xd9\x5e\x5d\x79\x36\x23\xbb\xdc\x32\xbf\xef\x86\xbc\x36\xf4\xec\xaa\x8d\x0a\x72\xe0\xbe\x6e\x8b\xc2\x92\x2f\x92\x33\x1a\xd6\xe5\xad\x63\xd0\x4c\x04\x96\x1f\x78\x8f\xd7\x92\x0e\xd2\xbc\x00\x12\x05\x43\x4a\x33\x2a\x44\x3b\x8d\x94\xd9\x72\x4d\xd5\xc1\xee\x52\x5e\x36\x94\x89\xc1\x0f\xa6\xfe\x64\xa8\x47\x8d\x32\xe6\x79\x5d\xb4\xbe\x1f\xa4\xda\xe7\x1c\x67\xf8\x3f\xaa\x7e\x63\x10\x39\x2b\x7e\xfb\x31\x53\x6e\xab\xdf\x6a\xc0\x5f\x8b\xdf\xfe\x57\x8b\xdf\xdc\x96\x3e\x7d\x8d\xb2\xa7\x31\x25\x4f\xa3\xea\x38\xec\xea\xa1\x57\x6e\x4a\x9d\xec\xca\xa1\x57\x4e\xca\x9c\xf6\x0b\xa7\x46\x96\x38\x0d\x8f\x5d\x47\x95\x20\x8d\x29\x3f\x3a\x52\x7a\x64\xad\x82\xe3\x6a\x8f\x1e\xba\xee\x68\xa4\xaf\x3a\xaf\x37\x1a\x5d\x6b\xf4\x70\x75\x46\xe3\x6b\x8c\xb6\x8f\xa8\xc6\xa8\xaa\x2f\x1a\x24\xd4\xd7\xad\x2f\x72\x78\xbc\xea\xb6\xae\xc8\x49\xda\xfc\x2d\x67\xcb\x88\x42\xa4\x71\x07\xab\xfb\xd3\x94\xa4\x4e\xa6\xe8\xd1\xe1\xac\x49\xea\xe2\x74\xeb\x5b\x1a\x7e\xf8\x6e\x39\x4e\xea\xc1\x27\x3c\x83\x4e\x77\x1e\x2e\xaa\x3d\xb1\xe9\x09\xcd\x8e\x34\x39\x71\xd9\x3a\xe5\xeb\xbd\x8e\xed\xa5\x73\x3f\x7a\x44\x5f\xc6\x1d\x77\xba\x1e\x35\x76\x77\x3e\xfe\x85\xaa\x9d\xcc\x37\x71\x9a\xdf\x3d\x5b\x87\x81\xd6\x77\xd7\xda\x0a\xf9\x47\xd7\xe6\xc0\xce\xba\x90\xf7\x03\xbd\x90\x18\xa0\x49\x75\xa4\xb5\xab\xd8\x6e\x63\xaa\xc0\x93\x29\x09\x60\x8a\x52\x01\xde\x56\x90\xf4\x75\x45\xd6\x19\x4a\xc4\xf8\xd6\xbb\x9b\x22\x92\x29\x5e\x53\xd6\xe4\xd6\x8b\x81\xae\x62\x35\x45\xd7\x97\xb0\xae\x29\x26\xd4\x9e\xa2\x17\x97\x97\xdf\xe7\x2f\x8b\x73\xcb\xc9\xde\x85\x10\x2a\x4e\xf5\x76\x16\xa6\x58\xd1\x24\xff\xbc\x6d\x8a\x2e\x5f\xef\x13\x96\x5c\x29\xbe\x36\x94\x06\xb0\x75\x62\x69\xa1\xa5\x5c\x52\x45\x79\x32\x45\x02\x18\x51\x74\x03\x4d\x71\xcc\xc1\x61\x6b\x7b\xb2\x94\x9c\x65\x0a\x6a\x01\x0a\x91\x5e\xa5\xb7\xf5\x3b\xc5\xd3\x29\xba\xaa\x5e\x95\xb0\xf9\x05\x88\x85\x6b\x8e\xc8\x08\xa3\x2b\x2d\x89\xc6\x69\x6d\x3f\xb1\x8b\x33\x3b\x7a\x33\x88\x3a\x3a\x5b\xaa\xb5\x8d\xdb\x65\x89\x96\x6e\xc6\x22\x75\xd7\x0d\x08\x45\x03\xc2\x4a\xd6\x8a\xa7\x25\xc4\xcc\x37\x3e\xd6\xe5\x8a\x37\xd2\x38\xe2\x6e\x87\xa4\x22\x8a\x06\x7f\xfd\xf9\xfd\x3b\xf4\x34\xff\xfd\x8f\x8f\xef\x10\xf6\x43\x22\xe3\x25\x27\x22\xf4\x89\x94\xa0\xa4\xbf\x81\x24\xe4\x42\xfa\xd5\x57\x5e\xfe\x8d\xf5\xc7\x64\x4d\x93\x89\x46\x35\xf5\xb1\xcf\x8e\x80\xaf\x44\x1a\x94\xb8\x37\xd2\x5f\x93\x84\xac\x40\x98\xfe\x4a\x64\x55\xf7\x5c\xf0\xff\x06\x00\x00\xff\xff\xb6\xed\x77\x61\xba\x40\x00\x00")

func templatesViewsManagerHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsManagerHtml,
		"templates/views/manager.html",
	)
}

func templatesViewsManagerHtml() (*asset, error) {
	bytes, err := templatesViewsManagerHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/manager.html", size: 16570, mode: os.FileMode(420), modTime: time.Unix(1509468736, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsJsManagerMinJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x4d\x6f\xdb\x38\x10\xfd\x2b\x5a\xae\x61\x90\xb0\x4c\xec\x2e\xf6\x24\x81\x1b\x2c\xd2\x53\x81\xb6\x87\xa2\xa7\x24\x07\x46\x1a\x59\x8c\x69\x92\x1d\x52\x4a\x5c\x47\xff\xbd\xa0\x3e\xfc\x15\xbb\x0d\x74\x10\x66\x38\xf3\x38\xf3\xde\x70\x66\xb4\x6a\x4c\x11\x94\x35\x94\xed\x66\x94\x70\xd9\x1b\xc9\x63\x13\x82\x35\xa3\xb5\x44\xd8\xd8\x16\x08\xe3\x85\x56\xc5\xfa\x38\xa5\x95\x98\x80\x98\xd1\x50\x2b\xcf\x52\x14\xc0\x0b\x6d\x3d\xf8\x40\x09\x57\xc6\x35\x61\xb9\x42\xdb\x38\xc2\x52\x27\x90\x3b\x89\x60\x02\x65\xb9\xaa\x28\xf2\x52\x06\x49\x09\x82\x03\x19\xa0\x24\x6c\x40\x43\x2f\x1c\xaf\x94\x29\xcf\x11\x72\xf4\x5c\x83\x59\x85\xfa\xbf\xbf\x6f\x28\xf2\xa1\x28\xca\xd2\x7f\x84\x10\xfb\xb3\xf9\xfc\x00\xfc\xbd\x51\x18\x81\xa3\x6f\x44\x3c\x6f\x48\x96\xe5\xad\x96\xde\x53\x52\xab\x12\x08\x63\x19\x7d\x77\x6c\xfa\xf6\xa6\xd7\xd7\xf3\xec\xbe\x85\x4b\x17\x75\xa0\x3d\x24\x70\x09\xf5\x14\x41\x96\x25\x61\x63\xb7\xbf\x8e\xbc\x76\x57\xc7\xd2\xab\xd2\x0e\xe8\xef\xd0\x75\xd2\xee\xaa\xc0\xad\xb8\x52\xcf\xa0\xf6\x15\x52\x2f\xf7\xf5\x66\x34\x54\x45\x5b\x5e\x4b\x7f\xca\x61\x7b\x29\x3d\x8f\xc4\xf6\x0d\x14\x02\x63\xb5\x06\xe8\x1f\x7f\xb1\xfc\x30\x7e\x5c\x3a\x07\xa6\xa4\xc5\x28\xc2\x45\x98\xf4\xad\x34\x23\x8f\x85\xd4\x7a\x89\xe0\x1b\x1d\x26\x32\x7b\x4e\x2e\xf1\x38\x32\x78\xb8\x3a\x22\xd1\x11\xa9\xb2\xb8\xe9\xd1\x08\xe3\xbe\x79\xdc\xa8\x70\x9c\x0a\x2d\x98\xc0\x1d\xf6\xff\x0f\x50\xc9\x46\xc7\xa7\x73\xaa\x4c\x7d\xa4\x4c\x3a\xd4\x24\x66\x94\xfc\x49\x16\xb0\x27\x31\x3a\x09\xeb\x8f\x9d\x35\x1e\xc4\xe0\x9a\x14\x99\xdc\x84\xa5\xc1\xae\x56\x1a\xc4\xbe\x08\x40\xb4\xc8\x76\x53\xc4\x09\x4d\x47\x95\x22\x84\x06\x4d\xd2\x47\xdf\x10\xa9\x01\xc3\xd2\x37\x45\x01\xde\x93\x6c\xb4\x4b\x69\x56\x80\xa4\x3b\x9a\xce\xdf\x20\x8c\x19\xd9\x19\x60\xc7\xba\xbc\xe6\xcf\x52\x85\x4f\x40\x77\x50\x55\x50\x84\x8c\x54\xb2\x80\x47\x6b\xd7\x24\x32\xcb\xe5\x93\x7c\xa1\xbb\xb0\x75\x90\x01\x97\x21\x20\x25\x1b\x08\xb5\x2d\x09\x4b\x1b\xd4\x7b\xe7\x30\x8c\x84\xa5\x91\xaa\x0c\xb8\x07\x54\x52\xab\x1f\x71\xab\x14\x76\xe3\x34\x04\xc8\x4e\xca\xec\x89\xf3\xb5\x7d\xa6\x2c\xdd\x57\x31\x8d\x47\xda\xd7\x7f\x96\x30\x30\x57\x87\x8d\xa6\xe4\xff\x27\xf9\x92\xc4\x6d\x01\x3e\x24\x95\x54\x3a\xce\xf6\xc8\x7a\x9c\xd1\x2e\x1d\xbb\x3c\x60\xe0\xf0\x16\x9d\x20\x64\x78\x47\x35\xc8\x12\xd0\x0f\xee\xd1\x10\x77\x0f\x79\x65\x91\x46\xd7\x1a\xb6\x89\x32\xc9\x21\x70\x3a\x68\xa5\x3e\x39\xb8\x5b\xc3\xf6\x81\x4d\xc6\xf8\x1f\xb7\xe8\x83\x58\xc3\x96\x07\xfb\xcd\x39\xc0\x5b\xe9\x81\xb2\x05\xc9\x12\xb2\x68\xa5\xce\x9d\x98\x82\x9f\xac\x32\x94\xdc\x1b\xc2\x16\xe4\xde\xdc\x1b\xd2\xc5\xb5\x1c\x39\xba\x71\x0b\xf1\xf1\xeb\x97\xcf\xdc\x07\x54\x66\xa5\xaa\x2d\xed\x4d\x27\xd1\x03\x9d\xa2\x58\x6a\x1a\xad\xd3\x7f\x59\x86\xbc\xe7\x6e\x3e\xa7\x6e\x21\x46\xe3\x30\xb1\x03\x7d\x6e\x4f\xd5\x14\xd0\x75\x2c\x7e\xf9\xcf\x00\x00\x00\xff\xff\x83\x5a\x16\x84\xc6\x06\x00\x00")

func assetsJsManagerMinJsBytes() ([]byte, error) {
	return bindataRead(
		_assetsJsManagerMinJs,
		"assets/js/manager.min.js",
	)
}

func assetsJsManagerMinJs() (*asset, error) {
	bytes, err := assetsJsManagerMinJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/js/manager.min.js", size: 1734, mode: os.FileMode(420), modTime: time.Unix(1514899969, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/manager.html": templatesViewsManagerHtml,
	"assets/js/manager.min.js": assetsJsManagerMinJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"js": &bintree{nil, map[string]*bintree{
			"manager.min.js": &bintree{assetsJsManagerMinJs, map[string]*bintree{}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"manager.html": &bintree{templatesViewsManagerHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
