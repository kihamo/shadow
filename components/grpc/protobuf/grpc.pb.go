// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grpc.proto

package protobuf

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type VersionRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VersionRequest) Reset()         { *m = VersionRequest{} }
func (m *VersionRequest) String() string { return proto.CompactTextString(m) }
func (*VersionRequest) ProtoMessage()    {}
func (*VersionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bedfbfc9b54e5600, []int{0}
}

func (m *VersionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VersionRequest.Unmarshal(m, b)
}
func (m *VersionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VersionRequest.Marshal(b, m, deterministic)
}
func (m *VersionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VersionRequest.Merge(m, src)
}
func (m *VersionRequest) XXX_Size() int {
	return xxx_messageInfo_VersionRequest.Size(m)
}
func (m *VersionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VersionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VersionRequest proto.InternalMessageInfo

type VersionResponse struct {
	Name                 string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version              string               `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Build                string               `protobuf:"bytes,3,opt,name=build,proto3" json:"build,omitempty"`
	BuildDatetime        *timestamp.Timestamp `protobuf:"bytes,4,opt,name=build_datetime,json=buildDatetime,proto3" json:"build_datetime,omitempty"`
	StartDatetime        *timestamp.Timestamp `protobuf:"bytes,5,opt,name=start_datetime,json=startDatetime,proto3" json:"start_datetime,omitempty"`
	Uptime               *duration.Duration   `protobuf:"bytes,6,opt,name=uptime,proto3" json:"uptime,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *VersionResponse) Reset()         { *m = VersionResponse{} }
func (m *VersionResponse) String() string { return proto.CompactTextString(m) }
func (*VersionResponse) ProtoMessage()    {}
func (*VersionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bedfbfc9b54e5600, []int{1}
}

func (m *VersionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VersionResponse.Unmarshal(m, b)
}
func (m *VersionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VersionResponse.Marshal(b, m, deterministic)
}
func (m *VersionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VersionResponse.Merge(m, src)
}
func (m *VersionResponse) XXX_Size() int {
	return xxx_messageInfo_VersionResponse.Size(m)
}
func (m *VersionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_VersionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_VersionResponse proto.InternalMessageInfo

func (m *VersionResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *VersionResponse) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *VersionResponse) GetBuild() string {
	if m != nil {
		return m.Build
	}
	return ""
}

func (m *VersionResponse) GetBuildDatetime() *timestamp.Timestamp {
	if m != nil {
		return m.BuildDatetime
	}
	return nil
}

func (m *VersionResponse) GetStartDatetime() *timestamp.Timestamp {
	if m != nil {
		return m.StartDatetime
	}
	return nil
}

func (m *VersionResponse) GetUptime() *duration.Duration {
	if m != nil {
		return m.Uptime
	}
	return nil
}

func init() {
	proto.RegisterType((*VersionRequest)(nil), "shadow.grpc.VersionRequest")
	proto.RegisterType((*VersionResponse)(nil), "shadow.grpc.VersionResponse")
}

func init() { proto.RegisterFile("grpc.proto", fileDescriptor_bedfbfc9b54e5600) }

var fileDescriptor_bedfbfc9b54e5600 = []byte{
	// 301 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0xcb, 0x4e, 0xf3, 0x30,
	0x10, 0x85, 0xff, 0xf6, 0xef, 0x45, 0xb8, 0xa2, 0x20, 0x8b, 0x45, 0x08, 0x08, 0xaa, 0xae, 0xba,
	0xb2, 0xd5, 0xf6, 0x09, 0x40, 0x15, 0xec, 0x58, 0x44, 0x88, 0x05, 0x1b, 0xe4, 0x24, 0x26, 0xb5,
	0xa8, 0x3d, 0xc6, 0x17, 0x78, 0x0b, 0x9e, 0x19, 0xc5, 0x4e, 0xc2, 0x55, 0x62, 0x37, 0x9e, 0x39,
	0xdf, 0xd1, 0xf8, 0x0c, 0x42, 0x95, 0xd1, 0x05, 0xd1, 0x06, 0x1c, 0xe0, 0x89, 0xdd, 0xb2, 0x12,
	0x5e, 0x49, 0xdd, 0x4a, 0xcf, 0x2b, 0x80, 0x6a, 0xc7, 0x69, 0x18, 0xe5, 0xfe, 0x91, 0x3a, 0x21,
	0xb9, 0x75, 0x4c, 0xea, 0xa8, 0x4e, 0xcf, 0xbe, 0x0b, 0x4a, 0x6f, 0x98, 0x13, 0xa0, 0xe2, 0x7c,
	0x7e, 0x88, 0xa6, 0x77, 0xdc, 0x58, 0x01, 0x2a, 0xe3, 0xcf, 0x9e, 0x5b, 0x37, 0x7f, 0xeb, 0xa3,
	0x83, 0xae, 0x65, 0x35, 0x28, 0xcb, 0x31, 0x46, 0x03, 0xc5, 0x24, 0x4f, 0x7a, 0xb3, 0xde, 0x62,
	0x2f, 0x0b, 0x35, 0x4e, 0xd0, 0xf8, 0x25, 0xca, 0x92, 0x7e, 0x68, 0xb7, 0x4f, 0x7c, 0x84, 0x86,
	0xb9, 0x17, 0xbb, 0x32, 0xf9, 0x1f, 0xfa, 0xf1, 0x81, 0x2f, 0xd0, 0x34, 0x14, 0x0f, 0x25, 0x73,
	0xbc, 0x5e, 0x33, 0x19, 0xcc, 0x7a, 0x8b, 0xc9, 0x2a, 0x25, 0x71, 0x45, 0xd2, 0xae, 0x48, 0x6e,
	0xdb, 0x3f, 0x64, 0xfb, 0x81, 0xd8, 0x34, 0x40, 0x6d, 0x61, 0x1d, 0x33, 0xee, 0xc3, 0x62, 0xf8,
	0xb7, 0x45, 0x20, 0x3a, 0x8b, 0x25, 0x1a, 0x79, 0x1d, 0xd0, 0x51, 0x40, 0x8f, 0x7f, 0xa0, 0x9b,
	0x26, 0xa0, 0xac, 0x11, 0xae, 0x6e, 0xd0, 0xe0, 0xda, 0xe8, 0x02, 0x5f, 0xa1, 0x71, 0x93, 0x0b,
	0x3e, 0x21, 0x9f, 0x8e, 0x40, 0xbe, 0x06, 0x98, 0x9e, 0xfe, 0x3e, 0x8c, 0x51, 0xce, 0xff, 0x5d,
	0xae, 0xef, 0x97, 0x95, 0x70, 0x5b, 0x9f, 0x93, 0x02, 0x24, 0x7d, 0x12, 0x5b, 0x26, 0x81, 0x46,
	0x84, 0x16, 0x20, 0x35, 0x28, 0xae, 0x9c, 0xa5, 0x35, 0xdd, 0x9d, 0x2d, 0x1f, 0x85, 0x6a, 0xfd,
	0x1e, 0x00, 0x00, 0xff, 0xff, 0x51, 0x37, 0xc6, 0x45, 0x0a, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GrpcClient is the client API for Grpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GrpcClient interface {
	Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error)
}

type grpcClient struct {
	cc *grpc.ClientConn
}

func NewGrpcClient(cc *grpc.ClientConn) GrpcClient {
	return &grpcClient{cc}
}

func (c *grpcClient) Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error) {
	out := new(VersionResponse)
	err := c.cc.Invoke(ctx, "/shadow.grpc.Grpc/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GrpcServer is the server API for Grpc service.
type GrpcServer interface {
	Version(context.Context, *VersionRequest) (*VersionResponse, error)
}

func RegisterGrpcServer(s *grpc.Server, srv GrpcServer) {
	s.RegisterService(&_Grpc_serviceDesc, srv)
}

func _Grpc_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shadow.grpc.Grpc/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServer).Version(ctx, req.(*VersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Grpc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "shadow.grpc.Grpc",
	HandlerType: (*GrpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _Grpc_Version_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc.proto",
}
