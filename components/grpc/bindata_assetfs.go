// Code generated by go-bindata.
// sources:
// templates/views/index.html
// assets/js/index.min.js
// DO NOT EDIT!

package grpc

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x4b\x6f\xe3\x36\x10\xbe\xe7\x57\x10\xdc\xa0\x68\x81\xc8\x6a\xb3\x7b\x4a\x2d\x2f\x16\x0b\x14\xd8\x43\x1f\x68\x7b\x0f\x68\x71\x64\x31\xa0\x48\x82\xa4\xed\x18\x82\xff\x7b\x41\xea\xed\xc8\x0f\x3d\xb6\x68\x8b\xfa\x90\x58\x34\xe7\x9b\xd1\x7c\x43\xce\x0c\x99\xe7\x88\x42\xc2\x04\x20\x1c\x4b\x61\x41\x58\x8c\x8e\xc7\xbb\x25\x65\x3b\x14\x73\x62\x4c\x84\x15\xd9\x40\x60\x99\xe5\x80\x57\x77\x08\x21\xd4\xfe\xd1\x8f\x3f\x73\x48\x6c\xf9\xa3\x9f\x90\xbe\x5f\x6d\x7e\xff\xed\xf3\x32\x4c\xdf\x97\x22\x21\x65\xbb\xd5\x5d\xf9\xaf\x03\x1f\x73\x20\x3a\x61\xaf\x78\x55\xfd\x9a\xe7\x88\x25\x68\x01\x5a\x4b\x7d\x6a\x0c\xe1\xa0\x2d\xf2\x7f\x03\x4a\xc4\x06\x74\xf5\xc0\x4c\xc6\x8c\x21\xeb\xc6\xcc\xf5\xd6\x5a\x29\x90\x3d\x28\x88\x70\xf1\x80\x1b\xad\xd2\x00\x46\x94\x58\x52\x89\x96\xe0\x18\x11\xcd\x48\x90\x32\x4a\x41\x44\xd8\xea\x2d\xe0\xd5\x37\x96\x65\x60\x7e\x5c\x86\x05\x4c\xa1\x20\xcf\xdb\x46\x16\xc6\xe7\x39\x02\x41\xdd\x40\xc7\x6c\x2d\xf7\x3d\xce\x8b\x25\x0f\x32\x1a\xfc\xf0\x88\x6b\x40\xed\xde\x09\xdd\x9b\x07\x74\x6f\x40\xef\x58\x0c\xe8\x29\x42\x8b\xf2\xbb\x71\xc0\x95\x97\xf3\xbc\x9e\xf3\x85\xba\x59\x1a\x14\x27\x31\xd4\xa3\x8b\x5f\x48\x06\x08\x2f\x30\xc2\xcf\x9e\xd5\x86\xa0\x96\x11\xaf\xcf\x8a\x08\xe0\x2d\xfa\xde\xce\x68\xb3\xdf\x99\x95\x3e\xae\x5a\x66\x14\x0a\x8f\xc7\x65\x98\x3e\xf6\x4c\xbe\x44\x7a\x67\x62\xcf\x50\xc7\x9c\x2a\x52\x57\x77\x17\x95\x90\x38\x96\x9a\x32\xc7\x3a\xa3\x11\x26\x41\xd7\x63\xc7\x23\x46\x5a\x72\x88\xb0\x25\x6b\xce\x4c\xc5\x7c\xb6\xe5\x96\x19\xe0\x10\xbb\x71\xa8\x42\xe0\x8d\xaa\x2e\x63\xd9\x03\xba\xcf\xc0\xa6\xd2\x53\x51\x7b\xe4\x67\x3f\xd4\xe1\xed\x92\xc9\x7d\x54\x9c\xe8\x2b\xb5\x9c\x50\x5e\x0c\x9e\x67\xbc\x07\x88\x25\xb5\xd8\x17\xa1\xb6\xf6\xcf\x83\x82\x4b\x76\x7a\x5b\x49\xc7\xd2\x20\x05\x42\x99\xd8\xb4\x1c\x59\xf8\x3a\x7d\xe3\xeb\xa0\x63\xba\xf3\xbd\x5f\x7b\x56\x6e\x36\x4e\x32\x96\x9c\x13\x55\x2f\x49\x45\x34\x08\x1b\xe1\x77\x7d\xa4\xa5\x1a\x92\x08\xbf\x8b\x6f\xd0\xe1\x09\x85\x57\x45\x04\x05\x1a\xe1\x84\x70\xa7\xc2\x8f\xba\x20\xd2\x92\xbb\x60\xbc\x0e\x74\x9e\x91\xda\x33\xe9\x87\xae\x6b\xca\x35\xd3\x20\xb5\x56\xc7\x87\xcb\x78\xcb\x90\x5c\x99\xe0\x42\xc6\xf9\xf9\x16\x1f\x74\xac\xaa\xfc\x8c\x1a\x87\xd7\xd4\x15\xc1\x57\x78\x87\x93\x35\x70\x0e\x74\x7d\xb8\x89\xcc\x1b\xfc\x73\x1a\xe5\xc1\x5a\xd2\xc3\x0d\x82\xa7\xc2\xfd\xfb\xd5\xed\xd2\xe7\xf6\xb2\x8b\x08\xd7\x18\xeb\x15\x62\x95\xd2\x84\xa0\x84\x04\x44\x6b\xb9\x0f\x34\xdb\xa4\xd6\x3d\x26\x7b\xb7\xf9\xb1\xe1\xb8\xad\x88\xaa\xd7\x6d\x15\x5b\x63\xc0\x4e\xf7\x81\x3f\xac\x06\x92\x8d\x01\x73\x9f\xa5\x51\x44\x54\x2f\xee\xa3\x08\xf9\xbf\xc1\x9e\x68\xe1\xb6\x8a\x95\xf1\xf8\xcb\xd0\x4d\x1c\xf5\xf6\x65\x82\x1d\x64\x95\x5f\x73\xc3\x44\x6e\x4d\x57\x97\xf5\x0e\x9b\x7e\x26\xcd\x0d\xb2\x3b\x91\x3a\x43\x05\xa1\x11\x56\xd2\xe7\xb5\xd8\x32\x29\x22\xfc\xb1\xfc\x12\x13\xce\x9b\x52\xc8\x3f\xf8\x6d\x57\x83\xd9\x72\x1b\x61\x3d\xc7\x8a\x7f\x63\x18\x73\xd1\x55\x96\x63\x45\x79\x85\x91\x20\x19\x44\xb8\xd4\x84\xd1\x8e\xf0\x2d\x44\xb8\xa7\xa6\x98\x57\x61\xf1\x26\x1d\x7d\xdd\x4d\xba\xaf\xb6\xb8\xf6\x39\x93\x53\x17\x3f\x31\xe0\x97\x4b\x80\xb3\x6f\xd0\xae\xb4\x5d\x31\xe2\x18\x52\x52\x18\xb6\x1b\xba\x85\xd5\x90\x1e\xa7\x03\x8a\x0a\xe8\x54\xee\x40\x97\xdf\x8d\xd5\x4c\x01\x1d\xa9\xa3\xd0\xe3\x6a\x83\x29\xf2\x7a\xbc\x70\x69\xc0\xca\x7b\x7e\x19\xda\x74\x3a\x94\x63\x72\x1e\xa4\x4f\x7e\x0d\x4e\xc3\x5a\x86\x53\xdc\xe3\x74\x4f\x24\xc7\x25\xef\xf1\xf2\x4d\xd9\x9c\x3c\xa0\xfb\xc4\xb1\xe4\xab\xe6\x19\x97\x4e\x63\xea\xe4\x38\xa2\xbe\x88\xf3\x56\x36\x35\x9c\x9d\xe0\xbe\xb7\xb0\x65\xed\x3d\x0f\xec\x34\x94\x69\xa1\x35\x2e\x3d\x9f\xe8\x1f\x1f\x5c\xcb\xd0\xef\x5f\x23\x72\xc5\xb0\x44\x5d\x7d\x5a\xed\xfe\x60\x8d\x55\x0d\x7f\x43\xb2\x6d\xa7\xea\x32\x49\x63\x64\xec\xc1\x15\xee\x94\x19\xc5\xc9\xe1\x49\x48\x31\x3a\x27\xa4\x1a\x85\x23\x45\xaf\x1f\xb2\xf4\x1f\x9e\x0c\x56\xd4\x3e\x4d\x29\x92\x20\xd4\x3e\xd8\xa7\xcc\x42\x60\x14\x89\xe1\x49\x69\x08\xf6\x9a\xa8\xc1\xb5\x5a\xad\xa9\x3c\x86\x9a\x62\x21\x17\xcf\x46\x72\x46\x9b\x43\xad\x29\x68\xae\xa2\x0b\x36\x5a\x6e\xd5\x58\x82\xdb\x75\x04\xbc\xda\x20\x06\x61\x41\x4f\x49\xef\xed\xda\xca\x6c\xd7\x19\xb3\x35\xed\x6b\x2b\xd0\xda\x8a\xc0\x6c\xe3\x18\x8c\xa9\xab\xac\xcf\xbe\xd0\x1c\x1b\x68\x93\xc8\x1c\x26\xe2\xfc\xfd\x55\x6a\xfc\x21\xc1\xf0\x1f\xea\x79\x39\x24\xb3\xb5\xbc\xbf\x6e\xed\xbc\x3d\x6f\x03\xf8\x7f\xcb\xfb\x6f\x6d\x79\xe7\x6d\x93\xfe\x8e\x16\x69\x4a\x7b\x34\xa9\xa4\x9d\xa9\x2d\x9a\xde\x12\x8d\xaf\x33\x27\xb5\x2f\x53\x5a\x97\x2b\x6d\x4b\x6b\x6b\x9a\xd6\xb7\x4c\x24\x78\xf6\x7e\x65\xe6\x5e\x65\x3c\xf3\xd3\xba\x8b\xd1\x9d\xc5\xa8\xae\xe2\xeb\x6d\x9b\x37\x4e\xbd\x61\xda\x95\x29\xce\xdd\xdc\xcc\x72\x29\x74\xe6\xb2\xa7\xb8\xca\x79\x21\x3b\x62\x62\xcd\x94\x7d\xda\x49\x46\xbf\xfd\xfe\xbb\x7f\xd2\x85\xcb\xf5\xa0\xbb\xe0\xc6\xf3\xc2\xd7\x2f\x3e\xdb\xd5\x62\x17\xa7\x7b\x9d\xde\x6a\x42\x5b\xd7\xf9\x2f\xa6\xb8\xc9\x2f\x1c\x8b\x8c\x8e\x23\x1c\x6e\xb4\x8a\x43\x62\x0c\x58\x13\xbe\x98\x90\x09\x0a\xaf\x8b\x8c\x89\xc5\x8b\xf9\xb8\x8b\xf2\x1c\x2d\x3e\x29\xc5\x59\x4c\x2c\x93\x62\xb1\xde\x32\x5e\x1c\xf6\x2e\xc3\x02\xa6\xa5\xec\xaf\x00\x00\x00\xff\xff\x59\xa2\x1a\x1f\x3a\x20\x00\x00")

func templatesViewsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsIndexHtml,
		"templates/views/index.html",
	)
}

func templatesViewsIndexHtml() (*asset, error) {
	bytes, err := templatesViewsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/index.html", size: 8250, mode: os.FileMode(420), modTime: time.Unix(1502718322, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsJsIndexMinJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\xc1\x6e\x14\x31\x0c\x86\x5f\xa5\x32\xab\xca\x16\xc1\x27\x4e\xb3\x1a\x71\xe1\x84\x04\x1c\x78\x82\x6c\xd6\x61\x42\xb3\x49\xe4\x38\x2d\x65\xb4\xef\x8e\x66\x5a\x56\x80\x72\x48\x62\xd9\xbf\x3f\x7d\x07\x8c\xa3\x04\x4b\xb5\x20\xad\x07\x04\x0e\x3e\xe7\x77\x2a\x7d\x64\xbb\x3b\x0d\xb3\x5a\x38\xe4\xda\x05\x88\x43\x4e\xe1\xe1\xdf\x7e\x5b\x52\x27\x6e\x5e\xa5\x18\x12\x2f\xe9\x2c\x48\x57\x72\x07\x84\x58\xf5\xb2\xa7\x01\x71\x1f\xa7\x4b\xb2\xbf\x47\xe5\x51\x8a\x71\xd3\xfd\xfe\x28\xd1\x8f\x6c\x48\xc7\x47\xaf\x77\x32\xbf\xe6\xba\x65\xfe\x7f\xc3\x71\xe1\x27\x9f\xec\xb3\xe0\x2a\x31\x4a\xb0\x09\xa2\x0f\x72\xaa\xf5\x01\xb6\xb5\xec\x7f\xf8\x9f\xb8\xda\x73\x93\x49\xd8\x9b\x29\xc2\x45\x6c\xa9\x67\x20\x37\x34\xdf\x8a\x7e\x07\x01\x72\x67\x6f\x7e\x12\xee\xa2\xc9\xe7\xf4\x4b\x90\x5c\x1f\x21\x48\xef\xd3\x0d\x57\x69\xdd\xc0\xda\x0c\x70\x54\x7e\x91\xf3\xa1\xcd\x9f\xbe\x7d\xfd\xc2\xdd\x34\x95\xef\x29\x3e\xe3\xfe\x6d\x5e\xbb\xe0\x9f\x26\x72\x65\xe4\xec\xde\xd3\xa4\x2c\xaa\x55\xef\xef\xb1\xcd\xaf\x6f\x72\xa8\xf3\x01\xe1\x0d\xbc\x15\xde\x30\x10\x5e\xa6\x80\x88\x38\xa6\x72\x46\xd8\x72\x5a\x2d\xbb\xfe\xc5\x2e\x19\x1b\x39\xe5\xbe\xd4\x27\x24\x77\x73\x01\x9b\x77\xa0\xeb\x95\xb6\x73\xfc\x1d\x00\x00\xff\xff\x66\xf4\x41\x35\xd4\x01\x00\x00")

func assetsJsIndexMinJsBytes() ([]byte, error) {
	return bindataRead(
		_assetsJsIndexMinJs,
		"assets/js/index.min.js",
	)
}

func assetsJsIndexMinJs() (*asset, error) {
	bytes, err := assetsJsIndexMinJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/js/index.min.js", size: 468, mode: os.FileMode(420), modTime: time.Unix(1502793921, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/index.html": templatesViewsIndexHtml,
	"assets/js/index.min.js": assetsJsIndexMinJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"js": &bintree{nil, map[string]*bintree{
			"index.min.js": &bintree{assetsJsIndexMinJs, map[string]*bintree{}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"index.html": &bintree{templatesViewsIndexHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: AssetInfo, Prefix: k}
	}
	panic("unreachable")
}
