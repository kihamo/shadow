// Code generated by go-bindata.
// sources:
// templates/views/index.html
// assets/js/index.min.js
// DO NOT EDIT!

package grpc

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\xdd\x6f\xdb\x36\x10\x7f\xcf\x5f\x41\xb0\xc1\xd0\x02\x91\xb5\xa5\x7d\xca\x2c\x0f\x43\x81\x61\x05\xda\x6d\xe8\xba\xe7\x80\x16\x4f\x16\x03\x8a\x14\x48\xca\x8e\x21\xf8\x7f\x1f\x48\x7d\x3b\xf2\x87\x3e\x3a\x6c\x43\xfd\x90\x48\x14\xef\x77\xa7\xfb\x1d\x79\x77\x62\x9e\x23\x0a\x11\x13\x80\x70\x28\x85\x01\x61\x30\x3a\x1c\x6e\x96\x94\x6d\x51\xc8\x89\xd6\x01\x4e\xc9\x06\x3c\xc3\x0c\x07\xbc\xba\x41\x08\xa1\xf6\x43\x37\xfe\xc8\x21\x32\xe5\x43\x37\x21\x7e\xbb\xda\x7c\xfe\xe3\xfd\xd2\x8f\xdf\x96\x22\x3e\x65\xdb\xd5\x4d\xf9\xaf\x03\x1f\x72\x20\x2a\x62\xcf\x78\x55\x3d\xcd\x73\xc4\x22\xb4\x00\xa5\xa4\x3a\x36\x86\x70\x50\x06\xb9\xbf\x1e\x25\x62\x03\xaa\xba\x61\x3a\x61\x5a\x93\x75\x63\xe6\x3a\x33\x46\x0a\x64\xf6\x29\x04\xb8\xb8\xc1\x8d\x56\xa9\x01\x23\x4a\x0c\xa9\x44\x4b\x70\x8c\x88\x62\xc4\x8b\x19\xa5\x20\x02\x6c\x54\x06\x78\xf5\x9d\x61\x09\xe8\x1f\x97\x7e\x01\x53\x28\xc8\xf3\xb6\x91\x85\xf1\x79\x8e\x40\x50\x3b\xd0\x31\x5b\xc9\x5d\x8f\xf3\x42\xc9\xbd\x84\x7a\x3f\xdc\xe3\x1a\x50\xd9\x77\x42\xb7\xfa\x0e\xdd\x6a\x50\x5b\x16\x02\x7a\x08\xd0\xa2\xbc\xd6\x16\xb8\xf2\x72\x9e\xd7\x73\x3e\x50\x3b\x4b\x41\xca\x49\x08\xf5\xe8\xe2\x37\x92\x00\xc2\x0b\x8c\xf0\xa3\x63\xb5\x21\xa8\x65\xc4\xf3\x63\x4a\x04\xf0\x16\x7d\x2f\x67\xb4\xd9\xef\xcc\x8a\xef\x57\x2d\x33\x0a\x85\x87\xc3\xd2\x8f\xef\x7b\x26\x9f\x23\xbd\x33\xb1\x67\xa8\x63\x4e\x15\xa9\xab\x9b\xb3\x4a\x48\x18\x4a\x45\x99\x65\x9d\xd1\x00\x13\xaf\xeb\xb1\xc3\x01\x23\x25\x39\x04\xd8\x90\x35\x67\xba\x62\x3e\xc9\xb8\x61\x1a\x38\x84\x76\x1c\xaa\x10\x78\xa1\xaa\xcb\x58\x72\x87\x6e\x13\x30\xb1\x74\x54\xd4\x1e\xf9\xe4\x86\x3a\xbc\x9d\x33\xb9\x8f\x8a\x23\x7d\xa5\x96\x23\xca\x8b\xc1\xd3\x8c\xf7\x00\xb1\xa8\x16\xfb\x20\xd2\xcc\x7c\xd9\xa7\x70\xce\x4e\x67\x2b\xe9\x58\xea\xc5\x40\x28\x13\x9b\x96\x23\x0b\x5f\xc7\x2f\x7c\xed\x75\x4c\xb7\xbe\x77\x6b\xcf\xc8\xcd\xc6\x4a\x86\x92\x73\x92\xd6\x4b\x32\x25\x0a\x84\x09\xf0\xab\x3e\xd2\x62\x05\x51\x80\x5f\x85\x57\xe8\x70\x84\xc2\x73\x4a\x04\x05\x1a\xe0\x88\x70\xab\xc2\x8d\xda\x20\x52\x92\xdb\x60\xbc\x0c\x74\x9a\x91\xda\x33\xf1\xbb\xae\x6b\xca\x35\xd3\x20\xb5\x56\xc7\xbb\xf3\x78\x4b\x9f\x5c\x98\x60\x43\xc6\xfa\xf9\x1a\x1f\x74\xac\xaa\xfc\x8c\x1a\x87\xd7\xd4\x15\xc1\x57\x78\x87\x93\x35\x70\x0e\x74\xbd\xbf\x8a\xcc\x2b\xfc\x73\x1c\xe5\xde\x5a\xd2\xfd\x15\x82\xc7\xc2\xfd\xfb\xd5\xf5\xd2\xa7\xf6\xb2\xb3\x08\x97\x18\xeb\x15\x62\x95\xd2\x88\xa0\x88\x78\x44\x29\xb9\xf3\x14\xdb\xc4\xc6\xde\x46\x3b\xbb\xf9\xb1\xe1\xb8\xad\x88\xaa\xd7\x6d\x15\x5b\x63\xc0\x8e\xf7\x81\x3f\x8d\x02\x92\x8c\x01\xb3\xbf\xa5\x4e\x89\xa8\x5e\xdc\x45\x11\x72\x7f\xbd\x1d\x51\xc2\x6e\x15\x2b\xed\xf0\x97\xbe\x9d\x38\xea\xed\xcb\x04\x3b\xc8\x2a\xb7\xe6\x86\x89\x5c\x9b\xae\xce\xeb\x1d\x36\xfd\x44\x9a\x1b\x64\x77\x24\x55\x82\x0a\x42\x03\x9c\x4a\x97\xd7\x42\xc3\xa4\x08\xf0\x4f\xe5\x45\x48\x38\x6f\x4a\x21\x77\xe3\xb6\x5d\x05\x3a\xe3\x26\xc0\x6a\x8e\x15\xff\xc2\x30\x66\xa3\xab\x2c\xc7\x8a\xf2\x0a\x23\x41\x12\x08\x70\xa9\x09\xa3\x2d\xe1\x19\x04\xb8\xa7\xa6\x98\x57\x61\xf1\x26\x1d\x7d\xdd\x4d\xba\xaf\xb6\xb8\xf4\x3b\x91\x53\x17\xbf\x30\xe0\xe7\x4b\x80\x93\x6f\xd0\xae\xb4\x6d\x31\x62\x19\x4a\xa5\xd0\x6c\x3b\x74\x0b\xab\x21\x1d\x4e\x07\x14\x15\xd0\xb1\xdc\x82\x2a\xaf\xb5\x51\x2c\x05\x3a\x52\x47\xa1\xc7\xd6\x06\x53\xe4\xd5\x78\xe1\xd2\x80\x95\xf3\xfc\xd2\x37\xf1\x74\x28\xcb\xe4\x3c\x48\x3f\xbb\x35\x38\x0d\x6b\xe9\x4f\x71\x8f\xd5\x3d\x91\x1c\x9b\xbc\xc7\xcb\x37\x65\x73\x74\x87\x6e\x23\xcb\x92\xab\x9a\x67\x5c\x3a\x8d\xa9\x93\xe3\x88\xba\x22\xce\x59\xd9\xd4\x70\x66\x82\xfb\x5e\xc2\x96\xb5\xf7\x3c\xb0\xd3\x50\xa6\x85\xd6\xb8\xf4\x7c\xa4\x7f\x7c\x70\x2d\x7d\xb7\x7f\x8d\xc8\x15\xc3\x12\x75\xf5\x6b\xb5\xfb\x83\x35\x56\x35\xfc\x15\xc9\xb6\x9d\xaa\xcb\x24\x8d\x91\x36\x7b\x5b\xb8\x53\xa6\x53\x4e\xf6\x0f\x42\x8a\xd1\x39\x21\x56\xc8\x1f\x29\x7a\xf9\x23\x4b\xff\xc7\x93\xc1\x8a\xda\x5f\x53\x8a\x24\x08\xb5\x0f\x76\x31\x33\xe0\xe9\x94\x84\xf0\x90\x2a\xf0\x76\x8a\xa4\x83\x6b\xb5\x5a\x53\xf9\x19\x6a\x8a\x85\x5c\x3c\x6a\xc9\x19\x6d\x3e\x6a\x4d\x41\xb3\x15\x9d\xb7\x51\x32\x4b\xc7\x12\xdc\xae\x23\xe0\xd9\x78\x21\x08\x03\x6a\x4a\x7a\x6f\xd7\x56\x3a\x5b\x27\xcc\xd4\xb4\xaf\x8d\x40\x6b\x23\x3c\x9d\x85\x21\x68\x5d\x57\x59\xef\x5d\xa1\x39\x36\xd0\x26\x91\x39\x4c\xc4\xfa\xfb\xab\xd4\xf8\x43\x82\xe1\x7f\xd4\xf3\x72\x88\x66\x6b\x79\x7f\xcf\xcc\xbc\x3d\x6f\x03\xf8\xad\xe5\xfd\xaf\xb6\xbc\xf3\xb6\x49\xff\x44\x8b\x34\xa5\x3d\x9a\x54\xd2\xce\xd4\x16\x4d\x6f\x89\xc6\xd7\x99\x93\xda\x97\x29\xad\xcb\x85\xb6\xa5\xb5\x35\x4d\xeb\x5b\x26\x12\x3c\x7b\xbf\x32\x73\xaf\x32\x9e\xf9\x69\xdd\xc5\xe8\xce\x62\x54\x57\xf1\xf5\xb6\xcd\x2b\xa7\x5e\x31\xed\xc2\x14\xeb\x6e\xae\x67\x39\x14\x3a\x71\xd8\x53\x1c\xe5\x3c\x91\x2d\xd1\xa1\x62\xa9\x79\xd8\x4a\x46\x5f\x7f\xff\xe6\xdf\x74\xe0\x72\x39\xe8\xce\xb8\xf1\xb4\xf0\xe5\x83\xcf\x76\xb5\xd8\xc5\xe9\x1e\xa7\xb7\x9a\xd0\xd6\x71\xfe\x93\x76\x27\x80\x79\x8e\xb4\x21\x86\x85\xbf\x7e\xf9\xf4\x11\xbd\x2e\xae\xff\xfa\xfc\x11\x61\x7f\xa3\xd2\xd0\x27\x5a\x83\xd1\xfe\x93\xf6\x99\xa0\xf0\xbc\xb0\x62\x46\x65\xf0\xa6\x14\x2e\x90\xff\x0e\x00\x00\xff\xff\x97\xb4\xf0\x6c\x27\x20\x00\x00")

func templatesViewsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsIndexHtml,
		"templates/views/index.html",
	)
}

func templatesViewsIndexHtml() (*asset, error) {
	bytes, err := templatesViewsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/index.html", size: 8231, mode: os.FileMode(420), modTime: time.Unix(1505252732, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsJsIndexMinJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\xc1\x6e\x14\x31\x0c\x86\x5f\xa5\x32\xab\xca\x16\xc1\x27\x4e\xb3\x1a\x71\xe1\x84\x04\x1c\x78\x82\x6c\xd6\x61\x42\xb3\x49\xe4\x38\x2d\x65\xb4\xef\x8e\x66\x5a\x56\x80\x72\x48\x62\xd9\xbf\x3f\x7d\x07\x8c\xa3\x04\x4b\xb5\x20\xad\x07\x04\x0e\x3e\xe7\x77\x2a\x7d\x64\xbb\x3b\x0d\xb3\x5a\x38\xe4\xda\x05\x88\x43\x4e\xe1\xe1\xdf\x7e\x5b\x52\x27\x6e\x5e\xa5\x18\x12\x2f\xe9\x2c\x48\x57\x72\x07\x84\x58\xf5\xb2\xa7\x01\x71\x1f\xa7\x4b\xb2\xbf\x47\xe5\x51\x8a\x71\xd3\xfd\xfe\x28\xd1\x8f\x6c\x48\xc7\x47\xaf\x77\x32\xbf\xe6\xba\x65\xfe\x7f\xc3\x71\xe1\x27\x9f\xec\xb3\xe0\x2a\x31\x4a\xb0\x09\xa2\x0f\x72\xaa\xf5\x01\xb6\xb5\xec\x7f\xf8\x9f\xb8\xda\x73\x93\x49\xd8\x9b\x29\xc2\x45\x6c\xa9\x67\x20\x37\x34\xdf\x8a\x7e\x07\x01\x72\x67\x6f\x7e\x12\xee\xa2\xc9\xe7\xf4\x4b\x90\x5c\x1f\x21\x48\xef\xd3\x0d\x57\x69\xdd\xc0\xda\x0c\x70\x54\x7e\x91\xf3\xa1\xcd\x9f\xbe\x7d\xfd\xc2\xdd\x34\x95\xef\x29\x3e\xe3\xfe\x6d\x5e\xbb\xe0\x9f\x26\x72\x65\xe4\xec\xde\xd3\xa4\x2c\xaa\x55\xef\xef\xb1\xcd\xaf\x6f\x72\xa8\xf3\x01\xe1\x0d\xbc\x15\xde\x30\x10\x5e\xa6\x80\x88\x38\xa6\x72\x46\xd8\x72\x5a\x2d\xbb\xfe\xc5\x2e\x19\x1b\x39\xe5\xbe\xd4\x27\x24\x77\x73\x01\x9b\x77\xa0\xeb\x95\xb6\x73\xfc\x1d\x00\x00\xff\xff\x66\xf4\x41\x35\xd4\x01\x00\x00")

func assetsJsIndexMinJsBytes() ([]byte, error) {
	return bindataRead(
		_assetsJsIndexMinJs,
		"assets/js/index.min.js",
	)
}

func assetsJsIndexMinJs() (*asset, error) {
	bytes, err := assetsJsIndexMinJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/js/index.min.js", size: 468, mode: os.FileMode(420), modTime: time.Unix(1505253211, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/index.html": templatesViewsIndexHtml,
	"assets/js/index.min.js": assetsJsIndexMinJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"js": &bintree{nil, map[string]*bintree{
			"index.min.js": &bintree{assetsJsIndexMinJs, map[string]*bintree{}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"index.html": &bintree{templatesViewsIndexHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: AssetInfo, Prefix: k}
	}
	panic("unreachable")
}
