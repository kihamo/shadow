// Code generated by go-bindata.
// sources:
// templates/views/index.html
// DO NOT EDIT!

package grpc

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x53\x4b\x6e\xf3\x20\x10\xde\xe7\x14\x23\xfe\x2c\x7f\x62\xa5\xca\xaa\x4a\xbc\xe9\x05\xaa\x5e\xa0\x9a\xc2\x04\x23\x51\x40\x98\xa4\xaa\x22\xdf\xbd\x7e\x07\x3b\xa8\x2a\x9b\x90\x99\xcf\x33\xdf\xc3\xbe\xdd\x40\xd2\x59\x5b\x02\x26\x9c\x8d\x64\x23\x83\xa6\xd9\x1c\xa5\xbe\x82\x30\x58\xd7\x27\x16\xdc\x17\x2b\x37\xd0\x9e\xb4\x2a\x9c\xe1\x46\xf1\xfd\xd3\xd8\xeb\xfb\xd5\x7e\x6a\x7b\x54\xc4\x2b\x42\x49\x81\x95\xea\xed\xf5\xe5\x58\x54\xfb\x71\x4a\xd1\x8e\x29\x37\xe3\xcf\x62\x95\x47\x4b\x86\x7f\x38\xf9\x9d\xd9\x68\x74\x1d\xb9\x0a\xee\xe2\x93\x95\x2d\xff\x80\x56\x11\x6c\x6b\x0a\x57\x2d\xe8\x3f\x6c\x3f\x29\x56\x4e\xd6\xf0\x7c\x82\x1d\x7a\xdd\xe9\x49\xe0\x5b\x2d\xbb\x4e\x20\x6f\x50\xdc\x9f\x03\xb6\x63\xc0\xde\x59\x8a\x7e\xa0\x06\x03\xc1\xd6\x31\xbc\x98\x98\xd0\xc8\xa2\x7b\xfd\xda\xaa\x15\x6e\x70\xea\xb0\x84\x46\x1d\x0d\x65\x80\x3d\x18\x41\x62\x44\x1e\x9d\x52\x86\x7a\xeb\x0d\xfa\x9a\xd8\x50\xf6\x18\xda\xd8\x4e\xec\x1f\x0a\xe1\x82\xd4\xce\x32\xa8\x02\x9d\xdb\xca\x84\xe4\xa3\xee\xa6\x61\x65\x77\x9d\x34\x37\xcd\xb1\xc0\x0c\xbb\xa2\x3a\xac\xb4\x0d\x61\x3d\xc8\xd5\xf2\x4e\x27\x59\xb2\xd4\x36\x01\x60\xbe\x68\x9b\xf3\xe4\xb7\x17\x61\x7d\xee\xb9\xeb\x39\xf1\x2e\xd6\x39\xfc\x24\xc6\xbf\x9a\xdf\xf1\x1f\x27\x75\xc6\xac\x3d\x48\x56\x93\x95\xb9\x05\x39\x97\x96\xa5\xd5\xdf\xe5\xa8\xe5\x87\x31\xf7\x7e\x02\x00\x00\xff\xff\xfd\x3f\xf2\xeb\xa3\x03\x00\x00")

func templatesViewsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsIndexHtml,
		"templates/views/index.html",
	)
}

func templatesViewsIndexHtml() (*asset, error) {
	bytes, err := templatesViewsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/index.html", size: 931, mode: os.FileMode(420), modTime: time.Unix(1500232265, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/index.html": templatesViewsIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"index.html": &bintree{templatesViewsIndexHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: AssetInfo, Prefix: k}
	}
	panic("unreachable")
}
