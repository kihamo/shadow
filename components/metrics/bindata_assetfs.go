// Code generated by go-bindata.
// sources:
// templates/views/list.html
// DO NOT EDIT!

package metrics

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsListHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x56\xdb\x6e\xe3\x36\x10\x7d\xcf\x57\x10\x84\xd1\xdd\x00\x91\xa8\x64\xbb\x2d\xe0\xca\x2a\x8a\x5e\xb0\x40\xbb\x05\x8a\x04\xfb\xd0\x97\x82\x16\xc7\x11\x5d\x8a\x54\xc8\x91\x63\xc3\xd0\xbf\x17\xd4\x2d\xb2\x23\x5f\x9a\xa4\xf5\x83\x60\x0e\x87\x67\x0e\xcf\x0c\xc9\xd9\x6e\x89\x80\x85\xd4\x40\x68\x6a\x34\x82\x46\x4a\xaa\xea\xe2\x62\xbb\x25\x72\x41\x42\xb0\xd6\x58\x6f\x88\x85\x5c\x91\x54\x71\xe7\x66\x94\x2b\xb0\x48\xea\x6f\x20\xb8\xbe\x07\xdb\x0d\xa4\xcb\xa5\x73\x7c\xae\x80\x26\x17\x84\x10\x12\xcf\x4b\x44\xa3\x09\x6e\x0a\x98\xd1\x66\x40\x3b\x9c\x54\x19\x07\x94\x08\x8e\xbc\x5b\xda\x82\x53\xc2\xad\xe4\x41\x26\x85\x00\x3d\xa3\x68\x4b\xa0\xc9\x57\x28\x73\x70\xdf\xc5\xac\x81\x69\x02\x6c\xb7\x2d\xc9\xf0\xe7\x9e\x2a\x13\x72\x95\xf8\x1d\x80\x16\xf5\x66\x86\xe4\xad\x79\xec\xb8\x0d\xac\xeb\xbf\x0a\xae\x41\xb5\x33\xcf\x67\x51\x62\xbf\xa7\xde\x23\xbb\x49\x3e\x03\x5a\x99\xba\x98\x65\x37\x7b\x93\x83\xe5\xa9\x02\x6e\x17\x72\x4d\x93\x96\x5a\xef\xb4\x37\xdc\x09\xd9\xa5\x63\x0f\xb7\xe8\x3c\x10\xd6\x18\xe4\x25\x82\x20\x0b\xa3\x31\xb8\xfe\x40\xf2\x60\x1e\x7c\x88\xf6\x56\xf8\xdf\x6d\x66\x1e\x9d\xd7\x4a\x81\x26\x61\x0e\xdc\x95\x16\x1c\xa9\x2a\xd2\xfd\x6f\xf3\x5d\x16\x82\x7b\xc4\xaa\x22\x8a\x3b\x24\xdd\x98\x23\x89\x5d\x6a\x65\x81\x6d\x2a\x79\x51\x28\x99\x72\x94\x46\xb3\x25\x5f\xf1\x66\x92\x26\xc2\xa4\x65\x0e\x1a\xc3\x47\x2b\x11\xde\xfb\xd5\x77\xe6\x16\xad\xd4\xf7\xef\xdf\xf9\x64\xb5\x88\xe1\x2f\xc6\xe6\x1c\x09\xbd\x89\xa2\x6f\x82\xe8\x3a\x88\x6e\xee\xae\x3f\x4e\xa3\xaf\xa7\xd1\xc7\x3f\xa3\x6f\xa7\x51\xe4\xeb\xf0\xdd\xe5\x65\xcc\x1a\xe8\xe4\x29\x9f\x3b\x7a\xb0\x22\xb9\xd8\xb5\xa0\xaf\xbf\x5e\xa5\x7a\x50\x7f\x03\x87\x56\x16\x20\xea\x82\xc3\x41\x91\xee\xae\xce\x80\x8b\xe7\xf6\x66\xce\x8e\x4f\xb4\x0b\x93\xdf\x79\x0e\x31\xc3\xec\xb8\xd7\x27\x50\xc5\x49\xaf\x8e\x7f\x2e\x82\xd4\xa8\xe0\x9a\x26\x77\x9b\xe2\x0c\xf0\xdf\xf8\x1c\x94\x3b\xed\xf7\x85\xab\xf2\x08\x5c\xcc\xc6\xf6\xea\xfd\x47\xd5\x89\x71\x6e\xc4\x66\x1c\x6a\xbb\x25\xd6\x5f\x12\x64\x92\x5f\x91\x49\x5b\x6f\x64\x3a\xdb\xa9\xc3\x97\xe8\x2d\x7c\x49\x74\x80\xe1\x4f\xd0\xd4\x89\x34\x3a\xf4\x79\x20\x55\x15\x33\x3c\x90\xc9\x53\x00\x3e\x45\xaf\x02\xf0\xc9\x3a\x0b\xe0\xe0\xe4\xae\x74\xea\x8a\x4c\x94\x4f\xad\x17\x6e\x34\x62\x93\xf8\x43\x52\xf6\x21\x5d\xc1\x75\x57\x5b\x0d\x60\xfd\x0d\x5c\x99\xa6\xe0\x1c\xad\x77\x54\x9b\xc2\x5f\x61\x43\xaa\x6a\x4a\x9e\x2c\x75\xd1\xd4\xdb\xf2\x30\x27\xb9\x8f\x1c\xd7\x1d\x2e\xaf\x16\x67\xe2\xef\xa2\x83\x8a\xf8\x1c\x84\xcd\xd5\x73\x4a\x96\xe6\xf6\x33\x96\xbc\x87\x87\x16\x95\x66\xd2\xa1\xb9\xb7\x3c\xa7\x97\x43\xb3\x7f\x84\x2c\xbd\x7c\xb1\xd0\x52\x2f\x0c\x4d\x52\x53\x6a\x6c\xa4\xed\xa8\xd7\xe2\x86\xb7\x3c\x2f\x14\xfc\xe8\xa7\xcf\x14\xfa\x44\xa4\x5c\xea\xc3\x71\x3e\x4b\xfd\x46\x51\xf8\xfa\x48\x14\xbe\x7e\x9b\x28\x2b\xdf\x15\xe8\x14\x0e\x87\xfa\xd2\x7a\x0c\xe2\x9d\x79\xc2\x1e\xae\xc8\x64\x55\xd7\xf7\xb0\x9e\x1a\xec\x3f\x4a\xae\x51\xaa\xc3\x37\xd5\x99\xfc\x3d\xeb\x87\xfe\x4c\xad\xde\xf4\x34\x75\x5e\xca\xc1\x2b\x59\xd6\xbc\xc6\x24\xfe\xbf\x8e\xff\xf8\xe3\x73\x18\x31\x66\x23\xcf\x4f\xcc\xea\x27\x7e\xb4\xd9\x6a\xff\x3e\x6f\x14\x07\xdd\xb0\x7f\xe8\xea\x56\x38\x56\x52\xff\x4d\x32\x0b\x8b\x19\x65\x82\xbb\x6c\x6e\xb8\x15\x8c\x3b\x07\xe8\xd8\x0a\xb4\x30\xd6\xb1\xbe\xa7\x70\xa1\x06\x0c\xe6\x8e\xa5\xae\xb1\xde\x35\xd6\xb9\x31\xe8\xd0\xf2\x22\xcc\xa5\x0e\x53\xe7\xbe\x5f\xcd\x7c\x3f\xf4\xc3\x53\x23\x15\xce\x4b\xa9\x3c\x11\x4a\x2c\xa8\x19\x75\xb8\x51\xe0\x32\x00\xdf\x04\xbe\x88\xc6\x42\xae\x41\xf8\x9d\x80\xed\x28\xd5\xa6\x4f\xb5\xe9\xd5\x9c\xc6\x95\x5b\xba\x46\xb7\xb6\x5f\x74\x36\x3d\x9f\x31\x5b\x3a\xb6\x7c\x28\xc1\x6e\xc2\x81\x76\x9e\xdd\xf2\x28\xb9\xa4\x6f\x13\x5f\x16\xd7\xab\xb3\x3c\x92\xaf\xff\x38\xfa\x20\x4f\x7b\x34\x86\xe9\xfa\x57\x44\xfa\xdc\xfc\x13\x00\x00\xff\xff\x4a\xbc\x0c\x1c\xe2\x0d\x00\x00")

func templatesViewsListHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsListHtml,
		"templates/views/list.html",
	)
}

func templatesViewsListHtml() (*asset, error) {
	bytes, err := templatesViewsListHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/list.html", size: 3554, mode: os.FileMode(420), modTime: time.Unix(1504828703, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/list.html": templatesViewsListHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"list.html": &bintree{templatesViewsListHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: AssetInfo, Prefix: k}
	}
	panic("unreachable")
}
