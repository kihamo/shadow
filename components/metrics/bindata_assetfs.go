// Code generated by go-bindata.
// sources:
// templates/views/list.html
// DO NOT EDIT!

package metrics

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsListHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x57\xdf\x4f\xdb\x30\x10\x7e\xef\x5f\x61\x59\x68\x4f\x4b\xda\xa2\xb1\x87\xae\xed\xcb\xb4\x1f\xd2\xd8\xa4\xa9\x88\x77\xb7\x39\x12\x4b\x8e\x13\x6c\xa7\x80\x10\xff\xfb\xce\x76\xd2\x3a\x34\x0d\x05\xda\x87\x21\x11\xe2\xf3\xf9\xbb\xef\x3e\xfb\x2e\xe6\xf1\x91\x24\x70\xc3\x25\x10\xba\x2a\xa4\x01\x69\x28\x79\x7a\x1a\x4c\x13\xbe\x26\x2b\xc1\xb4\x9e\x51\x55\xdc\xd1\xf9\x80\xe0\x4f\x68\x5d\x15\x22\x12\x69\x34\x3e\xaf\xe7\xdc\x7c\x36\x6e\xa6\x4b\x96\x42\x94\x01\x4b\x40\xd1\xf9\x25\xd7\x86\xe4\x60\x14\x5f\xe9\xe9\x30\x1b\xd7\x68\x43\x84\x9b\x0f\xea\x3f\x03\x64\xc2\x6f\x48\x0c\x4a\x15\xea\x39\x05\x26\x40\x19\xe2\x9e\x51\xc2\x64\x0a\xaa\x19\x70\x9d\x73\xad\xd9\x52\x40\xc3\x71\x59\x19\x53\x48\x62\x1e\x4a\x98\x51\x3f\xa0\x1b\xd2\xa2\xd0\x40\x49\xc2\x0c\x6b\x96\xd6\xe0\x94\x30\xc5\x59\x94\xf1\x24\x01\x39\xa3\x46\x55\x08\xf8\xc1\xf0\x1c\xf4\x97\xe9\xd0\xc3\xf8\x00\xc8\xd3\x93\x8c\xbf\x6d\xa8\xfa\x14\x70\x06\x64\x62\x0d\x2d\xf2\x25\x93\x20\x88\x7b\x46\x5c\xde\x14\x1d\x62\xfa\x49\x2b\x17\x97\x69\x20\xe8\x22\x2b\xee\xb4\x8d\x28\x40\x92\xb8\x56\x10\x03\x34\x62\xd6\x9a\x55\x25\x66\x04\x36\x32\x41\x3c\x43\x9a\x31\x33\x8e\x6d\x3d\x8c\xbf\x17\x2a\x47\x13\x3d\x1f\x8d\x3e\xc7\xa3\x71\x3c\x3a\x27\xe3\x8b\xc9\xe8\xd3\x64\x74\x61\x37\x7d\x4b\x3f\xd8\x9d\x6e\xa6\xcb\x22\x79\x08\xf7\x3d\x70\x30\x76\x2f\x22\x05\xba\x2c\xa4\xe6\x6b\x08\xdc\x9c\xab\x9b\x6f\x39\x13\xbf\x24\x2b\xd6\xb8\xad\xfe\x5d\x63\x76\x25\x24\xcf\xd6\xfa\xf5\x56\xa5\x2e\xbb\xda\x35\xd6\x0b\xe6\x7f\x58\x0e\xd3\x21\xbe\xec\xf3\x68\xf8\xe4\x49\x64\xcf\xf5\x98\xce\xaf\xf0\xf8\xf4\x2e\x99\x5f\xb2\x25\x08\xdd\xef\x73\xcd\x44\xb5\x07\x06\xad\x1d\x8c\xad\xef\x9e\xfc\xac\xe6\xbb\x76\xdc\x34\x65\x0b\x82\x9c\xe5\x1f\xf1\xd7\x1d\x0b\x32\x99\x85\x87\xe5\x35\x5a\x25\x73\x04\xac\x61\x62\x2b\x1b\xae\x47\x4e\x1d\x84\x3a\xfc\xad\x66\x2f\xfa\x77\x4e\xb4\x33\x11\x98\x89\xb0\xea\xda\x44\x1a\x70\x2f\x77\x57\x3a\xad\x08\x1a\x0f\x68\xb3\x9b\x1e\xc3\x3d\x23\x5d\xad\x56\xa0\x35\x75\x7c\x9d\x29\xfe\x05\x0f\x08\x37\x21\x5b\x8b\xdb\x2e\x97\x81\x85\xe9\xa5\x1a\x54\xca\x0e\x87\x37\xe7\x7f\x66\x9b\x56\x98\xb4\x55\x34\x5e\xe0\xab\x4c\xfb\x32\xf7\x6d\x00\x6e\x6b\x00\xec\xcd\x15\xb6\x72\x45\xdf\xac\x96\x6f\x53\x6b\x2b\x87\xd7\xa7\xe6\xf3\xd5\x03\xbf\x4a\x28\xa1\xa1\xcd\x2e\x65\x55\x0a\xc7\xe7\xf6\xc3\xc2\xbe\x8f\x59\x86\xdf\xa9\x22\x55\x2c\x7f\x2f\x3b\xb7\x01\x2d\x76\x3f\x1b\xe8\x78\xc1\xf2\x52\x80\x53\xf2\x00\x9e\x07\x04\xd3\x55\xde\x1b\x6a\x51\xe5\xc7\x09\x94\x73\xd9\x1b\xe8\x37\x97\x47\x0a\xc4\xee\xfb\x03\xb1\xfb\xe3\x04\x5a\xdb\x8f\xbe\x5c\x41\x6f\xb4\xeb\xda\x29\x08\xd9\x1b\x73\xdb\xc8\x6e\xb1\x91\xb9\x83\x1a\xd6\xf4\x16\xfe\x6f\xc5\xa4\xe1\x02\x5e\xec\x6a\x07\x64\x62\xf9\xdf\x6e\xda\xd9\xfa\xc0\x2a\xa8\xe9\xf6\x34\xb3\xc6\x63\xa7\x56\xec\xd5\xe8\xdd\x1d\x66\xb7\x4e\xae\x2c\xec\xe9\x6b\x24\x0c\x73\xb2\xfa\x08\x83\x9c\xac\x36\x5a\x41\x4e\x5a\x17\x61\xa4\x23\xd7\x84\x87\xfe\x9f\xea\xe1\xb5\x9f\xff\xee\xeb\xde\x7e\x24\xf4\xdf\xbd\xf0\xa1\xd1\x5e\x8f\x83\x8b\x77\x70\x49\x6f\xfd\x37\xb5\x01\xfe\x17\x00\x00\xff\xff\x4d\x78\x5a\x2f\xe0\x0d\x00\x00")

func templatesViewsListHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsListHtml,
		"templates/views/list.html",
	)
}

func templatesViewsListHtml() (*asset, error) {
	bytes, err := templatesViewsListHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/list.html", size: 3552, mode: os.FileMode(420), modTime: time.Unix(1492209507, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/list.html": templatesViewsListHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"list.html": &bintree{templatesViewsListHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: AssetInfo, Prefix: k}
	}
	panic("unreachable")
}
