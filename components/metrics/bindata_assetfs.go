// Code generated by go-bindata.
// sources:
// templates/views/list.html
// DO NOT EDIT!

package metrics

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsListHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x57\x4d\x6f\xe3\x36\x10\xbd\xe7\x57\x0c\x08\xa3\xbb\x0b\x44\x1f\xc9\x76\x5b\xc0\x95\x75\xe9\xd7\x02\xed\x16\x28\x12\xec\xa1\x97\x82\x16\xc7\x36\x0b\x8a\x54\x48\xca\x71\x20\xe8\xbf\x17\x14\x25\x47\x72\x64\x3b\xb5\x9d\x43\x73\x10\x4c\x72\xe6\xcd\x9b\x99\xa7\x09\x55\x55\xc0\x70\xc1\x25\x02\xc9\x94\xb4\x28\x2d\x81\xba\xbe\xba\xaa\x2a\xe0\x0b\x08\x51\x6b\xa5\xdd\x46\xc2\xf8\x1a\x32\x41\x8d\x99\x11\x2a\x50\x5b\x68\x9e\x01\xa3\x72\x89\xba\x5b\x70\x93\x73\x63\xe8\x5c\x20\x49\xaf\x00\x00\x92\x79\x69\xad\x92\x60\x9f\x0a\x9c\x11\xbf\x20\x1d\x4e\x26\x94\x41\x02\x8c\x5a\xda\xb9\xb6\xe0\x04\xa8\xe6\x34\x58\x71\xc6\x50\xce\x88\xd5\x25\x92\xf4\x1b\xcb\x73\x34\x3f\x24\x91\x87\xf1\x01\xaa\xaa\x25\x19\xfe\xbc\xa5\x1a\x31\xbe\x4e\x5d\x06\x28\x59\x93\x4c\x9f\xbc\x56\x8f\x1d\xb7\xde\xee\xe6\xef\x82\x4a\x14\xed\xc9\xcb\x53\xcb\xed\x36\xa7\xad\xc5\xea\x36\xfd\x82\x56\xf3\xcc\x24\xd1\xea\x76\xe7\xb0\xe7\x9e\x09\xa4\x7a\xc1\x37\x24\x6d\xa9\x6d\x8d\x76\x96\x83\x90\x5d\x3b\x76\x70\x8b\xce\xc2\xe2\xc6\x06\x79\x69\x91\xc1\x42\x49\x1b\xdc\x7c\x84\x3c\x98\x07\x1f\xe3\x1d\x0f\xf7\x77\xb7\x52\x8f\xc6\xd5\x4a\xa0\x84\x30\xf7\xa4\xa1\xae\xa1\xfd\xd9\x76\xbb\x2c\x18\x75\x78\x75\x0d\x82\x1a\x0b\xdd\x9a\x5a\x48\x4c\xa6\x79\x61\xdb\x46\xd2\xa2\x10\x3c\xa3\x96\x2b\x19\xfd\x43\xd7\xd4\x1f\x92\x94\xa9\xac\xcc\x51\xda\xf0\x51\x73\x8b\xef\x9d\xf7\xbd\xba\xb3\x9a\xcb\xe5\xfb\x77\xae\x55\x2d\x62\xf8\x8b\xd2\x39\xb5\x40\x6e\xe3\xf8\xbb\x20\xbe\x09\xe2\xdb\xfb\x9b\x4f\xd3\xf8\xdb\x69\xfc\xe9\xaf\xf8\xfb\x69\x1c\x3b\x15\xbe\xfb\xf0\x21\x89\x3c\x74\xfa\xdc\xcd\x41\x35\xa2\x22\xbd\x1a\xee\x58\xa7\x3e\xe0\x6c\x46\x9c\xae\x9a\xd5\x56\x70\xfe\xac\x79\x06\xc6\x6a\x5e\x20\x6b\x57\x73\xa5\x19\xea\xdd\x0e\x7b\xc0\x15\x52\xf6\x72\xdf\x9f\xe9\xf1\x83\xd6\x31\xfd\x83\xe6\x98\x44\x76\x75\xd8\xea\x33\x8a\xe2\xa8\x55\x97\x43\xce\x82\x4c\x89\xe0\x86\xa4\xf7\x4f\xc5\x2b\xc0\x7f\xa7\x73\x14\xe6\xb8\xdd\x57\x2a\xca\x03\x70\x49\x34\x96\xab\xb3\x1f\xad\x4e\x62\xe7\x8a\x3d\x8d\x43\x55\x15\x68\x37\x35\x60\x92\x5f\xc3\xc4\x2b\x10\xa6\xb3\xbe\x2e\x4f\xa9\x36\x73\x1a\x69\xe1\xc2\x9f\xd0\xeb\x86\x2b\x19\xba\x26\x40\x5d\x27\x91\xdd\xd3\xc6\x23\xfe\xae\x3d\xe7\xf8\xbb\x3e\xbd\xca\x7f\xef\xe1\xb0\x6a\xe2\x1a\x26\xc2\x75\xd5\x15\x6d\x2c\xa0\x6f\xf9\xbe\x32\x6e\x23\x9a\x82\xca\x4e\x55\x1e\xaf\x79\x06\xa6\xcc\x32\x34\x86\x34\xf9\x34\x5b\xe1\x6f\xf8\x04\x75\x3d\x85\xe7\x9d\x46\x2e\x4d\x56\x0e\xe6\x28\xf5\x91\x77\x77\xc0\xe5\xec\xda\x4c\xdc\x60\xda\x57\x10\xd7\x81\xd0\x8f\xa1\x63\x55\xf1\x93\x10\x1f\x5a\x40\x92\xa9\x52\x5a\xd4\xe4\xe4\x6a\x72\xb9\x50\x24\x5d\xbb\x72\xf9\xfa\xb5\xfc\x7e\xf4\xc0\xff\xb9\x90\xc2\xe0\x90\xe1\x92\x96\x4b\xbc\x3c\xbf\x5f\x1d\xec\xf9\xec\x56\xdc\x58\xb5\xd4\x34\x3f\x97\x61\xd3\x88\x01\xc3\xcf\x1d\x74\x78\x47\xf3\x42\x60\x53\xd1\x57\x72\x3d\x12\x2c\xe7\xf2\x60\xa8\x2f\x5c\x5e\x28\x10\xdd\x1c\x0e\x44\x37\x97\x09\xb4\x76\x17\x2a\x99\xe1\xc1\x68\x5f\x5b\xa3\x5e\xc8\x57\xce\xa4\x87\x6b\x98\x34\x1a\xea\xbf\x82\xcf\xf0\x7f\x96\x54\x5a\x2e\xf0\xf4\xa1\xe4\xb3\x70\xdc\x1f\xb6\x93\x68\x7d\xd1\x19\x04\xfb\x24\xec\xae\x9d\x67\x0f\x80\x97\xf2\xbd\x77\xb0\x6f\x2f\xdd\x7e\x98\x37\x93\xed\x20\xc8\x9b\x4a\xb6\x1f\xe9\xc2\x72\xf5\xd0\xff\x27\xa9\x9e\xfa\x4f\x75\xfc\x32\xb7\x1f\x31\x89\x46\xae\x73\x49\xd4\x5c\x9d\x47\xbf\x66\xda\x9f\xbb\x5f\x62\xff\x06\x00\x00\xff\xff\x2c\x5e\x21\x33\x6d\x0e\x00\x00")

func templatesViewsListHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsListHtml,
		"templates/views/list.html",
	)
}

func templatesViewsListHtml() (*asset, error) {
	bytes, err := templatesViewsListHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/list.html", size: 3693, mode: os.FileMode(420), modTime: time.Unix(1502491741, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/list.html": templatesViewsListHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"list.html": &bintree{templatesViewsListHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: AssetInfo, Prefix: k}
	}
	panic("unreachable")
}
