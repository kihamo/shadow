// Code generated by go-bindata.
// sources:
// templates/views/list.html
// DO NOT EDIT!

package metrics

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsListHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x57\xdf\x4f\xdb\x30\x10\x7e\xef\x5f\x61\x59\x68\x4f\x4b\xda\xa2\xb1\x87\xae\xed\xcb\xb4\x1f\xd2\xd8\xa4\x09\xc4\xbb\x9b\x1c\x89\x25\xc7\x09\xb6\x53\x40\x88\xff\x7d\x67\x3b\x69\x1d\x9a\x86\x02\xe5\x61\x48\x84\xe4\x7c\xfe\xee\xbb\xef\x2e\x17\xf3\xf0\x40\x52\xb8\xe6\x12\x08\x4d\x4a\x69\x40\x1a\x4a\x1e\x1f\x47\xf3\x94\xaf\x49\x22\x98\xd6\x0b\xaa\xca\x5b\xba\x1c\x11\xfc\x09\xad\x49\x29\x22\x91\x45\xd3\xd3\x66\xcd\xad\xe7\xd3\x76\xb9\x62\x19\x44\x39\xb0\x14\x14\x5d\x9e\x73\x6d\x48\x01\x46\xf1\x44\xcf\xc7\xf9\xb4\x41\x1b\x23\xdc\x72\xd4\xfc\x19\x21\x13\x7e\x4d\x62\x50\xaa\x54\x4f\x29\x30\x01\xca\x10\x77\x8d\x52\x26\x33\x50\xed\x03\xd7\x05\xd7\x9a\xad\x04\xb4\x1c\x57\xb5\x31\xa5\x24\xe6\xbe\x82\x05\xf5\x0f\x74\x43\x5a\x94\x1a\x28\x49\x99\x61\xed\xd6\x06\x9c\x12\xa6\x38\x8b\x72\x9e\xa6\x20\x17\xd4\xa8\x1a\x01\x3f\x18\x5e\x80\xfe\x32\x1f\x7b\x18\x1f\x00\x79\x7a\x92\xf1\xb7\x0d\x55\x9f\x02\xae\x80\x4c\xad\xa1\x43\xbe\x62\x12\x04\x71\xd7\x88\xcb\xeb\xb2\x47\x4c\xbf\x68\xe5\xe2\x32\x0b\x04\xbd\xc8\xcb\x5b\x6d\x23\x0a\x90\x24\x6e\x14\xc4\x00\xad\x98\x8d\x66\x75\x85\x19\x81\x8d\x4c\x10\xcf\x90\xf6\x99\x19\xc7\xb6\x79\x8c\xbf\x97\xaa\x40\x13\x3d\x9d\x4c\x3e\xc7\x93\x69\x3c\x39\x25\xd3\xb3\xd9\xe4\xd3\x6c\x72\x66\x8b\xbe\xa5\x1f\x54\xa7\x9f\xe9\xaa\x4c\xef\xc3\xba\x07\x0e\xc6\xd6\x22\x52\xa0\xab\x52\x6a\xbe\x86\xc0\xcd\xb9\xba\xf5\x8e\x33\xf1\x5b\xf2\x72\x8d\x65\xf5\xf7\x1a\xb3\xab\x20\x7d\xb2\xd7\xef\xb7\x2a\xf5\xd9\xd5\xae\xb1\xd9\xb0\xfc\xc3\x0a\x98\x8f\xf1\x66\x9f\x47\xcb\xa7\x48\x23\xdb\xd7\x53\xba\xbc\xc4\xf6\x19\xdc\xb2\x3c\x67\x2b\x10\x7a\xd8\xe7\x8a\x89\x7a\x0f\x0c\x5a\x7b\x18\x5b\xdf\x3d\xf9\x59\xcd\x77\xed\x58\x34\x65\x5f\x08\x72\x52\x7c\xc4\x5f\xd7\x16\x64\xb6\x08\x9b\xe5\x25\x5a\xa5\x4b\x04\x6c\x60\x62\x2b\x1b\xee\x47\x4e\x3d\x84\x7a\xfc\xad\x66\xcf\xfa\xf7\x2e\x74\x33\x11\x98\x89\xb0\xea\xda\x44\x5a\x70\x2f\x77\x5f\x3a\x9d\x08\x1a\x1b\xb4\xad\xa6\xc7\x70\xd7\x48\xd7\x49\x02\x5a\x53\xc7\xd7\x99\xe2\x5f\x70\x8f\x70\x33\xb2\xb5\xb8\x72\xb9\x0c\x2c\xcc\x20\xd5\xe0\x4d\xd9\xe1\xf0\xea\xfc\x4f\xec\xd0\x0a\x93\xb6\x8a\xc6\x17\x78\x2b\xb3\xa1\xcc\xfd\x18\x80\x9b\x06\x00\x67\x73\x8d\xa3\x5c\xd1\x57\xab\xe5\xc7\xd4\xda\xca\xe1\xf5\x69\xf8\x7c\xf5\xc0\x2f\x12\x4a\x68\xe8\xb2\xcb\x58\x9d\xc1\xf1\xb9\xfd\xb0\xb0\x6f\x63\x96\xe3\x77\xaa\xcc\x14\x2b\xde\xca\xce\x15\xa0\xc3\xee\x67\x0b\x1d\x5f\xb0\xa2\x12\xe0\x94\x3c\x80\xe7\x01\xc1\x0a\x2e\x07\x43\xfd\xe6\xf2\x48\x81\xd8\xdd\x70\x20\x76\x77\x9c\x40\x6b\xfb\x2d\x96\x09\x0c\x46\xbb\x6a\x9c\x82\x90\x83\x31\xb7\xf3\xe5\x06\xe7\x8b\xeb\x9f\xf0\x55\xdb\xc2\xff\xad\x99\x34\x5c\xc0\xb3\xc3\xe6\x80\x4c\x2c\xff\x9b\xcd\x94\x59\x1f\xd8\x9c\x0d\xdd\x81\x19\xd3\x7a\xec\xb4\xb0\x3d\xb1\xbc\xf9\xc5\xdf\x6d\xdf\x4b\x0b\xfb\xfe\xad\x1b\x86\x79\xb7\xb6\xed\x04\x79\xd7\x96\x0d\x23\x1d\xb9\x5d\x3d\xf4\xff\xd4\xaa\x2f\xfd\x60\xf6\x1f\x90\xf6\x23\xa1\xff\xee\x11\x09\x8d\xf6\x40\x19\x1c\x55\x83\x63\x6d\xe7\xff\x8f\x0d\xf0\xbf\x00\x00\x00\xff\xff\xa9\x3d\xd1\x51\x12\x0d\x00\x00")

func templatesViewsListHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsListHtml,
		"templates/views/list.html",
	)
}

func templatesViewsListHtml() (*asset, error) {
	bytes, err := templatesViewsListHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/list.html", size: 3346, mode: os.FileMode(420), modTime: time.Unix(1493200148, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/list.html": templatesViewsListHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"list.html": &bintree{templatesViewsListHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: AssetInfo, Prefix: k}
	}
	panic("unreachable")
}
