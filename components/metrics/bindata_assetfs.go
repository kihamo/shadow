// Code generated by go-bindata.
// sources:
// templates/views/list.html
// DO NOT EDIT!

package metrics

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsListHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x57\xdf\x6f\xf2\x36\x14\x7d\xe7\xaf\xb0\xac\x6a\x6d\xa5\x25\x84\x76\xdd\x24\x16\xf2\xb2\x5f\x95\xb6\x4e\x9a\x8a\xfa\xb0\x97\xc9\x24\x17\xf0\xe4\x38\xa9\xed\x50\xaa\xaa\xff\xfb\x77\x1d\x27\x90\x40\x80\x7e\x40\x1f\xbe\x48\x44\xb1\x7d\x7d\xee\xf1\xb9\x87\x4b\x78\x7b\x23\x09\x4c\xb9\x04\x42\xe3\x4c\x1a\x90\x86\x92\xf7\xf7\x5e\x0f\xe7\xf9\x94\xf8\xa0\x54\xa6\xec\x44\x98\xf0\x05\x89\x05\xd3\x7a\x44\x99\x00\x65\x48\x79\xf7\x12\x26\x67\xa0\xea\x01\xd7\x29\xd7\x9a\x4d\x04\xd0\xa8\x47\xf0\x0a\x27\x85\x31\x99\x24\xe6\x35\x87\x11\x75\x03\x5a\xe3\xc4\x22\xd3\x40\x49\xc2\x0c\xab\xb7\x56\xe0\x94\x30\xc5\x99\x37\xe7\x49\x02\x72\x44\x8d\x2a\x10\xf0\x3b\xc3\x53\xd0\x3f\x87\x7d\x07\xe3\x12\x20\x4f\x47\xd2\xff\x6d\x45\xb5\x8f\x5c\x23\x7b\x02\x90\x49\x79\x98\x26\x79\x95\xbd\xd4\xdc\x1a\xb3\xcb\xff\x72\x26\x41\x54\x2b\xdb\xab\x86\x9b\xd5\x99\x56\x11\xf3\x9b\xe8\x01\x8c\xe2\xb1\x0e\xfb\xf8\xdc\x5e\x6c\x6c\x8f\x05\x30\x35\xe5\x4b\x1a\x55\xd4\x56\x41\x1b\xc3\x56\xca\xba\x1c\x1b\xb8\x79\x1d\x61\x60\x69\xbc\xb4\x30\x90\x90\x29\x86\x7a\x83\x5b\x92\x7a\x13\xef\x36\xd8\xd8\x61\xaf\xc7\x79\xf6\xa2\xad\x56\x02\x24\xf1\x53\x47\x1a\xa5\x21\xd5\x63\x55\xed\x22\xc7\x5a\x80\xd5\x8c\x60\x0e\x43\xea\x31\x33\x24\xd4\xb1\xe2\xb9\xa9\x0a\xc9\xf2\x5c\xf0\x98\x19\x9e\xc9\xfe\xff\x6c\xc1\xdc\x22\x8d\x92\x2c\x2e\x52\x24\xed\xbf\x28\x6e\xe0\xca\xee\x1e\x67\x8f\x98\x42\xce\xae\x2e\x6d\xa9\x2a\x44\xff\xf7\x4c\xa5\x88\x4a\x6f\x82\xe0\x47\x2f\x18\x78\xc1\xcd\x78\x70\x37\x0c\x7e\x18\x06\x77\xff\x06\x3f\x0d\x83\xc0\xba\xf0\xf2\xfa\x3a\xec\x3b\xe8\x68\x5d\xcd\x96\x1a\xfd\x3c\xea\xb5\x67\x8c\x75\x1f\xe1\xc9\x88\x5a\x5f\x95\xa3\x95\xe1\xdc\x5a\x79\xf7\x34\xb2\xca\xf1\x6c\x6e\x34\xc9\x54\x02\x6a\xb3\xc2\x0e\x70\x0e\x2c\xd9\x9e\x77\x6b\xaa\x7b\xa1\xda\x18\xfd\xcd\x52\x08\xfb\xf8\xb0\x37\xea\x1e\x44\x7e\x30\xaa\x3e\x43\x9a\x78\x71\x26\xbc\x01\x8d\xc6\x58\x8a\xc3\xe0\x7f\xb1\x09\x08\x7d\x38\xee\x89\x89\x62\x0f\x1c\xae\x74\x9c\xd5\xc6\x77\xaa\x13\x9a\x49\x96\xbc\x76\x43\x61\x29\x95\xed\x1a\xe4\x22\xfd\x1e\x3f\xa5\x03\xc9\x70\xd4\xf4\xe5\x31\x6a\x27\xd6\x23\x15\x9c\xff\x2b\x38\xdf\xa0\x41\x7d\x5b\x04\xc4\x44\xae\x3b\xca\x78\x60\xbf\x2d\xcf\x29\xfb\x6d\x9d\x3e\xb4\x7f\xe7\xa2\xbd\xd6\xaa\x09\x54\x4d\xd8\xaa\x5a\xd1\xba\x12\xba\x92\xef\x92\x71\x95\x51\x63\xcb\xab\x5d\xe5\xf0\xca\xbb\xa7\x8b\x38\x06\xad\x69\x79\x9e\x72\xca\xff\x13\x5e\x11\x6e\x48\xd6\x33\xa5\x5d\xca\x53\x59\x98\x83\xd4\x3b\xbe\xbb\x2d\x2e\x27\x6b\x73\x61\x1b\xd3\x2e\x41\x6c\x05\x7c\xd7\x86\x0e\xa9\xe2\x3a\x21\x3c\x57\x80\xf8\xa3\x58\x60\x1b\x56\xf4\x68\x35\xb9\x9c\x66\x34\x5a\x58\xb9\x9c\x7e\x15\xbf\x5f\x1c\xf0\x57\x0b\x29\x34\xb4\x19\xce\x58\x31\x83\xf3\xf3\xfb\xc3\xc2\x9e\xce\x6e\xce\xb5\xc9\x66\x8a\xa5\xa7\x32\x2c\x0b\xd1\x62\x78\x5f\x43\xfb\x8f\x2c\xcd\x05\x94\x8a\x7e\x90\xeb\x81\x64\x29\x97\x7b\x53\x3d\x70\x79\xa6\x44\x6c\xb9\x3f\x11\x5b\x9e\x27\xd1\xc2\xbe\x50\xc9\x18\xf6\x66\x7b\xaa\x82\x1a\x29\x3f\xd8\x93\x9e\xb1\x27\x95\x1e\x6a\x7e\x05\xd7\xf0\xff\x14\x4c\x1a\x2e\xe0\xf8\xa6\xe4\x4e\x61\xb9\x3f\xaf\x3a\xd1\xe2\xac\x3d\xa8\x8e\xda\xb2\xb0\x7d\xed\x3c\xb9\x01\x6c\xdb\x77\x6c\x61\x3f\xdf\xba\xcd\x34\x9f\x66\xdb\x56\x92\x4f\xb5\x6c\x33\xd3\x99\xed\xea\xa0\xbf\x25\xab\x1e\xfb\xa3\xda\xfd\x32\xb7\x1b\x11\xe3\xb7\x5f\xe7\x70\xd2\xbe\x3a\x77\xfe\x9b\xa9\x1e\x37\xff\x89\x7d\x09\x00\x00\xff\xff\x2c\x5e\x21\x33\x6d\x0e\x00\x00")

func templatesViewsListHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsListHtml,
		"templates/views/list.html",
	)
}

func templatesViewsListHtml() (*asset, error) {
	bytes, err := templatesViewsListHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/list.html", size: 3693, mode: os.FileMode(420), modTime: time.Unix(1502491741, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/list.html": templatesViewsListHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"list.html": &bintree{templatesViewsListHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: AssetInfo, Prefix: k}
	}
	panic("unreachable")
}
