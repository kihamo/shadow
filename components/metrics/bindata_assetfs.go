// Code generated by go-bindata.
// sources:
// templates/views/list.html
// DO NOT EDIT!

package metrics

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsListHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x56\x4b\x6f\xe3\x36\x10\xbe\xe7\x57\x10\x84\xd1\x8d\x81\xe8\x91\x6c\xb7\x05\x5c\x45\x97\x3e\x10\xa0\x49\x81\x36\xee\x1e\x7a\x29\x68\x71\x1c\xd3\x90\x48\x85\x33\x72\x6c\x08\xfa\xef\x05\xf5\xf0\xca\x8e\x1c\x1b\xbb\xde\x02\xeb\x83\x21\xce\x0c\xbf\x6f\xf8\xcd\xf0\x51\x96\x4c\xc2\x5c\x69\x60\x3c\x31\x9a\x40\x13\x67\x55\x75\x71\x51\x96\x4c\xcd\x99\x0f\xd6\x1a\xeb\x0c\x91\x54\x2b\x96\xa4\x02\xf1\x96\x8b\x14\x2c\xb1\xfa\xdf\x93\x42\x3f\x81\xed\x06\x0a\x33\x85\x28\x66\x29\xf0\xf8\x82\x31\xc6\xa2\x59\x41\x64\x34\xa3\x4d\x0e\xb7\xbc\x19\xf0\x0e\x27\x49\x0d\x02\x67\x52\x90\xe8\xa6\xb6\xe0\x9c\x09\xab\x84\xb7\x50\x52\x82\xbe\xe5\x64\x0b\xe0\xf1\x77\xa4\x32\xc0\x9f\xa2\xa0\x81\x69\x08\xca\xb2\x4d\xd2\xff\x75\x9b\x6a\x20\xd5\x2a\x76\x2b\x00\x2d\xeb\xc5\xf4\x93\xb7\xe6\xa5\xcb\xad\x67\x5d\xff\x9b\x0b\x0d\x69\xeb\x79\xed\x25\x45\xdb\x35\x6d\x23\x16\x37\xf1\x03\x90\x55\x09\x46\xc1\xe2\x66\xcf\xd9\x9b\x9e\xa4\x20\xec\x5c\xad\x79\xdc\xa6\xb6\x0d\xda\x1b\xee\x50\x76\xe5\xd8\xc3\xcd\xbb\x08\x82\x35\x79\x59\x41\x20\xd9\xdc\x68\xf2\xae\xdf\xb3\xcc\x9b\x79\xef\xc3\xbd\x19\xee\xf7\xb8\x30\x2f\xe8\xb4\x4a\x41\x33\x3f\x03\x81\x85\x05\x64\x55\xc5\xba\xef\xb6\xde\x45\x2e\x85\x43\xac\x2a\x96\x0a\x24\xd6\x8d\x05\xb1\x08\x13\xab\x72\x6a\x4b\x29\xf2\x3c\x55\x89\x20\x65\x74\xb0\x14\x2b\xd1\x38\x79\x2c\x4d\x52\x64\xa0\xc9\x7f\xb1\x8a\xe0\xd2\xcd\x9e\x9a\x47\xb2\x4a\x3f\x5d\xbe\x73\xc5\x6a\x11\xfd\xdf\x8c\xcd\x04\x31\x7e\x13\x86\x3f\x78\xe1\xb5\x17\xde\x4c\xaf\x3f\x4c\xc2\xef\x27\xe1\x87\x7f\xc2\x1f\x27\x61\xe8\xfa\xf0\xdd\x78\x1c\x05\x0d\x74\xfc\xa9\x9e\x3b\x7a\x04\x79\x7c\xb1\x6b\x21\xd7\x7f\x5b\x95\xea\x41\xfd\xef\x21\x59\x95\x83\xac\x1b\x8e\x7a\x4d\xba\x3b\x7b\x01\x42\xbe\xb6\x37\x3e\x3b\xec\x68\x27\xc6\x7f\x88\x0c\xa2\x80\x16\x6f\x47\xdd\x41\x9a\x1f\x8d\xea\xf2\xcf\xa4\x97\x98\xd4\xbb\xe6\xf1\x74\x93\x9f\x00\x7e\x2f\x66\x90\xe2\xf1\xb8\x8f\x22\x2d\xde\x80\x8b\x82\xa1\xb5\xba\xf8\x41\x75\x22\x9a\x19\xb9\x19\x86\x2a\x4b\x66\xdd\x21\xc1\x46\xd9\x15\x1b\xb5\xfd\xc6\x26\xb7\x3b\x7d\xf8\x39\x7a\x4b\xd7\x12\x1d\xa0\xff\x0b\x34\x7d\xa2\x8c\xf6\x5d\x1d\x58\x55\x45\x01\x1d\xa8\xe4\x31\x00\x57\xa2\x2f\x02\x70\xc5\x3a\x09\xe0\xa0\x73\x57\xba\xf4\x8a\x8d\x52\x57\x5a\x27\xdc\x20\x63\x53\xf8\x43\x52\x6e\x29\x31\x17\xba\xeb\xad\x06\xb0\xfe\xf7\xb0\x48\x12\x40\xe4\xf5\x8a\x6a\x93\xff\x3b\x6c\x58\x55\x4d\xd8\x27\x4b\xdd\x34\xf5\xb2\x1c\xcc\xd1\xdc\x07\xb6\xeb\x4e\x2e\x5f\x2c\xce\xc8\x9d\x45\x07\x15\x71\x35\xf0\x9b\xa3\xe7\x98\x2c\xcd\xe9\x67\x2c\xbb\x84\xe7\x16\x95\x2f\x14\x92\x79\xb2\x22\xe3\xe3\xbe\xd9\x5d\x42\x96\x8f\x3f\x5b\x68\xa5\xe7\x86\xc7\x89\x29\x34\x35\xd2\x76\xa9\xd7\xe2\xfa\x8f\x22\xcb\x53\xf8\xd9\xb9\x4f\x14\xfa\x08\x53\xa6\xf4\x61\x9e\x07\xa5\xcf\xc4\x22\xd6\x6f\xb0\x88\xf5\x79\x58\x56\xee\x55\xa0\x13\x38\x4c\xf5\xb1\x8d\xe8\xf1\x9d\xb8\xc3\x9e\xaf\xd8\x68\x55\xf7\x77\xbf\x9f\x1a\xec\x3f\x0b\xa1\x49\xa5\x87\x4f\xaa\x13\xf3\x77\x59\x3f\x6f\xf7\xd4\xea\xac\xbb\xa9\x8b\x4a\x11\xbe\x99\xde\xac\x15\x18\x62\xfa\xbf\x0e\x9a\xe1\x6b\xee\x30\x62\x14\x0c\x5c\x74\x51\x50\x3f\x26\x06\x9f\x75\xed\xe7\xeb\x27\x69\xef\xdd\xed\xae\x54\xde\xb1\x95\x25\x43\x12\xa4\x92\xbb\xe9\xc3\x3d\xbb\x6c\xbe\xff\xfe\xeb\x9e\xf1\x40\x0a\x5c\xcc\x8c\xb0\x32\x10\x88\x40\x18\xac\x40\x4b\x63\x31\xd8\xbe\x67\xd0\xd7\x40\xde\x0c\x83\x04\x1b\xeb\xb4\xb1\xce\x8c\x21\x24\x2b\x72\x3f\x53\xda\x4f\x10\x39\x9b\x8b\x14\x61\x7c\x46\xd6\xb9\x5a\x83\x74\x4b\x01\xdb\x65\x50\x9b\xee\x6a\xd3\xdb\x29\x0c\xeb\xb2\xc4\x33\xaa\x12\x2c\x31\x58\x3e\x17\x60\x37\x7e\x4f\x18\x97\xcb\xf2\x6b\xa8\x31\x43\x47\x78\xb0\x04\x5f\x85\xb3\x57\x81\x3d\xf2\x7e\x21\x5e\xd3\x6f\xd5\xff\x2f\x00\x00\xff\xff\x76\xef\x98\xff\x0c\x0e\x00\x00")

func templatesViewsListHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsListHtml,
		"templates/views/list.html",
	)
}

func templatesViewsListHtml() (*asset, error) {
	bytes, err := templatesViewsListHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/list.html", size: 3596, mode: os.FileMode(420), modTime: time.Unix(1505253019, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/list.html": templatesViewsListHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"list.html": &bintree{templatesViewsListHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: AssetInfo, Prefix: k}
	}
	panic("unreachable")
}
