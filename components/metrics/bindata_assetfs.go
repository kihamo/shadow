// Code generated by go-bindata.
// sources:
// templates/views/list.html
// DO NOT EDIT!

package metrics

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsListHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x57\x4d\x4f\xe3\x3a\x14\xdd\xf7\x57\x58\x11\x7a\xab\x97\xb4\x45\x8f\xb7\xe8\xb4\xdd\xcc\x17\xd2\x30\x23\x8d\x40\xec\xdd\xe4\x92\x58\x72\xec\x60\x3b\x05\x84\xf8\xef\x73\x6d\x27\xad\x43\xd3\x50\xa0\x2c\x06\x89\xd2\x5c\x5f\x9f\x73\x7c\xee\xb5\x63\x1e\x1f\x49\x06\x37\x4c\x00\x89\x52\x29\x0c\x08\x13\x91\xa7\xa7\xd1\x3c\x63\x6b\x92\x72\xaa\xf5\x22\x52\xf2\x2e\x5a\x8e\x08\xfe\x84\xd1\x54\xf2\x98\xe7\xf1\xf4\xb4\x19\x73\xe3\xc5\xb4\x1d\xae\x68\x0e\x71\x01\x34\x03\x15\x2d\x2f\x98\x36\xa4\x04\xa3\x58\xaa\xe7\xe3\x62\xda\xa0\x8d\x11\x6e\x39\x6a\xfe\x8c\x50\x09\xbb\x21\x09\x28\x25\xd5\x73\x09\x94\x83\x32\xc4\x7d\xc6\x19\x15\x39\xa8\xf6\x81\xe9\x92\x69\x4d\x57\x1c\x5a\x8d\xab\xda\x18\x29\x88\x79\xa8\x60\x11\xf9\x87\x68\x23\x9a\x4b\x0d\x11\xc9\xa8\xa1\xed\xd4\x06\x3c\x22\x54\x31\x1a\x17\x2c\xcb\x40\x2c\x22\xa3\x6a\x04\xfc\xc7\xb0\x12\xf4\xa7\xf9\xd8\xc3\x78\x02\xd4\xe9\x45\x26\x5f\x37\x52\xfd\x12\x70\x04\x44\x66\x03\x1d\xf1\x15\x15\xc0\x89\xfb\x8c\x99\xb8\x91\x3d\x66\xfa\x41\x6b\x17\x13\x79\x60\xe8\x65\x21\xef\xb4\x65\xe4\x20\x48\xd2\x38\x88\x04\xad\x99\x8d\x67\x75\x85\x2b\x02\xcb\x4c\x10\xcf\x90\xf6\x99\x1a\xa7\xb6\x79\x4c\xbe\x49\x55\x62\x28\x3a\x9d\x4c\xfe\x4f\x26\xd3\x64\x72\x4a\xa6\x67\xb3\xc9\x7f\xb3\xc9\x99\x2d\xfa\x56\x7e\x50\x9d\x7e\xa5\x2b\x99\x3d\x84\x75\x0f\x12\x8c\xad\x45\xac\x40\x57\x52\x68\xb6\x86\x20\xcd\xa5\xba\xf1\x4e\x32\xf1\x53\x0a\xb9\xc6\xb2\xfa\xef\x1a\x57\x57\x41\xf6\x6c\xae\x9f\x6f\x5d\xea\x8b\xab\xdd\x60\x33\x61\xf9\x8b\x96\x30\x1f\xe3\x97\xbd\x19\xe7\xc0\xab\xc1\x8c\x56\x71\x99\xc5\xb6\xf3\xa7\xd1\xf2\x0a\x1b\x6c\x18\xf4\x82\xae\x80\xeb\xe1\x9c\x6b\xca\xeb\x3d\x30\x18\xed\x59\x93\xcd\xdd\xe3\x80\xad\xca\x6e\x1c\xcb\xaa\xec\x96\x21\x27\xe5\xbf\xf8\xeb\x1a\x87\xcc\x16\x61\x3b\xbd\xc6\xcd\x6c\x89\x80\x0d\x4c\xf2\x05\x74\x8a\x95\x32\x4c\x8a\xc4\x9a\x8c\x58\xa8\xaf\x47\xdc\x0b\x73\xad\xfd\x6f\x9d\x6b\xeb\xf0\xe2\xdc\xde\x81\xae\x3b\x1c\xdd\xe1\xb6\x62\xd6\x9c\x3e\x22\x5f\xce\x3e\xbb\x3a\x6c\x1a\xb7\x48\xdb\x2d\x1e\xcf\x7d\xc6\xba\x4e\x53\xd0\x3a\x72\xeb\x70\xa1\xe4\x07\x3c\x20\xdc\x8c\x6c\x23\xae\x1d\xdc\x6a\x2c\xcc\xa0\xec\x60\xaf\xee\x68\x78\xb3\x17\x27\xf6\xd8\xdc\x67\x80\x75\x3a\xb9\xc4\xb0\xc8\x87\x5c\xf0\x87\x12\xdc\x36\x60\xf8\xa6\xa8\xf1\xc5\xa2\xa2\x37\x3b\xe7\x0f\xcd\xb5\xb5\xc6\x7b\xd5\x68\xfb\xec\x81\x5f\x65\x1a\xd7\xd0\x55\x97\xd3\x3a\x87\xe3\x6b\xfb\x6e\x61\xdf\xa7\xac\xc0\xb7\xa6\xcc\x15\x2d\xdf\xab\xce\x15\xa0\xa3\xee\xbc\x85\x4e\x2e\x69\x59\x71\x70\x4e\x1e\xa0\xf3\x00\xb2\x92\x89\x41\xaa\x9f\x4c\x1c\x89\x88\xde\x0f\x13\xd1\xfb\xe3\x10\xad\xed\xcd\x40\xa4\x30\xc8\x76\xdd\x24\x05\x94\x83\x9c\xdb\x73\xe7\x16\xcf\x1d\xd7\x3f\xe1\xb6\xdb\xc2\xff\xae\xa9\x30\x8c\xc3\x8b\x07\xcf\x01\x2b\xb1\xfa\x6f\x37\x27\xce\xfa\xc0\xe6\x6c\xe4\x0e\x9c\x37\x6d\xc6\x4e\x0b\xdb\xfb\xd3\xbb\x37\xfe\x6e\xfb\x5e\x59\xd8\x8f\x6f\xdd\x90\xe6\xc3\xda\xb6\x43\xf2\xa1\x2d\x1b\x32\x1d\xb9\x5d\x3d\xf4\xdf\xd4\xaa\xaf\x7d\x79\xf6\x5f\xc6\xf6\x23\x61\xfe\xee\x75\x0c\x83\xf6\x7a\x1b\x5c\x9c\x83\x4b\x76\xe7\xbf\xa1\x0d\xf0\x9f\x00\x00\x00\xff\xff\x02\x1d\xea\x8b\xa0\x0d\x00\x00")

func templatesViewsListHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsListHtml,
		"templates/views/list.html",
	)
}

func templatesViewsListHtml() (*asset, error) {
	bytes, err := templatesViewsListHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/list.html", size: 3488, mode: os.FileMode(420), modTime: time.Unix(1499445575, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/list.html": templatesViewsListHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"list.html": &bintree{templatesViewsListHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: AssetInfo, Prefix: k}
	}
	panic("unreachable")
}
