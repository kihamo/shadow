// Code generated by go-bindata.
// sources:
// templates/views/list.html
// DO NOT EDIT!

package metrics

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsListHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x56\xdb\x6e\xe3\x36\x10\x7d\xcf\x57\x10\x44\xd0\x4d\x80\x48\x54\xb2\xdd\x16\x70\x65\x15\x45\x2f\x58\xa0\xdd\x02\x45\x82\x7d\xe8\x4b\x41\x8b\xe3\x88\x2e\x45\x2a\xe4\xc8\xb1\x61\xe8\xdf\x0b\xea\x16\xd9\x91\x2f\x4d\xd2\x02\xeb\x07\xc1\x9c\x19\x9e\x39\x3c\x33\xa2\x66\xb3\x21\x02\xe6\x52\x03\xa1\xa9\xd1\x08\x1a\x29\xa9\xaa\xb3\xb3\xcd\x86\xc8\x39\x09\xc1\x5a\x63\xbd\x21\x16\x72\x49\x52\xc5\x9d\x9b\x52\xae\xc0\x22\xa9\x9f\x81\xe0\xfa\x1e\x6c\xb7\x90\x2e\x97\xce\xf1\x99\x02\x9a\x9c\x11\x42\x48\x3c\x2b\x11\x8d\x26\xb8\x2e\x60\x4a\x9b\x05\xed\x70\x52\x65\x1c\x50\x22\x38\xf2\x6e\x6b\x0b\x4e\x09\xb7\x92\x07\x99\x14\x02\xf4\x94\xa2\x2d\x81\x26\x5f\xa1\xcc\xc1\x7d\x17\xb3\x06\xa6\x49\xb0\xd9\xb4\x24\xc3\x9f\x7b\xaa\x4c\xc8\x65\xe2\x4f\x00\x5a\xd4\x87\x19\x92\xb7\xe6\xb1\xe3\x36\xb0\xae\xfe\x2a\xb8\x06\xd5\x7a\x9e\x7b\x51\x62\x7f\xa6\x3e\x22\xbb\x49\x3e\x01\x5a\x99\xba\x98\x65\x37\x3b\xce\xc1\xf6\x54\x01\xb7\x73\xb9\xa2\x49\x4b\xad\x0f\xda\x59\x6e\xa5\xec\xca\xb1\x83\x5b\x74\x11\x08\x2b\x0c\xf2\x12\x41\x90\xb9\xd1\x18\x5c\xbf\x27\x79\x30\x0b\xde\x47\x3b\x3b\xfc\xef\x36\x33\x8f\xce\x6b\xa5\x40\x93\x30\x07\xee\x4a\x0b\x8e\x54\x15\xe9\xfe\xb7\xf5\x2e\x0b\xc1\x3d\x62\x55\x11\xc5\x1d\x92\x6e\xcd\x91\xc4\x2e\xb5\xb2\xc0\xb6\x94\xbc\x28\x94\x4c\x39\x4a\xa3\xd9\x82\x2f\x79\xe3\xa4\x89\x30\x69\x99\x83\xc6\xf0\xd1\x4a\x84\x0b\xbf\xfb\xce\xdc\xa2\x95\xfa\xfe\xe2\x9d\x2f\x56\x8b\x18\xfe\x62\x6c\xce\x91\xd0\x9b\x28\xfa\x26\x88\xae\x83\xe8\xe6\xee\xfa\xc3\x24\xfa\x7a\x12\x7d\xf8\x33\xfa\x76\x12\x45\xbe\x0f\xdf\x5d\x5e\xc6\xac\x81\x4e\x9e\xea\xb9\xa5\x07\x2b\x92\xb3\x6d\x0b\xfa\xfe\xeb\x55\xaa\x17\xf5\x33\x70\x68\x65\x01\xa2\x6e\x38\x1c\x34\xe9\xf6\xee\x0c\xb8\x78\x6e\x6f\x7c\x76\xdc\xd1\x6e\x4c\x7e\xe7\x39\xc4\x0c\xb3\xc3\x51\x1f\x41\x15\x47\xa3\x3a\xfe\xb9\x08\x52\xa3\x82\x6b\x9a\xdc\xad\x8b\x13\xc0\x7f\xe3\x33\x50\xee\x78\xdc\x67\xae\xca\x03\x70\x31\x1b\x3b\xab\x8f\x1f\x55\x27\xc6\x99\x11\xeb\x71\xa8\xcd\x86\x58\x7f\x49\x90\xf3\xfc\x8a\x9c\xb7\xfd\x46\x26\xd3\xad\x3e\x7c\x89\xde\xc2\xb7\x44\x07\x18\xfe\x04\x4d\x9f\x48\xa3\x43\x5f\x07\x52\x55\x31\xc3\x3d\x95\x3c\x06\xe0\x4b\xf4\x2a\x00\x5f\xac\x93\x00\xf6\x3a\xb7\xa5\x53\x57\xe4\x5c\xf9\xd2\x7a\xe1\x46\x33\x36\x85\xdf\x27\x65\x9f\xd2\x15\x5c\x77\xbd\xd5\x00\xd6\xcf\xc0\x95\x69\x0a\xce\xd1\xfa\x44\xb5\x29\xfc\x15\xd6\xa4\xaa\x26\xe4\xc9\x52\x37\x4d\x7d\x2c\x0f\x73\x94\xfb\xc8\xeb\xba\xc5\xe5\xd5\xe2\x9c\xfb\xbb\x68\xaf\x22\xbe\x06\x61\x73\xf5\x1c\x93\xa5\xb9\xfd\x8c\x25\x17\xf0\xd0\xa2\xd2\x4c\x3a\x34\xf7\x96\xe7\xf4\x72\x68\xf6\x1f\x21\x4b\x2f\x5f\x2c\xb4\xd4\x73\x43\x93\xd4\x94\x1a\x1b\x69\x3b\xea\xb5\xb8\xe1\x2d\xcf\x0b\x05\x3f\x7a\xf7\x89\x42\x1f\xc9\x94\x4b\xbd\x3f\xcf\x27\xa9\xdf\x28\x0b\x5f\x1d\xc8\xc2\x57\x6f\x93\x65\xe9\xa7\x02\x9d\xc2\xfe\x54\x9f\xdb\x88\x41\xbe\x13\xdf\xb0\x87\x2b\x72\xbe\xac\xfb\x7b\xd8\x4f\x0d\xf6\x1f\x25\xd7\x28\xd5\xfe\x9b\xea\x44\xfe\x9e\xf5\x43\xff\x4e\x2d\xdf\xf4\x6d\xea\xa2\x94\x83\x2f\xa6\x37\x6b\x05\xc6\x32\xfd\x5f\x17\xcd\xf8\x67\x6e\x3f\x62\xcc\x46\x3e\x74\x31\xab\x87\x89\xd1\xb1\xae\xfd\xfb\x7c\x24\x1d\xcc\xdd\xfe\x93\x5a\x0f\xdd\xb1\x92\xfa\x6f\x92\x59\x98\x4f\x29\x13\xdc\x65\x33\xc3\xad\x60\xdc\x39\x40\xc7\x96\xa0\x85\xb1\x8e\xf5\xd3\x8b\x0b\x35\x60\x30\x73\x2c\x75\x8d\xf5\xae\xb1\xce\x8c\x41\x87\x96\x17\x61\x2e\x75\x98\x3a\xf7\xfd\x72\xea\x27\xaf\x1f\x9e\x46\xb6\x70\x56\x4a\xe5\x89\x50\x62\x41\x4d\xa9\xc3\xb5\x02\x97\x01\xf8\x71\xf3\x45\x34\xe6\x72\x05\xc2\x9f\x04\x6c\x47\xa9\x36\x7d\xac\x4d\xaf\xe6\x34\xae\xdc\xc2\x35\xba\xb5\x93\xa9\xb3\xe9\xe9\x8c\xd9\xc2\xb1\xc5\x43\x09\x76\x1d\x0e\xb4\xf3\xec\x16\x07\xc9\x25\xfd\x40\xfa\xb2\xbc\x5e\x9d\xc5\x81\x7a\xfd\xc7\xd9\x07\x75\xda\xa1\x31\x2c\xd7\xbf\x22\xd2\xd7\xe6\x9f\x00\x00\x00\xff\xff\x4a\x59\xdd\x83\x4c\x0e\x00\x00")

func templatesViewsListHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsListHtml,
		"templates/views/list.html",
	)
}

func templatesViewsListHtml() (*asset, error) {
	bytes, err := templatesViewsListHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/list.html", size: 3660, mode: os.FileMode(420), modTime: time.Unix(1505061795, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/list.html": templatesViewsListHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"list.html": &bintree{templatesViewsListHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: AssetInfo, Prefix: k}
	}
	panic("unreachable")
}
