// Code generated by go-bindata.
// sources:
// templates/views/list.html
// DO NOT EDIT!

package metrics

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsListHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x57\x5d\x4f\xe3\x38\x14\x7d\xef\xaf\xb0\x2c\xb4\x80\xb4\x49\x53\xb4\xec\x4a\xdd\xb6\x2f\xfb\x31\x48\xc3\x8c\x34\xa2\xe2\x61\xde\xdc\xe4\x92\x7a\xe4\xd8\xc1\x76\x0a\x08\xf1\xdf\xe7\x3a\x4e\xda\x84\xa6\xa1\x40\x79\x18\x24\x4a\x63\x5f\x9f\x7b\x7c\xee\xf1\x8d\x79\x7c\x24\x09\xdc\x70\x09\x84\xc6\x4a\x5a\x90\x96\x92\xa7\xa7\xc1\x24\xe1\x2b\x12\x0b\x66\xcc\x94\x6a\x75\x47\x67\x03\x82\x3f\xcd\xd1\x58\x89\x40\xa4\xc1\xe8\xac\x9a\x2b\xe7\x97\xa3\x7a\x3a\x67\x29\x04\x4b\x60\x09\x68\x3a\xbb\xe4\xc6\x92\x0c\xac\xe6\xb1\x99\x0c\x97\xa3\x0a\x6d\x88\x70\xb3\x41\xf5\x67\x80\x4c\xf8\x0d\x09\x41\x6b\xa5\x9f\x53\x60\x02\xb4\x25\xe5\x67\x90\x30\x99\x82\xae\x1f\xb8\xc9\xb8\x31\x6c\x21\xa0\xe6\xb8\x28\xac\x55\x92\xd8\x87\x1c\xa6\xd4\x3f\xd0\x35\x69\xa1\x0c\x50\x92\x30\xcb\xea\xa5\x15\x38\x25\x4c\x73\x16\x2c\x79\x92\x80\x9c\x52\xab\x0b\x04\xfc\xcd\xf2\x0c\xcc\xdf\x93\xa1\x87\xf1\x09\x90\xa7\x27\x19\xfe\xb7\xa6\xea\xb7\x80\x33\x20\x13\x37\xd0\x22\x9f\x33\x09\x82\x94\x9f\x01\x97\x37\xaa\x43\x4c\x3f\xe9\xe4\xe2\x32\x6d\x08\x7a\xb5\x54\x77\xc6\x65\x14\x20\x49\x58\x29\x88\x09\x6a\x31\x2b\xcd\x8a\x1c\x77\x04\x2e\x33\x41\x3c\x4b\xea\x67\x66\xc9\xc4\xc4\x9a\xe7\xb6\x92\x83\xe5\xb9\xe0\x31\xb3\x5c\xc9\xe1\x0f\xb6\x62\x7e\x92\xce\x12\x15\x17\x19\xd6\x3e\xbc\xd3\xdc\xc2\x89\x5b\x3d\x57\x57\x98\x42\xa6\x27\xc7\x6e\xc3\x15\x62\xf8\xbf\xd2\x19\xa2\xd2\xb3\x28\xfa\x33\x88\x46\x41\x74\x36\x1f\x9d\x8f\xa3\x3f\xc6\xd1\xf9\xf7\xe8\xaf\x71\x14\x39\xf7\x1c\x9f\x9e\x4e\x86\x1e\x7a\xb6\xd1\xa4\x51\xf2\xee\xed\x2f\x54\xf2\xd0\x34\x53\x23\xc0\xba\x02\x07\x1a\x4c\xae\xa4\xe1\x2b\x68\x84\x95\xa1\xe5\x7c\x2b\x98\xf8\x25\x4b\xb5\x42\xaf\xf8\xef\x06\xf7\x93\x43\xf2\x6c\xad\x5f\xef\xa4\xef\x1a\xd7\xdb\x83\xd5\x82\xd9\x57\x96\xc1\x64\x88\x5f\x76\x46\x5c\x80\xc8\x7b\x23\x6a\xc6\x59\x12\xb8\xe3\x34\xa2\xb3\x39\x96\xa9\x1f\xf4\x92\x2d\x40\x98\xfe\x98\x6b\x26\x8a\x1d\x30\x38\xda\xb1\x27\x17\xbb\x43\x01\x57\x95\xed\x71\x2c\xab\x76\xe7\x90\x1c\x65\xbf\xe3\x6f\xe9\x46\x32\x9e\x36\x3d\xfa\x1a\x35\x13\xe7\x93\x0a\x26\xfc\x17\xbc\x77\xd0\xa4\xa1\x13\x19\xb1\x90\x5f\x07\xb9\x17\xd6\x3a\xf9\xdf\xba\xd6\xd5\xe1\xc5\xb5\x9d\x13\x6d\x75\x04\xaa\x23\x5c\xc5\x9c\x38\x5d\x89\x7c\x39\xbb\xe4\x6a\x65\x33\x78\x44\x6a\xb7\x78\xbc\xf2\x33\x30\x45\x1c\x83\x31\xb4\xdc\x47\x39\x14\x7e\x86\x07\x84\x1b\x93\xcd\x48\x69\x87\x72\x37\x0e\xa6\x97\x76\xe3\xac\x6e\x71\x78\xb3\x16\x47\xae\xf9\xec\x12\xc0\x29\x1d\xfa\x56\xd3\xa7\x82\xef\x74\x70\x5b\x81\xe1\xeb\xa7\xc0\xb7\x95\xa6\x6f\x56\xce\x77\xe2\x95\x93\xc6\x6b\x55\x71\xfb\xc7\x03\xbf\x4a\x34\x61\xa0\xcd\x2e\x65\x45\x0a\x87\xe7\xf6\xc9\xc1\xbe\x8f\xd9\x12\x5f\xc5\x2a\xd5\x2c\x7b\x2f\xbb\xb2\x00\x2d\x76\x17\x35\x74\x78\xc5\xb2\x5c\x40\xa9\xe4\x1e\x3c\xf7\x48\x96\x71\xd9\x9b\xea\x0b\x97\x07\x4a\xc4\xee\xfb\x13\xb1\xfb\xc3\x24\x5a\xb9\xeb\x86\x8c\xa1\x37\xdb\x75\x15\xd4\x48\xd9\x9b\x73\xd3\x77\x6e\xb1\xef\x94\xfe\x69\x1e\xbb\x0d\xfc\xb7\x82\x49\xcb\x05\xbc\xd8\x78\xf6\xd8\x89\xe3\x7f\xbb\xee\x38\xab\x3d\xcd\x59\xd1\xed\xe9\x37\x75\xc4\x96\x85\xdd\xa5\xec\xdd\x07\x7f\xdb\xbe\x73\x07\xfb\xf1\xd6\x6d\xa6\xf9\x30\xdb\xb6\x92\x7c\xa8\x65\x9b\x99\x0e\x6c\x57\x0f\xfd\x2b\x59\xf5\xb5\x2f\xcf\xee\xcb\xd8\x6e\x24\x8c\xdf\xbe\x8e\xe1\xa0\xbb\xde\x36\x2e\xce\x8d\x4b\x76\xeb\x5f\xac\x35\xf0\xcf\x00\x00\x00\xff\xff\xa4\x4e\x4d\xb5\xf5\x0d\x00\x00")

func templatesViewsListHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsListHtml,
		"templates/views/list.html",
	)
}

func templatesViewsListHtml() (*asset, error) {
	bytes, err := templatesViewsListHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/list.html", size: 3573, mode: os.FileMode(420), modTime: time.Unix(1499801627, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/list.html": templatesViewsListHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"list.html": &bintree{templatesViewsListHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: AssetInfo, Prefix: k}
	}
	panic("unreachable")
}
