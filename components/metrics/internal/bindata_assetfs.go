// Code generated by go-bindata.
// sources:
// templates/views/list.html
// locales/ru/LC_MESSAGES/config.mo
// locales/ru/LC_MESSAGES/list.mo
// locales/ru/LC_MESSAGES/metrics.mo
// DO NOT EDIT!

package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsListHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x57\xdb\x6e\xe3\x36\x10\x7d\xcf\x57\x0c\x08\x07\x6b\x03\xd1\xc5\xd9\x6e\x5b\x18\x8a\x5f\x5a\x14\x01\x9a\x14\x6d\x93\xe6\xa1\x58\xa0\xa0\xa5\x71\x4c\x83\x22\x15\x92\xf2\x05\x86\xff\xbd\xa0\x2e\xb1\xe2\x88\xb2\xb3\x70\xb2\x01\x92\xd8\x33\xc3\x39\x33\x67\x0e\x49\x69\xb3\x81\x04\xa7\x4c\x20\x90\x58\x0a\x83\xc2\x10\xd8\x6e\xcf\xce\xa2\x84\x2d\x20\xe6\x54\xeb\x2b\xa2\xe4\x92\x8c\xcf\x00\x00\x9a\xd6\xd5\x7f\x19\x15\xc8\x2b\xcf\x6b\xaf\x61\x86\x63\xc3\x5b\x44\xcc\x2e\xc7\x9b\x0d\xb0\xe1\xcf\x02\xc8\x2d\x1a\xc5\x62\x4d\xc0\x87\xed\x36\x0a\x66\x97\x7b\xb1\x8d\x6c\x31\x47\xaa\xa6\x6c\x45\xc6\x51\x90\xb0\x45\x03\x72\xef\xeb\x8b\x0a\xea\x86\xdc\x79\x0d\x9d\x70\xf4\x14\xea\x4c\x0a\xcd\x16\xfb\xe5\x16\xe1\xd9\x73\x30\xae\x8c\x97\xe6\x06\x13\x98\x4a\x61\xbc\xe1\x67\x48\xbd\x89\xf7\x39\x6c\x59\x65\x7f\x6c\xa3\x53\xf0\xf3\x2c\xa1\x76\xcd\x76\xdb\x1a\x55\x45\x2a\xba\x84\xbe\xe5\xe5\x4f\x9e\x2b\xca\x81\xdc\xcd\xe4\x52\xc3\x79\x02\x29\x52\x9d\x2b\xf4\xe1\x86\x6a\x03\x75\x36\x6a\xe0\x5c\x93\xd7\x61\xba\x3d\xae\xcf\x51\x80\x5f\xc7\x0c\xa0\x07\x82\xf1\xe7\xdf\x7d\x6f\x3f\x53\x4c\x18\x20\x91\x8e\x15\xcb\x0c\x98\x75\x86\x57\x5f\x09\xcd\x32\xce\x62\x6a\x98\x14\xc1\x9c\x2e\x68\xe9\xfd\x4a\xc6\x89\x8c\xf3\x14\x85\xf1\x97\x8a\x19\xec\x5b\xe4\x7b\x79\x67\x14\x13\x8f\xfd\x4f\x04\xfa\x35\x07\xfe\x6f\x52\xa5\xd4\x00\xb9\x0c\xc3\x1f\xbd\x70\xe8\x85\x97\xf7\xc3\x2f\xa3\xf0\x87\x51\xf8\xe5\xdf\xf0\xa7\x51\x18\x92\x01\x90\x4f\x83\x41\x14\x94\xb9\xc7\x64\x30\x70\x11\xb7\xd9\x00\x72\x8d\x07\x78\xed\xa2\xb4\x8d\xbe\xb7\x52\xd5\x51\x9c\x68\x9d\x79\x14\x64\xe3\xb3\xd7\xd6\x42\x89\x2f\x64\x09\xa5\x38\xb5\x51\x2c\xc3\x04\x12\x6a\x68\x69\x4f\x4c\x43\xb1\x20\xe4\x52\xd1\x8c\x80\x36\x6b\x8e\x57\x64\xc9\x12\x33\x1b\x0d\xc3\xf0\xdc\xa1\xca\xc8\xcc\x90\x26\xed\xbe\xd2\xaf\xdc\xce\x2a\xc1\x6e\x0f\xff\x41\x53\xac\x37\xb0\x99\xbd\x61\xe1\x03\xe5\xf9\xb7\xad\xbc\xa1\x13\xe4\xfa\x0d\x4b\x6b\x56\xd3\xc4\x8b\x25\xf7\x86\x64\x97\xeb\x7e\x9d\x7d\x5b\x11\xbf\x62\x29\x50\x26\xc5\x31\xeb\xa3\xc0\xc5\xaa\x5d\xe7\x9c\x47\x64\x26\x32\x59\xbb\xd3\x16\xe7\x86\x78\x44\xe8\xa5\x17\xd0\xab\x44\x09\xa3\xab\x9d\x40\xbb\x76\xc7\x11\x93\x4e\x6c\xc7\x75\x62\xbf\xd1\xb4\x6f\x07\x5f\xb6\xdd\xa1\xa5\x3a\x49\x67\x40\xd5\x48\xcf\x1e\x32\xb6\xf6\x56\x38\x3b\x28\xbf\x3c\x51\xba\x5a\x6a\xe4\x63\x53\x90\x0a\xfa\xf8\x54\x65\x26\x33\xa6\x8d\x7c\x54\x34\x25\x83\xa6\xd9\xb0\x14\x15\x71\x6e\xe4\x17\xad\xe8\x8c\x8a\x5a\x4d\xdc\xca\x10\x8a\xbf\x1e\x13\x53\x49\xc6\xb1\xcc\x85\x19\x41\x93\xb1\x42\xe5\xfe\x1d\x4d\x33\x8e\xbf\x58\x77\x41\x99\x4d\x73\x98\x93\x03\x68\x29\x13\x6e\xac\x5b\x26\x4e\x88\x44\x57\x1d\x48\x74\x75\x3a\xa4\x05\x55\x8c\x8a\x18\xdd\x70\x0f\x55\x44\x03\xf3\x18\x31\x54\xbb\xe4\xe9\x02\x7a\x0b\x9b\xed\x85\xce\xca\xfc\x7f\xe5\x54\x18\xc6\xbb\xb7\xcc\x91\x7d\xd8\xea\x9f\x60\xbb\x2d\xfb\x28\x11\x8f\x27\xc9\x7d\x77\xb4\x45\x1e\xb8\x02\x8f\xac\xf8\x63\xb5\x5b\x30\xd2\x86\xf6\xf0\x2e\x54\x9d\xee\x90\xaa\x74\xc4\x2f\xa0\x57\x76\xe5\x3a\xaf\xca\x4b\xea\x98\xc1\x40\x17\x5d\x3a\x8f\x63\xd4\xba\x54\x54\x61\xf2\x7f\xc7\xf5\xb3\xb2\x4a\xcb\xf7\x24\xcd\x75\x3d\xd8\xf3\xfa\xe8\xeb\xc1\x95\xe4\x1a\x79\x76\x30\x89\xfb\x6a\xed\xee\x33\x0a\x1c\x97\x6b\x14\x14\x8f\x59\x7b\x2f\x0d\xce\xd7\x8e\xea\x63\xf5\x6f\x87\x79\xd6\x78\xb3\xb2\x37\x3c\xa9\x0b\xd9\x6c\x40\x1b\x6a\x58\x7c\x7d\x7f\x7b\x03\xfd\xf2\xf3\x3f\x7f\xdf\x00\x09\x12\xaa\x67\x13\x49\x55\x12\x50\xad\xd1\xe8\x60\x81\x22\x91\x4a\x07\xcf\x0f\x7f\xda\x17\x68\xbc\x89\x0e\x62\x5d\x5a\xef\x4b\xeb\x44\x4a\xa3\x8d\xa2\x99\x9f\x32\xe1\xc7\x5a\x13\x98\x52\xae\x71\x70\x42\xd4\x29\x5b\x61\x62\x5b\x41\x55\x57\x50\x98\xae\x0b\xd3\x87\x94\xb0\x7b\xee\xad\x2b\xd8\x59\xba\x0b\x68\x1f\xcc\x5c\x9f\x70\x2c\xc1\x5c\x07\xf3\xa7\x1c\xd5\xda\x6f\x4c\xc6\xd6\x32\x7f\x0f\x2e\x26\xda\x02\x3a\x35\xf0\x2e\x98\x0d\x09\xec\x81\x37\x95\xf0\x6e\xf0\xbb\x61\xef\xa1\x37\x54\xf0\x01\xe0\x15\xf5\x4e\xe9\xcd\xdb\x95\xf7\x7f\x00\x00\x00\xff\xff\x9a\xfd\x76\x8b\x6b\x11\x00\x00"

func templatesViewsListHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsListHtml,
		"templates/views/list.html",
	)
}

func templatesViewsListHtml() (*asset, error) {
	bytes, err := templatesViewsListHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/list.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesConfigMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x52\x4d\x6c\x1b\x45\x14\xfe\xbc\xf5\xf6\xc7\xfc\xb4\x54\x50\x21\x01\x62\x7a\xa0\xa2\x42\x5b\xd6\x36\x95\xca\x26\x9b\xa2\x36\x0d\x54\x24\x24\x0a\x2e\xe2\x82\xd0\xd4\x9e\x38\xab\xae\x67\xa3\xd9\xdd\x50\xa4\x22\xa5\x09\x88\x43\x40\x15\x12\x48\x3d\x14\x50\xb9\xf4\xc2\xc1\x0d\x8d\x12\xc5\xb1\x7b\x83\xeb\x9b\x13\x12\x42\x9c\xe1\xc6\x91\x23\x1a\xef\xae\x4b\x0a\xcc\xe5\xbd\xef\x7b\xfb\x7d\xf3\xde\xdb\xf9\xed\x68\xf9\x2b\x00\x38\x0a\xe0\x59\x00\xdf\x03\x78\x0e\xc0\x78\x09\xc3\xd3\x2d\x01\x4f\x02\xb8\x5b\x02\x9e\x02\xf0\x63\x09\x78\x04\xc0\xaf\x25\xe0\x30\x80\xdf\x4b\x80\x0b\xe0\xaf\x52\xe6\x71\xd2\xca\xe2\xb8\x05\x3c\x06\x60\xd6\x02\x9e\x00\xf0\x5e\x8e\x23\x2b\xd3\x7d\x64\x01\x47\x00\x7c\x9e\xf3\xdf\x58\x40\xc5\xdc\x9f\xd7\xb7\x72\x9f\x9f\x2c\xe0\x71\x00\xbf\x58\xc0\x62\x09\xf8\xc3\xca\xfa\x9c\x2f\x03\xc7\x8d\x5f\x19\xd8\x0f\xe0\x8b\x32\x70\x10\xc0\xcd\x32\x70\x1a\xc0\xed\x32\xf0\x34\x80\x9f\xf3\xf8\x67\x19\x78\x14\xc0\x21\x1b\x38\x06\xe0\x98\x9d\x61\x27\x8f\x9e\x9d\xf5\xf3\xba\x9d\xdd\xf7\xae\x0d\xec\x03\xd0\xb6\x81\xe7\x01\x5c\xb1\x81\x67\x00\xac\xdb\xc0\x01\x00\x77\x6c\xc0\xac\xc8\x46\xb6\x8f\xe2\x18\xaf\xc3\x79\x7e\x08\xd9\x4c\xfb\xb1\xf7\x58\xc8\x66\xde\x97\xe3\x03\x79\x3c\x92\xc7\x72\x1e\x4d\x1f\x66\x77\x07\xf3\xff\x33\x3c\xcd\x48\x2e\x04\xed\xf2\x24\x4f\xf8\x65\x1e\x0b\x26\x79\x47\x14\xe4\x54\x98\xc6\x8b\x2c\x90\x89\x50\xcb\x3c\x2c\xd8\x37\xa2\x54\x15\xf9\x45\xb9\x10\xa6\x57\x27\xcf\x15\x78\x9a\x5f\x16\x61\xcc\x02\xc9\x16\x22\xd5\xe1\x09\x0b\x0d\x51\x7d\xdf\xb8\xfa\x79\xbe\xcc\xc3\x74\x74\xc5\x4c\xd0\x54\x51\x2c\x9a\x91\x6c\x3d\xa0\xc2\x30\x78\x98\x92\x69\x32\xd2\xbc\xc5\xe5\x43\x92\xd9\x64\x51\xa8\xb8\x40\x73\x3c\x8e\x3f\x88\xd4\xa8\x3a\xa7\x44\x33\x88\x83\x48\x16\xc4\xdb\x7b\xc4\x97\xe6\xa7\x47\x69\x2c\xd4\x3f\x17\xc0\x5b\x2d\xc6\xb3\x19\x0a\x4a\x2d\x34\xeb\xf5\xfa\xab\x98\x17\x4b\x91\x4a\x9c\x99\xb8\x1d\xb4\x9c\x73\x69\x3b\x76\x1a\x91\xc7\x5a\x62\xf9\xb5\x2b\xc1\x22\xef\x44\xa7\x54\x5a\x99\x9b\x6d\x38\xe7\x95\xe0\x49\x10\x49\x67\x92\x27\xc2\x63\x35\xb7\x7a\xc6\x71\xeb\x4e\xad\xce\x6a\x75\xef\xf4\xe9\x97\xdc\xba\xeb\x56\xa6\x79\x9c\x38\x0d\xc5\x65\x1c\xf2\x24\x52\x1e\x7b\x73\xe8\xc1\x66\x52\xc5\x3b\x51\x2b\x62\xe3\x7b\x8c\x27\x2a\xd3\x5c\xb6\x53\xde\x16\x4e\x43\xf0\x8e\xc7\x46\xd8\x63\xf3\x69\x1c\x07\x5c\x56\x66\x2e\xce\x5c\x70\xde\x11\xca\xcc\xed\xb1\xea\x29\xb7\x72\x3e\x92\x89\x90\x89\xd3\xf8\x70\x49\x78\x2c\x11\x57\x93\x97\x97\x42\x1e\xc8\x31\xd6\x5c\xe4\x2a\x16\x89\x7f\xa9\x31\xe5\x9c\x79\xf0\x9d\xe9\x67\x41\x28\xe7\x82\x6c\x46\xad\x40\xb6\x3d\x56\x99\x0b\x53\xc5\x43\x67\x2a\x52\x9d\xd8\x63\x72\x69\x08\x63\xbf\x3e\xc6\xb2\xd4\x97\x2f\x54\x5d\xdf\xaf\xb2\x13\x27\x98\x49\xdd\xe3\x7e\xb5\xca\xce\x32\x97\x79\x43\x3c\xe1\xd7\x8a\xd2\xb8\xff\x8a\x49\x5f\x1c\x7e\x36\x5e\x75\xd9\xb5\x6b\x99\x64\xc2\xaf\xb9\x27\xd9\x59\x56\x65\x1e\xab\x8d\x81\x6e\xd2\xae\xbe\xc1\xe8\x2e\x75\x69\x4b\xaf\x33\xba\x47\x5d\xea\x53\x5f\xaf\xeb\x4f\x4c\xb1\xaf\x57\x69\x53\xaf\xd0\x06\x75\xa9\xc7\x68\xa0\x57\xe9\xbe\x5e\xa1\x2e\x6d\xd0\x0e\x6d\x83\xee\x50\x57\x5f\xc7\xe8\xa1\xd2\x2d\xda\xd4\xab\xa6\xc4\x68\x83\xe9\x8f\x69\xa0\x57\x68\x97\xba\xc6\xe5\xff\x5f\x2b\xdd\xa2\x6d\xda\xd1\x2b\x34\xd0\xd7\x69\x93\x76\xf4\x1a\xf5\x4d\x23\x59\xa1\x47\x3d\xda\xfe\xaf\x42\x5f\xaf\xe9\x55\x03\xbe\x1e\xf6\xfc\x2f\xf1\x97\x7a\x45\xaf\xd1\x0f\x34\xa0\x4d\xd0\xb7\xd4\x35\x17\x50\x4f\x7f\x06\xfa\x8e\x06\xfa\xd3\x4c\xa2\x57\x0d\x71\x7b\x8f\xd2\xbc\xd9\x62\x31\xf7\x33\x0d\x6d\xd1\xc0\x2c\xc1\x0c\x42\x3d\x7d\x03\x74\x8f\x06\xc3\xad\x6d\xd0\xb6\xf1\x60\xb4\x9b\x8d\xae\xd7\x50\xbc\xe2\xbf\x03\x00\x00\xff\xff\x47\xc4\xf9\xd9\xaf\x05\x00\x00"

func localesRuLc_messagesConfigMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesConfigMo,
		"locales/ru/LC_MESSAGES/config.mo",
	)
}

func localesRuLc_messagesConfigMo() (*asset, error) {
	bytes, err := localesRuLc_messagesConfigMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/config.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesListMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x92\xcd\x6f\xd3\x58\x14\xc5\x8f\x93\x4c\x67\x26\xa3\xa9\x46\x23\xcd\x6e\x16\x77\x46\xd3\x6a\x10\x72\xb0\x13\x2a\x55\x6e\xdd\x22\xfa\x21\x01\x0d\x54\x25\x74\xff\x88\x1f\x89\x45\x62\x47\x7e\xcf\x7c\xa9\x8b\x96\x0d\x12\x42\x62\x81\x10\x2c\x10\x48\xac\x59\x94\x8a\xa8\x69\xe9\xc7\xbf\x70\xf3\x0f\x20\x10\x6b\x76\x2c\x91\x40\x8e\xdb\x02\x2a\x8b\xb0\xe0\xad\xee\x3d\x39\xe7\xf7\x4e\x6c\xbf\xfa\x33\x77\x1f\x00\x7e\x05\xf0\x37\x00\x0f\xc0\xef\x00\x9e\x21\x3d\xaf\x01\xfc\x06\xe0\x0d\x80\x01\x00\xef\x00\xfc\x0c\xe0\x3d\x80\x1c\x80\x0f\x00\xfe\x05\x60\x18\xc0\x69\x00\xff\x19\xa9\x1e\x1a\xc0\x4f\x00\xb4\x01\xd4\x0d\xe0\x86\x01\xfc\x01\xe0\x6d\x06\xc8\x27\xf9\x0c\x30\x08\xe0\x63\x26\xe5\x0e\x66\x01\x0d\xe0\xaf\x6c\xca\xba\x9d\x4d\xf5\x3b\xb9\x34\x77\x2f\x07\x18\x48\x99\x49\xd7\x2c\x80\xcc\x5e\x97\x2f\xcf\xc0\x5e\xaf\x5f\xf6\x85\x69\xa9\xaa\x91\xdf\xd2\x7e\x18\x60\x4e\x5c\x94\x0d\x85\xb2\xd4\x91\x5f\x55\x38\x2b\x9a\x12\xe7\xeb\xe1\x55\x45\x43\x1e\x35\xa5\x50\x71\x74\x58\x50\x87\x94\x02\xcd\x09\xa5\x29\x6e\x79\x42\x4b\x8f\x84\xa6\xa1\xc3\x26\xf5\x4d\x57\xe5\x7a\x4b\x62\x51\x34\x62\x89\x05\xd9\x0a\x23\x6d\x96\x55\xcd\xf7\xcc\x93\x71\x4d\x99\x95\xd0\x21\x4f\x5e\x39\x71\xd9\xaf\x8b\x66\x58\x88\xe2\xfc\xfc\xb9\x8a\x39\x15\x49\x91\xb4\x37\xa7\x85\x96\x0e\x15\x2d\x7b\xd4\xb4\x4a\x66\xb1\x44\xc5\x92\x33\x32\x72\xd4\x2a\x59\x56\x3e\xb9\xca\xac\x44\x22\x50\x0d\xa1\xc3\xc8\xa1\x33\x3d\x06\x95\xe3\x48\x34\x43\x2f\xa4\xf1\xaf\xc0\x13\xf9\x39\x11\xd4\x62\x51\x93\x66\x45\x8a\xa6\x43\x07\xbb\x43\x0b\xb1\x52\xbe\x08\xf2\xe5\x53\xe5\x19\x73\x51\x46\xca\x0f\x03\x87\xec\x82\x95\x9f\x0a\x03\x2d\x03\x6d\x26\x7f\xc2\x21\x2d\xaf\xe9\x63\xad\x86\xf0\x83\x31\xaa\xd6\x45\xa4\xa4\x76\x2f\x54\x66\xcd\xd1\xcf\xbe\xa4\xcf\x25\x19\x99\x33\x41\x35\xf4\xfc\xa0\xe6\x50\x7e\xbe\x11\x47\xa2\x61\xce\x86\x51\x53\x39\x14\xb4\x7a\xab\x72\x4b\x63\x94\x8e\x6e\x30\x64\x5b\xae\x6b\xd3\xf0\x30\x25\xa3\xf5\x8f\x6b\xdb\x34\x49\x16\x39\xbd\x7d\xc2\x2d\xee\xff\x34\xee\x1e\x4f\xc6\xff\x7b\xb6\x71\xdb\xa2\xa5\xa5\x34\x32\xe1\x16\xad\x23\x34\x49\x36\x39\x54\x1c\x03\x3f\xe6\x5d\xee\x74\x57\x78\x95\xb7\xb9\xc3\x6d\xf0\x23\x6e\x77\x6f\xf2\x26\x77\xf6\xc6\xee\x32\x77\xd2\xf5\x21\x6f\x75\xef\x82\x9f\xf0\x0e\x6f\xf2\x2a\xaf\xf7\x32\x3b\xc9\x6b\xe5\x0e\xaf\xf3\x16\xb7\xbb\xcb\xdc\xde\xe7\xf4\x61\xeb\x97\xb6\xd1\xe7\xa5\x05\x4a\x7c\xdd\x15\x7e\xc9\x6d\x7e\xc1\xdb\xdc\xe6\x36\xf1\x0e\x3f\x4f\x22\xbc\xd6\x93\x7b\x46\xe2\xb5\xe4\x83\xeb\xaf\xe3\x8f\xa0\xf2\xc6\x77\x53\x9f\x72\x87\x77\xc1\x0f\x78\x9b\x57\xbb\xb7\x0e\x9e\xf3\xa7\x00\x00\x00\xff\xff\xa2\xf5\xd3\x63\xa4\x04\x00\x00"

func localesRuLc_messagesListMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesListMo,
		"locales/ru/LC_MESSAGES/list.mo",
	)
}

func localesRuLc_messagesListMo() (*asset, error) {
	bytes, err := localesRuLc_messagesListMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/list.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesMetricsMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\x4f\x6b\x14\x31\x18\xc6\x9f\x2d\x8a\x30\x07\x0f\x9e\x3d\xbc\x1e\x2c\x8a\xa6\x26\x33\x16\x4a\x76\xb3\x15\x6b\x0b\x62\x07\xd7\x32\x0a\x1e\xc3\x6e\x9c\x0d\xce\x24\x43\x92\x11\x85\x1e\xc4\xef\xe0\xcd\xaf\x21\x14\x8f\x7e\x82\xe9\x17\xf0\xb3\xc8\xce\xfa\xf7\x39\x3d\x3f\xf2\xcb\xc3\xfb\xe3\xc6\x95\xcf\x00\xb0\x03\xe0\x26\x80\xfb\x00\xae\x02\x98\x61\x9b\x05\x80\x6b\x00\x5e\x00\x58\x4f\x80\xd7\x00\xae\x03\xf8\x3e\x01\x26\xbf\x9c\x1d\xfc\x93\xd2\xa4\x60\x97\x11\x67\xa6\xf3\x21\xb1\x32\xd6\x76\xc5\x1e\xf7\x75\x64\x95\x97\xb4\x32\xef\x1e\xbd\xb5\x6b\xdd\xfa\xbd\xd0\x67\x8b\xe7\x15\x3b\x0a\x46\x27\xeb\x1d\x7b\xa2\x93\x91\x94\x73\x71\xc0\x78\xc1\xf2\x82\xf2\x42\xee\xef\xdf\xe3\x05\xe7\xd9\xa9\x8e\x89\x55\x41\xbb\xd8\xe8\xe4\x83\xa4\x67\xe3\x06\x95\x7d\xd0\xad\x5f\x79\x9a\xfd\x37\x3c\xcf\x4e\xb5\xab\x7b\x5d\x1b\x56\x19\xdd\x4a\xfa\xc3\x92\xce\xfa\x18\xad\x76\x59\xf9\xb4\x3c\x66\xaf\x4c\x88\xd6\x3b\x49\x62\x8f\x67\x47\xde\x25\xe3\x12\xab\x3e\x74\x46\x52\x32\xef\xd3\x83\xae\xd1\xd6\x4d\x69\xb9\xd6\x21\x9a\xa4\x5e\x56\x27\xec\xe0\xaf\xb7\xb9\xe7\x8d\x09\xec\xd8\x2d\xfd\xca\xba\x5a\x52\xb6\x68\xfa\xa0\x1b\x76\xe2\x43\x1b\x25\xb9\x6e\xc4\xa8\x8a\x29\x6d\xab\x72\xb7\x05\x57\x4a\xd0\xee\x2e\x6d\x2a\xbf\xa5\x84\xa0\x43\xe2\x24\x47\x9e\xab\xfc\xf7\xd3\x4c\x3d\xdc\xd4\x3b\xa3\x36\x13\x9c\xce\xcf\xb7\x5f\xe6\x2a\xe7\x77\xe9\x90\x04\x49\xca\xa7\x18\xbe\x0c\x5f\x2f\x3f\x5d\x7e\x1c\x2e\x86\x6f\xc3\x05\x7e\x06\x00\x00\xff\xff\xe9\x1d\x5e\x3e\xd1\x01\x00\x00"

func localesRuLc_messagesMetricsMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesMetricsMo,
		"locales/ru/LC_MESSAGES/metrics.mo",
	)
}

func localesRuLc_messagesMetricsMo() (*asset, error) {
	bytes, err := localesRuLc_messagesMetricsMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/metrics.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/list.html":         templatesViewsListHtml,
	"locales/ru/LC_MESSAGES/config.mo":  localesRuLc_messagesConfigMo,
	"locales/ru/LC_MESSAGES/list.mo":    localesRuLc_messagesListMo,
	"locales/ru/LC_MESSAGES/metrics.mo": localesRuLc_messagesMetricsMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"config.mo":  &bintree{localesRuLc_messagesConfigMo, map[string]*bintree{}},
				"list.mo":    &bintree{localesRuLc_messagesListMo, map[string]*bintree{}},
				"metrics.mo": &bintree{localesRuLc_messagesMetricsMo, map[string]*bintree{}},
			}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"list.html": &bintree{templatesViewsListHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
