// Code generated by go-bindata.
// sources:
// templates/views/list.html
// locales/ru/LC_MESSAGES/config.mo
// locales/ru/LC_MESSAGES/list.mo
// locales/ru/LC_MESSAGES/metrics.mo
// DO NOT EDIT!

package internal

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsListHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x57\x5b\x4f\xeb\x46\x10\x7e\xe7\x57\x8c\x56\x41\x24\x12\xbe\x84\x73\x69\x15\x99\xbc\xb4\xaa\x90\x0a\x55\x5b\x28\x0f\xd5\x91\x8e\x36\xf6\x98\x6c\xb4\xde\x35\xbb\xeb\x5c\x14\xe5\xbf\x57\xeb\x4b\x62\x82\xed\x24\x08\x4e\x91\x80\x64\x76\x76\xe6\x9b\x6f\xbe\x9d\xb5\xd7\x6b\x88\x30\x66\x02\x81\x84\x52\x18\x14\x86\xc0\x66\x73\x76\x16\x44\x6c\x0e\x21\xa7\x5a\x5f\x13\x25\x17\x64\x7c\x06\x00\x50\xb7\x2e\xbf\xa7\x54\x20\x2f\x57\x5e\xaf\x1a\x66\x38\xd6\x56\x73\x8f\xe9\xd5\x78\xbd\x06\x36\xfc\x59\x00\xb9\x43\xa3\x58\xa8\x09\xb8\xb0\xd9\x04\xde\xf4\x6a\xcf\xb7\x16\x2d\xe4\x48\x55\xcc\x96\x64\x1c\x78\x11\x9b\xd7\x52\xee\x7d\x7d\x81\xa0\x2a\xa8\x3d\xae\xa1\x13\x8e\x8e\x42\x9d\x4a\xa1\xd9\x7c\x1f\x6e\xee\x9e\x6e\x9d\x71\x69\x9c\x24\x33\x18\x41\x2c\x85\x71\x86\x9f\x20\x71\x26\xce\x27\xbf\x61\x97\xfd\xb1\x85\xc6\xe0\x66\x69\x44\xed\x9e\xcd\xa6\xd1\xab\xf4\x54\x74\x01\x7d\xcb\xcb\x9f\x3c\x53\x94\x03\xb9\x9f\xca\x85\x86\xf3\x08\x12\xa4\x3a\x53\xe8\xc2\x2d\xd5\x06\xaa\x68\xd4\xc0\xb9\x26\xaf\xdd\x74\xb3\x5f\x9f\xa3\x00\xb7\xf2\x19\x40\x0f\x04\xe3\xdb\xdf\xfd\xd5\x7e\xaa\x98\x30\x40\x02\x1d\x2a\x96\x1a\x30\xab\x14\xaf\xbf\x11\x9a\xa6\x9c\x85\xd4\x30\x29\xbc\x19\x9d\xd3\x62\xf5\x1b\x19\x47\x32\xcc\x12\x14\xc6\x5d\x28\x66\xb0\x6f\x33\x3f\xc8\x7b\xa3\x98\x78\xea\x5f\x10\xe8\x57\x1c\xb8\xbf\x49\x95\x50\x03\xe4\xca\xf7\xbf\x3a\xfe\xd0\xf1\xaf\x1e\x86\x5f\x46\xfe\xe7\x91\xff\xe5\x5f\xff\xa7\x91\xef\x93\x01\x90\x8b\xc1\x20\xf0\x8a\xd8\x63\x32\x18\xb4\x11\xb7\x5e\x03\x72\x8d\x07\x78\xed\xa2\xb4\x89\xbe\x53\xa9\xea\x00\x27\x1a\x7b\x1e\x78\xe9\xf8\xec\xb5\x35\x57\xe2\x0b\x59\x42\x21\x4e\x6d\x14\x4b\x31\x82\x88\x1a\x5a\xd8\x23\x53\x53\x2c\x08\xb9\x50\x34\x25\xa0\xcd\x8a\xe3\x35\x59\xb0\xc8\x4c\x47\x43\xdf\x3f\x6f\x51\x65\x60\xa6\x48\xa3\xe6\xb5\x62\x5d\xb5\x2f\x96\x01\x76\x67\xf8\x0f\x9a\x60\x75\x80\xcd\xf4\x84\x8d\x8f\x94\x67\x6f\xdb\x79\x4b\x27\xc8\xf5\x09\x5b\x2b\x56\x93\xc8\x09\x25\x77\x86\x64\x17\xeb\x61\x95\xbe\x0d\xc4\xaf\x58\x08\x94\x49\x71\xcc\xfe\xc0\x6b\x63\xd5\xee\x6b\xed\x47\x60\x26\x32\x5a\xb5\x87\xcd\xe7\x86\x78\x42\xe8\x25\x97\xd0\x2b\x45\x09\xa3\xeb\x9d\x40\xbb\x4e\x47\x60\x54\x31\xa2\x30\x49\xcd\x0a\xfa\xa9\x64\xc2\xa0\xda\x06\x72\xf3\x1e\xb9\xf7\x34\x49\x39\xfe\x22\x33\x61\xac\xdc\x2b\x36\x23\x9b\x58\x91\xad\xd0\x0f\x91\x17\x59\xf2\xb6\xa1\x6b\xfc\xb9\x56\x43\x05\x83\x1d\xb2\xac\x82\x74\x3a\x94\x9c\xf4\xec\xbc\xb2\x34\x34\xa6\xb3\x3d\x77\x8b\xe1\xd4\xc5\xce\x36\xa9\x4e\xa9\xa8\x8a\xe6\x56\x7b\x90\xff\x75\x98\x88\x25\x19\x87\x96\x97\x11\xd4\x6b\x7b\x45\x5b\x5e\x9c\x0d\x73\x14\x7a\x16\x83\x54\xd0\xc7\xe7\xb2\x0e\x32\x65\xda\xc8\x27\x45\x13\x32\xa8\x9b\x0d\x4b\x50\x91\xd6\x09\x74\x42\x0d\x09\x13\x79\x05\x71\x3e\x9d\xbf\xc7\x5c\x52\x73\x40\x0e\x77\x4c\x0c\xe0\x22\xbe\x00\x67\x08\x5f\x3f\x9f\x50\xe0\x21\x28\x74\x79\x32\x14\xba\xfc\x10\x28\x73\xaa\x18\x15\x21\x9e\x8a\xe7\xb1\xdc\xd7\x0c\xea\x18\x05\x94\x67\xfa\xf9\x12\x7a\x73\x1b\xf8\x85\x94\x8b\x54\x7f\x65\x54\x18\xc6\xbb\x0f\xf8\x91\x85\x5a\xed\x3e\xc3\x66\xd3\x55\x68\x8e\xe3\x6d\x34\xb7\x5f\x85\x4d\x9e\x07\x6e\xf4\x23\x4b\xca\xe1\x1e\xdf\xb8\xc7\x8f\xae\xee\xfd\x66\x5b\xa9\x0d\x7e\x09\xbd\xa2\xec\xb6\x31\x57\x5c\x93\xc7\x70\x09\x5d\x7c\xea\x2c\x0c\x51\xeb\x42\x25\xb9\xc9\xfd\x1d\x57\x95\x5a\x4a\x4b\xce\xdf\xff\x44\x5a\xdb\xad\x62\xc7\xfc\xd1\xb7\x4a\x5b\x90\x1b\xe4\xe9\xc1\x20\xed\x97\x7b\x77\x9d\x81\xd7\x72\xbd\x07\x5e\xfe\xa0\xb7\xf7\xda\xd2\xfa\xe2\x53\x7e\x2c\xff\xed\x72\x9e\xd5\xde\xed\xec\x33\x06\xa9\x80\xac\xd7\xa0\x0d\x35\x2c\xbc\x79\xb8\xbb\x85\x7e\xf1\xf9\x9f\xbf\x6f\x81\x78\x11\xd5\xd3\x89\xa4\x2a\xf2\xa8\xd6\x68\xb4\x37\x47\x11\x49\xa5\xbd\xed\xe3\xa7\x76\x05\x1a\x67\xa2\xbd\x50\x17\xd6\x87\xc2\x3a\x91\xd2\x68\xa3\x68\xea\x26\x4c\xb8\xa1\xd6\x04\x62\xca\x35\x0e\xde\x31\x6b\xcc\x96\x18\xd9\x52\x50\x55\x08\x72\xd3\x4d\x6e\xfa\x21\x10\x76\x4f\xde\x15\x82\x9d\xa5\x1b\x40\x73\x63\x66\xfa\x1d\xdb\xe2\xcd\xb4\x37\x7b\xce\x50\xad\xdc\x5a\x67\x2c\x96\xd9\x47\x70\x31\xd1\x36\x61\xab\x06\x3e\x24\x67\x4d\x02\x7b\xc9\xeb\x4a\xf8\xb0\xf4\xbb\x66\xef\x65\xaf\xa9\xe0\x07\x24\x2f\xa9\x6f\x95\xde\xac\x59\x79\xff\x05\x00\x00\xff\xff\xb6\x90\x97\xfb\xed\x11\x00\x00"

func templatesViewsListHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsListHtml,
		"templates/views/list.html",
	)
}

func templatesViewsListHtml() (*asset, error) {
	bytes, err := templatesViewsListHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/list.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesConfigMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x52\xcf\x6f\x1b\x45\x14\xfe\xec\xec\xb6\xc5\x14\x5a\xc2\x0f\x21\x01\x62\x7a\xa0\xc0\x61\x8b\x9d\x14\x89\x6e\xb2\x09\x94\x36\xa2\xc2\x81\x28\xa4\x5c\xab\x89\x3d\x76\x56\xac\x77\xa3\x99\xdd\x50\xa4\x4a\xb8\x0e\x15\x87\x80\x2a\x21\x90\x90\x68\x85\xca\x05\x71\x41\x26\x24\xaa\x15\xc7\x2e\x9c\xb8\xbe\xb9\xc0\x8d\x3f\xa0\xe2\x0f\x80\x1b\x1a\xef\xae\x4b\x0a\xec\x65\xde\xf7\xbd\xf9\xde\xbc\xf7\xed\xfb\x7d\xd2\xfa\x02\x00\x1e\x05\xf0\x34\x80\x1d\x00\xcf\x00\xa8\x16\x30\xfa\x7e\x2a\x00\x8f\x01\xf8\xb9\x00\x3c\x0e\xe0\xd7\x02\xf0\x20\x80\x3f\x0a\xc0\x31\x00\x7f\x16\x80\x32\x80\x23\x45\x60\x12\xc0\x99\xec\xac\x16\x81\x87\x00\x5c\x2a\x02\x8f\x00\x68\x65\xf8\xc3\x62\xaa\xfb\xb4\x08\x1c\x07\x70\x33\xe3\xbf\x2f\x02\x25\x00\xfb\x59\xfe\x97\xac\xce\x6f\x45\xe0\x61\x00\x77\x33\xfc\x57\x11\x98\x2f\x00\x47\x27\xd2\x7e\xab\x16\x70\x02\x80\x6f\x01\x87\x00\x6c\x59\xc0\x11\x00\x9f\x59\xc0\xcb\x00\xbe\xb2\x80\x27\x01\xe8\xec\xbc\x6b\x01\x47\x01\x4c\xd8\xc0\x13\x00\x8e\xdb\x29\x7e\x3e\x3b\x4f\xdb\x69\x5f\xaf\xd9\xe9\xbb\xcb\x36\x30\x01\x80\xdb\xc0\xb3\x00\x84\x0d\x3c\x05\xe0\x9a\x0d\x1c\x06\x70\x2b\xbb\xf7\x9d\x0d\x18\xcb\x6c\xa4\xfe\xe4\x9f\xa9\x79\x2c\x8b\x1f\x40\x3a\xe3\x21\x1c\xfc\x8a\x48\x3d\x98\xc8\xf0\xe1\xec\x7f\x1c\xcf\xb0\x95\x9d\xe6\x1d\xe3\xa5\x99\x6f\x32\x17\xd7\xa2\xb0\xe1\x37\xad\x73\x3c\xe6\xab\x5c\x09\x16\xf2\x96\xc8\xc9\x85\x20\x51\x6b\xcc\x0f\x63\x21\x37\x78\x90\xb3\x6f\x44\x89\xcc\xe3\x0b\x61\x23\x48\x2e\x9f\x3b\x9b\xe3\x2a\x5f\x15\x81\x62\x7e\xc8\x1a\x91\x6c\xf1\x98\x05\x86\xa8\x5c\x32\x55\xbd\x2c\xde\xe0\x41\x32\x7e\x62\xd1\xaf\xc9\x48\x89\x5a\x14\xd6\xef\x51\x41\xe0\xdf\x4f\x85\x49\x3c\xd6\xbc\xc5\xc3\xfb\x24\x6f\xc7\x6b\x42\xaa\x1c\x2d\x71\xa5\xde\x8f\xe4\x38\xbb\x24\x45\xcd\x57\x7e\x14\xe6\xc4\x3b\x07\xc4\x17\x97\xab\xe3\x50\x09\xf9\x4f\x03\x78\xbd\xce\x78\x3a\x43\x4e\xc9\x46\x6d\x7a\x7a\xfa\x4c\x06\x9d\x98\xaf\x5a\x2d\x11\x4b\xbf\xa6\xb0\x2c\xd6\x23\x19\x3b\x8b\xaa\xe9\xd7\x9d\xb3\x49\x53\x39\x2b\x91\xcb\xea\x62\xe3\xd5\xf7\xfc\x35\xde\x8a\x4e\xc9\xa4\x54\xe5\x2a\x76\x56\x24\x0f\x55\xc0\xe3\x48\xba\xec\xcd\x51\x8a\x2d\x26\x92\xb7\xa2\x7a\xc4\x66\x0f\xdc\x9f\x2b\x55\x79\xd8\x4c\x78\x53\x38\x2b\x82\xb7\x5c\x36\xc6\x2e\x5b\x4e\x94\xf2\x79\x58\x5a\xbc\xb0\x78\xde\x79\x57\x48\x33\xa1\xcb\x2a\xa7\xca\xa5\xd7\xa3\x30\x16\x61\xec\xac\x7c\xb0\x2e\x5c\x16\x8b\xcb\xf1\x4b\xeb\x01\xf7\xc3\x19\x56\x5b\xe3\x52\x89\xd8\xbb\xb8\xb2\xe0\xbc\x72\xef\x9e\xe9\xa7\x21\xa4\x73\x3e\xac\x45\x75\x3f\x6c\xba\xac\xb4\x14\x24\x92\x07\xce\x42\x24\x5b\xca\x65\xe1\xfa\x08\x2a\x6f\x7a\x86\xa5\xa1\x17\x3e\x57\x29\x7b\x5e\x85\x9d\x3c\xc9\x4c\x58\x3e\xe1\x55\x2a\x6c\x9e\x95\x99\x3b\xc2\x73\xde\x54\x9e\x9a\xf5\x4e\x9b\xf0\x85\xd1\xb5\xd9\x4a\x99\x5d\xb9\x92\x4a\xe6\xbc\xa9\xf2\x8b\x6c\x9e\x55\x98\xcb\xa6\x66\x40\x5f\xd2\xbe\xbe\xce\xe8\x07\xea\xd2\x6d\xbd\xc5\x68\x87\xba\x34\xa0\x81\xde\xd2\xd7\x4c\x72\xa0\x3b\xb4\xab\xdb\xb4\x4d\x5d\xea\x33\x1a\xea\x0e\xdd\xd1\x6d\xea\xd2\x36\xed\x51\x0f\xf4\x2d\x75\xf5\x55\x8c\x57\x92\x6e\xd0\xae\xee\x98\x14\xa3\x6d\xa6\x3f\xa2\xa1\x6e\xd3\x3e\x75\x4d\x95\xff\xdf\x4b\xba\x41\x3d\xda\xd3\x6d\x1a\xea\xab\xb4\x4b\x7b\x7a\x93\x06\xa6\x91\x34\xd1\xa7\x3e\xf5\xfe\x2b\x31\xd0\x9b\xba\x63\xc0\xcd\x51\xcf\xff\x12\x7f\xae\xdb\x7a\x93\x7e\xa4\x21\xed\x82\xbe\xa6\xae\x79\x80\xfa\xfa\x13\xd0\x37\x34\xd4\x1f\xa7\x12\xdd\x31\xc4\xad\x03\x4a\xb3\x9d\xb9\x31\x77\x52\x0d\xdd\xa6\xa1\x31\xc1\x0c\x42\x7d\x7d\x1d\xb4\x43\xc3\x91\x6b\xdb\xd4\x33\x35\x18\xed\xa7\xa3\xeb\x4d\xe4\xfb\x9a\xba\xa1\xdb\x66\x3a\xea\xe1\xef\x00\x00\x00\xff\xff\xc1\xed\xc0\x85\xb8\x05\x00\x00"

func localesRuLc_messagesConfigMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesConfigMo,
		"locales/ru/LC_MESSAGES/config.mo",
	)
}

func localesRuLc_messagesConfigMo() (*asset, error) {
	bytes, err := localesRuLc_messagesConfigMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/config.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesListMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x92\xbd\x6f\xd3\x50\x14\xc5\x8f\xd3\x50\x20\x08\x84\x98\x19\x2e\x88\x56\x30\x38\x24\x85\x01\xb9\x75\x8b\x80\x56\x02\x1a\x84\x4a\xe8\xfe\x88\x1f\xa9\x21\xb1\xa3\xf7\x9e\xf9\x52\x87\x96\x85\x91\x09\xc1\x80\x40\x62\x66\x28\x15\x56\xd3\xd2\x8f\x3f\x80\xe5\x7a\x61\x44\x30\xb0\xc1\xc6\xc8\x80\x6c\xb7\x05\x54\x86\x30\xf0\xa6\x7b\xcf\x3b\xe7\xe7\x23\xdb\x1f\x0f\x15\x9f\x00\xc0\x5e\x00\x87\x01\x78\x00\xf6\x03\x78\x8d\xfc\x7c\x02\xb0\x0f\xc0\x67\x00\xfd\x00\xbe\x01\xd8\x0d\xe0\x3b\x80\x22\x80\x1f\x00\x8e\x02\xb0\x2c\xe0\x12\x80\x63\x56\xae\x87\x16\xb0\x0b\x80\xb1\x80\x31\x0b\x78\x60\x01\x07\x01\xac\x14\x80\x12\x80\xf7\x05\xe0\x00\x80\x0f\x85\x9c\xfb\xa5\x00\x18\x00\x5f\x0b\x39\x4b\xf4\xe5\x7a\xa3\x98\xe7\x6e\x15\x01\x0b\x39\x33\xed\xda\x07\xa0\xb0\xd9\xe5\xf7\xd3\xbf\xd9\x6b\xcf\x96\x70\x41\xea\x86\xf2\x3b\xc6\x0f\x03\x4c\x8a\x1b\xb2\xa5\x51\x93\x46\xf9\x0d\x8d\x2b\xa2\x2d\x71\x6d\x26\xbc\xab\x69\xc0\xa3\xb6\x14\x3a\x52\x3b\x05\xbd\x43\x29\xd3\xa4\xd0\x86\xa2\x8e\x27\x8c\xf4\x48\x18\x1a\xd8\x69\xd2\x7f\x75\xd5\xef\x77\x24\xa6\x45\x2b\x92\x98\x92\x9d\x50\x19\xbb\xa6\x9b\xbe\x67\x9f\x8b\x9a\xda\xae\x87\x0e\x79\xf2\xce\xd9\xdb\xfe\x8c\x68\x87\x65\x15\x95\x52\x82\x5d\x57\x22\xd0\x2d\x61\x42\xe5\xd0\xe5\xec\x8a\x6a\x91\x12\xed\xd0\x0b\x69\xe4\x0f\xff\x68\x69\x52\x04\xcd\x48\x34\xa5\x5d\x97\xa2\xed\xd0\xf6\xee\xd0\x54\xa4\xb5\x2f\x82\x52\xed\x62\x6d\xdc\x9e\x96\x4a\xfb\x61\xe0\x50\xb5\x5c\x29\x9d\x0f\x03\x23\x03\x63\xa7\xdd\x1c\x32\xf2\x9e\x39\xd9\x69\x09\x3f\x18\xa6\xc6\x8c\x50\x5a\x1a\xf7\x7a\x7d\xc2\x3e\xf3\xcb\x97\xf6\xb9\x29\x95\x3d\x1e\x34\x42\xcf\x0f\x9a\x0e\x95\xae\xb6\x22\x25\x5a\xf6\x44\xa8\xda\xda\xa1\xa0\x93\xad\xda\x3d\x35\x4c\xf9\xe8\x06\x03\xd5\x8a\xeb\x56\x69\x70\x90\xd2\xb1\x72\xc4\xad\x56\x69\x8c\x2a\xe4\x64\xfb\xa8\x3b\xb4\x75\x35\xe2\x9e\x4e\xc7\xe3\x99\x6d\xa4\x5a\xa1\xd9\xd9\x3c\x32\xea\x0e\x55\x4e\xd0\x18\x55\xc9\xa1\xa1\x61\xf0\x0b\xde\xe0\x6e\x32\xcf\x0b\xbc\xc6\x5d\x8e\xc1\xcf\x39\x4e\x1e\xf2\x0a\x77\x37\xc7\x64\x8e\xbb\xf9\xfa\x8c\x57\x93\xc7\xe0\x97\xbc\xce\x2b\xbc\xc0\x4b\x59\x66\x3d\xfd\x5a\xdc\xe5\x25\x5e\xe5\x38\x99\xe3\x78\x8b\xd3\x83\xad\x57\xda\x72\x8f\x0f\x2d\x53\xea\x4b\xe6\xf9\x1d\xc7\xfc\x96\xd7\x38\xe6\x98\x78\x9d\xdf\xa4\x11\x5e\xcc\xe4\xcc\x48\xbc\x98\xfe\x47\xbd\x75\xfc\x1f\x54\x5e\xfe\x67\xea\x2b\xee\xf2\x06\xf8\x29\xaf\xf1\x42\xf2\x68\xfb\x3d\xff\x0c\x00\x00\xff\xff\x6a\xbc\x20\x9e\x7b\x04\x00\x00"

func localesRuLc_messagesListMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesListMo,
		"locales/ru/LC_MESSAGES/list.mo",
	)
}

func localesRuLc_messagesListMo() (*asset, error) {
	bytes, err := localesRuLc_messagesListMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/list.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesMetricsMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\xcf\xaa\xd3\x40\x18\xc5\x4f\x8b\x22\x64\xe1\xc2\xb5\x8b\xcf\x85\x45\xc1\xa9\x49\x75\x21\xd3\x4c\x2b\x4a\x0b\x62\x03\xb5\x44\xc1\xe5\xd0\x8c\x69\x30\x99\x09\x33\x13\x51\xe8\x42\x7c\x07\x17\x17\xee\x6b\x5c\x28\xf7\x29\xd2\x17\xb8\xcf\x72\x69\x7a\xff\x9e\xd5\xf9\x71\x7e\x1f\x7c\x17\x4f\x1e\xfc\x07\x80\x3e\x80\xa7\x00\x5e\x01\x78\x08\x20\xc6\x31\x4b\x00\x8f\x00\x7c\x01\x30\xed\x01\xdf\x01\x3c\x06\x70\xd2\x03\x7a\x57\x4e\x1f\x77\x92\x28\x6f\x8b\xb5\xc3\x4a\xd5\xc6\x7a\x96\xb8\xbc\xc8\xd8\x87\x26\x77\x2c\x35\x9c\x32\xf5\xeb\xfd\xcf\x62\x23\x2b\x33\xb4\x4d\xb0\x90\xce\xb3\xd4\x4a\xed\x4a\xe9\x8d\xe5\xf4\xb9\x9b\x28\x69\xac\xac\x4c\x66\x28\xbe\xe7\x4f\x82\x85\xd4\x79\x23\x73\xc5\x52\x25\x2b\x4e\x37\xcc\x69\xd5\x38\x57\x48\x1d\x24\x9f\x92\x19\xfb\xa6\xac\x2b\x8c\xe6\x14\x0d\xc3\xe0\xa3\xd1\x5e\x69\xcf\xd2\x3f\xb5\xe2\xe4\xd5\x6f\xff\xba\x2e\x65\xa1\xc7\xb4\xde\x48\xeb\x94\x17\x5f\xd3\x39\x7b\x77\xeb\x1d\xfe\xf9\xa1\x2c\x9b\xe9\xb5\xc9\x0a\x9d\x73\x0a\x96\x65\x63\x65\xc9\xe6\xc6\x56\x8e\x93\xae\x3b\x74\xe2\xcd\x98\x8e\x55\xe8\xe7\x51\x28\x44\x44\x83\x01\x1d\x6a\xf8\x4c\x44\x11\x4d\x29\x24\xde\xf1\x44\x8c\xae\xa7\x58\xbc\x3d\xd4\x17\x9d\x16\x47\x21\x6d\xb7\xc7\x93\x89\x18\x85\x2f\x69\x4a\x11\x71\x1a\x8d\xd1\x9e\xb6\x67\xfb\x7f\xfb\xbf\xed\xae\x3d\x6f\x77\xb8\x0c\x00\x00\xff\xff\x51\x3e\xcb\x01\xa8\x01\x00\x00"

func localesRuLc_messagesMetricsMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesMetricsMo,
		"locales/ru/LC_MESSAGES/metrics.mo",
	)
}

func localesRuLc_messagesMetricsMo() (*asset, error) {
	bytes, err := localesRuLc_messagesMetricsMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/metrics.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/list.html": templatesViewsListHtml,
	"locales/ru/LC_MESSAGES/config.mo": localesRuLc_messagesConfigMo,
	"locales/ru/LC_MESSAGES/list.mo": localesRuLc_messagesListMo,
	"locales/ru/LC_MESSAGES/metrics.mo": localesRuLc_messagesMetricsMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"config.mo": &bintree{localesRuLc_messagesConfigMo, map[string]*bintree{}},
				"list.mo": &bintree{localesRuLc_messagesListMo, map[string]*bintree{}},
				"metrics.mo": &bintree{localesRuLc_messagesMetricsMo, map[string]*bintree{}},
			}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"list.html": &bintree{templatesViewsListHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
