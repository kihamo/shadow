// Code generated by go-bindata.
// sources:
// templates/views/trace.html
// DO NOT EDIT!

package profiling

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsTraceHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x57\x6d\x6f\xdb\x36\x10\xfe\x9e\x5f\x41\x08\x5d\xb1\x02\x93\x5f\xb2\x76\x18\x1c\x47\x43\x81\xac\xc1\xbe\x15\xdd\x0f\x28\x68\xeb\x6c\x11\xa3\x48\x8d\xa4\xf2\xb2\xa2\xff\x7d\x47\x8a\x92\x29\x89\xb2\xdc\x21\x5f\x06\xd4\x40\x1c\xea\x78\xba\xf7\x7b\xee\xfc\xe5\x0b\xc9\xe1\xc0\x04\x90\x64\x2f\x85\x01\x61\x12\xf2\xf5\xeb\xd5\x36\x67\x0f\x64\xcf\xa9\xd6\xb7\x89\x92\x8f\x49\x76\x45\xf0\x13\x52\xf7\x92\xa7\xfc\x98\xae\xaf\xfd\x9d\xbb\x2f\xd6\xed\x75\x45\x8f\x90\x16\x40\x73\x50\x49\x76\x2f\x89\x51\x74\x0f\xdb\x65\xb1\xf6\x92\x96\x28\x2a\xbb\xf2\xff\xae\xd0\x0a\x76\x20\x0b\x50\x4a\xaa\xa1\x7a\xca\x41\x19\xe2\xbe\xd3\x9c\x8a\x23\xa8\xf6\x81\xe9\x92\x69\x4d\x77\x1c\x5a\xfb\x76\xb5\x31\x52\x10\xf3\x5c\xc1\x6d\xd2\x3c\x24\x9d\xc1\x5c\x6a\x48\x48\x4e\x0d\x6d\x5f\xf5\xc2\x13\x42\x15\xa3\x69\xc1\xf2\x1c\xc4\x6d\x62\x54\x8d\x02\x5f\x1b\x56\x82\xbe\xd9\x2e\x1b\x31\x8d\x02\xb4\xb3\x31\x72\xf1\x7b\x67\x6a\xe3\x02\xde\x80\xc8\x2d\xa1\x67\x7c\x45\x05\x70\xe2\xbe\x53\x5d\xef\xf7\xa0\x75\x24\x96\xcd\xbd\x8d\x16\x13\xc7\x24\xfb\x54\x0b\x52\x29\x79\x60\x1c\x1f\xbb\xe0\xfa\x18\x69\x43\x95\x01\xa7\xa9\x0b\x7b\x28\xaa\xe6\x3c\x55\xec\x58\x98\x20\x2f\x8e\x49\xa3\x96\x96\x8b\xd3\x1d\x9a\xe5\xbe\xd3\x47\xaa\x84\x53\x6b\x9d\xf3\xd2\x17\x1f\xa4\x2a\xa9\x21\xc9\xf5\x6a\xf5\xcb\x62\xb5\x5e\xac\xae\xc9\xfa\xdd\x66\xf5\x76\xb3\x7a\x67\xeb\x63\xbb\xb4\xd2\x82\xc4\x37\x41\x08\x4c\xf5\xc1\x18\x5c\x8e\x9d\xde\xc9\xfc\x39\xac\xa0\x03\x2a\x26\x4a\x72\xcc\x9f\x3d\x62\x6a\xf6\x86\x49\xcc\xca\x6f\x23\xff\xfd\x8d\x36\xb2\xb2\x0a\xb9\x86\x90\x88\x5c\x9d\x19\x09\x29\xc1\x14\x32\x47\xa5\x52\x0f\x03\x33\x92\xbb\x3d\x30\xe0\xb9\x06\x43\xb0\x4c\x6c\x75\xe5\x59\xdf\xa1\x58\xdc\xad\xb1\xe9\x51\xc9\xba\x1a\x88\xf7\x2a\x94\xad\x5c\xf2\x8a\xe5\x3f\x91\x57\x4d\x6e\x81\x6c\x6e\xc9\xc2\x9f\xf5\x50\xf6\xa8\xdd\x0a\xd8\xff\xb5\x93\x4f\x11\xe9\x8e\xd5\xe5\x32\x7e\xe7\xee\x99\xa8\x6a\xe3\x1b\xa3\x93\x45\x18\x86\x04\x8d\x6b\x2d\x5a\xdc\x83\xf9\xa3\x09\x98\xa0\x25\x72\x7a\xfa\xe7\x38\xcf\x03\xe5\x35\x4c\x08\x68\xa2\x1a\xd2\xff\xec\x02\x4c\x9c\x01\x90\x77\x51\xcd\xc8\x40\xc6\x1d\xe8\xbd\x62\x95\x4d\x65\x2c\x30\x4d\x55\x4d\xb8\x3c\xa8\xc5\x20\x07\xb1\x14\x8e\x99\xc7\xf5\xb0\x6c\x0b\x22\xa8\x83\xf3\xaf\x8c\x8d\xea\x21\x93\xae\x77\x25\x33\x1d\x32\xed\x8c\x20\xf8\xe7\xd1\xad\x8b\xab\x2d\xec\x24\xfb\xc0\x04\xd3\xc5\x09\x0f\xfa\x80\x14\x7a\xd7\x34\xc0\x7f\x53\xdd\x62\xd3\x49\x37\xba\x32\x40\xa2\x69\xcd\xfd\xb8\x62\xbc\xb0\x19\xa2\x38\x3f\x05\x8d\x4c\x1c\xe4\x3c\x2e\x76\x1a\xee\xea\xb2\xd2\x43\x60\x54\x50\xca\x07\xf8\x4c\x39\xff\x76\x6c\x0c\x98\x6c\x34\xa6\xfa\xb8\x41\xa7\x1e\x96\x9c\xf0\xc9\x1f\x72\xe0\x60\xe0\x35\x76\x16\x5a\x92\x8c\xa4\x92\xee\x94\x3e\xe9\xa9\x66\xbe\xa8\x58\xe0\x40\x6b\x6e\xdc\x79\x52\x92\xfd\x7c\x72\x71\xc1\x99\xc9\x27\xfa\x28\x96\xd5\x61\x1e\x4f\xb4\x5e\xbf\xbc\x1c\xee\x07\x0c\xc6\x62\x6e\xaa\x40\x57\x52\x68\xf6\x00\xc3\x64\xb9\xfb\x1e\x33\x69\x5e\x29\xd0\x4f\xe5\xcf\xda\x20\x7e\x40\xde\x40\x5c\x6e\xeb\x25\x96\x4f\x63\x6b\x2b\x46\x57\x13\x99\x31\x45\xf6\xd1\x23\xf6\x76\x89\x0f\x93\x5c\x1e\xed\xe6\x98\x64\x55\xcd\x32\xb1\x7f\xe0\x2c\x47\x17\x0a\x78\x32\x6d\x79\xbf\x77\xc5\x38\x61\x23\x52\x23\xfe\x59\xde\x89\x68\xd8\x64\x9d\x9b\x6a\x76\xa8\xd9\x18\xbb\x89\xe6\x82\x1d\x05\x22\xa3\x9a\x56\x85\xbf\x1b\x76\x3f\x15\x4c\xad\xc9\xcf\x6e\x2c\x34\x7e\x78\x18\x3c\x4d\x87\x09\xc7\x23\xa6\x06\xa6\xc5\xf5\xac\xa7\xc6\xc9\xd8\xa9\xaa\x3f\xa9\x3b\x49\x1f\xcf\x4c\xec\x88\xb4\xd1\x68\x9c\x53\x1f\x99\x52\x43\x8e\x09\xa4\x6f\x3f\xbd\x6e\x53\xf2\xa8\x1c\xb2\x6b\xf3\x6c\xb7\xaa\x47\x96\x9b\x62\xb3\x5e\xad\x7e\xb8\x29\xa9\x3a\x32\x81\xad\x88\xfd\x5f\x6e\x56\x37\x07\x2e\xa9\xd9\xc4\x00\xf2\x12\x0d\xe9\x8e\x2a\x12\x3e\x38\x54\xef\x53\x7c\x57\x3a\xd0\xc4\xc6\xf6\x8b\x5e\xcb\x82\x1c\x7e\x15\x77\x53\x48\xc8\xc7\xdb\x04\x0d\x0d\x69\x25\x43\xa8\xed\x53\xe8\x93\xe7\xea\x39\x48\xac\x87\x33\x5e\x38\x4f\xc2\xb5\x58\xab\x54\x0a\x8e\xb8\x74\x0f\x02\x14\xb5\x2d\x34\xdc\x74\xa3\x32\xe2\x1b\xc7\x85\xd7\xe7\x53\x8e\x5d\x39\x51\xe7\xb6\x01\x6c\x7d\x05\x15\x6e\x11\xe7\xbd\x99\x5f\xde\x2f\x17\xe9\xf0\xe9\x45\x45\x22\x9a\xcd\xbd\x10\x03\xb4\x99\x56\xa7\x18\xc1\x1f\x05\x8c\xfa\x7d\xf5\x26\x4a\xbe\x7e\x73\xb6\x7f\xbe\x69\xcc\x87\xde\xf9\xc5\x78\x38\xf4\xcf\x0f\x68\xa7\x92\x92\x42\xc1\x21\x90\x2f\x1f\x05\xb6\x63\x3e\xab\xc1\x2d\x00\xae\xd3\xdc\x01\x7f\xc4\x27\xd9\x96\xb5\x0c\x47\xfe\x5c\x15\x96\x48\xba\x53\xda\x8a\x46\xbe\x25\xcb\xc8\x9d\x7f\xdc\x2e\xe9\x8c\x8d\x97\xef\xb0\x17\xdb\x62\x14\xd5\x45\x6b\x88\x0b\xe9\xf4\x3e\xd2\xd9\x11\xd9\x4b\x06\x15\xf1\x12\x08\xf9\xf6\xd7\xea\xe9\x3b\x44\x92\xff\x2b\x44\xc6\x97\x9c\x69\x49\xc8\x3f\x5e\x73\x90\x68\xb7\xc9\xe8\xc2\xdb\xff\x69\xd3\x09\xfe\x37\x00\x00\xff\xff\x84\xe6\x32\x4f\x51\x13\x00\x00")

func templatesViewsTraceHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsTraceHtml,
		"templates/views/trace.html",
	)
}

func templatesViewsTraceHtml() (*asset, error) {
	bytes, err := templatesViewsTraceHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/trace.html", size: 4945, mode: os.FileMode(420), modTime: time.Unix(1487628716, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/trace.html": templatesViewsTraceHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"trace.html": &bintree{templatesViewsTraceHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: AssetInfo, Prefix: k}
	}
	panic("unreachable")
}
