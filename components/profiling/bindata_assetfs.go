// Code generated by go-bindata.
// sources:
// templates/views/trace.html
// DO NOT EDIT!

package profiling

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsTraceHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x57\x6d\x6f\xdb\x36\x10\xfe\x9e\x5f\x41\x08\x5d\xb1\x02\x93\x5f\xb2\x76\x18\x1c\x47\x43\x81\xac\xc1\xbe\x15\xdd\x0f\x28\x68\xeb\x6c\x11\xa3\x48\x8d\xa4\xf2\xb2\xa2\xff\x7d\x47\x8a\x92\x29\x89\xb2\xdc\x21\x5f\x06\xd4\x40\x1c\xea\x78\xba\xf7\x7b\xee\xfc\xe5\x0b\xc9\xe1\xc0\x04\x90\x64\x2f\x85\x01\x61\x12\xf2\xf5\xeb\xd5\x36\x67\x0f\x64\xcf\xa9\xd6\xb7\x89\x92\x8f\x49\x76\x45\xf0\x13\x52\xf7\x92\xa7\xfc\x98\xae\xaf\xfd\x9d\xbb\x2f\xd6\xed\x75\x45\x8f\x90\x16\x40\x73\x50\x49\x76\x2f\x89\x51\x74\x0f\xdb\x65\xb1\xf6\x92\x96\x28\x2a\xbb\xf2\xff\xae\xd0\x0a\x76\x20\x0b\x50\x4a\xaa\xa1\x7a\xca\x41\x19\xe2\xbe\xd3\x9c\x8a\x23\xa8\xf6\x81\xe9\x92\x69\x4d\x77\x1c\x5a\xfb\x76\xb5\x31\x52\x10\xf3\x5c\xc1\x6d\xd2\x3c\x24\x9d\xc1\x5c\x6a\x48\x48\x4e\x0d\x6d\x5f\xf5\xc2\x13\x42\x15\xa3\x69\xc1\xf2\x1c\xc4\x6d\x62\x54\x8d\x02\x5f\x1b\x56\x82\xbe\xd9\x2e\x1b\x31\x8d\x02\xb4\xb3\x31\x72\xf1\x7b\x67\x6a\xe3\x02\xde\x80\xc8\x2d\xa1\x67\x7c\x45\x05\x70\xe2\xbe\x53\x5d\xef\xf7\xa0\x75\x24\x96\xcd\xbd\x8d\x16\x13\xc7\x24\xfb\x54\x0b\x52\x29\x79\x60\x1c\x1f\xbb\xe0\xfa\x18\x69\x43\x95\x01\xa7\xa9\x0b\x7b\x28\xaa\xe6\x3c\x55\xec\x58\x98\x20\x2f\x8e\x49\xa3\x96\x96\x8b\xd3\x1d\x9a\xe5\xbe\xd3\x47\xaa\x84\x53\x6b\x9d\xf3\xd2\x17\x1f\xa4\x2a\xa9\x21\xc9\xf5\x6a\xf5\xcb\x62\xb5\x5e\xac\xae\xc9\xfa\xdd\x66\xf5\x76\xb3\x7a\x67\xeb\x63\xbb\xb4\xd2\x82\xc4\x37\x41\x08\x4c\xf5\xc1\x18\x5c\x8e\x9d\xde\xc9\xfc\x39\xac\xa0\x03\x2a\x26\x4a\x72\xcc\x9f\x3d\x62\x6a\xf6\x86\x49\xcc\xca\x6f\x23\xff\xfd\x8d\x36\xb2\xb2\x0a\xb9\x86\x90\x88\x5c\x9d\x19\x09\x29\xc1\x14\x32\x47\xa5\x52\x0f\x03\x33\x92\xbb\x3d\x30\xe0\xb9\x06\x43\xb0\x4c\x6c\x75\xe5\x59\xdf\xa1\x58\xdc\xad\xb1\xe9\x51\xc9\xba\x1a\x88\xf7\x2a\x94\xad\x5c\xf2\x8a\xe5\x3f\x91\x57\x4d\x6e\x81\x6c\x6e\xc9\xc2\x9f\xf5\x50\xf6\xa8\xdd\x0a\xd8\xff\xb5\x93\x4f\x11\xe9\x8e\xd5\xe5\x32\x7e\xe7\xee\x99\xa8\x6a\xe3\x1b\xa3\x93\x45\x18\x86\x04\x8d\x6b\x2d\x5a\xfc\xd1\x44\x4b\xd0\x12\xd9\x3c\xf1\x73\x84\xe1\x81\xf2\x1a\x62\xaf\x36\xc1\xec\x88\x7f\x76\x41\x25\x4e\x29\xe4\x5d\x24\x33\x12\xbe\x7d\x07\x7a\xaf\x58\x65\x73\x17\x8b\x44\x53\x46\x13\x3e\x0e\x8a\x2f\x08\x7a\x2c\x67\x63\xe6\x71\x01\x2c\xdb\x0a\x08\x12\x7f\xfe\x95\xb1\x51\x3d\x28\xd2\xf5\xae\x64\xa6\x83\xa2\x9d\x11\x04\xff\x3c\x9c\x75\xe1\xb4\x95\x9c\x64\x1f\x98\x60\xba\x38\x01\x40\x1f\x81\x42\xef\x9a\x8a\xff\x6f\xaa\x5b\x30\x3a\xe9\x46\x57\x06\xd0\x33\xad\xb9\x1f\x57\x8c\x17\x56\x7f\x14\xd8\xa7\xb0\x90\x89\x83\x9c\x07\xc2\x4e\xc3\x5d\x5d\x56\x7a\x88\x84\x0a\x4a\xf9\x00\x9f\x29\xe7\xdf\x0e\x86\x01\x93\x8d\xc6\x54\xe3\x36\x70\xd4\x03\x8f\x13\x20\xf9\x43\x0e\x1c\x0c\xbc\xc6\x56\x42\x4b\x92\x91\x54\xd2\x9d\xd2\x27\x3d\xd5\xbd\x17\x15\x0b\x1c\x68\xcd\x8d\x3b\x4f\x4a\xb2\x9f\x4f\x2e\x2e\x38\x24\xf9\x44\x1f\xc5\xb2\x3a\xcc\xe3\x89\xd6\xeb\x97\x97\x03\xfa\x80\xc1\x58\x90\x4d\x15\xe8\x4a\x0a\xcd\x1e\x60\x98\x2c\x77\xdf\x63\x26\xcd\x2b\x05\xfa\xa9\xfc\x59\x1b\xc4\x0f\xc8\x1b\x4c\xcb\x6d\xbd\xc4\xf2\x69\x6c\x6d\xc5\xe8\x6a\x22\x33\xa6\xc8\x3e\x7a\x88\xde\x2e\xf1\x61\x92\xcb\x43\xdd\x1c\x93\xac\xaa\x59\x26\xf6\x0f\x9c\xe5\xe8\x42\x01\x4f\xa6\x2d\xef\xf7\xae\x18\x27\x6c\x44\x6a\xc4\x3f\xcb\x3b\x11\x0d\x9b\xac\x73\x63\xcc\x4e\x31\x1b\x63\x37\xc2\x5c\xb0\xa3\x40\x64\x54\xd3\xaa\xf0\x77\xc3\xbe\xb8\x07\x83\x71\x32\xb5\x26\x3f\xbb\x99\xd0\xf8\xe1\x61\xf0\x34\x1a\x26\x1c\x8f\x98\x1a\x98\x16\xd7\xb3\x9e\x1a\x27\x63\xa7\xaa\xfe\x68\xee\x24\x7d\x3c\x33\xa2\x23\xd2\xfa\x13\x71\x4e\x77\x64\x44\x0d\x39\x26\x60\xbe\xfd\xf4\x5a\x4d\xc9\xa3\x72\xb0\xae\xcd\xb3\xdd\xa1\x1e\x59\x6e\x8a\xcd\x7a\xb5\xfa\xe1\xa6\xa4\xea\xc8\x04\xf6\x21\x36\x7f\xb9\x59\xdd\x1c\xb8\xa4\x66\x13\x43\xc7\x4b\x34\xa4\x3b\xaa\x48\xf8\xe0\x20\xbd\x4f\xf1\x2d\xe9\x10\x13\xbb\xda\xaf\x75\x2d\x0b\x72\xf8\xc5\xdb\x8d\x20\x21\x1f\x6f\x13\x34\x34\xa4\x95\x0c\x71\xb6\x4f\xa1\x4f\x9e\xab\xe7\x20\xb1\x1e\xce\x78\xe1\x3c\x09\x97\x60\xad\x52\x29\x38\x82\xd2\x3d\x08\x50\xd4\xf6\xcf\x70\xaf\x8d\xca\x88\xaf\x1b\x17\x5e\x9f\x4f\x39\xb6\xe4\x44\x91\xdb\xea\xb7\xc5\x15\x94\xb7\x85\x9b\xf7\x66\x7e\x55\xbf\x5c\xa4\x03\xa7\x17\x15\x89\x50\x36\xf7\x42\x0c\xcd\x66\xfa\x1c\x7f\x79\xfd\x28\x60\xd4\xeb\xab\x37\x51\xf2\xf5\x9b\xb3\xed\xf3\x4d\x23\x3e\x74\xce\xef\xc2\xc3\x81\x7f\x7e\x38\x3b\x95\x94\x14\x0a\x0e\x81\x7c\xf9\x28\xb0\x1b\xf3\x59\x0d\x6e\xf8\xbb\x46\x73\x07\xfc\xc5\x9e\x64\x5b\xd6\x32\x1c\xf9\x73\x55\x58\x22\xe9\x4e\x69\x2b\x1a\xf9\x96\x2c\x23\x77\xfe\x71\xbb\xa4\x33\x36\x5e\xbe\xbf\x5e\x6c\x8b\x51\x54\x17\xad\x21\x2e\xa4\xd3\xbb\x48\x67\x47\x64\x27\x19\x14\xc4\x4b\x00\xe4\xdb\x5f\xab\xa7\xef\x08\x49\xfe\xaf\x08\x19\x5f\x70\xa6\x25\x21\xff\x78\xc5\x41\xa2\xdd\x24\xa3\xcb\x6e\xff\x67\x4d\x27\xf8\xdf\x00\x00\x00\xff\xff\xdb\x70\x3d\xa7\x3e\x13\x00\x00")

func templatesViewsTraceHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsTraceHtml,
		"templates/views/trace.html",
	)
}

func templatesViewsTraceHtml() (*asset, error) {
	bytes, err := templatesViewsTraceHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/trace.html", size: 4926, mode: os.FileMode(420), modTime: time.Unix(1487529652, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/trace.html": templatesViewsTraceHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"trace.html": &bintree{templatesViewsTraceHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: AssetInfo, Prefix: k}
	}
	panic("unreachable")
}
