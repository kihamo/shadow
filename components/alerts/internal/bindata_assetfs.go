// Code generated by go-bindata.
// sources:
// templates/views/list.html
// templates/views/send.html
// DO NOT EDIT!

package internal

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsListHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x92\x3f\x6f\xb3\x30\x10\xc6\x77\x3e\xc5\xc9\x6f\xc6\xd7\x61\xc8\x56\x11\x4b\x91\x3a\xb4\x52\xb3\x65\xaf\x2e\x70\x06\x4b\xc6\x20\xfb\x92\xa6\x42\x7c\xf7\x0a\xe4\xa6\x26\x64\x02\xdd\x73\xf7\x7b\xee\x8f\x87\x01\x2a\xd2\xc6\x11\x88\xb2\x73\x4c\x8e\x05\x8c\x63\x56\x54\xe6\x0a\xa5\xc5\x10\xf6\xa2\xc7\x9a\x24\x1b\xb6\x24\x54\x06\x00\x90\x8a\x73\xfc\xd3\x92\xe6\x28\xce\x09\xcd\x4e\x1d\x2c\x79\x0e\x45\xde\xec\x62\x51\x5e\x99\xab\xca\xe2\x67\x61\x50\x5a\x42\xaf\xcd\x4d\xa8\x67\x6a\x8f\x8e\xac\x3c\x77\xd5\xf7\x13\x7b\x6b\x02\xcb\xda\x77\x97\x3e\xb1\x1f\x06\xf0\xe8\x6a\x82\x8d\xf9\x0f\x1b\x9c\x1a\x81\x97\x3d\x6c\xe7\xbf\x30\x8d\x77\x6f\x14\xa1\xf1\xa4\xf7\xe2\x9f\x58\x13\xa5\x61\x6a\x13\x6c\x44\x1b\x1d\x99\xdb\xf7\xb2\x73\x29\x6d\x26\x9a\x5f\x90\x46\xd0\x28\x87\xe1\x21\x7b\x0a\xea\xaf\x69\x54\xb3\x42\x93\xab\x56\xbc\xd0\xa3\xbb\xaf\xe2\x62\xad\xf4\xa6\x6e\x18\x98\x6e\x2c\xdb\x0b\x53\x05\xa1\x45\x6b\x85\x2a\xa8\x55\x7f\x6e\xaf\xc8\x74\x08\x47\x0a\x01\x6b\x82\x71\x2c\x72\x6a\x55\x91\x4f\x34\x95\x3d\x38\xb0\xef\x5c\x9d\xd4\x9e\xa6\x9b\xce\x35\x51\x2a\xce\x1e\xf2\x55\xb7\x31\x3b\x7a\x1c\xc2\xdb\xe9\xf8\xb1\x58\x6e\x8e\x8b\x9b\x24\xd3\x2d\x1f\xc3\x5d\xfb\x09\x00\x00\xff\xff\xc1\xec\xbf\x53\x8d\x02\x00\x00")

func templatesViewsListHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsListHtml,
		"templates/views/list.html",
	)
}

func templatesViewsListHtml() (*asset, error) {
	bytes, err := templatesViewsListHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/list.html", size: 653, mode: os.FileMode(420), modTime: time.Unix(1507253548, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesViewsSendHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x96\xc1\x6e\xdb\x30\x0c\x86\xef\x79\x0a\x42\xa7\xed\xe0\x0a\x4d\x87\x9e\xec\x9c\x37\xa0\xbd\xac\xdb\xb9\x90\x2d\xba\x51\x20\x4b\x81\x48\xa7\x59\x8d\xbc\xfb\x60\xcb\x4e\xdd\xc4\xcd\x02\x2c\xc3\xb6\x5c\x42\x5a\xa4\xf4\x8b\x9f\x65\xaa\x69\x40\x63\x69\x1c\x82\x28\xbc\x63\x74\x2c\x60\xb7\x9b\xa5\xda\x6c\xa0\xb0\x8a\x28\x13\xc1\x3f\x8b\xc5\x0c\x00\x60\xfc\xb4\xf0\x36\xa9\x74\x72\x3d\x87\xd6\xa2\x6a\xb0\xb6\x94\x5c\xcf\xfb\xf8\xc3\x9c\xed\xe3\x5a\x39\xb4\xa3\xd1\xe3\x08\x36\x6c\xf1\x20\xa2\x8b\x5a\xce\x17\x0f\xe8\x34\x28\x8b\x81\x53\xb9\x9c\x4f\xc4\x8c\xf5\x59\x54\xa1\x34\x5b\xb1\x48\xa5\x36\x9b\x83\x25\x27\x1e\xbd\x51\x31\xd4\x62\x62\x8d\xd2\x87\x6a\x08\x6c\xed\x64\xe9\x83\x79\xf1\x8e\x95\x85\xce\xb7\x2a\x47\x9b\x58\x2c\x59\x40\xf0\x16\x63\x98\x80\x0a\x79\xe9\x75\x26\xd6\x9e\x58\x80\xd1\x99\x20\x74\x3a\xa9\x94\xb1\x02\x54\xc1\xc6\xbb\x4c\xc8\x6e\x7b\x24\xdb\x21\x29\xc0\xf9\x8d\xb2\x46\x2b\xc6\x63\x25\x87\xaa\x0d\x63\x15\x15\x3c\x05\x5f\xaf\x27\xb4\xef\xb3\x3a\x89\x6d\x6c\x26\x62\xbd\x5f\xa9\x3a\x0e\xde\xc6\x3d\x40\xcf\xf8\x66\x40\x7c\x33\x49\x78\xea\xf7\x50\xe7\x2b\x2c\xf8\x7d\x05\xb2\x5b\xe1\x84\xc4\xe3\x57\xed\x76\x90\x71\x7b\xb6\x8c\xd4\xb8\x75\xcd\xc0\x3f\xd6\x98\x09\xc6\x2d\x8b\x37\xe4\xfa\xdd\x46\x18\x7d\x21\x9c\xaa\x70\xef\x6c\x94\xad\x31\x13\xa7\x4a\x79\xfc\x26\x9d\x33\xf4\xdb\xd8\x4c\xe1\xdd\xc5\xa9\x7d\x29\xbc\xfb\x9f\x90\xc5\x22\x44\x62\xd1\xfe\x77\x81\x55\x48\xa4\x9e\x2e\x7f\xd2\xee\xe3\xbc\x7f\x1d\x5b\x8b\x4a\x05\x54\x53\xb4\x20\x20\x99\x17\x95\x5b\x7c\x1c\xc2\xda\x4f\xe3\x33\x65\xe2\xd3\xc0\x6f\x5f\x9f\x16\xec\xe0\x2c\x52\x39\x24\xfc\x49\xa2\xd6\x3d\x92\xb7\x46\x4f\xf6\x8a\xa9\x84\xf3\xe8\xbf\x57\xd8\x4a\x27\xbe\x2c\x09\x39\xb9\xf9\x55\x55\xf3\x9a\xd9\xbb\x7d\xb3\x10\xfd\xb9\xa0\x3a\xaf\xcc\xeb\xc9\xc8\xd9\x41\xce\x2e\xa1\xba\x28\x90\x48\x74\x8d\x32\x95\x31\xf9\x92\x85\x4b\x65\xbb\xf3\x93\xbd\x74\xe4\xf6\x66\xff\xd7\x34\xd0\xb6\xef\xdd\x6e\x36\x1b\x5d\x3a\x56\xd4\xdd\x37\x9a\x06\x88\x15\x9b\xe2\xf3\xb7\xfb\x3b\xf8\x10\xed\xef\x5f\xef\x40\x48\xad\x68\x99\x7b\x15\xb4\x54\x44\xc8\x24\x37\xe8\xb4\x0f\x24\xfb\xce\xe8\x83\x5c\x8d\x9c\xab\xca\xb8\xab\x76\xd6\x52\x59\xc2\x8f\xfd\xe4\x71\xe5\x9f\x01\x00\x00\xff\xff\x37\x9d\x26\x9d\xed\x08\x00\x00")

func templatesViewsSendHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsSendHtml,
		"templates/views/send.html",
	)
}

func templatesViewsSendHtml() (*asset, error) {
	bytes, err := templatesViewsSendHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/send.html", size: 2285, mode: os.FileMode(420), modTime: time.Unix(1507252941, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/list.html": templatesViewsListHtml,
	"templates/views/send.html": templatesViewsSendHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"list.html": &bintree{templatesViewsListHtml, map[string]*bintree{}},
			"send.html": &bintree{templatesViewsSendHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
