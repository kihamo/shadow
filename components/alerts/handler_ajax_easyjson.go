// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package alerts

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonDce94ab1DecodeGithubComKihamoShadowComponentsAlerts(in *jlexer.Lexer, out *ajaxHandlerResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "icon":
			out.Icon = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "message":
			out.Message = string(in.String())
		case "elapsed":
			out.Elapsed = string(in.String())
		case "date":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Date).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDce94ab1EncodeGithubComKihamoShadowComponentsAlerts(out *jwriter.Writer, in ajaxHandlerResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"icon\":")
	out.String(string(in.Icon))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"title\":")
	out.String(string(in.Title))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"message\":")
	out.String(string(in.Message))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"elapsed\":")
	out.String(string(in.Elapsed))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"date\":")
	out.Raw((in.Date).MarshalJSON())
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ajaxHandlerResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDce94ab1EncodeGithubComKihamoShadowComponentsAlerts(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ajaxHandlerResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDce94ab1EncodeGithubComKihamoShadowComponentsAlerts(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ajaxHandlerResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDce94ab1DecodeGithubComKihamoShadowComponentsAlerts(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ajaxHandlerResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDce94ab1DecodeGithubComKihamoShadowComponentsAlerts(l, v)
}
