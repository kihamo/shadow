// Code generated by go-bindata.
// sources:
// locales/ru/LC_MESSAGES/config.mo
// DO NOT EDIT!

package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _localesRuLc_messagesConfigMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x52\x4d\x6f\x1b\x55\x14\x3d\x53\x4f\xf9\x30\x50\xbe\x04\x62\x01\xd2\xad\x50\xab\x22\x34\x61\x6c\x53\xa9\x9a\x64\x12\xd4\x24\x15\x11\x89\x52\x45\x2e\x2b\x84\xf4\x12\xbf\x8c\xad\xd8\xef\x59\xf3\x9e\xf9\x90\xb2\x48\x53\x95\x0a\x15\xb5\x02\xd1\x5d\x57\xb0\x65\x61\x42\x0c\x6e\xa2\xfa\x37\xdc\xb7\x45\xc0\x3f\x60\xcf\x12\xcd\x8c\xed\xb6\xe9\xdd\xbc\x7b\xee\x3d\xf7\x9c\xfb\xa4\xfb\xcf\x6b\xfe\x3d\x00\x78\x11\xc0\xdb\x00\x76\x01\xbc\x0a\xe0\x2f\x14\x41\x1e\xf0\x0e\x80\xb3\x1e\xf0\x32\x80\x05\x0f\x38\x03\x60\xdd\x03\xde\x04\xf0\xb9\x07\xbc\x05\xa0\xe7\x01\x2f\x01\xb8\x33\xe6\xdd\xf7\x80\x77\x01\xfc\xe2\x15\xda\x3c\xae\xff\xed\x01\x6f\x00\xf8\xd7\x03\x9a\x1e\x50\x3a\x05\x5c\x00\xd0\x2e\x15\xf3\xf7\x4a\xc0\x2b\x00\x7e\x2e\x01\xe7\x00\x1c\x96\x0a\xff\x3f\x4b\x85\xce\x7f\x25\xe0\x39\x00\xa7\x7d\x60\x06\xc0\x19\x1f\x28\x03\x88\x7d\xe0\x75\x00\x1f\xfb\xc5\x5e\x9f\xf9\x80\x37\xfe\xc3\x33\x00\x9e\x47\xc1\xcb\x22\x9b\x7f\x61\xfc\xe7\x2c\x4e\x8d\xdf\xd3\x00\x9e\x05\x50\x02\xe0\x8f\x6b\xd8\xd2\x6a\xbb\x95\xf8\x97\x85\x91\x74\x6d\x63\x95\xb6\x75\x4a\x5f\xca\x4d\x6a\x6a\xbd\x63\x26\xdd\xc5\xa6\xb0\x86\x56\x96\x26\x78\x59\x89\xcd\xb6\x6c\x9c\x80\xd4\xeb\x36\x84\x95\xe6\x64\xf9\x29\xb9\x75\xdb\x94\xe9\x14\xd5\x65\x5b\x26\xa9\xe8\x9c\xc4\x24\x94\xd2\x56\xd8\x96\x56\x86\x8c\xd5\xa9\x48\xe4\x94\xa3\x77\xa4\x9a\x00\xd1\x68\x90\x78\xb4\x5d\x60\xc5\xa6\xdf\x91\xc6\x48\x95\x64\x36\x1b\xb2\xab\x53\x1b\xac\x99\xa4\xd5\x08\x2e\xf7\x12\x13\xd4\x75\x44\x0d\xf9\xc5\x47\x3b\xad\xa6\xe8\xe8\x99\xb4\x57\xbe\xba\x5e\x0f\x16\x53\x99\x9b\x05\x4b\xc2\xca\x88\xaa\x61\xe5\x52\x10\xd6\x82\x6a\x8d\xaa\xb5\xe8\xe2\xc5\xf7\xc3\x5a\x18\x96\x57\x85\xb1\x41\x3d\x15\xca\xb4\x85\xd5\x69\x44\x9f\xe4\x1a\xb4\xd6\x4b\x45\x47\x37\x34\xcd\x3d\x21\x3c\x5f\x5e\x15\x2a\xe9\x89\x44\x06\x75\x29\x3a\x11\x4d\x71\x44\x1b\x3d\x63\x5a\x42\x95\xd7\x56\xd6\x96\x83\x4f\x65\x6a\x5a\x5a\x45\x54\x99\x09\xcb\x8b\x5a\x59\xa9\x6c\x50\xff\xba\x2b\x23\xb2\xf2\x2b\xfb\x41\xb7\x2d\x5a\x6a\x96\xb6\x9a\x22\x35\xd2\xc6\xd7\xea\x57\x82\x4b\x8f\x78\xd9\x3e\xdb\x32\x0d\x96\xd5\x96\x6e\xb4\x54\x12\x51\xf9\x6a\xbb\x97\x8a\x76\x70\x45\xa7\x1d\x13\x91\xea\xe6\xd0\xc4\xb5\x59\x2a\xd2\x58\x9d\xab\x84\x71\x5c\xa1\xf3\xe7\x29\x4b\xc3\xb3\x71\xa5\x42\x0b\x14\x52\x94\xe3\xf9\xb8\x3a\x69\xcd\xc5\x1f\x66\xe9\x85\x9c\x36\x57\x09\x69\x77\xb7\x18\x99\x8f\xab\xe1\x7b\xb4\x40\x15\x8a\xa8\x3a\x0b\xfe\x9e\xfb\xfc\x07\x8f\xf8\xc0\xdd\xe6\x07\xf9\x35\xf1\x21\x1f\xbb\xbb\xf9\x05\xb8\x9b\xee\x06\x1f\x65\x5d\xac\x2c\x91\xbb\xc5\x7d\xb7\x9f\x23\xfe\x81\x8f\xf8\xd8\xdd\x71\xb7\x78\xc0\x0f\x79\xf4\x78\x61\xe8\xf6\xdd\x77\xc4\x23\xfe\x35\xeb\xf0\x01\x1f\xe7\x9c\xa1\xbb\xfb\x34\xeb\x31\x93\x21\xf8\x47\xb7\xe7\x6e\xf0\x6f\x3c\xe2\x01\xa6\x17\x36\x3d\x2d\x77\xd3\xed\x71\x3f\x53\xe2\x63\x1e\xba\x6f\x79\x40\x39\x7c\xc8\x23\xb7\xcf\x7d\xf7\x0d\x0f\xf9\x01\xf8\x27\x1e\xf1\x51\xe6\x08\x3e\xcc\x97\xe8\xf3\xc1\xd8\x6d\x65\x09\x7c\x9f\x07\xee\xba\xbb\x9e\xaf\x74\xc8\xbf\xf3\xc0\xed\xb9\xdb\xf8\x3f\x00\x00\xff\xff\x16\x0e\xa4\xfa\x73\x04\x00\x00"

func localesRuLc_messagesConfigMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesConfigMo,
		"locales/ru/LC_MESSAGES/config.mo",
	)
}

func localesRuLc_messagesConfigMo() (*asset, error) {
	bytes, err := localesRuLc_messagesConfigMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/config.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"locales/ru/LC_MESSAGES/config.mo": localesRuLc_messagesConfigMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"config.mo": &bintree{localesRuLc_messagesConfigMo, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
