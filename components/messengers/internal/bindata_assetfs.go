// Code generated by go-bindata.
// sources:
// locales/ru/LC_MESSAGES/config.mo
// DO NOT EDIT!

package internal

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _localesRuLc_messagesConfigMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x52\x4d\x6f\x1b\x55\x14\x3d\xd3\x31\x5f\xe6\xfb\x53\x2c\x40\xdc\x0a\xb5\x2a\x8b\x09\x76\xca\x02\x4d\x32\x09\x6a\x92\x4a\x16\xb1\x8a\x22\x97\x25\xd2\x4b\xe6\x65\x3c\x8a\xfd\x9e\x35\x6f\x86\x2f\x65\x91\xa6\x2a\x15\x0a\x6a\x05\x82\x5d\x57\xac\x59\xb8\x21\x06\x37\x56\xfd\x17\xb8\x6f\x0f\xec\x58\xf2\x1f\xd0\xcc\xd8\x4e\x48\xee\x66\xee\xb9\xf7\xdc\x7b\xce\xd3\xdc\xbf\x5f\xa9\xfc\x04\x00\xcf\x01\x78\x0b\xc0\x2e\x80\x97\x01\xfc\x89\x32\xc8\x01\xde\x06\x70\xd1\x01\x5e\x04\xb0\xec\x00\x2f\x00\xb8\xe1\x00\x6f\x00\xf8\xcc\x01\xde\x04\x90\x39\xc0\xf3\x00\xee\x4d\x78\x0f\x1c\xe0\x5d\x00\xbf\x38\xe5\x6e\x9e\xd4\xff\x72\x80\xd7\x01\xfc\xeb\x94\xbb\xdc\x0b\xc0\x15\x00\x2b\x6e\x39\xdf\x71\x81\x97\x00\x7c\xed\x02\x97\x00\x1c\xb8\xa5\xfe\x43\xb7\xdc\xf3\x87\x0b\x3c\x9d\xfb\x73\x81\x39\x00\xff\xb8\x40\x15\xc0\x6b\x15\xe0\x55\x00\xef\x54\x4a\x5f\x57\x2b\x80\x33\x79\xc3\x93\x00\x9e\x41\xc9\xcb\x23\x9f\x7f\x76\xf2\xe6\x3c\x2e\x4c\xbe\x4f\x00\x78\x0a\x80\x0b\xa0\x32\xa9\x61\x4b\xab\xed\x38\xaa\x5c\x13\x46\xd2\xcd\x8d\x75\xda\xd6\x09\x7d\x21\x37\xa9\xad\xf5\x8e\x99\x76\x57\xda\x22\x35\xd4\x58\x9d\xe2\x35\x25\x36\x3b\x32\x3c\x03\x29\xeb\x85\x22\x95\xe6\x6c\xf9\xdc\xba\x1b\x69\x5b\x26\x33\xd4\x92\x1d\x19\x25\xa2\x7b\x16\x93\x50\x4a\xa7\x22\x8d\xb5\x32\x64\x52\x9d\x88\x48\xce\x38\x7a\x47\xaa\x29\x10\x61\x48\xe2\xc4\x9d\x97\x8a\xcd\x4a\x57\x1a\x23\x55\x94\xcb\x6c\xc8\x9e\x4e\x52\xaf\x69\xa2\x38\xf4\xae\x65\x91\xf1\x5a\xda\xa7\x50\x7e\xfe\xd1\x4e\xdc\x16\x5d\x3d\x97\x64\xd5\x75\x61\x52\xaf\x95\x08\x65\x3a\x22\xd5\x89\x4f\x1f\x17\x2d\x6a\x66\x89\xe8\xea\x50\xd3\xe2\xff\xf8\x4b\xd5\x75\xa1\xa2\x4c\x44\xd2\x6b\x49\xd1\xf5\x69\x86\x7d\xda\xc8\x8c\x89\x85\xaa\x36\x1b\xcd\x35\xef\x53\x99\x98\x58\x2b\x9f\xea\x73\xb5\xea\x8a\x56\xa9\x54\xa9\xd7\xfa\xaa\x27\x7d\x4a\xe5\x97\xe9\xfb\xbd\x8e\x88\xd5\x02\x6d\xb5\x45\x62\x64\x1a\xdc\x6c\x5d\xf7\x3e\x3c\xe1\xe5\x7e\xb6\x65\xe2\xad\xa9\x2d\x1d\xc6\x2a\xf2\xa9\xfa\x49\x27\x4b\x44\xc7\xbb\xae\x93\xae\xf1\x49\xf5\x0a\x68\x82\xab\x0b\x54\xa6\x81\xba\x54\xaf\x05\x41\x9d\x2e\x5f\xa6\x3c\xad\x5d\x0c\xea\x75\x5a\xa6\x1a\xf9\x05\x5e\x0a\xe6\xa7\xad\xc5\xe0\x83\x3c\xbd\x52\xd0\x16\xeb\x35\xda\xdd\x2d\x47\x96\x82\xf9\xda\x7b\xb4\x4c\x75\xf2\x69\x7e\x01\xfc\x3d\xf7\xf9\x77\x1e\xf3\xa1\x3d\xe0\x47\xc5\x91\xf0\x11\x8f\xec\xfd\xe2\xc7\xda\x3b\xf6\x36\x1f\xe7\x5d\x34\x56\xc9\xde\xe5\xbe\xdd\x2f\x10\xff\xc0\xc7\x3c\xb2\xf7\xec\x5d\x1e\xf0\x63\x1e\x9f\x2e\x0c\xed\xbe\xfd\x8e\x78\xcc\x0f\xf3\x0e\x1f\xf2\xa8\xe0\x0c\xed\xfd\xf3\xac\x53\x22\x43\xf0\x8f\x76\xcf\xde\xe6\x5f\x79\xcc\x03\xcc\x0e\x67\x76\x31\xf6\x8e\xdd\xe3\x7e\xbe\x89\x47\x3c\xb4\xdf\xf2\x80\x0a\xf8\x98\xc7\x76\x9f\xfb\xf6\x1b\x1e\xf2\x23\xf0\xcf\x3c\xe6\xe3\x5c\x11\x7c\x54\x98\xe8\xf3\xe1\x44\xad\xb1\x0a\x7e\xc0\x03\x7b\xcb\xde\x2a\x2c\x1d\xf1\x6f\x3c\xb0\x7b\xf6\x00\xff\x05\x00\x00\xff\xff\xc3\xa1\x7d\xac\x4a\x04\x00\x00"

func localesRuLc_messagesConfigMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesConfigMo,
		"locales/ru/LC_MESSAGES/config.mo",
	)
}

func localesRuLc_messagesConfigMo() (*asset, error) {
	bytes, err := localesRuLc_messagesConfigMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/config.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"locales/ru/LC_MESSAGES/config.mo": localesRuLc_messagesConfigMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"config.mo": &bintree{localesRuLc_messagesConfigMo, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
