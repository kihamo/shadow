// Code generated by go-bindata.
// sources:
// locales/ru/LC_MESSAGES/config.mo
// DO NOT EDIT!

package internal

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _localesRuLc_messagesConfigMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x53\xcd\x6f\x1b\x45\x14\xff\x39\x71\xf8\xb0\xc4\x47\x0b\xe2\x80\x38\x3c\x0e\x54\xed\x61\x13\x3b\x20\x51\x6d\xb2\x0e\x94\xa4\x10\x51\x83\x55\x5c\x8e\x48\x93\xec\xd8\x5e\xc5\x9e\xb1\x66\xd6\x40\x50\x0f\x21\x45\x20\xd4\x8a\x56\x48\x5c\x90\x10\x12\x12\x77\x13\xc5\xd4\x6d\x6a\xf3\x2f\xbc\x39\x72\xe1\xc6\x15\xc1\x7f\x80\x66\x9d\xad\xd5\x20\x24\x84\xd4\xb9\xec\xbc\xf9\xcd\xfc\x3e\x9e\xde\xfe\x76\xba\xf8\x0d\x00\x94\x00\xbc\x00\xa0\x03\xe0\x09\x00\xf7\x30\x5d\x7f\x02\x78\x15\xc0\x5f\x00\x9e\x05\x70\xae\x00\x3c\x09\xa0\x5a\x00\x22\x00\xb5\x02\xf0\x1c\x80\xeb\x05\xe0\x02\x80\x1f\x8e\xbf\xbf\x17\x80\xa7\x00\x9c\x9d\x9b\xe2\xe7\xe7\x80\xb5\x02\xf0\xee\x1c\xf0\x01\x80\x9b\xf3\xc0\x29\x00\x7f\xcc\x03\x4f\x7b\xa1\x22\x50\x05\x70\xaa\x08\x3c\x0f\xa0\x5e\x04\xba\x00\x76\x8a\xc0\x2e\x80\x5f\x8b\xc0\x33\x00\xde\x5b\x00\x4e\x03\x68\x2d\x00\x05\x00\x8f\x03\x58\x00\xf0\xd8\xb1\xdf\x47\x30\x5b\x73\x53\x5a\x3c\x7a\x9c\x6f\xde\x1f\x6e\x6b\xd5\x4c\x5a\xc5\xd7\xeb\x9b\xb4\x23\x77\x17\xe9\x1d\x4d\x4a\xca\x98\x92\x26\xf5\xad\x34\x4a\x74\x25\x09\x15\x53\x4f\x58\xfb\x91\x36\x31\x25\x96\xac\x4c\xf3\x77\xeb\xc2\xb6\xb7\xb4\x30\xb1\xa5\xcd\xf5\xfc\x70\x43\x89\xad\x8e\x8c\xf3\xf2\x4d\x23\x9a\x42\x09\x12\x71\x6c\xa4\xb5\xa4\x9b\xf4\x56\xa3\x51\x27\xaf\x99\x28\x6a\x6a\xd3\x15\x29\xb5\xd3\xb4\x17\x2e\x2d\xb5\xb5\x4d\xc3\x9e\x36\xe9\xc9\xd7\x36\xd5\x46\xb4\x64\x7e\x5c\xcf\xfd\x34\xb5\xa1\x2d\x61\x93\x6d\x12\xfd\xb4\xad\x4d\xf2\x89\x48\x13\xad\x1e\x48\x72\x9c\xee\x84\xf7\x2b\x79\xbe\xff\x4f\x21\xe2\x98\xc4\x2c\x79\x90\x8a\xad\xa2\x50\x4a\xa7\x19\x81\xc5\x65\xe9\xa3\x04\x35\xdb\x4a\xe2\xe0\x42\xbf\x65\x83\x86\x0e\x29\x96\x1f\xbe\xb6\x93\xb4\x45\x57\x2f\x9a\x7e\xe9\x92\xb0\x69\xd0\x30\x42\xd9\x8e\x48\xb5\x09\xe9\xed\x0c\xa2\x5a\xdf\x88\xae\x8e\x35\xad\x3e\x70\xbf\x5a\xba\x24\x54\xab\x2f\x5a\x32\x68\x48\xd1\x0d\xe9\x7e\x1d\xd2\xe5\xbe\xb5\x89\x50\xa5\xda\x66\x6d\x23\x78\x5f\x1a\x9b\x68\x15\x52\x65\xb1\x5c\x7a\x43\xab\x54\xaa\x34\x68\xec\xf6\x64\x48\xa9\xfc\x38\x5d\xea\x75\x44\xa2\x56\x68\xbb\x2d\x8c\x95\x69\x74\xa5\x71\x31\x38\x3f\xbb\xe7\xfd\x34\xa5\x09\x36\xd4\xb6\x8e\x13\xd5\x0a\xa9\x54\xef\xf4\x8d\xe8\x04\x17\xb5\xe9\xda\x90\x54\x2f\x2b\x6d\xf4\xf2\x0a\x4d\xb7\x91\x7a\xa9\x52\x8e\xa2\x0a\x9d\x39\x43\x7e\x5b\x7e\x31\xaa\x54\x68\x8d\xca\x14\x66\x75\x35\x5a\xce\xa1\xd5\xe8\x15\xbf\x3d\x9b\x5d\x5b\xad\x94\xe9\xea\xd5\xe9\x93\x6a\xb4\x5c\x3e\x47\x6b\x54\xa1\x90\x96\x57\xc0\xdf\xf2\x91\xfb\xca\x7d\xe1\xdb\xbf\x48\xfc\x1d\x0f\x89\xc7\xee\x1a\xff\xcc\x43\x1e\x13\x0f\xdd\xa7\x7c\xc4\x23\x72\xd7\xf8\x2e\x0f\xf8\x36\x0f\x78\xec\xae\x13\xff\xc2\x13\x3e\x72\x37\xf8\x36\x4f\xf8\x80\x07\x6e\x9f\x87\xbe\x26\x1e\x79\x6c\xe0\xf6\xa6\x38\x36\xd7\xb3\x9a\xc7\x1e\xe7\x21\xdf\x01\x7f\xcd\x77\xa7\x92\x5e\x81\x27\xe0\x5b\x7c\xe8\xf6\xbc\x12\xe5\x93\x78\x7f\x78\xf9\x80\xdc\x67\x3c\x71\x7b\x7c\x6f\x2a\xf2\xcf\x21\xe6\x1f\xdd\x5e\x26\x30\xf2\x46\xdd\x97\x3c\xcc\x69\xc0\xdf\xcf\x9c\x10\x1f\xf2\x91\xbb\x49\xfc\x53\x16\xc3\xbb\x9e\xf0\x1d\xe2\x01\x1f\xb8\xfd\x4c\x61\xe4\xd3\xb9\xcf\x79\xc4\xa3\xff\xd8\x08\xca\x93\x78\xaf\x5e\xed\x5f\x7a\xf2\xd0\x95\x0f\x79\x92\xb1\x1f\xf0\xc8\xed\xbb\x1b\xfe\x77\xe1\x5b\x3c\xf6\xed\x75\xfb\x39\x35\xfe\x0e\x00\x00\xff\xff\x99\xfd\xb5\x22\x7a\x05\x00\x00"

func localesRuLc_messagesConfigMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesConfigMo,
		"locales/ru/LC_MESSAGES/config.mo",
	)
}

func localesRuLc_messagesConfigMo() (*asset, error) {
	bytes, err := localesRuLc_messagesConfigMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/config.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"locales/ru/LC_MESSAGES/config.mo": localesRuLc_messagesConfigMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"config.mo": &bintree{localesRuLc_messagesConfigMo, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
