// Code generated by go-bindata.
// sources:
// templates/views/migrations.html
// DO NOT EDIT!

package internal

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsMigrationsHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x53\x4d\x8f\x9b\x30\x10\xbd\xe7\x57\x8c\x68\x24\x12\x69\x1b\xab\xdb\x1b\x75\xb8\xf5\xd0\x43\xab\xfe\x83\xca\xc1\x43\xf0\x8a\xb5\x91\x3d\xcb\x06\x59\xfc\xf7\x2a\x04\x36\x7c\x39\x87\x3d\x61\xfc\xde\x9b\x79\xf3\x61\xef\x41\x62\xae\x34\x42\x94\x19\x4d\xa8\x29\x82\xb6\xdd\x70\xa9\x6a\xc8\x4a\xe1\xdc\x31\xb2\xe6\x3d\x4a\x37\x00\x00\xe3\xdb\xcb\xbf\x4a\x68\x2c\x7b\x64\x89\x92\xa2\x12\x47\x68\xc7\x28\x9e\xd3\xdf\xea\x6c\x05\x29\xa3\x1d\x67\xc5\xf3\x0c\x1f\x45\xc8\x4a\x14\x36\x57\x97\x28\xe5\x4c\xaa\x7a\x94\x66\xf6\x3b\xc9\x3a\xd4\x10\x8e\x4b\xe2\x54\xe2\x57\x8b\xae\x32\xda\xa9\x7a\x6e\xb1\xa3\x77\x9c\x89\x00\x6e\xb2\xc2\xd4\x68\x57\x14\x37\x55\x81\x42\x86\x30\xbb\x0e\xf4\xc2\xf4\x0b\x67\x54\x3c\xa6\xfc\x92\x61\x0e\x67\xa1\x04\x57\xcd\x03\x5b\x27\x23\x9b\x75\xcc\x7b\xb0\x42\x9f\x11\xb6\xea\x09\xb6\xaf\xc3\xd4\x20\x39\xc2\xe1\xe3\xcf\x5d\x77\xe5\x13\x05\xcb\xd4\x7b\x10\x52\xc2\x56\xc1\x37\x68\x5b\xce\x28\x60\x71\xc4\xbf\x9b\x38\x28\xf9\x50\x14\x6e\x87\xf7\x80\x5a\x06\x5d\xb3\x40\x43\x38\xeb\xe6\x3f\xdb\xaa\xe0\x5e\xf6\xc7\xfe\x73\xcf\xb9\x19\xbd\xb6\x17\x17\x0d\x36\xbc\x07\x95\xc3\x01\xad\x35\x76\xb8\xe3\x2e\xb3\xaa\x22\xa0\xa6\xc2\x63\x44\x78\x21\xf6\x22\x6a\x71\xbb\x1d\x6d\xe0\x76\x27\x4d\xf6\xf6\x8a\x9a\xf6\x07\x8b\x42\x36\xbb\xfc\x4d\x67\xdd\xa4\x76\x7b\xf0\x13\xc3\x1a\xdf\xe1\xef\x1f\x43\x2a\x6f\x76\x7e\x51\x63\xf7\x60\x13\x88\x7f\x5e\x6d\xc4\x4f\x4b\x1c\x2f\x94\x40\xec\xfd\xdd\xe9\x1a\xab\xa9\xae\x41\x30\x10\xa4\x50\x12\x13\xc8\x45\xe9\x70\x09\x3a\x6a\x4a\xa5\xcf\x09\xc4\x27\x63\xc8\x91\x15\xd5\xf7\x78\xc2\x6a\xf7\x3f\x36\xf3\x33\x67\xb7\xa6\xa4\x43\x2f\xfb\x66\x7f\x9c\xfe\x07\x00\x00\xff\xff\xe7\x16\x72\xb7\xe3\x04\x00\x00")

func templatesViewsMigrationsHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsMigrationsHtml,
		"templates/views/migrations.html",
	)
}

func templatesViewsMigrationsHtml() (*asset, error) {
	bytes, err := templatesViewsMigrationsHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/migrations.html", size: 1251, mode: os.FileMode(420), modTime: time.Unix(1507063905, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/migrations.html": templatesViewsMigrationsHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"migrations.html": &bintree{templatesViewsMigrationsHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: AssetInfo, Prefix: k}
	}
	panic("unreachable")
}
