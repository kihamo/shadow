// Code generated by go-bindata.
// sources:
// templates/config.tpl.html
// templates/logs.tpl.html
// templates/mail.tpl.html
// templates/workers.tpl.html
// DO NOT EDIT!

package system

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesConfigTplHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x92\x3f\x6f\xf3\x20\x10\xc6\x77\x3e\xc5\x09\xe5\xdd\xde\x3a\xed\xd0\xa5\x72\x98\xaa\x8e\xdd\xda\x9d\x98\xb3\x8d\x44\xc0\x82\xb3\xab\x28\xca\x77\xef\x61\x5b\x72\xdc\x3f\x69\x3c\x71\xc7\xef\x31\xf7\xc0\x73\x3a\x81\xf5\x95\xeb\x0d\x82\xac\x63\xf0\x84\xde\x48\x90\x4e\x1f\x43\x4f\xdb\x16\xb5\xc1\x58\x50\xe7\x8a\x96\x0e\x4e\xc2\xf9\x2c\x44\x69\xec\x00\x95\xd3\x29\xed\x24\xe9\xbd\xc3\xbb\x88\xa9\x0b\x3e\xd9\x01\xa5\x12\xc0\x5f\x39\xf6\x57\x10\x4c\x68\x1b\x06\x8c\xf3\x3a\x51\xb4\x1d\x9a\x59\x33\xe9\xf2\x89\x4b\x3d\xf5\xe2\xba\x31\x83\xf0\x61\x0d\xb5\x3b\xf9\x70\xff\x4f\xaa\x57\x7d\xc0\x72\x4b\xed\x55\xf2\x31\x93\xef\xda\xf5\xbf\xa3\xea\x19\x53\xc5\x53\x91\x0d\xfe\x3b\xc4\x9d\x8b\x59\xf2\xfe\x6a\xda\x92\xf6\xc1\x1c\x97\x9a\xef\x36\x6a\xdf\x20\x6c\xec\x7f\xd8\xd4\x4e\x37\xf0\xb4\x83\xe2\x85\x17\x29\xdf\xe4\x0d\x2e\x8d\xe2\x9f\x8c\xd2\x22\x5b\x64\x15\x9f\x6a\xfe\x20\x47\x8b\xb7\xa1\x6f\x49\x37\x3f\xa3\x6b\xaf\x2c\xe0\x60\x5c\x0e\xcd\xfb\x8b\x5b\x2e\xf2\x8b\x2a\x51\x6e\x39\x1c\x4a\x88\xeb\xb1\xaa\x43\xa0\x2f\xb1\xfa\x0c\x00\x00\xff\xff\x5f\x33\xbe\x76\x88\x02\x00\x00")

func templatesConfigTplHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesConfigTplHtml,
		"templates/config.tpl.html",
	)
}

func templatesConfigTplHtml() (*asset, error) {
	bytes, err := templatesConfigTplHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/config.tpl.html", size: 648, mode: os.FileMode(420), modTime: time.Unix(1441722307, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesLogsTplHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x55\x4d\x6f\xe3\x36\x10\xbd\xeb\x57\x4c\xb5\x06\x24\x35\xb1\x94\x1e\x7a\x71\x64\xf7\xb0\x2d\x8a\x14\xdb\xee\x21\xed\x29\xdd\x03\x2d\x8d\x64\x66\x69\x52\x20\x29\x6f\x0c\xc3\xff\xbd\x43\xea\x23\xb2\x9c\xa6\x40\x0d\xc4\x31\x47\xf3\xde\xcc\x9b\x0f\xea\x74\x02\x2e\x0b\xd1\x96\x08\x61\xa5\x95\xb4\x28\xcb\x10\x42\xc1\x8e\xaa\xb5\xd9\x0e\x59\x89\x3a\xb5\x8d\x48\x77\x76\x2f\x42\x38\x9f\x83\x20\x2f\xf9\x01\x0a\xc1\x8c\x59\x87\x0d\x93\x28\xc0\x7f\x2f\x4b\xac\x58\x2b\x6c\xb8\x09\x80\x3e\x57\x5e\x4b\x47\xc6\x65\x1d\x6e\x1e\x77\xea\x1b\x50\xe0\xf4\x77\xf6\xf2\x60\x71\x6f\x88\x16\x04\xb3\x68\x2c\x68\x2c\x94\x2e\x8d\xa7\x98\xd3\x6c\xad\x5c\xd6\x5a\xb5\x0d\x34\xad\x10\x4b\xcd\xeb\xdd\x10\x6d\x74\xdf\xb6\xd6\x2a\x09\xbc\x5c\x87\x1a\x2b\x8d\x66\x17\x82\x3d\x36\x48\x68\xff\x24\x9c\x90\x81\x23\xec\xb3\xf6\xbf\x5f\xcc\x8c\xce\x53\xf2\x01\x52\x31\xa8\xd8\x72\xa0\xdd\xe4\x19\x9f\x05\xcf\xba\x18\xaf\xd6\x3c\xa3\xf4\xfb\x7a\x4c\x7e\x5e\x95\x66\xab\xca\xe3\x24\x74\xde\x8a\xe1\xb9\x64\x07\xa0\xbf\xa5\x65\x5b\x13\x82\x56\x82\x94\xd0\x6f\xc1\xcd\x5c\x3a\x15\x54\x33\x59\x23\x2c\x24\xdb\xe3\x2d\x2c\x50\x5a\xcd\xd1\xc0\x6a\x0d\xe9\x27\x55\xd7\xa8\x5d\xa1\x2f\x33\x16\x7c\x93\x33\xd8\x91\xa6\x75\xf8\x81\x18\x3c\x96\xbc\x26\xa1\x42\x28\x99\x65\x4b\x4b\x0c\x83\x65\x33\xf1\xcc\x33\x46\x95\x10\xfc\x2a\x19\x1a\xa4\x69\xb8\x3c\x6b\xc5\x26\x78\xb3\xaf\x44\xb9\x2c\xfc\xe8\xfd\xa7\x26\xe1\x75\xbc\x2b\xc9\x11\x8f\xc9\xfb\xf2\x86\xd3\x40\xce\x12\xfa\xf9\x98\xca\x7d\xa3\xed\xcd\x26\x6f\x34\x92\xb6\xfe\x7b\xde\xeb\xb1\x9d\xef\x69\x9e\xb7\xbf\xff\x17\xe4\xa6\xd0\xbc\xb1\x9b\x60\x11\x97\xaa\x68\xf7\x24\x3d\x49\x35\x2d\xc8\x31\xae\x5a\x59\x58\xae\x64\x9c\xc0\x89\xa0\xc3\x11\xda\x86\xfa\x80\xbd\x15\xe0\xc0\x34\x90\x1e\x58\xc3\x22\x8e\xd2\x41\xd9\xea\xc0\x0d\xdf\x0a\x5c\x55\x5c\x1b\x1b\x25\xf7\x5d\xc5\x79\x05\xf1\x77\xe4\x33\x80\x81\xf6\xcc\xb6\x5a\xde\xfb\xd3\x39\x18\x19\xa9\xbe\x0f\x25\x71\x92\x6f\xca\xac\xd5\x71\xc4\x4b\xc7\x32\x3c\xa7\x65\xef\x1e\x56\x5c\x96\x71\x44\xa5\x89\x12\x7f\x35\xc4\xd1\x18\x6c\x91\xb2\x67\xf6\x12\x0f\x91\xdc\xf6\xad\x20\xfa\xf5\x97\x3f\xa3\xdb\xde\xd4\x6a\x41\x96\xcc\x1c\x0d\x6d\x7f\x46\x31\xcd\x4f\xf4\xb5\x8e\xe0\xa6\x4b\x60\xf0\x33\x6d\x51\xa0\x31\xab\xb1\x08\x31\x6d\x5e\xa3\xa4\xc1\xe4\x34\x16\x99\xfb\x1b\x64\x0d\x4f\x5f\xee\x47\x5b\xa5\x34\xc4\x2e\x5f\x4e\xb7\x1b\x8c\x20\x38\x5d\x34\xcc\x3b\x10\x9a\xc0\x83\xcb\x13\x9f\xb0\x8c\xec\x64\x25\x1f\x89\xdf\xe0\x67\xd7\x02\x67\x4b\x2d\xdf\x63\x92\x5a\xf5\x49\x15\x4c\xe0\x23\xad\x9a\xac\xe3\xe4\x6a\x8c\xfc\xe7\x06\x22\x78\x72\xea\x3c\x52\xe0\x01\x05\x21\xff\x6a\x1a\xd4\x1f\x99\x71\x3d\x25\x8f\x2f\x10\xfd\x1b\xda\xc3\xf6\x54\x09\x56\xe3\x7d\x70\x99\x1f\x75\xf6\xf3\xf6\x19\x0b\x9b\x7e\xc5\xa3\xe9\x72\xab\x38\x8a\xd2\x24\x14\x49\xd6\x76\x37\x97\x7d\x21\xeb\x66\x4d\xb9\xb9\xd4\x7e\x7b\xfc\xfc\x47\x6a\xbc\x0c\x5e\x1d\x2f\x78\x2e\x2b\xf2\x3a\xde\xe7\xd7\x54\xb0\x7b\x41\x78\x98\x49\x9f\x15\x97\x71\xf8\xb7\x0c\x93\x11\xdb\xa1\xce\xfe\xec\x71\x6e\x6a\xdd\xe5\xc6\x68\x80\x0a\xc1\x8b\xaf\x71\x37\xe0\xc3\xa9\x9b\x26\xd7\xa2\xfe\xc2\xed\x26\xfd\x43\x7f\xea\x86\xb2\x3f\xf4\x90\xd9\xe6\x74\xc5\x19\x5c\x76\xcc\x7c\x74\xb7\x40\x1c\x31\x72\x3a\xd0\xdc\x4e\x97\xa1\xf3\xd1\xb8\x57\x07\x9c\xb9\xf5\x3b\x42\x12\x0d\x5e\x21\x58\x59\xbe\xed\xee\x64\x26\x4e\x81\x41\xfb\x40\x57\x9b\x3e\x30\xf1\xff\x13\x1c\x76\x7f\x42\x7e\x0b\x3f\xdc\xdd\xdd\xc1\xf7\xf0\x23\x59\x5d\x5d\xf3\x6c\xb8\x53\x82\xf7\x5f\xea\x95\x52\x76\xf6\x52\xff\x27\x00\x00\xff\xff\x90\x25\x9c\x18\x06\x08\x00\x00")

func templatesLogsTplHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesLogsTplHtml,
		"templates/logs.tpl.html",
	)
}

func templatesLogsTplHtml() (*asset, error) {
	bytes, err := templatesLogsTplHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/logs.tpl.html", size: 2054, mode: os.FileMode(420), modTime: time.Unix(1441722307, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesMailTplHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x56\x51\x6f\xdb\x36\x10\x7e\xf7\xaf\xb8\x71\x43\x64\x63\x95\xb4\x06\x7b\x8b\x24\x0c\xd8\xcb\x1e\x56\xb4\x40\xfb\x36\xec\x81\x96\x4e\x31\x0b\x8a\xd4\x48\x2a\xad\x1b\xf8\xbf\xef\x48\x51\xaa\x92\xa8\xf1\xd6\x2c\x43\x09\xd8\x22\x8f\xc7\xbb\xef\x3e\x1e\x8f\xbc\xbd\x05\xa1\x6a\x39\x34\x08\xac\x35\x5a\x39\x54\x0d\x03\x26\xf9\x51\x0f\x2e\x3f\x20\x6f\xd0\x64\xae\x97\xd9\xc1\x75\x92\xc1\xe9\xb4\xd9\x14\xb6\x36\xa2\x77\x20\xb9\xba\x1e\xf8\x35\x96\xec\x3d\xbf\xe1\xa3\x90\x55\x1b\xa0\xf6\xc3\xb6\x1d\x54\xed\x84\x56\xb0\xdd\xc1\x6d\x90\xf9\x76\xc3\x0d\xb4\xda\x74\x50\x92\x4a\xf2\xbd\x25\x67\x69\xc7\x85\x4c\x76\x57\x9b\x59\xc9\x2b\x64\x76\xd8\x77\xc2\x7d\xc1\x4c\x70\x91\xf5\xda\x92\x82\x57\xe6\xce\x99\x6d\xc2\x83\x66\xb2\x7b\x11\x2d\xa0\x11\x5c\x8a\x4f\xb8\xdd\xed\xb2\x46\x2b\x9c\x8d\x6d\x1b\xee\xf8\x7d\x7b\xbe\x89\x16\xc2\x5c\x76\xe0\xf6\xf5\x07\xf5\xc6\xe8\x1e\x8d\x3b\x6e\x13\x34\x46\x9b\x64\x07\x17\x17\xe0\xe7\xff\x88\x82\x3f\xe1\xbb\xb2\x04\x35\x48\xf9\x60\x26\x93\xa8\xae\xdd\x61\xcd\xcb\x1c\x63\x6f\xb0\x27\x06\xb6\x49\xd1\x88\x1b\xa8\x25\xb7\xb6\x64\x5c\x92\x4b\x08\xff\x69\x43\x0c\xa3\x99\x06\xc2\x76\xc2\x5a\xbe\x97\xc8\xaa\x04\x7e\x5c\xb5\x3b\xb5\xa4\xd8\x0f\xce\x11\x6f\xee\xd8\xd3\x06\x8d\x03\x36\xf9\xa8\xa5\xb6\xc8\x02\xe0\xc9\x6c\x74\xcc\xaa\x0b\x27\x3a\xb4\x57\x45\x3e\xae\x39\xeb\xe9\x2e\x1f\xe7\x50\xe5\x14\x69\x95\xec\x1e\x68\x9d\x00\xa5\xc5\x27\x91\x65\x87\xba\x46\x6b\xbf\x6d\xb6\x92\x57\x04\x91\xce\x0c\xf8\xd4\x87\x08\xf9\x3c\xbc\x2f\xd2\x76\x47\x72\xda\x65\x2d\x1d\xa6\xcf\x79\xbe\x96\x7d\xcf\x99\x79\xff\x0f\x8f\x33\x87\xbc\x69\xc0\x69\xf8\x6b\xc0\x01\xc1\x47\x8e\xcd\xe3\xe8\xd6\x68\x3c\x2d\x4b\x8f\x6f\x06\xdd\x60\x14\xd9\xa3\x84\xbc\xda\x2c\xd5\xa6\x6f\x91\x8f\xc5\xae\xa2\x5a\x18\xaa\x59\x0c\xd0\xf7\xd3\x83\x36\xe2\x13\xd5\x51\x4e\xd5\xd2\x68\x89\xa3\x98\x41\x87\xee\xa0\x9b\x92\xf9\xaa\xc5\x40\x50\x6f\xae\x7e\x0c\xc6\xd2\x55\xb2\xdc\x1e\xad\xc3\x2e\x0f\xd2\xb1\x94\x2e\x77\x28\x38\xb8\x36\x7a\xe8\xe3\x64\x50\x90\x7c\x8f\xd2\xef\x6b\xc9\x9c\xfe\xcc\xb6\x96\xa9\xed\xd2\x4b\xa8\x09\x0c\x01\x49\x83\x1a\xab\xde\xbd\x2e\xf2\xd0\x5d\x58\x58\xb8\x88\xcb\x5e\xfe\xb4\xf0\x10\x74\x84\xea\x07\x17\x37\xd6\xe1\x47\xc7\xee\x80\x8a\x4e\xc6\xc0\x3c\x0a\xc5\x3b\x1c\x7b\xbd\xe4\x35\x1e\xb4\xa4\x8b\xa4\x64\xf8\x91\x77\xbd\xc4\x97\xbf\x34\x9a\x62\x54\x59\xad\xbb\x17\x10\x85\x97\x0b\x21\xa3\xab\x42\x0e\x64\x61\x19\x68\xd8\xbe\xcd\xfd\xee\xbf\xe1\x87\x6e\x95\xf7\x58\xbb\xb3\x24\xbd\x1d\xf5\x9e\x9d\xa9\x19\xcf\x48\xd7\x3c\x7c\x96\xe0\x3d\xa2\xb3\x91\xff\x1a\x9e\x00\x23\xfc\xaf\x0b\xdf\xa2\xa4\x18\xd6\x63\x36\xfa\x03\xc9\x7e\x9e\xd3\xc3\x23\xaa\x1e\x1c\xd8\x42\xf7\xe1\xce\x8f\x2c\x50\x02\x09\xc5\xaa\x37\xfe\x03\x9e\xd0\x22\x1f\x15\xce\xae\x0c\x6f\x96\xea\xb7\x77\xaf\x7e\x5f\x5f\x42\x07\x39\x80\xfd\x4f\x69\xee\xc6\xea\x74\x96\xe9\x58\xc5\xbe\x8e\x64\x4f\x03\x37\xc8\xff\x11\xcd\x13\xa2\xaa\xc8\xa7\x75\x4f\x8f\x78\x0d\x25\xc4\x9e\x6e\x5b\x8b\x2e\xbd\x5c\x3f\x19\x31\xf1\xe9\x79\xb7\xc8\xfb\x30\x1a\xcf\xcc\x34\x8a\x9b\xf8\x36\xbc\x48\xa3\xab\xbd\x53\x40\xbf\xb4\x37\xa2\xe3\xe6\xf8\xe8\x01\x29\x72\x8f\x9c\x8a\xf4\xe3\x6f\xdc\x56\x6b\x77\xef\x8d\xfb\x77\x00\x00\x00\xff\xff\xc8\xda\xe0\x41\x15\x0b\x00\x00")

func templatesMailTplHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesMailTplHtml,
		"templates/mail.tpl.html",
	)
}

func templatesMailTplHtml() (*asset, error) {
	bytes, err := templatesMailTplHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/mail.tpl.html", size: 2837, mode: os.FileMode(420), modTime: time.Unix(1463942024, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesWorkersTplHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x59\x4d\x6f\xe3\x36\x10\xbd\xfb\x57\x10\x6e\x00\xc9\xed\xca\x76\x76\xb3\x87\x26\x71\x8a\xa2\x29\x16\x0b\x14\xbd\x6c\xd0\x1c\x8a\x62\xc1\x48\x23\x9b\x0d\x43\x09\x24\x15\xc7\xc8\xfa\xbf\x97\xa4\xa8\x6f\xca\xb2\x93\x60\x91\x00\xf5\xc1\x92\x86\x6f\x86\x43\xce\x7b\x24\x65\x3f\x3e\x22\xc2\x42\x9a\x45\x80\xc6\x31\x4f\x98\x04\x16\x8d\xd1\x98\xe2\x4d\x92\xc9\xd9\x0a\x70\x04\x7c\x2a\x53\x3a\x5d\xc9\x3b\x3a\x46\xdb\xed\x68\x74\x1e\x91\x7b\x14\x52\x2c\xc4\x62\xcc\x93\xf5\xf8\x62\x84\xd4\xa7\x6e\x0d\x13\x1a\x3c\x88\xe0\xf8\xbd\x6d\xeb\x69\x3f\xa9\x35\xb7\x21\x29\x66\x40\x91\xf9\x0e\x96\x1c\x80\xb5\xb0\x4e\x7c\xa0\xf3\x25\x6c\xe9\xc0\xb6\xf1\x55\xe2\x43\x48\x9b\xec\x87\x1d\x70\xe3\x42\x0a\x87\x18\xa3\x18\x07\x99\x00\x2e\xf4\xcd\xc7\x87\xf1\xc5\xf9\x8c\xec\xe8\x6c\xa6\x7a\x3b\x28\x97\x9f\x91\x84\x07\x19\x70\xb2\x5c\xc9\xa1\xb4\x6a\xde\xab\x6c\x09\x63\x44\xa2\xc5\x78\x9d\xf0\x5b\x95\x5e\x10\x26\x19\x53\x11\xe6\x03\x29\x14\x81\x2e\xae\x73\xbf\xa1\x8c\xfb\x9b\x7b\x9a\xfa\xcc\x18\xad\x38\xc4\x8b\xf1\x0f\x36\xe1\x3d\x0a\x9b\x13\x21\x4e\x12\x09\x7c\x57\x85\x85\x02\x96\x3e\x19\xa5\x01\x85\x58\x4d\xc5\x5f\x04\xd6\xe8\x12\x24\x26\x54\x0d\x53\x83\x0e\x89\x61\x2b\xd2\xe6\x02\xe6\x8a\x6e\x41\x48\x78\x48\xa1\xc4\x28\x4a\x0c\x76\x50\x2f\x3d\x05\xcc\x63\x62\xc8\x74\xf8\xf4\xe2\x96\xd2\x9a\xb8\xf6\xe3\xd3\xa5\xca\x21\x7a\x6b\x42\x95\x58\xdc\xbe\x5a\xa1\x9a\xe4\x82\x35\x26\xf2\x70\xad\x2a\x27\x64\xfc\xbf\xbf\x5c\x4d\xb7\xff\x8b\xf5\x95\x8b\x75\x03\x94\x3a\xd5\xf5\xaa\xf5\x2a\x88\x84\x3b\x9c\xbe\x56\xc5\x2e\x13\xae\x4e\x4e\x84\x81\x38\x40\xab\x9f\x4a\xa7\xef\xa6\xd5\x3e\x15\x22\x21\x37\x14\xd4\x88\x40\x4f\xc1\xe9\xc9\x71\xea\x66\x71\x3f\x2b\xed\xad\xbd\x8c\xfa\xd8\x17\x41\x8c\x33\x2a\x1b\x07\x12\xc7\x59\xb2\xc5\xbf\xee\x09\xa4\x0b\xbe\x49\xa2\x4d\xcf\xc9\x53\xe2\x1b\xad\x6a\x10\x69\xc2\x04\xb9\x87\xb6\x52\x4c\x7b\x03\x8c\x72\x97\x55\x72\xef\x5c\xa2\xce\xa5\x4e\xcd\x65\xe7\x3d\x65\x92\xab\x8b\xcf\x97\xe7\x33\x75\xe9\x6d\xff\x8d\x03\x96\x10\xed\x06\x5d\xa9\x35\x16\x0d\x45\x32\x20\x86\xef\x60\x0f\x98\x90\x58\x66\x62\x0f\x60\xb8\x2b\x3d\x65\x75\x8c\x5c\x63\x7b\xe6\x49\x57\xcb\xe9\xd0\x6d\x50\x46\x5d\x8c\x17\x63\x5d\x7d\x9b\xda\xc5\x39\xd7\x4e\xfa\x06\x69\xf7\xe2\x8c\x79\x13\x44\x10\x21\x27\xa9\xcc\xdb\xee\x31\x37\x34\x17\x97\x09\xcb\xe4\xd9\xc8\x18\xe3\x8c\x85\x92\x24\x0c\x2d\x41\xea\x61\x7d\x31\x3a\xf8\x53\x4d\x81\x9f\x4b\x62\x82\x1e\x6d\x47\x62\x4d\x64\xb8\xea\x98\x11\x0a\xb1\x00\x34\x3f\xad\x25\xc9\x41\x66\x9c\x21\x4f\x9f\xdd\xbc\xb3\x5a\xc3\x8d\x9a\xb4\x5b\xdb\x75\xe9\x7a\xec\x72\x4d\x79\x12\x82\x10\xc3\xde\xef\x5d\xde\x22\x0b\xf7\xf3\xfe\xe0\xf2\x8e\xd5\x99\x6a\xd8\xf5\xa4\x6f\xc4\xea\x21\x55\xdc\xd8\x19\xc1\x4a\xd1\x15\x22\x63\xb7\x2c\x59\x33\x97\x7b\xfe\xb0\x1d\xe5\xdf\xcd\x02\x66\x69\xa4\xf8\xe8\x57\x85\x39\x9a\xe2\x7f\xf1\x83\x5f\xd5\x49\x6e\x52\x38\x45\xde\xa7\xdf\xaf\xbc\x77\xa5\x31\xe3\x54\xd9\x66\x62\x23\xd4\xc9\x62\x66\xb7\xa2\x5a\xbb\x9d\xc9\xd3\xb2\x23\x9f\x4f\x1e\x6b\x99\x69\x56\xc9\x6b\xb4\x40\x47\xbe\x57\xbc\xa9\x22\xc3\x5a\x6f\x32\x85\xbb\x54\x6e\xfc\xc9\x59\x1b\x7f\x65\xf1\xf9\xeb\x47\x07\xdd\x82\x17\x51\x17\x88\x4f\xed\xfd\x57\xf3\x42\x80\xbe\x7d\x43\xf3\x4e\x70\x1d\xf3\xab\xa9\xc3\xa2\xdb\x5a\xf8\xdb\xf6\x2a\xa0\x31\xb8\xe2\x15\x80\x9b\x4c\x6c\x1a\x1e\xc6\xe0\xf2\xa8\x4e\x41\x06\x5f\x7b\xd4\xe8\xfa\xe8\x48\x8c\xfc\x5f\x39\xc7\x9b\x29\x11\xe6\xea\x97\xe1\x27\x75\x85\xe5\x9f\x38\xe1\xc8\xd7\x1d\x10\x44\x58\x95\x48\x17\xd8\x4c\xbd\x9e\xf4\xdf\xe4\x9f\xb3\x1e\xb0\x9e\x37\x05\xcd\x81\x53\xfd\xd4\x28\x44\xf1\x91\xd7\x53\x9c\xa6\xc0\x22\xdf\xd3\xeb\xad\xb7\xe3\x7c\xf7\x13\x52\x90\xe8\xc2\x53\x37\x36\x2a\x89\x8c\x71\xa6\xad\xfb\x39\x32\xfd\x92\xa3\x79\x6d\x23\xd8\x55\x77\x32\x95\xc9\x1f\x49\x88\x29\x7c\x91\x5c\xed\x53\x8a\xf6\x07\x06\xf6\xcd\x78\x7f\x31\xc3\xd6\x79\x29\x11\x78\xcf\x0b\xa2\xf7\x8d\xe7\x85\xe9\xae\xc1\x26\x70\xb1\xe2\x3e\x2b\x76\x39\x91\x26\x64\xff\x34\x1e\xd6\x89\xde\xe6\xbc\x49\x9b\x52\xdb\x36\x71\x1c\x0a\x9e\x52\x60\x4b\xb9\x1a\xf5\x78\xb9\x94\x51\x29\x7b\x0f\x71\xd4\xc0\xbd\xfa\xb0\x94\xaf\x83\x8d\x40\x5c\xb4\xbf\x7a\x0a\xed\x0b\x72\x1d\x58\xb3\x8a\x4e\x4f\x55\xcb\x40\x91\x5f\xb8\xbc\x8d\x25\xb7\x3e\x9b\x03\x45\x2e\xb7\x80\x40\x12\x49\x41\x6d\x01\xfa\xfd\xd3\xaf\x85\x53\x49\xa0\x75\x79\x02\x6d\xa6\xa2\xbd\xab\xb5\xb5\x70\xae\x2c\x1d\x70\xe3\x87\xdf\x02\x5f\x2c\xa2\x6d\x70\xfb\xc7\xa7\x6e\x72\x35\x97\x6d\xb1\x33\x5b\x9b\x1d\xe5\x91\x5f\x6e\x9a\x15\x09\x8b\x7d\xba\xf0\x16\x20\x3f\x33\xf5\xf2\x79\x8f\xa9\x9f\xb7\xbd\x43\xc7\xf3\xf9\x1c\xfd\x88\x3e\x16\xe1\xd4\xf5\x7c\x56\x9c\xe5\x46\xbb\xff\xb6\xc8\x5f\x65\x1b\x7f\x5b\xfc\x17\x00\x00\xff\xff\xe3\x22\xa2\xff\xe8\x18\x00\x00")

func templatesWorkersTplHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesWorkersTplHtml,
		"templates/workers.tpl.html",
	)
}

func templatesWorkersTplHtml() (*asset, error) {
	bytes, err := templatesWorkersTplHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/workers.tpl.html", size: 6376, mode: os.FileMode(420), modTime: time.Unix(1466879154, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/config.tpl.html": templatesConfigTplHtml,
	"templates/logs.tpl.html": templatesLogsTplHtml,
	"templates/mail.tpl.html": templatesMailTplHtml,
	"templates/workers.tpl.html": templatesWorkersTplHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"config.tpl.html": &bintree{templatesConfigTplHtml, map[string]*bintree{}},
		"logs.tpl.html": &bintree{templatesLogsTplHtml, map[string]*bintree{}},
		"mail.tpl.html": &bintree{templatesMailTplHtml, map[string]*bintree{}},
		"workers.tpl.html": &bintree{templatesWorkersTplHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: AssetInfo, Prefix: k}
	}
	panic("unreachable")
}
