// Code generated by go-bindata.
// sources:
// templates/config.tpl.html
// templates/logs.tpl.html
// templates/mail.tpl.html
// templates/workers.tpl.html
// DO NOT EDIT!

package system

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesConfigTplHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x92\x3f\x6f\xf3\x20\x10\xc6\x77\x3e\xc5\x09\xe5\xdd\xde\x3a\xed\xd0\xa5\x72\x98\xaa\x8e\xdd\xda\x9d\x98\xb3\x8d\x44\xc0\x82\xb3\xab\x28\xca\x77\xef\x61\x5b\x72\xdc\x3f\x69\x3c\x71\xc7\xef\x31\xf7\xc0\x73\x3a\x81\xf5\x95\xeb\x0d\x82\xac\x63\xf0\x84\xde\x48\x90\x4e\x1f\x43\x4f\xdb\x16\xb5\xc1\x58\x50\xe7\x8a\x96\x0e\x4e\xc2\xf9\x2c\x44\x69\xec\x00\x95\xd3\x29\xed\x24\xe9\xbd\xc3\xbb\x88\xa9\x0b\x3e\xd9\x01\xa5\x12\xc0\x5f\x39\xf6\x57\x10\x4c\x68\x1b\x06\x8c\xf3\x3a\x51\xb4\x1d\x9a\x59\x33\xe9\xf2\x89\x4b\x3d\xf5\xe2\xba\x31\x83\xf0\x61\x0d\xb5\x3b\xf9\x70\xff\x4f\xaa\x57\x7d\xc0\x72\x4b\xed\x55\xf2\x31\x93\xef\xda\xf5\xbf\xa3\xea\x19\x53\xc5\x53\x91\x0d\xfe\x3b\xc4\x9d\x8b\x59\xf2\xfe\x6a\xda\x92\xf6\xc1\x1c\x97\x9a\xef\x36\x6a\xdf\x20\x6c\xec\x7f\xd8\xd4\x4e\x37\xf0\xb4\x83\xe2\x85\x17\x29\xdf\xe4\x0d\x2e\x8d\xe2\x9f\x8c\xd2\x22\x5b\x64\x15\x9f\x6a\xfe\x20\x47\x8b\xb7\xa1\x6f\x49\x37\x3f\xa3\x6b\xaf\x2c\xe0\x60\x5c\x0e\xcd\xfb\x8b\x5b\x2e\xf2\x8b\x2a\x51\x6e\x39\x1c\x4a\x88\xeb\xb1\xaa\x43\xa0\x2f\xb1\xfa\x0c\x00\x00\xff\xff\x5f\x33\xbe\x76\x88\x02\x00\x00")

func templatesConfigTplHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesConfigTplHtml,
		"templates/config.tpl.html",
	)
}

func templatesConfigTplHtml() (*asset, error) {
	bytes, err := templatesConfigTplHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/config.tpl.html", size: 648, mode: os.FileMode(420), modTime: time.Unix(1441722307, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesLogsTplHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x55\x4d\x6f\xe3\x36\x10\xbd\xeb\x57\x4c\xb5\x06\x24\x35\xb1\x94\x1e\x7a\x71\x64\xf7\xb0\x2d\x8a\x14\xdb\xee\x21\xed\x29\xdd\x03\x2d\x8d\x64\x66\x69\x52\x20\x29\x6f\x0c\xc3\xff\xbd\x43\xea\x23\xb2\x9c\xa6\x40\x0d\xc4\x31\x47\xf3\xde\xcc\x9b\x0f\xea\x74\x02\x2e\x0b\xd1\x96\x08\x61\xa5\x95\xb4\x28\xcb\x10\x42\xc1\x8e\xaa\xb5\xd9\x0e\x59\x89\x3a\xb5\x8d\x48\x77\x76\x2f\x42\x38\x9f\x83\x20\x2f\xf9\x01\x0a\xc1\x8c\x59\x87\x0d\x93\x28\xc0\x7f\x2f\x4b\xac\x58\x2b\x6c\xb8\x09\x80\x3e\x57\x5e\x4b\x47\xc6\x65\x1d\x6e\x1e\x77\xea\x1b\x50\xe0\xf4\x77\xf6\xf2\x60\x71\x6f\x88\x16\x04\xb3\x68\x2c\x68\x2c\x94\x2e\x8d\xa7\x98\xd3\x6c\xad\x5c\xd6\x5a\xb5\x0d\x34\xad\x10\x4b\xcd\xeb\xdd\x10\x6d\x74\xdf\xb6\xd6\x2a\x09\xbc\x5c\x87\x1a\x2b\x8d\x66\x17\x82\x3d\x36\x48\x68\xff\x24\x9c\x90\x81\x23\xec\xb3\xf6\xbf\x5f\xcc\x8c\xce\x53\xf2\x01\x52\x31\xa8\xd8\x72\xa0\xdd\xe4\x19\x9f\x05\xcf\xba\x18\xaf\xd6\x3c\xa3\xf4\xfb\x7a\x4c\x7e\x5e\x95\x66\xab\xca\xe3\x24\x74\xde\x8a\xe1\xb9\x64\x07\xa0\xbf\xa5\x65\x5b\x13\x82\x56\x82\x94\xd0\x6f\xc1\xcd\x5c\x3a\x15\x54\x33\x59\x23\x2c\x24\xdb\xe3\x2d\x2c\x50\x5a\xcd\xd1\xc0\x6a\x0d\xe9\x27\x55\xd7\xa8\x5d\xa1\x2f\x33\x16\x7c\x93\x33\xd8\x91\xa6\x75\xf8\x81\x18\x3c\x96\xbc\x26\xa1\x42\x28\x99\x65\x4b\x4b\x0c\x83\x65\x33\xf1\xcc\x33\x46\x95\x10\xfc\x2a\x19\x1a\xa4\x69\xb8\x3c\x6b\xc5\x26\x78\xb3\xaf\x44\xb9\x2c\xfc\xe8\xfd\xa7\x26\xe1\x75\xbc\x2b\xc9\x11\x8f\xc9\xfb\xf2\x86\xd3\x40\xce\x12\xfa\xf9\x98\xca\x7d\xa3\xed\xcd\x26\x6f\x34\x92\xb6\xfe\x7b\xde\xeb\xb1\x9d\xef\x69\x9e\xb7\xbf\xff\x17\xe4\xa6\xd0\xbc\xb1\x9b\x60\x11\x97\xaa\x68\xf7\x24\x3d\x49\x35\x2d\xc8\x31\xae\x5a\x59\x58\xae\x64\x9c\xc0\x89\xa0\xc3\x11\xda\x86\xfa\x80\xbd\x15\xe0\xc0\x34\x90\x1e\x58\xc3\x22\x8e\xd2\x41\xd9\xea\xc0\x0d\xdf\x0a\x5c\x55\x5c\x1b\x1b\x25\xf7\x5d\xc5\x79\x05\xf1\x77\xe4\x33\x80\x81\xf6\xcc\xb6\x5a\xde\xfb\xd3\x39\x18\x19\xa9\xbe\x0f\x25\x71\x92\x6f\xca\xac\xd5\x71\xc4\x4b\xc7\x32\x3c\xa7\x65\xef\x1e\x56\x5c\x96\x71\x44\xa5\x89\x12\x7f\x35\xc4\xd1\x18\x6c\x91\xb2\x67\xf6\x12\x0f\x91\xdc\xf6\xad\x20\xfa\xf5\x97\x3f\xa3\xdb\xde\xd4\x6a\x41\x96\xcc\x1c\x0d\x6d\x7f\x46\x31\xcd\x4f\xf4\xb5\x8e\xe0\xa6\x4b\x60\xf0\x33\x6d\x51\xa0\x31\xab\xb1\x08\x31\x6d\x5e\xa3\xa4\xc1\xe4\x34\x16\x99\xfb\x1b\x64\x0d\x4f\x5f\xee\x47\x5b\xa5\x34\xc4\x2e\x5f\x4e\xb7\x1b\x8c\x20\x38\x5d\x34\xcc\x3b\x10\x9a\xc0\x83\xcb\x13\x9f\xb0\x8c\xec\x64\x25\x1f\x89\xdf\xe0\x67\xd7\x02\x67\x4b\x2d\xdf\x63\x92\x5a\xf5\x49\x15\x4c\xe0\x23\xad\x9a\xac\xe3\xe4\x6a\x8c\xfc\xe7\x06\x22\x78\x72\xea\x3c\x52\xe0\x01\x05\x21\xff\x6a\x1a\xd4\x1f\x99\x71\x3d\x25\x8f\x2f\x10\xfd\x1b\xda\xc3\xf6\x54\x09\x56\xe3\x7d\x70\x99\x1f\x75\xf6\xf3\xf6\x19\x0b\x9b\x7e\xc5\xa3\xe9\x72\xab\x38\x8a\xd2\x24\x14\x49\xd6\x76\x37\x97\x7d\x21\xeb\x66\x4d\xb9\xb9\xd4\x7e\x7b\xfc\xfc\x47\x6a\xbc\x0c\x5e\x1d\x2f\x78\x2e\x2b\xf2\x3a\xde\xe7\xd7\x54\xb0\x7b\x41\x78\x98\x49\x9f\x15\x97\x71\xf8\xb7\x0c\x93\x11\xdb\xa1\xce\xfe\xec\x71\x6e\x6a\xdd\xe5\xc6\x68\x80\x0a\xc1\x8b\xaf\x71\x37\xe0\xc3\xa9\x9b\x26\xd7\xa2\xfe\xc2\xed\x26\xfd\x43\x7f\xea\x86\xb2\x3f\xf4\x90\xd9\xe6\x74\xc5\x19\x5c\x76\xcc\x7c\x74\xb7\x40\x1c\x31\x72\x3a\xd0\xdc\x4e\x97\xa1\xf3\xd1\xb8\x57\x07\x9c\xb9\xf5\x3b\x42\x12\x0d\x5e\x21\x58\x59\xbe\xed\xee\x64\x26\x4e\x81\x41\xfb\x40\x57\x9b\x3e\x30\xf1\xff\x13\x1c\x76\x7f\x42\x7e\x0b\x3f\xdc\xdd\xdd\xc1\xf7\xf0\x23\x59\x5d\x5d\xf3\x6c\xb8\x53\x82\xf7\x5f\xea\x95\x52\x76\xf6\x52\xff\x27\x00\x00\xff\xff\x90\x25\x9c\x18\x06\x08\x00\x00")

func templatesLogsTplHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesLogsTplHtml,
		"templates/logs.tpl.html",
	)
}

func templatesLogsTplHtml() (*asset, error) {
	bytes, err := templatesLogsTplHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/logs.tpl.html", size: 2054, mode: os.FileMode(420), modTime: time.Unix(1441722307, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesMailTplHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x56\x51\x6f\xdb\x36\x10\x7e\xf7\xaf\xb8\x71\x43\x64\x63\x95\xb4\x06\x7b\x8b\x24\x0c\xd8\xcb\x1e\x56\xb4\x40\xfb\x36\xec\x81\x96\x4e\x31\x0b\x8a\xd4\x48\x2a\xad\x1b\xf8\xbf\xef\x48\x51\xaa\x92\xa8\xf1\xd6\x2c\x43\x09\xd8\x22\x8f\xc7\xbb\xef\x3e\x1e\x8f\xbc\xbd\x05\xa1\x6a\x39\x34\x08\xac\x35\x5a\x39\x54\x0d\x03\x26\xf9\x51\x0f\x2e\x3f\x20\x6f\xd0\x64\xae\x97\xd9\xc1\x75\x92\xc1\xe9\xb4\xd9\x14\xb6\x36\xa2\x77\x20\xb9\xba\x1e\xf8\x35\x96\xec\x3d\xbf\xe1\xa3\x90\x55\x1b\xa0\xf6\xc3\xb6\x1d\x54\xed\x84\x56\xb0\xdd\xc1\x6d\x90\xf9\x76\xc3\x0d\xb4\xda\x74\x50\x92\x4a\xf2\xbd\x25\x67\x69\xc7\x85\x4c\x76\x57\x9b\x59\xc9\x2b\x64\x76\xd8\x77\xc2\x7d\xc1\x4c\x70\x91\xf5\xda\x92\x82\x57\xe6\xce\x99\x6d\xc2\x83\x66\xb2\x7b\x11\x2d\xa0\x11\x5c\x8a\x4f\xb8\xdd\xed\xb2\x46\x2b\x9c\x8d\x6d\x1b\xee\xf8\x7d\x7b\xbe\x89\x16\xc2\x5c\x76\xe0\xf6\xf5\x07\xf5\xc6\xe8\x1e\x8d\x3b\x6e\x13\x34\x46\x9b\x64\x07\x17\x17\xe0\xe7\xff\x88\x82\x3f\xe1\xbb\xb2\x04\x35\x48\xf9\x60\x26\x93\xa8\xae\xdd\x61\xcd\xcb\x1c\x63\x6f\xb0\x27\x06\xb6\x49\xd1\x88\x1b\xa8\x25\xb7\xb6\x64\x5c\x92\x4b\x08\xff\x69\x43\x0c\xa3\x99\x06\xc2\x76\xc2\x5a\xbe\x97\xc8\xaa\x04\x7e\x5c\xb5\x3b\xb5\xa4\xd8\x0f\xce\x11\x6f\xee\xd8\xd3\x06\x8d\x03\x36\xf9\xa8\xa5\xb6\xc8\x02\xe0\xc9\x6c\x74\xcc\xaa\x0b\x27\x3a\xb4\x57\x45\x3e\xae\x39\xeb\xe9\x2e\x1f\xe7\x50\xe5\x14\x69\x95\xec\x1e\x68\x9d\x00\xa5\xc5\x27\x91\x65\x87\xba\x46\x6b\xbf\x6d\xb6\x92\x57\x04\x91\xce\x0c\xf8\xd4\x87\x08\xf9\x3c\xbc\x2f\xd2\x76\x47\x72\xda\x65\x2d\x1d\xa6\xcf\x79\xbe\x96\x7d\xcf\x99\x79\xff\x0f\x8f\x33\x87\xbc\x69\xc0\x69\xf8\x6b\xc0\x01\xc1\x47\x8e\xcd\xe3\xe8\xd6\x68\x3c\x2d\x4b\x8f\x6f\x06\xdd\x60\x14\xd9\xa3\x84\xbc\xda\x2c\xd5\xa6\x6f\x91\x8f\xc5\xae\xa2\x5a\x18\xaa\x59\x0c\xd0\xf7\xd3\x83\x36\xe2\x13\xd5\x51\x4e\xd5\xd2\x68\x89\xa3\x98\x41\x87\xee\xa0\x9b\x92\xf9\xaa\xc5\x40\x50\x6f\xae\x7e\x0c\xc6\xd2\x55\xb2\xdc\x1e\xad\xc3\x2e\x0f\xd2\xb1\x94\x2e\x77\x28\x38\xb8\x36\x7a\xe8\xe3\x64\x50\x90\x7c\x8f\xd2\xef\x6b\xc9\x9c\xfe\xcc\xb6\x96\xa9\xed\xd2\x4b\xa8\x09\x0c\x01\x49\x83\x1a\xab\xde\xbd\x2e\xf2\xd0\x5d\x58\x58\xb8\x88\xcb\x5e\xfe\xb4\xf0\x10\x74\x84\xea\x07\x17\x37\xd6\xe1\x47\xc7\xee\x80\x8a\x4e\xc6\xc0\x3c\x0a\xc5\x3b\x1c\x7b\xbd\xe4\x35\x1e\xb4\xa4\x8b\xa4\x64\xf8\x91\x77\xbd\xc4\x97\xbf\x34\x9a\x62\x54\x59\xad\xbb\x17\x10\x85\x97\x0b\x21\xa3\xab\x42\x0e\x64\x61\x19\x68\xd8\xbe\xcd\xfd\xee\xbf\xe1\x87\x6e\x95\xf7\x58\xbb\xb3\x24\xbd\x1d\xf5\x9e\x9d\xa9\x19\xcf\x48\xd7\x3c\x7c\x96\xe0\x3d\xa2\xb3\x91\xff\x1a\x9e\x00\x23\xfc\xaf\x0b\xdf\xa2\xa4\x18\xd6\x63\x36\xfa\x03\xc9\x7e\x9e\xd3\xc3\x23\xaa\x1e\x1c\xd8\x42\xf7\xe1\xce\x8f\x2c\x50\x02\x09\xc5\xaa\x37\xfe\x03\x9e\xd0\x22\x1f\x15\xce\xae\x0c\x6f\x96\xea\xb7\x77\xaf\x7e\x5f\x5f\x42\x07\x39\x80\xfd\x4f\x69\xee\xc6\xea\x74\x96\xe9\x58\xc5\xbe\x8e\x64\x4f\x03\x37\xc8\xff\x11\xcd\x13\xa2\xaa\xc8\xa7\x75\x4f\x8f\x78\x0d\x25\xc4\x9e\x6e\x5b\x8b\x2e\xbd\x5c\x3f\x19\x31\xf1\xe9\x79\xb7\xc8\xfb\x30\x1a\xcf\xcc\x34\x8a\x9b\xf8\x36\xbc\x48\xa3\xab\xbd\x53\x40\xbf\xb4\x37\xa2\xe3\xe6\xf8\xe8\x01\x29\x72\x8f\x9c\x8a\xf4\xe3\x6f\xdc\x56\x6b\x77\xef\x8d\xfb\x77\x00\x00\x00\xff\xff\xc8\xda\xe0\x41\x15\x0b\x00\x00")

func templatesMailTplHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesMailTplHtml,
		"templates/mail.tpl.html",
	)
}

func templatesMailTplHtml() (*asset, error) {
	bytes, err := templatesMailTplHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/mail.tpl.html", size: 2837, mode: os.FileMode(420), modTime: time.Unix(1463942024, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesWorkersTplHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x59\xdf\x6f\xdb\x36\x10\x7e\xf7\x5f\x41\x78\x01\x24\x6f\x95\xed\xb4\xc9\x80\x25\x71\x86\x61\x19\x8a\x02\xc3\x5e\x1a\x2c\x0f\xc3\x50\x30\xd2\xc9\xe6\xc2\x50\x02\x49\xc5\x31\xd2\xfc\xef\x23\x29\xea\x37\x65\xd9\x49\x50\x24\x40\xfd\x60\x49\xc7\xef\x8e\x47\xde\xf7\x91\x94\xfd\xf0\x80\x08\x0b\x69\x16\x01\x1a\xc7\x3c\x61\x12\x58\x34\x46\x63\x8a\x37\x49\x26\x67\x2b\xc0\x11\xf0\xa9\x4c\xe9\x74\x25\x6f\xe9\x18\x3d\x3e\x8e\x46\x67\x11\xb9\x43\x21\xc5\x42\x2c\xc6\x3c\x59\x8f\xcf\x47\x48\x7d\xea\xd6\x30\xa1\xc1\xbd\x08\x0e\xdf\xdb\xb6\x9e\xf6\xa3\x5a\x73\x1b\x92\x62\x06\x14\x99\xef\x60\xc9\x01\x58\x0b\xeb\xc4\x07\x3a\x5f\xc2\x96\x0e\x6c\x1b\x5f\x25\x3e\x84\xb4\xc9\x7e\xd8\x02\x37\x2e\xa4\x70\x88\x31\x8a\x71\x90\x09\xe0\x42\xdf\x1c\xdf\x8f\xcf\xcf\x66\x64\x4b\x67\x33\xd5\xdb\x5e\xb9\xfc\x82\x24\xdc\xcb\x80\x93\xe5\x4a\x0e\xa5\x55\xf3\x5e\x65\x4b\x18\x23\x12\x2d\xc6\xeb\x84\xdf\xa8\xf4\x82\x30\xc9\x98\x8a\x30\x1f\x48\xa1\x08\x74\x7e\x95\xfb\x0d\x65\xdc\xdf\xdc\xd3\xd4\x67\xc6\x68\xc5\x21\x5e\x8c\x7f\xb0\x09\xef\x50\xd8\x9c\x08\x71\x92\x48\xe0\xdb\x2a\x2c\x14\xb0\xf4\xc9\x28\x0d\x28\xc4\x6a\x2a\xfe\x26\xb0\x46\x17\x20\x31\xa1\x6a\x98\x1a\xb4\x4f\x0c\x5b\x91\x36\x17\x30\x57\x74\x0b\x42\xc2\x43\x0a\x25\x46\x51\x62\xb0\x83\x7a\xe9\x29\x60\x1e\x13\x43\xa6\xfd\xa7\x17\xb7\x94\xd6\xc4\xb5\x1f\x9f\x2e\x55\x0e\xd1\x5b\x13\xaa\xc4\xe2\xe6\xd5\x0a\xd5\x24\x17\xac\x31\x91\xfb\x6b\x55\x39\x21\xe3\xff\xed\xe5\x6a\xba\xfd\x2e\xd6\x57\x2e\xd6\x0d\x50\xea\x54\xd7\xab\xd6\xab\x20\x12\x6e\x71\xfa\x5a\x15\xbb\x4c\xb8\x3a\x39\x11\x06\x62\x0f\xad\x7e\x2c\x9d\xbe\x99\x56\xfb\x54\x88\x84\xdc\x50\x50\x23\x02\x3d\x05\x27\x47\x87\xa9\x9b\xc5\xfd\xac\xb4\xb7\xf6\x32\xea\x63\x5f\x04\x31\xce\xa8\x6c\x1c\x48\x1c\x67\xc9\x16\xff\xba\x27\x90\x2e\xf8\x3a\x89\x36\x3d\x27\x4f\x89\xaf\xb5\xaa\x41\xa4\x09\x13\xe4\x0e\xda\x4a\x31\xed\x0d\x30\xca\x5d\x56\xc9\x9d\x73\x89\x3a\x93\x3a\x35\x97\x9d\xf7\x94\x49\xae\xce\x3f\x5d\x9c\xcd\xd4\xa5\xb7\xfd\x77\x0e\x58\x42\xb4\x1d\x74\xa9\xd6\x58\x34\x14\xc9\x80\x18\xbe\x85\x1d\x60\x42\x62\x99\x89\x1d\x80\xe1\xb6\xf4\x94\xd5\x31\x72\x8d\xed\x99\x27\x5d\x2d\xa7\x43\xb7\x41\x19\x75\x31\x5e\x8c\x75\xf5\x6d\x6a\x1b\xe7\x5c\x3b\xe9\x1b\xa4\xdd\x8b\x33\xe6\x4d\x10\x41\x84\x9c\xa4\x32\x6f\xbb\xc3\xdc\xd0\x5c\x5c\x24\x2c\x93\xa7\x23\x63\x8c\x33\x16\x4a\x92\x30\xb4\x04\xa9\x87\xf5\xd9\xe8\xe0\x2f\x35\x05\x7e\x2e\x89\x09\x7a\xb0\x1d\x89\x35\x91\xe1\xaa\x63\x46\x28\xc4\x02\xd0\xfc\xa4\x96\x24\x07\x99\x71\x86\x3c\x7d\x76\xf3\x4e\x6b\x0d\xd7\x6a\xd2\x6e\x6c\xd7\xa5\xeb\xa1\xcb\x35\xe5\x49\x08\x42\x0c\x7b\xbf\x77\x79\x8b\x2c\xdc\xcd\xfb\x83\xcb\x3b\x56\x67\xaa\x61\xd7\xa3\x3e\x57\x74\xbd\x41\x92\xdc\x82\xda\xd5\x86\xa3\x1c\xbb\xa2\xdc\x10\xba\x43\x02\x3f\xf7\x4d\xb9\x7a\x48\x15\x39\xb7\x46\xb0\x6b\x81\x2b\x44\xc6\x6e\x58\xb2\x66\x2e\xf7\xfc\xe1\x71\x94\x7f\x37\x19\x94\xa5\x91\x12\x84\x5f\x31\xe3\x60\x8a\xff\xc3\xf7\x7e\x45\x14\xb9\x49\xe1\x04\x79\x1f\xff\xb8\xf4\xde\x95\xc6\x8c\x53\x65\x9b\x89\x8d\x50\x47\x9b\x99\xdd\x0b\x6b\xed\xb6\x94\x27\x65\x47\x3e\x9f\x3c\xd4\x32\xd3\xb4\x96\x57\x68\x81\x0e\x7c\xaf\x78\x55\x46\x46\x36\xde\x64\x0a\xb7\xa9\xdc\xf8\x93\xd3\x36\xfe\xd2\xe2\xf3\xf7\x9f\x0e\xba\x05\x2f\xa2\x2e\x10\x9f\xda\xfb\x2f\xe6\x8d\x04\x7d\xfd\x8a\xe6\x9d\xe0\x3a\xe6\x17\x53\x87\x45\xb7\xb5\xf0\xb7\xed\x55\x40\x63\x70\xc5\x2b\x00\xd7\x99\xd8\x34\x3c\x8c\xc1\xe5\x51\x1d\xc3\x0c\xbe\xf6\xa8\xd1\xf5\xd1\x91\x18\xf9\xbf\x71\x8e\x37\x53\x22\xcc\xd5\x2f\xc3\x4f\xea\x12\xcf\x3f\x71\xc2\x91\xaf\x3b\x20\x88\xb0\x2a\x91\x2e\xb0\x99\x7a\x3d\xe9\x7f\xc8\xbf\xa7\x3d\x60\x3d\x6f\x0a\x9a\x03\xa7\xfa\xa9\x51\x88\xe2\x23\xaf\xa6\x38\x4d\x81\x45\xbe\xa7\x17\x7c\x6f\xcb\x01\xf3\x27\xa4\x20\xd1\xb9\xa7\x6e\x6c\x54\x12\x19\xe3\x4c\x5b\x77\x73\x64\xfa\x2d\x4b\xf3\xda\x46\xb0\xcb\xfe\x64\x2a\x93\x3f\x93\x10\x53\xf8\x2c\xb9\xda\x28\x15\xed\xf7\x0c\xec\x9b\xf1\xfe\x6a\x86\xad\xf3\x52\x22\xf0\x9e\x17\x44\x6f\x5c\xcf\x0b\xd3\xdd\x04\x4c\xe0\x62\xc9\x7f\x56\xec\x72\x22\x4d\xc8\xfe\x69\xdc\xaf\x13\xbd\xcf\x7a\x93\x36\xa5\x1e\xdb\xc4\x71\x28\x78\x4a\x81\x2d\xe5\x6a\xd4\xe3\xe5\x52\x46\xa5\xec\x1d\xc4\x51\x03\xf7\xea\xc3\x52\xbe\x0e\x36\x02\x71\xd1\xfe\xf2\x29\xb4\x2f\xc8\xb5\x67\xcd\x2a\x3a\x3d\x55\x2d\x03\x45\x7e\xe1\xf2\x36\x96\xdc\xfa\x6c\x0e\x14\xb9\xdc\x02\x02\x49\x24\x05\xb5\x05\xe8\x17\x60\xbf\x16\x4e\x25\x81\xd6\xe5\x11\xb8\x99\x8a\xf6\xae\xd6\xd6\xc2\xb9\xb2\x74\xc0\x8d\x5f\x9e\x0b\x7c\xb1\x88\xb6\xc1\xed\x5f\xbf\xba\xc9\xd5\x5c\x1e\x8b\x9d\xd9\xda\xec\x28\x0f\xfc\x72\xd3\xac\x48\x58\xec\xd3\x85\xb7\x00\xf9\x89\xa9\xb7\xdf\x3b\x4c\xfd\xbc\xed\x1d\x3a\x9c\xcf\xe7\xe8\x47\x74\x5c\x84\x53\xd7\xb3\x59\x71\x98\x1c\x6d\xff\xdf\x24\x7f\x97\x6e\xfc\x6f\xf2\x7f\x00\x00\x00\xff\xff\x12\xfa\xc0\x38\x69\x19\x00\x00")

func templatesWorkersTplHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesWorkersTplHtml,
		"templates/workers.tpl.html",
	)
}

func templatesWorkersTplHtml() (*asset, error) {
	bytes, err := templatesWorkersTplHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/workers.tpl.html", size: 6505, mode: os.FileMode(420), modTime: time.Unix(1467216067, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/config.tpl.html": templatesConfigTplHtml,
	"templates/logs.tpl.html": templatesLogsTplHtml,
	"templates/mail.tpl.html": templatesMailTplHtml,
	"templates/workers.tpl.html": templatesWorkersTplHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"config.tpl.html": &bintree{templatesConfigTplHtml, map[string]*bintree{}},
		"logs.tpl.html": &bintree{templatesLogsTplHtml, map[string]*bintree{}},
		"mail.tpl.html": &bintree{templatesMailTplHtml, map[string]*bintree{}},
		"workers.tpl.html": &bintree{templatesWorkersTplHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: AssetInfo, Prefix: k}
	}
	panic("unreachable")
}
