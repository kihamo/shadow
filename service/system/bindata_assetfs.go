// Code generated by go-bindata.
// sources:
// templates/config.tpl.html
// templates/logs.tpl.html
// templates/tasks.tpl.html
// DO NOT EDIT!

package system

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesConfigTplHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x92\x3f\x6f\xf3\x20\x10\xc6\x77\x3e\xc5\x09\xe5\xdd\xde\x3a\xed\xd0\xa5\x72\x98\xaa\x8e\xdd\xda\x9d\x98\xb3\x8d\x44\xc0\x82\xb3\xab\x28\xca\x77\xef\x61\x5b\x72\xdc\x3f\x69\x3c\x71\xc7\xef\x31\xf7\xc0\x73\x3a\x81\xf5\x95\xeb\x0d\x82\xac\x63\xf0\x84\xde\x48\x90\x4e\x1f\x43\x4f\xdb\x16\xb5\xc1\x58\x50\xe7\x8a\x96\x0e\x4e\xc2\xf9\x2c\x44\x69\xec\x00\x95\xd3\x29\xed\x24\xe9\xbd\xc3\xbb\x88\xa9\x0b\x3e\xd9\x01\xa5\x12\xc0\x5f\x39\xf6\x57\x10\x4c\x68\x1b\x06\x8c\xf3\x3a\x51\xb4\x1d\x9a\x59\x33\xe9\xf2\x89\x4b\x3d\xf5\xe2\xba\x31\x83\xf0\x61\x0d\xb5\x3b\xf9\x70\xff\x4f\xaa\x57\x7d\xc0\x72\x4b\xed\x55\xf2\x31\x93\xef\xda\xf5\xbf\xa3\xea\x19\x53\xc5\x53\x91\x0d\xfe\x3b\xc4\x9d\x8b\x59\xf2\xfe\x6a\xda\x92\xf6\xc1\x1c\x97\x9a\xef\x36\x6a\xdf\x20\x6c\xec\x7f\xd8\xd4\x4e\x37\xf0\xb4\x83\xe2\x85\x17\x29\xdf\xe4\x0d\x2e\x8d\xe2\x9f\x8c\xd2\x22\x5b\x64\x15\x9f\x6a\xfe\x20\x47\x8b\xb7\xa1\x6f\x49\x37\x3f\xa3\x6b\xaf\x2c\xe0\x60\x5c\x0e\xcd\xfb\x8b\x5b\x2e\xf2\x8b\x2a\x51\x6e\x39\x1c\x4a\x88\xeb\xb1\xaa\x43\xa0\x2f\xb1\xfa\x0c\x00\x00\xff\xff\x5f\x33\xbe\x76\x88\x02\x00\x00")

func templatesConfigTplHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesConfigTplHtml,
		"templates/config.tpl.html",
	)
}

func templatesConfigTplHtml() (*asset, error) {
	bytes, err := templatesConfigTplHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/config.tpl.html", size: 648, mode: os.FileMode(420), modTime: time.Unix(1441659213, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templatesLogsTplHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x55\x4d\x6f\xe3\x36\x10\xbd\xeb\x57\x4c\xb5\x06\x24\x35\xb1\x94\x1e\x7a\x71\x64\xf7\xb0\x2d\x8a\x14\xdb\xee\x21\xed\x29\xdd\x03\x2d\x8d\x64\x66\x69\x52\x20\x29\x6f\x0c\xc3\xff\xbd\x43\xea\x23\xb2\x9c\xa6\x40\x0d\xc4\x31\x47\xf3\xde\xcc\x9b\x0f\xea\x74\x02\x2e\x0b\xd1\x96\x08\x61\xa5\x95\xb4\x28\xcb\x10\x42\xc1\x8e\xaa\xb5\xd9\x0e\x59\x89\x3a\xb5\x8d\x48\x77\x76\x2f\x42\x38\x9f\x83\x20\x2f\xf9\x01\x0a\xc1\x8c\x59\x87\x0d\x93\x28\xc0\x7f\x2f\x4b\xac\x58\x2b\x6c\xb8\x09\x80\x3e\x57\x5e\x4b\x47\xc6\x65\x1d\x6e\x1e\x77\xea\x1b\x50\xe0\xf4\x77\xf6\xf2\x60\x71\x6f\x88\x16\x04\xb3\x68\x2c\x68\x2c\x94\x2e\x8d\xa7\x98\xd3\x6c\xad\x5c\xd6\x5a\xb5\x0d\x34\xad\x10\x4b\xcd\xeb\xdd\x10\x6d\x74\xdf\xb6\xd6\x2a\x09\xbc\x5c\x87\x1a\x2b\x8d\x66\x17\x82\x3d\x36\x48\x68\xff\x24\x9c\x90\x81\x23\xec\xb3\xf6\xbf\x5f\xcc\x8c\xce\x53\xf2\x01\x52\x31\xa8\xd8\x72\xa0\xdd\xe4\x19\x9f\x05\xcf\xba\x18\xaf\xd6\x3c\xa3\xf4\xfb\x7a\x4c\x7e\x5e\x95\x66\xab\xca\xe3\x24\x74\xde\x8a\xe1\xb9\x64\x07\xa0\xbf\xa5\x65\x5b\x13\x82\x56\x82\x94\xd0\x6f\xc1\xcd\x5c\x3a\x15\x54\x33\x59\x23\x2c\x24\xdb\xe3\x2d\x2c\x50\x5a\xcd\xd1\xc0\x6a\x0d\xe9\x27\x55\xd7\xa8\x5d\xa1\x2f\x33\x16\x7c\x93\x33\xd8\x91\xa6\x75\xf8\x81\x18\x3c\x96\xbc\x26\xa1\x42\x28\x99\x65\x4b\x4b\x0c\x83\x65\x33\xf1\xcc\x33\x46\x95\x10\xfc\x2a\x19\x1a\xa4\x69\xb8\x3c\x6b\xc5\x26\x78\xb3\xaf\x44\xb9\x2c\xfc\xe8\xfd\xa7\x26\xe1\x75\xbc\x2b\xc9\x11\x8f\xc9\xfb\xf2\x86\xd3\x40\xce\x12\xfa\xf9\x98\xca\x7d\xa3\xed\xcd\x26\x6f\x34\x92\xb6\xfe\x7b\xde\xeb\xb1\x9d\xef\x69\x9e\xb7\xbf\xff\x17\xe4\xa6\xd0\xbc\xb1\x9b\x60\x11\x97\xaa\x68\xf7\x24\x3d\x49\x35\x2d\xc8\x31\xae\x5a\x59\x58\xae\x64\x9c\xc0\x89\xa0\xc3\x11\xda\x86\xfa\x80\xbd\x15\xe0\xc0\x34\x90\x1e\x58\xc3\x22\x8e\xd2\x41\xd9\xea\xc0\x0d\xdf\x0a\x5c\x55\x5c\x1b\x1b\x25\xf7\x5d\xc5\x79\x05\xf1\x77\xe4\x33\x80\x81\xf6\xcc\xb6\x5a\xde\xfb\xd3\x39\x18\x19\xa9\xbe\x0f\x25\x71\x92\x6f\xca\xac\xd5\x71\xc4\x4b\xc7\x32\x3c\xa7\x65\xef\x1e\x56\x5c\x96\x71\x44\xa5\x89\x12\x7f\x35\xc4\xd1\x18\x6c\x91\xb2\x67\xf6\x12\x0f\x91\xdc\xf6\xad\x20\xfa\xf5\x97\x3f\xa3\xdb\xde\xd4\x6a\x41\x96\xcc\x1c\x0d\x6d\x7f\x46\x31\xcd\x4f\xf4\xb5\x8e\xe0\xa6\x4b\x60\xf0\x33\x6d\x51\xa0\x31\xab\xb1\x08\x31\x6d\x5e\xa3\xa4\xc1\xe4\x34\x16\x99\xfb\x1b\x64\x0d\x4f\x5f\xee\x47\x5b\xa5\x34\xc4\x2e\x5f\x4e\xb7\x1b\x8c\x20\x38\x5d\x34\xcc\x3b\x10\x9a\xc0\x83\xcb\x13\x9f\xb0\x8c\xec\x64\x25\x1f\x89\xdf\xe0\x67\xd7\x02\x67\x4b\x2d\xdf\x63\x92\x5a\xf5\x49\x15\x4c\xe0\x23\xad\x9a\xac\xe3\xe4\x6a\x8c\xfc\xe7\x06\x22\x78\x72\xea\x3c\x52\xe0\x01\x05\x21\xff\x6a\x1a\xd4\x1f\x99\x71\x3d\x25\x8f\x2f\x10\xfd\x1b\xda\xc3\xf6\x54\x09\x56\xe3\x7d\x70\x99\x1f\x75\xf6\xf3\xf6\x19\x0b\x9b\x7e\xc5\xa3\xe9\x72\xab\x38\x8a\xd2\x24\x14\x49\xd6\x76\x37\x97\x7d\x21\xeb\x66\x4d\xb9\xb9\xd4\x7e\x7b\xfc\xfc\x47\x6a\xbc\x0c\x5e\x1d\x2f\x78\x2e\x2b\xf2\x3a\xde\xe7\xd7\x54\xb0\x7b\x41\x78\x98\x49\x9f\x15\x97\x71\xf8\xb7\x0c\x93\x11\xdb\xa1\xce\xfe\xec\x71\x6e\x6a\xdd\xe5\xc6\x68\x80\x0a\xc1\x8b\xaf\x71\x37\xe0\xc3\xa9\x9b\x26\xd7\xa2\xfe\xc2\xed\x26\xfd\x43\x7f\xea\x86\xb2\x3f\xf4\x90\xd9\xe6\x74\xc5\x19\x5c\x76\xcc\x7c\x74\xb7\x40\x1c\x31\x72\x3a\xd0\xdc\x4e\x97\xa1\xf3\xd1\xb8\x57\x07\x9c\xb9\xf5\x3b\x42\x12\x0d\x5e\x21\x58\x59\xbe\xed\xee\x64\x26\x4e\x81\x41\xfb\x40\x57\x9b\x3e\x30\xf1\xff\x13\x1c\x76\x7f\x42\x7e\x0b\x3f\xdc\xdd\xdd\xc1\xf7\xf0\x23\x59\x5d\x5d\xf3\x6c\xb8\x53\x82\xf7\x5f\xea\x95\x52\x76\xf6\x52\xff\x27\x00\x00\xff\xff\x90\x25\x9c\x18\x06\x08\x00\x00")

func templatesLogsTplHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesLogsTplHtml,
		"templates/logs.tpl.html",
	)
}

func templatesLogsTplHtml() (*asset, error) {
	bytes, err := templatesLogsTplHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/logs.tpl.html", size: 2054, mode: os.FileMode(420), modTime: time.Unix(1441658950, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templatesTasksTplHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x59\x5f\x6f\xdb\x36\x10\x7f\xf7\xa7\xe0\xbc\x00\x96\xb7\x58\xb6\xd7\x76\xc0\x9c\x3f\xc3\xb6\x0c\x5d\x81\x6d\x2f\x0d\x96\x87\x20\x18\x18\xe9\x64\x73\xa1\x29\x81\xa4\xe2\x78\x81\xbf\xfb\x48\x8a\x96\x28\x59\x92\xa5\xae\x28\x5a\x20\x7e\xb0\xa4\xe3\xef\xfe\xf0\xee\x77\x24\x65\x3f\x3f\x23\xc2\x02\x9a\x86\x80\x86\x11\x8f\x99\x04\x16\x0e\xd1\x90\xe2\x6d\x9c\xca\xe9\x0a\x70\x08\xdc\x97\x09\xf5\x57\x72\x4d\x87\x68\xb7\x1b\x0c\xce\x43\xf2\x88\x02\x8a\x85\xb8\x18\xf2\x78\x33\xbc\x1c\x20\xf5\x71\xa5\x41\x4c\x27\x4f\x62\xf2\xbd\x1d\xea\x30\x5c\x85\x24\x98\x01\x45\xe6\x7b\xb2\xe4\x00\xac\x82\xad\xc5\x4f\x74\xb8\x84\x2d\x6b\xb0\x55\x7c\x11\xf7\x31\xa4\x0d\xf6\x55\x0b\xdc\xa8\x90\xbd\x42\x84\x51\x84\x27\x41\xbc\x5e\x03\x93\x42\xdf\xbf\x79\x1a\x5e\x9e\x4f\x49\x8b\xbf\xa9\x72\xd8\x2b\x9c\x1f\x90\x84\x27\x39\xe1\x64\xb9\x92\xc7\x22\x73\xb4\x57\xe9\x12\x86\x88\x84\x17\xc3\x4d\xcc\x1f\x80\x0b\x15\x67\xca\x94\x85\xd9\x91\x10\xf6\x86\x2e\x6f\x32\xbd\x63\x11\x37\x0f\x37\x0c\x35\x89\x31\x5a\x71\x88\x2e\x86\x5f\xdb\x80\x3b\xd4\x36\xe3\x42\x14\xc7\x12\x78\x5b\x91\x85\x02\xe6\x3a\x29\xa5\x13\x0a\x91\x4a\xc5\x5f\x04\x36\xe8\x0a\x24\x26\x54\x4d\x53\x83\xfa\xd8\xb0\x15\xa9\xd2\x01\x73\xc5\xb8\x49\x40\x78\x40\x21\xc7\x28\x4a\x1c\x75\xe0\x96\x9e\x02\xe6\x11\x31\x64\xea\x9f\x5e\x5c\x69\xb6\x32\xae\xfa\xf8\xe1\xdd\xca\x21\x7c\xe9\xd5\x8f\xdb\xab\x12\x8b\x07\x31\xd9\x60\x22\xfb\xb7\xab\x52\x42\x46\xff\xd3\x77\xac\x71\xfb\xd2\xaf\x9f\x79\xbf\x6e\x81\xd2\xda\x06\x7b\x69\xd9\xff\xd1\xb2\xcb\x98\xab\xf3\x13\x61\x20\x7a\x34\xeb\xdb\x5c\xe9\x93\x35\x6b\x53\x1b\x22\x21\xb7\x14\xd4\x8c\x40\xa7\x60\xf1\x7a\x9e\xd4\xd3\xb8\x99\x96\xee\x6d\x87\xa3\xa1\x4e\x9a\x90\x58\x8a\x92\x1b\x7b\x6b\x2f\x83\x26\x0e\x87\x10\xe1\x94\xca\xd2\xc9\xa6\xe6\x58\x5a\x61\xf1\xe1\x51\xe6\x10\x7c\x1f\x87\xdb\x86\x53\xac\xc4\xf7\x7a\x6d\x00\x91\xc4\x4c\x90\x47\xa8\xf6\x9b\x19\x2f\x81\x51\xa6\xb2\x8a\x1f\x6b\x17\xba\x73\xa9\x43\xab\x93\xf3\x86\x5a\xcb\xd5\xe5\xbb\xab\xf3\xa9\xba\x34\x8e\xff\xc2\x01\x4b\x08\xdb\x41\xd7\x6a\xa5\x46\xc7\x2c\x19\x10\xc3\x6b\xe8\x00\xd3\x95\x4c\x45\x07\x60\xd0\x16\x9e\x92\xd6\xcc\x5c\x63\x1b\xf2\xa4\xab\x55\xab\x70\x38\xa0\x84\xba\x18\x6d\xd4\xed\xc5\x3a\x77\xb3\x6b\xe3\x5c\xdd\x7e\xfc\x05\xd2\xee\xa3\x33\xe6\x8b\x20\x82\x08\x38\x49\x64\x36\xf6\x88\xb9\xa1\xb9\xb8\x8a\x59\x2a\xcf\x06\x46\x18\xa5\x2c\x90\x24\x66\x68\x09\x52\x4f\xeb\xbd\xe9\x83\x3f\x55\x0a\xbc\xac\x25\xc6\xe8\xd9\x3a\x12\x1b\x22\x83\xd5\x81\x18\xa1\x00\x0b\x40\xb3\x85\x13\x24\x07\x99\x72\x86\x46\xfa\x04\x38\x3a\x73\x06\xee\x55\xd2\x1e\xac\xeb\x5c\x75\x5e\xa7\x9a\xf0\x38\x00\x21\x8e\x6b\x7f\x57\xa7\x2d\xd2\xa0\x9b\xf6\xab\x3a\xed\x48\x9d\xcc\x8e\xab\xbe\x6e\x9a\xb1\x7a\x48\x14\x37\x5a\x2d\xd8\x56\xac\x33\x91\xb2\x07\x16\x6f\x58\x9d\x7a\xf6\xb0\x1b\x64\xdf\xe5\x02\xa6\x49\xa8\xf8\xe8\x15\x85\x39\xf1\xf1\x3f\xf8\xc9\x2b\xea\x24\xb7\x09\x2c\xd0\xe8\xed\xaf\xd7\xa3\xd3\x5c\x98\x72\xaa\x64\x53\xb1\x15\x12\xd6\x53\xd3\xe8\xce\xa8\xcd\xe3\x22\x77\xe3\xf1\xf1\xb3\x13\x17\x89\x90\xf7\xd5\x4f\x9c\xe3\xad\x4f\x84\xb9\x7a\xdc\xb7\xfb\xd9\xd8\xe5\x48\x31\x41\x77\x5a\xbb\x81\xf3\xa0\xf9\x29\x6f\xd0\x05\x3a\xf1\x46\xfb\x97\x67\x64\xf8\x3f\x1a\xfb\xb0\x4e\xe4\xd6\x1b\x9f\x55\xf1\xd7\x16\x6f\x02\x3f\x44\x3b\xf0\x28\xe6\x9e\x56\x21\x88\x30\x54\x04\x59\x89\x51\x23\xb2\x21\x65\x38\x47\xdd\x92\xbb\xb3\x03\x98\x76\xa9\x40\x19\xc4\xd7\x4f\x25\x7f\x2a\xdf\x37\x3e\x4e\x12\x60\xa1\x37\xd2\x4b\xd3\xa8\xd2\xde\xdf\x22\x25\x0e\x2f\x47\xea\xc6\xda\x20\xa1\x11\x4e\xb5\xb4\x19\xcc\xf4\xdb\x83\x2e\xb5\xd5\xb2\x0b\xd1\xd8\x97\xf1\xef\x71\x80\x29\xbc\x97\x5c\x2d\xdd\x8a\x09\x1d\x8c\x79\x66\x16\x3f\x9a\xc9\x68\xff\x8a\x0b\xa3\xfe\x8a\x7a\xc9\xec\xaf\x7a\xb8\xe4\x18\x63\xfb\x05\xa6\xb7\xbd\x3c\x31\xc6\x4c\x73\x5a\xda\x0c\x67\x52\x55\xac\x71\x23\x4f\x2b\x44\x32\xcc\xfb\x5b\xf7\x7d\x1d\x97\x2c\x49\x5c\x98\x21\x53\x99\x28\xd7\x5d\x89\xb2\x2f\x53\x87\xac\x14\x85\xe9\xc3\xa9\x23\xa9\xfb\xe0\xa4\xe5\x3d\x3a\x91\x44\x52\x50\x3d\xaa\xdf\x57\x3c\x37\x2f\x3e\x05\xb6\x94\x2b\x6d\x0d\x6d\xf2\x53\x47\xd9\xa6\x36\x53\xbc\xa9\x14\x56\x0a\xd9\x01\xbc\xf4\xbb\x61\xa1\x61\xc5\xd6\xe9\x81\x56\xf5\x17\x8c\x96\x80\xcb\xcb\x4c\xb1\xc3\xfa\x6a\x3d\xc6\xb7\xb3\x3b\xff\x11\xd3\x14\xdc\xe5\xc4\x68\x9f\xd5\x2b\x19\xb0\x50\x6a\x5d\x15\x8c\x97\x79\x9d\x97\xfb\x54\x6c\xdb\xbd\xcc\xef\xba\x2a\xa8\xe3\x1b\xf9\x17\x7e\xc3\x2c\xa4\xc0\xdd\x75\x78\xb7\xdf\x94\xac\xcc\x56\xfd\xc4\xcb\x77\x0c\xe7\x04\x91\xdb\x53\x6e\x35\xe5\xfe\x88\x39\x27\xc2\x37\x22\x67\xa3\x02\x0a\xfa\x5d\x59\xf5\xa9\xd1\x70\xf6\x23\x3d\xd9\x05\xba\x2d\xf7\x19\xc5\xf7\xa0\x37\x31\x73\x54\xb5\x73\x71\x74\xf4\xc7\xcc\x77\x81\xe6\x45\xd8\xa7\xa8\xde\xc8\xcf\x2a\x07\x9d\x8d\xdc\x15\x80\x2c\x41\x0b\x24\x79\x0a\x4e\x4a\xec\xed\x7e\x73\xde\xe7\x4d\x80\x7c\xc7\xd4\x6b\xab\x32\xe9\x65\x63\xa7\x68\x3e\x9b\xcd\xd0\x37\xe8\xcd\x3e\x91\xea\x7a\x3e\xdd\x1f\xe0\x06\xed\x7f\x7b\x64\x2f\xc1\xa5\xbf\x3d\xfe\x0b\x00\x00\xff\xff\x42\xcf\x63\xac\x28\x19\x00\x00")

func templatesTasksTplHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesTasksTplHtml,
		"templates/tasks.tpl.html",
	)
}

func templatesTasksTplHtml() (*asset, error) {
	bytes, err := templatesTasksTplHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/tasks.tpl.html", size: 6440, mode: os.FileMode(420), modTime: time.Unix(1441657740, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/config.tpl.html": templatesConfigTplHtml,
	"templates/logs.tpl.html": templatesLogsTplHtml,
	"templates/tasks.tpl.html": templatesTasksTplHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"config.tpl.html": &bintree{templatesConfigTplHtml, map[string]*bintree{
		}},
		"logs.tpl.html": &bintree{templatesLogsTplHtml, map[string]*bintree{
		}},
		"tasks.tpl.html": &bintree{templatesTasksTplHtml, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, Prefix: k}
	}
	panic("unreachable")
}
