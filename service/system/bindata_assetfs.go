// Code generated by go-bindata.
// sources:
// templates/config.tpl.html
// templates/logs.tpl.html
// templates/tasks.tpl.html
// DO NOT EDIT!

package system

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesConfigTplHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x92\xbf\x4e\xc3\x30\x10\xc6\xf7\x3c\x85\x65\x95\x8d\x26\x74\x60\x41\x8e\x17\x10\x23\x1b\xec\x6e\x7c\x49\x2c\xb9\x76\x64\x5f\x40\x55\xd5\x77\xe7\x1c\x27\x14\xf1\x27\xcd\x10\xdd\x9d\x7e\x9f\xef\x3e\x9f\x4f\x27\x66\x5c\x63\x47\x0d\x8c\xb7\xc1\x3b\x04\xa7\x39\xe3\x56\x1d\xfd\x88\x55\x0f\x4a\x43\x28\x71\xb0\x65\x8f\x07\xcb\xd9\xf9\x5c\x14\x42\x9b\x77\xd6\x58\x15\x63\xcd\x07\xd5\xc1\x36\x53\x5c\x16\x8c\x3e\xd1\xef\xe4\xa3\x77\xad\xe9\xc6\xa0\xd0\x78\x27\x2a\xaa\x14\xa2\x22\x95\x24\x31\xaa\xbd\x85\x45\x9e\x93\xe9\xbf\x8d\x18\xcc\x00\x7a\xce\x1a\xef\x34\xb8\x08\x7a\x39\x16\x53\x97\x1c\xe7\x3c\x5c\x92\x19\x60\x1f\x46\x63\x5f\xf3\xdd\xdd\x0d\x97\x2f\xea\x00\xa2\xc2\xfe\x5f\xea\x3e\x51\x6f\xca\x8e\x7f\x63\xf2\x09\x62\x43\x13\x65\x0b\xdf\x01\xca\xe6\xde\xa9\xfe\x35\x95\xc0\xbd\xd7\xc7\x1c\xd3\xad\x06\xe5\x3a\x60\x1b\x73\xcb\x36\xad\x55\x1d\x7b\xa8\x59\xf9\x4c\x41\x4c\x77\xb8\xe2\x42\x4b\x12\x4f\x92\x32\x59\x20\x9a\xba\xe8\x15\x6a\xb2\x70\x1d\x7b\x8d\xb4\xaa\x5f\xd8\xc5\x0b\x81\xb4\xfa\x65\x38\xaa\x67\x37\x14\xa4\x7d\xd0\xe6\xd6\x5f\x4a\xeb\x3d\xfe\x78\x29\x9f\x01\x00\x00\xff\xff\x37\xb6\x71\xc3\x5b\x02\x00\x00")

func templatesConfigTplHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesConfigTplHtml,
		"templates/config.tpl.html",
	)
}

func templatesConfigTplHtml() (*asset, error) {
	bytes, err := templatesConfigTplHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/config.tpl.html", size: 603, mode: os.FileMode(420), modTime: time.Unix(1435004621, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templatesLogsTplHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x55\x51\x6f\xe3\x36\x0c\x7e\xcf\xaf\xe0\x74\x05\x6c\xaf\x8d\x9d\x0e\xb7\x0d\x48\x1c\x0f\xc3\x6d\x18\x3a\xdc\x76\x0f\xdd\x9e\xba\x7b\x50\x6c\x3a\x51\x4f\x91\x0c\x49\x4e\x13\x14\xf9\xef\xa3\x6c\xcb\x75\xba\xbb\x0d\x0b\x90\xc0\xa2\xf9\x7d\xfc\x48\x91\xcc\xf3\x33\x08\x55\xca\xb6\x42\x60\xb5\xd1\xca\xa1\xaa\x18\x30\xc9\x4f\xba\x75\xd9\x0e\x79\x85\x26\x75\x8d\x4c\x77\x6e\x2f\x19\x9c\xcf\xb3\x59\x5e\x89\x03\x94\x92\x5b\xbb\x66\x0d\xdf\xe2\xbc\xf7\x62\xc5\x0c\xe8\x93\xef\x6e\x8b\xf7\x7a\x0b\x07\x81\x4f\x79\x46\x87\x59\x9e\x11\xa0\x18\x70\xd6\x9d\x24\xae\xd9\x9e\x9b\xad\x50\xf3\x8d\x76\x4e\xef\x97\xb7\x8b\xe6\xb8\x1a\xf1\x6f\x8b\xfb\x9d\x7e\x02\x52\x96\xfe\xc6\x8f\x77\x0e\xf7\x96\xe2\x82\xe4\x0e\xad\x03\x83\xa5\x36\x95\x25\xea\xb7\x03\x60\x42\xdb\x68\x2b\x9c\xd0\x6a\x69\x90\xdc\xc5\x01\x57\x0e\x8f\x6e\xce\xa5\xd8\x92\x4d\x6c\x77\x6e\xd5\x47\x5e\xce\xbf\xf9\xae\x39\xc2\xf7\xf4\x5d\xc0\x22\xc4\xee\xe8\x36\x2d\x69\x52\x20\xaa\x35\x33\x58\x1b\xb4\x3b\x06\xee\xd4\x10\x7b\xff\x86\x85\xdc\x37\x4e\x01\x7d\xe7\x15\xd6\xbc\x95\xae\x7b\x3e\x5a\x56\xfc\xd8\x3a\x0d\x03\x34\xcf\x7a\xd0\x20\xb5\xaf\xc4\x58\x90\x56\x06\x2e\xc5\x0f\x40\xdf\xb9\xe3\x1b\xcb\xc0\x68\x9f\x0c\x3d\x4b\x61\xdd\xa0\x8d\xca\x61\xb8\xda\x22\x5c\x29\xbe\xc7\x1b\xb8\x42\xe5\x8c\x40\x0b\xcb\x35\xa4\x54\xf0\x2d\x1a\x5f\xa6\x3e\x8e\x14\x45\xce\x61\x47\x22\xd6\xec\x0d\x21\x3b\x0c\xbd\x9d\x50\x33\xa8\xb8\xe3\x73\x47\xc8\x60\x29\x26\x9e\x79\xc6\x8b\x3c\x23\x9e\x10\x9c\xfa\xc2\xd3\xe7\x59\x2b\x8b\xcb\x1e\x20\xe8\xbc\xec\x3a\xe7\x8b\x5a\x65\xa7\xef\xb3\x52\x3d\xd1\x28\xaa\xe1\x0a\x25\x9b\x12\x7b\x0b\xeb\x2e\x63\x9a\xc6\xe4\xba\x9a\x22\x6f\x0c\x92\xd6\xe1\xf7\xa2\xd2\xaf\xb5\x0f\x75\xb7\xa5\x11\x8d\x2b\x66\x57\x71\xa5\xcb\x76\x4f\xc2\x93\xd4\x50\x13\x9f\xe2\xba\x55\xa5\x6f\xa0\x38\x81\x67\x42\x87\x23\xb4\x0d\x55\x0b\x07\x2b\xc0\x81\x1b\x20\x75\xb0\x86\xab\x38\x4a\x83\xce\xe5\x41\x58\xb1\x91\xb8\xac\x85\xb1\x2e\x4a\x56\xb3\xce\x59\xd4\x10\x7f\x45\x3e\x01\x0c\xd4\x1c\xae\x35\x6a\xd5\x9d\xce\xb3\x91\x91\xaa\x74\x57\x11\x27\xf9\xa6\xdc\x39\x13\x47\xa2\xf2\x2c\xe1\x3d\xca\xe1\x65\x2d\x54\x15\x47\x94\x70\x94\x74\x73\x19\x47\x63\xb0\xab\x94\x3f\xf2\x63\x1c\x22\xf9\xc6\x5d\x42\xf4\xcb\xcf\x7f\x44\x37\x83\xa9\x35\x92\x2c\x99\x3d\x59\x9a\xac\x8c\x62\xda\x1f\xe8\x67\x1d\xc1\x75\x2f\x20\xf8\xd9\xb6\x2c\xd1\xda\xe5\x58\x84\x98\x1a\xba\xd1\xca\x62\xf2\x3c\x96\x5f\x74\xd3\xb9\x86\x87\x8f\xab\xd1\x56\x6b\x03\xb1\xd7\x2b\x68\xb5\xc0\x08\x82\x17\x54\x48\xc8\xa3\x09\x1c\x5c\x1e\xc4\x84\x65\x64\x27\x2b\xf9\x28\x7c\x82\x9f\xfc\x15\x78\x5b\xea\xc4\x1e\x93\xd4\xe9\xf7\xba\xe4\x12\xef\x69\x10\xd4\x36\x4e\x2e\xb0\xe3\xe7\x1a\x22\x78\xf0\xd9\x75\x48\x89\x07\x94\x84\xfc\xb3\x69\xd0\xbc\xe3\xd6\xdf\x29\x79\x7c\x84\xe8\x4b\xe8\x0e\xb6\xa7\x4a\xd0\xaa\x1b\x8a\x3c\xea\xa3\x9b\xfd\xb0\x79\xc4\xd2\xa5\x9f\xf0\x64\x7b\x6d\xb5\x40\x59\xd9\x84\x22\xa9\xad\xdb\xbd\x4e\xfb\x22\xad\xeb\x35\x69\xf3\xd2\x7e\xbd\xff\xf0\x7b\x6a\xbb\x34\x44\x7d\xba\xe0\xb9\xac\xc8\x79\xf6\xf2\x34\x3e\x62\xbf\x9d\x3b\x98\x4d\x1f\xb5\x50\x31\xfb\x4b\xb1\x64\xc4\xf6\xa8\x73\x77\xee\x70\xbe\x6b\xfd\xca\xe1\xd4\x40\xa5\x14\xe5\xa7\xb8\x6f\xf0\x70\xea\xbb\xc9\x5f\xd1\xb0\xc7\xfa\x4e\x7f\x33\x9c\xfa\xa6\x1c\x0e\x03\xe4\xd5\xe4\xf4\xc5\x09\x2e\x3b\x6e\xdf\xf9\x99\x8e\xa3\xc9\xc2\x8c\x92\xe9\x44\xf4\x8e\xbc\xaa\x26\x8e\x8d\x11\xb4\xae\x4f\x91\x9f\xce\xbd\x3e\xe0\xe7\x38\x86\x29\xa2\x22\x58\xfc\x0f\xba\x11\xf3\x4f\xba\x31\x52\x18\x4a\x5f\x2e\x5f\x03\x8b\xee\x8e\x56\x9b\x39\x70\xf9\x7f\x52\x1c\xf9\x5e\x52\x0c\x2b\x64\x12\xe1\x06\x6e\x17\x8b\x05\x7c\x0d\xdf\x92\xd5\x5f\x4f\x9e\x85\xd5\x34\xfb\xf7\x3f\xe6\x5a\x6b\xf7\xea\x8f\xf9\xef\x00\x00\x00\xff\xff\x76\x3d\x8a\x63\xca\x07\x00\x00")

func templatesLogsTplHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesLogsTplHtml,
		"templates/logs.tpl.html",
	)
}

func templatesLogsTplHtml() (*asset, error) {
	bytes, err := templatesLogsTplHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/logs.tpl.html", size: 1994, mode: os.FileMode(420), modTime: time.Unix(1435958624, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templatesTasksTplHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x57\x4b\x6f\xe3\x36\x10\xbe\xfb\x57\x4c\xd5\x6c\x25\x77\xd7\x92\x92\x36\x17\xbf\x82\xb6\x5b\x14\x0b\x14\xbd\x24\x40\x0e\x45\x51\x30\x12\x6d\xb3\x91\x29\x81\xa4\xec\x18\x81\xff\x7b\x87\xd4\x93\xb2\xfc\x5a\xb4\x3e\x58\xe4\xcc\x7c\xf3\x26\x47\x7a\x7f\x07\xc6\xa3\x24\x8f\x29\x38\x0b\x91\x72\x45\x79\xec\x80\x93\x90\x5d\x9a\xab\x60\x45\x49\x4c\x85\xaf\xb2\xc4\x5f\xa9\x75\xe2\xc0\x7e\x3f\x18\x4c\x63\xb6\x81\x28\x21\x52\xce\x9c\x8c\x2c\xe9\xa8\x90\x72\xe6\x03\xc0\xdf\x74\x75\x3b\x7f\x54\x44\xc9\x69\x80\xab\xc1\x34\x40\xe9\x79\x07\x24\xd2\xa5\xa0\x52\x56\x88\x1e\xd6\xe8\x85\x08\x68\x6f\x46\x8c\x2f\x52\x9b\x22\x95\x60\x19\x8d\x81\x44\x8a\x6d\xa8\x03\x44\x30\x32\xda\x90\x24\xa7\x3c\xdd\xce\x9c\xb0\x4d\x59\x33\xae\x29\xc6\x9e\xf9\xb5\x58\xe4\x6d\xe6\xdc\x86\x28\x2e\xd5\x2e\xa1\x33\x67\xcb\x62\xb5\x1a\xdf\x87\x1f\x1c\x60\x71\xdb\xa5\x5c\xee\x4a\x97\xf5\xef\x67\xdc\xc2\x36\x15\xaf\x54\x48\x08\x8b\x48\x8a\x60\x2f\x0f\x4a\xe6\x51\x84\xeb\xde\xb8\xfe\xff\x80\xb6\x84\xa9\x56\x40\xcf\xb8\xed\x0f\xa8\xb7\x88\xbd\x95\x7f\x2e\xe0\x9d\xda\x2b\xf2\x92\xd0\x0a\x58\x6c\xcc\xff\x68\x95\x6e\x10\x6e\xbc\x2a\x0d\x57\xba\x94\x56\x5d\xad\x45\xe3\x24\x32\xe6\x5f\x3e\x4f\x03\x7c\x58\xb4\x5f\x04\x25\x8a\xc6\x87\x8c\x27\x22\x5f\xa1\x0f\x61\x18\x9c\xac\xe9\x11\x96\xc4\x26\xce\xe5\x11\x66\xd4\x35\x87\x2b\x51\xaf\xda\xbe\xbf\xa4\xf1\xae\x66\x14\x1b\x5c\xe8\xe8\x2f\x4b\xa8\x2e\x8a\x42\x93\x5f\x93\x53\x83\xbb\x24\xa3\x5f\x9d\xa4\xff\x2a\x0f\x32\xc2\x9e\x57\x05\x7f\x91\x73\x3c\xd1\x29\x87\x25\x55\xda\xc8\xa3\x29\xc4\x1f\xe8\x84\x57\xd4\x64\x08\xef\xa5\x27\x72\xcb\x54\xb4\x3a\x20\x03\x44\x44\x52\x08\xc7\xcd\xf1\x00\x41\x55\x2e\x38\xb8\xba\xe9\xdd\x49\x8b\xf1\x82\x21\xbc\x4e\x06\x36\xf4\xb6\x0f\x8a\x07\x47\x9f\xd6\xf3\xe8\xbb\x3e\x74\x79\xd6\xcf\xa3\x7f\xe8\x43\x2f\x08\x4b\xce\x43\x7f\x3c\x16\x31\x6e\x32\xac\xd4\x49\x0d\x31\x5d\x90\x3c\x51\x7d\x2a\x72\xfe\x8a\x57\x10\xef\x83\x17\x9b\xfd\xa0\xf8\xb7\x0b\x98\x67\x31\x76\x87\xd7\x14\xe6\xc6\x27\xff\x90\x37\xaf\xa9\x93\xda\x65\x74\x0c\xee\x6f\xbf\x3e\xb9\x9f\x6a\x62\x2e\x12\xa4\x05\x72\x27\x15\x5d\x07\xa6\x89\x5b\xdc\x32\x8f\xe3\xda\x8c\x27\x86\xef\x2d\xbf\xd8\x02\xbc\x6f\x7e\x12\x82\xec\x7c\x26\xcd\xd3\x13\x7e\x79\xbb\x0c\xdb\x3d\xd2\x04\xd8\x0e\x6b\x3f\x68\x6d\x36\x78\x61\xab\x67\x98\xc1\x8d\xe7\x7e\x5b\x5d\x8d\xa6\x7b\xdd\xa1\x4f\xd7\x99\xda\x79\xc3\x49\x57\xfe\xa9\x94\x37\x8e\x9f\x93\xde\x26\x28\x5d\xfb\xe7\x27\x94\x2f\xd5\x6a\xd2\xf6\x21\x08\x40\xe4\x9c\x33\xbe\x84\xef\x40\xd7\xb2\x13\xab\xd6\x30\x83\xb0\x1b\x59\x46\x45\x44\xb9\xba\x45\xf5\xe5\xf2\x0e\x97\xf7\xa1\x15\x2b\xd0\x04\xbb\xe6\x28\xb0\xf6\xeb\x6f\x3d\xfb\x60\x0e\x21\x3c\x80\xd7\xa1\x06\x18\xc3\x10\xbe\x07\x9c\x38\x30\x06\x4b\x3f\xb4\x4d\x37\x30\xd3\x90\x07\xca\x0c\xf5\x84\x32\xab\x30\x3a\xbf\xd6\x60\xc6\x0c\x2b\xfa\xa6\xbc\xda\xfb\x07\x70\xad\x09\xed\xc2\xc7\x6e\x3c\xd8\x64\x08\x33\xd3\xb1\xc1\x7d\x04\xf7\x83\x6b\x95\xc9\xb2\x65\xae\x0f\xdb\xd6\x9d\xb6\x65\x0d\x4f\xdb\x96\x09\xac\xc7\xd6\x5d\x6d\xab\x65\x6c\x91\x0a\x4f\xf7\x05\xc3\xd7\xb2\x46\x47\xb7\xb8\xa6\x73\x0c\xab\x9d\xd8\x3f\xd9\x5f\x93\x03\x31\xdd\x85\x28\x54\x88\xf8\x7a\x67\xd9\xc3\x23\xf8\xec\x93\x2c\xc3\xd7\x3e\xcf\xd5\x73\xc1\xb5\x98\xa0\x7d\x9c\xaa\x78\xae\x43\x2a\x75\xb0\xd8\x10\x03\x4d\x3d\x2e\xcc\xe9\x16\x3e\xeb\xd3\x5f\xa2\xca\x49\x81\xa9\x4b\x7f\x4f\x23\x92\xd0\x47\x7c\xcd\xe1\x4b\xbc\x1c\x2e\x50\xe6\x99\x28\x1e\x4c\x30\xda\xbe\xc9\xe6\xd5\x40\x3d\xc7\xae\x87\x1e\x4e\x21\xa3\xac\x9a\x39\x57\xeb\xab\x13\x63\xd4\x1c\x4f\xcb\x29\xc5\x05\x15\x8b\x35\x3c\x7a\x42\x3a\x8d\x64\x2e\x23\xd3\x8a\x7d\xbd\x54\x36\x49\x5b\xcc\x34\x93\xdd\x28\x4f\x97\x36\x4a\x55\xa6\x0b\xb2\xd2\x14\xe6\x9a\x9e\x3a\x93\xba\xeb\x92\xd6\x5d\xed\x4b\x7e\x99\xce\x1b\xaf\x1e\x34\x4d\xea\xaa\xc9\x56\x69\x92\x54\x7d\xc1\x6f\x27\x81\x2f\xe0\x5e\xc1\xfb\xa4\xef\xb0\x10\xaf\xb2\xfb\x4a\x1d\x3e\xa7\x41\xf5\xa2\x33\x38\xfd\xe1\xb5\x48\x53\xd5\xf9\xf0\xfa\x37\x00\x00\xff\xff\x42\x93\x92\x94\xaa\x0d\x00\x00")

func templatesTasksTplHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesTasksTplHtml,
		"templates/tasks.tpl.html",
	)
}

func templatesTasksTplHtml() (*asset, error) {
	bytes, err := templatesTasksTplHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/tasks.tpl.html", size: 3498, mode: os.FileMode(420), modTime: time.Unix(1435952423, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/config.tpl.html": templatesConfigTplHtml,
	"templates/logs.tpl.html": templatesLogsTplHtml,
	"templates/tasks.tpl.html": templatesTasksTplHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"config.tpl.html": &bintree{templatesConfigTplHtml, map[string]*bintree{
		}},
		"logs.tpl.html": &bintree{templatesLogsTplHtml, map[string]*bintree{
		}},
		"tasks.tpl.html": &bintree{templatesTasksTplHtml, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, Prefix: k}
	}
	panic("unreachable")
}
