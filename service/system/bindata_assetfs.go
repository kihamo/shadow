// Code generated by go-bindata.
// sources:
// templates/config.tpl.html
// templates/logs.tpl.html
// templates/tasks.tpl.html
// DO NOT EDIT!

package system

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesConfigTplHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x92\x3f\x6f\xf3\x20\x10\xc6\x77\x3e\xc5\x09\xe5\xdd\xde\x3a\xed\xd0\xa5\x72\x98\xaa\x8e\xdd\xda\x9d\x98\xb3\x8d\x44\xc0\x82\xb3\xab\x28\xca\x77\xef\x61\x5b\x72\xdc\x3f\x69\x3c\x71\xc7\xef\x31\xf7\xc0\x73\x3a\x81\xf5\x95\xeb\x0d\x82\xac\x63\xf0\x84\xde\x48\x90\x4e\x1f\x43\x4f\xdb\x16\xb5\xc1\x58\x50\xe7\x8a\x96\x0e\x4e\xc2\xf9\x2c\x44\x69\xec\x00\x95\xd3\x29\xed\x24\xe9\xbd\xc3\xbb\x88\xa9\x0b\x3e\xd9\x01\xa5\x12\xc0\x5f\x39\xf6\x57\x10\x4c\x68\x1b\x06\x8c\xf3\x3a\x51\xb4\x1d\x9a\x59\x33\xe9\xf2\x89\x4b\x3d\xf5\xe2\xba\x31\x83\xf0\x61\x0d\xb5\x3b\xf9\x70\xff\x4f\xaa\x57\x7d\xc0\x72\x4b\xed\x55\xf2\x31\x93\xef\xda\xf5\xbf\xa3\xea\x19\x53\xc5\x53\x91\x0d\xfe\x3b\xc4\x9d\x8b\x59\xf2\xfe\x6a\xda\x92\xf6\xc1\x1c\x97\x9a\xef\x36\x6a\xdf\x20\x6c\xec\x7f\xd8\xd4\x4e\x37\xf0\xb4\x83\xe2\x85\x17\x29\xdf\xe4\x0d\x2e\x8d\xe2\x9f\x8c\xd2\x22\x5b\x64\x15\x9f\x6a\xfe\x20\x47\x8b\xb7\xa1\x6f\x49\x37\x3f\xa3\x6b\xaf\x2c\xe0\x60\x5c\x0e\xcd\xfb\x8b\x5b\x2e\xf2\x8b\x2a\x51\x6e\x39\x1c\x4a\x88\xeb\xb1\xaa\x43\xa0\x2f\xb1\xfa\x0c\x00\x00\xff\xff\x5f\x33\xbe\x76\x88\x02\x00\x00")

func templatesConfigTplHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesConfigTplHtml,
		"templates/config.tpl.html",
	)
}

func templatesConfigTplHtml() (*asset, error) {
	bytes, err := templatesConfigTplHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/config.tpl.html", size: 648, mode: os.FileMode(420), modTime: time.Unix(1441722307, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templatesLogsTplHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x55\x4d\x6f\xe3\x36\x10\xbd\xeb\x57\x4c\xb5\x06\x24\x35\xb1\x94\x1e\x7a\x71\x64\xf7\xb0\x2d\x8a\x14\xdb\xee\x21\xed\x29\xdd\x03\x2d\x8d\x64\x66\x69\x52\x20\x29\x6f\x0c\xc3\xff\xbd\x43\xea\x23\xb2\x9c\xa6\x40\x0d\xc4\x31\x47\xf3\xde\xcc\x9b\x0f\xea\x74\x02\x2e\x0b\xd1\x96\x08\x61\xa5\x95\xb4\x28\xcb\x10\x42\xc1\x8e\xaa\xb5\xd9\x0e\x59\x89\x3a\xb5\x8d\x48\x77\x76\x2f\x42\x38\x9f\x83\x20\x2f\xf9\x01\x0a\xc1\x8c\x59\x87\x0d\x93\x28\xc0\x7f\x2f\x4b\xac\x58\x2b\x6c\xb8\x09\x80\x3e\x57\x5e\x4b\x47\xc6\x65\x1d\x6e\x1e\x77\xea\x1b\x50\xe0\xf4\x77\xf6\xf2\x60\x71\x6f\x88\x16\x04\xb3\x68\x2c\x68\x2c\x94\x2e\x8d\xa7\x98\xd3\x6c\xad\x5c\xd6\x5a\xb5\x0d\x34\xad\x10\x4b\xcd\xeb\xdd\x10\x6d\x74\xdf\xb6\xd6\x2a\x09\xbc\x5c\x87\x1a\x2b\x8d\x66\x17\x82\x3d\x36\x48\x68\xff\x24\x9c\x90\x81\x23\xec\xb3\xf6\xbf\x5f\xcc\x8c\xce\x53\xf2\x01\x52\x31\xa8\xd8\x72\xa0\xdd\xe4\x19\x9f\x05\xcf\xba\x18\xaf\xd6\x3c\xa3\xf4\xfb\x7a\x4c\x7e\x5e\x95\x66\xab\xca\xe3\x24\x74\xde\x8a\xe1\xb9\x64\x07\xa0\xbf\xa5\x65\x5b\x13\x82\x56\x82\x94\xd0\x6f\xc1\xcd\x5c\x3a\x15\x54\x33\x59\x23\x2c\x24\xdb\xe3\x2d\x2c\x50\x5a\xcd\xd1\xc0\x6a\x0d\xe9\x27\x55\xd7\xa8\x5d\xa1\x2f\x33\x16\x7c\x93\x33\xd8\x91\xa6\x75\xf8\x81\x18\x3c\x96\xbc\x26\xa1\x42\x28\x99\x65\x4b\x4b\x0c\x83\x65\x33\xf1\xcc\x33\x46\x95\x10\xfc\x2a\x19\x1a\xa4\x69\xb8\x3c\x6b\xc5\x26\x78\xb3\xaf\x44\xb9\x2c\xfc\xe8\xfd\xa7\x26\xe1\x75\xbc\x2b\xc9\x11\x8f\xc9\xfb\xf2\x86\xd3\x40\xce\x12\xfa\xf9\x98\xca\x7d\xa3\xed\xcd\x26\x6f\x34\x92\xb6\xfe\x7b\xde\xeb\xb1\x9d\xef\x69\x9e\xb7\xbf\xff\x17\xe4\xa6\xd0\xbc\xb1\x9b\x60\x11\x97\xaa\x68\xf7\x24\x3d\x49\x35\x2d\xc8\x31\xae\x5a\x59\x58\xae\x64\x9c\xc0\x89\xa0\xc3\x11\xda\x86\xfa\x80\xbd\x15\xe0\xc0\x34\x90\x1e\x58\xc3\x22\x8e\xd2\x41\xd9\xea\xc0\x0d\xdf\x0a\x5c\x55\x5c\x1b\x1b\x25\xf7\x5d\xc5\x79\x05\xf1\x77\xe4\x33\x80\x81\xf6\xcc\xb6\x5a\xde\xfb\xd3\x39\x18\x19\xa9\xbe\x0f\x25\x71\x92\x6f\xca\xac\xd5\x71\xc4\x4b\xc7\x32\x3c\xa7\x65\xef\x1e\x56\x5c\x96\x71\x44\xa5\x89\x12\x7f\x35\xc4\xd1\x18\x6c\x91\xb2\x67\xf6\x12\x0f\x91\xdc\xf6\xad\x20\xfa\xf5\x97\x3f\xa3\xdb\xde\xd4\x6a\x41\x96\xcc\x1c\x0d\x6d\x7f\x46\x31\xcd\x4f\xf4\xb5\x8e\xe0\xa6\x4b\x60\xf0\x33\x6d\x51\xa0\x31\xab\xb1\x08\x31\x6d\x5e\xa3\xa4\xc1\xe4\x34\x16\x99\xfb\x1b\x64\x0d\x4f\x5f\xee\x47\x5b\xa5\x34\xc4\x2e\x5f\x4e\xb7\x1b\x8c\x20\x38\x5d\x34\xcc\x3b\x10\x9a\xc0\x83\xcb\x13\x9f\xb0\x8c\xec\x64\x25\x1f\x89\xdf\xe0\x67\xd7\x02\x67\x4b\x2d\xdf\x63\x92\x5a\xf5\x49\x15\x4c\xe0\x23\xad\x9a\xac\xe3\xe4\x6a\x8c\xfc\xe7\x06\x22\x78\x72\xea\x3c\x52\xe0\x01\x05\x21\xff\x6a\x1a\xd4\x1f\x99\x71\x3d\x25\x8f\x2f\x10\xfd\x1b\xda\xc3\xf6\x54\x09\x56\xe3\x7d\x70\x99\x1f\x75\xf6\xf3\xf6\x19\x0b\x9b\x7e\xc5\xa3\xe9\x72\xab\x38\x8a\xd2\x24\x14\x49\xd6\x76\x37\x97\x7d\x21\xeb\x66\x4d\xb9\xb9\xd4\x7e\x7b\xfc\xfc\x47\x6a\xbc\x0c\x5e\x1d\x2f\x78\x2e\x2b\xf2\x3a\xde\xe7\xd7\x54\xb0\x7b\x41\x78\x98\x49\x9f\x15\x97\x71\xf8\xb7\x0c\x93\x11\xdb\xa1\xce\xfe\xec\x71\x6e\x6a\xdd\xe5\xc6\x68\x80\x0a\xc1\x8b\xaf\x71\x37\xe0\xc3\xa9\x9b\x26\xd7\xa2\xfe\xc2\xed\x26\xfd\x43\x7f\xea\x86\xb2\x3f\xf4\x90\xd9\xe6\x74\xc5\x19\x5c\x76\xcc\x7c\x74\xb7\x40\x1c\x31\x72\x3a\xd0\xdc\x4e\x97\xa1\xf3\xd1\xb8\x57\x07\x9c\xb9\xf5\x3b\x42\x12\x0d\x5e\x21\x58\x59\xbe\xed\xee\x64\x26\x4e\x81\x41\xfb\x40\x57\x9b\x3e\x30\xf1\xff\x13\x1c\x76\x7f\x42\x7e\x0b\x3f\xdc\xdd\xdd\xc1\xf7\xf0\x23\x59\x5d\x5d\xf3\x6c\xb8\x53\x82\xf7\x5f\xea\x95\x52\x76\xf6\x52\xff\x27\x00\x00\xff\xff\x90\x25\x9c\x18\x06\x08\x00\x00")

func templatesLogsTplHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesLogsTplHtml,
		"templates/logs.tpl.html",
	)
}

func templatesLogsTplHtml() (*asset, error) {
	bytes, err := templatesLogsTplHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/logs.tpl.html", size: 2054, mode: os.FileMode(420), modTime: time.Unix(1441722307, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templatesTasksTplHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x59\xcd\x6e\xe3\x36\x10\xbe\xfb\x29\x58\x37\x80\xe5\x36\x96\xed\xee\x6e\x81\x3a\x3f\x45\xdb\x14\xdb\x05\xda\x5e\x36\x68\x0e\x41\x50\x30\xd2\xc8\x66\xc3\x50\x02\x49\xc5\x71\x83\xbc\x7b\x87\x94\x2c\x51\xb2\x24\xcb\x8b\x62\x91\x00\xeb\x83\x25\x0d\xbf\xf9\xe1\xcc\x37\x24\x65\x3f\x3d\x11\x26\x02\x9e\x86\x40\x86\x91\x8c\x85\x06\x11\x0e\xc9\x90\xd3\x4d\x9c\xea\xe9\x0a\x68\x08\xd2\xd7\x09\xf7\x57\xfa\x9e\x0f\xc9\xf3\xf3\x60\x70\x1a\xb2\x07\x12\x70\xaa\xd4\xd9\x50\xc6\xeb\xe1\xf9\x80\xe0\xc7\x95\x06\x31\x9f\x3c\xaa\xc9\xf7\xf9\x50\x8f\xe1\x3a\x24\xa1\x02\x38\xb1\xdf\x93\xa5\x04\x10\x35\x6c\x23\x7e\x62\xc2\x65\x62\xd9\x80\xad\xe3\xcb\xb8\xf7\x21\xf3\x60\xdf\x74\xc0\xad\x0a\xdb\x2a\x44\x94\x44\x74\x92\x2a\x90\xca\xdc\xbc\x7b\x1c\x9e\x9f\x4e\x59\x87\xb3\x29\x7a\x3b\x28\x96\x1f\x88\x86\x47\x3d\x91\x6c\xb9\xd2\xfb\xc2\x72\xb4\x57\xe9\x12\x86\x84\x85\x67\xc3\x75\x2c\xef\x30\xbc\x49\x10\xa7\x02\x2d\xcc\xf6\x84\xb0\x35\x74\x7e\x95\xe9\xed\x8b\xb8\x7d\xb8\x65\xa8\x4d\x4c\xc9\x4a\x42\x74\x36\xfc\x3a\x0f\xb8\x47\x61\x33\x22\x44\x71\xac\x41\x76\x55\x58\x21\xb0\xd0\x49\x39\x9f\x70\x88\x30\x15\x7f\x31\x58\x93\x0b\xd0\x94\x71\x9c\xa6\x01\x1d\x62\x23\xaf\x48\x9d\x0b\x54\x22\xdd\x26\x01\x93\x01\x87\x02\x83\x94\xd8\xeb\xc0\x2d\x3d\x07\x2a\x23\x66\xc9\x74\x78\x7a\x69\xad\xd3\xaa\xb8\xfa\xe3\xa7\xb7\xaa\x84\xf0\xb5\x35\xaa\xa6\xea\xee\xc5\x36\xaa\x0d\x6e\xb2\xa6\x4c\x1f\xde\xab\xa8\x44\xac\xfe\xe7\x6f\x57\xeb\xf6\x4b\xb3\xbe\xf0\x66\xdd\x00\xe7\x8d\xdd\xf5\xa2\xfb\x55\x31\x0d\xf7\x34\x79\xa9\x1d\xbb\x8c\x25\x1e\x9c\x98\x00\x75\x40\xaf\xbe\x2f\x94\x3e\x5b\xaf\xb6\x75\x21\x51\x7a\xc3\x01\x67\x04\x26\x05\x8b\xb7\xf3\xa4\x99\xc5\xed\xac\x74\x6f\x7b\x9c\x09\x4d\xd2\x94\xa6\x5a\x55\xdc\xe4\xb7\xf9\x65\xd0\x46\xe1\x10\x22\x9a\x72\x5d\x39\xd5\x34\x9c\x47\x6b\x24\xde\x3d\xc6\xec\x82\x6f\xe3\x70\xd3\x72\x7c\xd5\xf4\xd6\x2c\x0d\xa0\x92\x58\x28\xf6\x00\xf5\x76\xb3\xe3\x15\x30\xc9\x54\x56\xf1\x43\xe3\x3a\x77\xaa\x4d\x68\x4d\x72\xd9\x52\x6b\xbd\x3a\xff\x70\x71\x3a\xc5\x4b\xeb\xf8\x2f\x12\xa8\x86\xb0\x1b\x74\x89\x0b\x35\xd9\x67\xc9\x82\x04\xbd\x87\x1e\x30\x53\xc9\x54\xf5\x00\x06\x5d\xe1\xa1\xb4\x61\xe6\x06\xdb\x92\x27\x53\xad\x46\x85\xdd\x01\x14\x9a\x62\x74\x51\xf7\x20\xd6\xb9\x7b\x5d\x17\xe7\x9a\xb6\xe3\x57\x48\xbb\xff\x9d\x31\xaf\x82\x08\x2a\x90\x2c\xd1\xd9\xd8\x03\x95\x96\xe6\xea\x22\x16\xa9\x3e\x19\x58\x61\x94\x8a\x40\xb3\x58\x90\x25\x68\x33\xad\x8f\xb6\x0f\xfe\xc4\x14\x78\x59\x4b\x8c\xc9\x53\xee\x48\xad\x99\x0e\x56\x3b\x62\x42\x02\xaa\x80\xcc\x16\x4e\x90\x12\x74\x2a\x05\x19\x99\x03\xe0\xe8\xc4\x19\xb8\xc5\xa4\xdd\xe5\xae\x0b\xd5\x79\x93\x6a\x22\xe3\x00\x94\xda\xaf\xfd\x5d\x93\xb6\x4a\x83\x7e\xda\x6f\x9a\xb4\x23\x3c\x98\xed\x57\x7d\xdb\x36\x63\x7c\x48\x90\x1b\x9d\x16\xf2\x56\x6c\x32\x91\x8a\x3b\x11\xaf\x45\x93\x7a\xf6\xf0\x3c\xc8\xbe\xab\x05\x4c\x93\x10\xf9\xe8\x95\x85\x39\xf2\xe9\x3f\xf4\xd1\x2b\xeb\xa4\x37\x09\x2c\xc8\xe8\xfd\xaf\x97\xa3\xe3\x42\x98\x4a\x8e\xb2\xa9\xda\x28\x3c\x9e\x4c\x6d\xa3\x3b\xa3\x79\x1e\x17\x85\x1b\x4f\x8e\x9f\x9c\xb8\x58\x44\xbc\xaf\x7e\x92\x92\x6e\x7c\xa6\xec\xd5\x93\x7e\xbe\x9f\x8d\x5d\x8e\x94\x13\x74\xa7\xf5\x3c\x70\x1e\x0c\x3f\xf5\x15\x39\x23\x47\xde\x68\xfb\xe2\x4c\x2c\xff\x47\x63\x1f\xee\x13\xbd\xf1\xc6\x27\x75\xfc\x65\x8e\xcf\xde\x86\x76\xd0\x0e\x3c\x8a\xa5\x67\x54\x18\x61\x82\x94\x41\xd6\x62\x34\x88\x6c\x08\x0d\x17\xa8\x6b\x76\x73\xb2\x03\x33\x2e\x11\x94\x41\x7c\xf3\x54\xf1\x87\xf9\xbe\xf2\x69\x92\x80\x08\xbd\x91\x59\x9a\x46\xb5\xf6\xfe\x96\xa0\x38\x3c\x1f\xe1\x4d\x6e\x83\x85\x56\x38\x35\xd2\x76\xb0\x30\x2f\x0f\xa6\xd4\xb9\x56\xbe\x10\x8d\x7d\x1d\xff\x1e\x07\x94\xc3\x47\x2d\x71\xe9\x46\x26\xf4\x30\xe6\xd9\x59\xfc\x68\x27\x63\xfc\x23\x17\x46\x87\x2b\x9a\x25\xf3\x70\xd5\xdd\x25\xc7\x1a\xdb\x2e\x30\x07\xdb\x2b\x12\x63\xcd\xb4\xa7\xa5\xcb\x70\x26\xc5\x62\x8d\x5b\x79\x5a\x23\x92\x65\xde\xdf\xa6\xef\x9b\xb8\x94\x93\xc4\x85\x59\x32\x55\x89\x72\xd9\x97\x28\xdb\x32\xf5\xc8\x4a\x59\x98\x43\x38\xb5\x27\x75\x9f\x9c\xb4\xa2\x47\x27\x9a\x69\x0e\xd8\xa3\xe6\x7d\xc5\x73\xf3\xe2\x73\x10\x4b\xbd\x32\xd6\xc8\xba\x38\x75\x54\x6d\x1a\x33\xe5\x9b\x4a\x69\xa5\x94\xed\xc0\x2b\xbf\x19\x96\x1a\xb9\x38\x77\xba\xa3\x55\xff\x01\xa3\x23\xe0\xea\x32\x53\xee\xb0\x3e\xae\xc7\xf4\x7a\x76\xe3\x3f\x50\x9e\x82\xbb\x9c\x58\xed\x93\x66\x25\x0b\x56\xa8\xd6\x57\xc1\x7a\x99\x37\x79\xb9\x4d\xd5\xa6\xdb\xcb\xfc\xa6\xaf\x02\x1e\xdf\xd8\xbf\xf0\x1b\x15\x21\x07\xe9\xae\xc3\xcf\xdb\x4d\x29\x97\xe5\x55\x3f\xf2\x8a\x1d\xc3\x39\x41\x14\xf6\xd0\xad\xa1\xdc\x1f\xb1\x94\x4c\xf9\x56\xe4\x6c\x54\xc0\xe1\x1e\x84\xc6\x3e\xb5\x1a\xce\x7e\x64\x26\xbb\x20\xd7\xd5\x3e\xe3\xf4\x16\xcc\x26\x66\x8f\xaa\xf9\x5c\x1c\x1d\xf3\xb1\xf3\x5d\x90\x79\x19\xf6\x31\x69\x36\xf2\x33\xe6\xa0\xb7\x91\x9b\x12\x90\x25\x68\x41\xb4\x4c\xc1\x49\x49\x7e\xbb\xdd\x9c\xb7\x79\x53\xa0\x3f\x08\x7c\x6d\x45\x93\x5e\x36\x76\x4c\xe6\xb3\xd9\x8c\x7c\x43\xde\x6d\x13\x89\xd7\xd3\xe9\xf6\x00\x37\xe8\xfe\xbf\x23\x7b\x09\xae\xfc\xdf\xf1\x5f\x00\x00\x00\xff\xff\x87\x13\x2d\xa3\x21\x19\x00\x00")

func templatesTasksTplHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesTasksTplHtml,
		"templates/tasks.tpl.html",
	)
}

func templatesTasksTplHtml() (*asset, error) {
	bytes, err := templatesTasksTplHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/tasks.tpl.html", size: 6433, mode: os.FileMode(420), modTime: time.Unix(1441722307, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/config.tpl.html": templatesConfigTplHtml,
	"templates/logs.tpl.html": templatesLogsTplHtml,
	"templates/tasks.tpl.html": templatesTasksTplHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"config.tpl.html": &bintree{templatesConfigTplHtml, map[string]*bintree{
		}},
		"logs.tpl.html": &bintree{templatesLogsTplHtml, map[string]*bintree{
		}},
		"tasks.tpl.html": &bintree{templatesTasksTplHtml, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, Prefix: k}
	}
	panic("unreachable")
}
