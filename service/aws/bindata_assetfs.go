// Code generated by go-bindata.
// sources:
// templates/index.tpl.html
// DO NOT EDIT!

package aws

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesIndexTplHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x56\x51\x6f\xdb\x20\x10\x7e\xcf\xaf\x40\xb4\x8f\x4b\xac\xbe\x4e\x8e\xa5\x3c\xec\x75\x9a\xb6\xfd\x81\x8b\x21\x09\x12\x01\x0b\x48\xa6\xaa\xea\x7f\xdf\x19\x43\x72\x8e\x1d\xaf\x8a\x96\xb5\xab\xd4\xd6\x3e\xbe\xfb\xee\x83\xfb\x00\xbf\xbc\x30\x65\x6a\x7d\x10\x92\xf1\x8d\xb3\x26\x48\x23\x38\xe3\x1a\x9e\xed\x21\x14\x3b\x09\x42\xba\x45\x68\xf4\x62\x17\xf6\x9a\xb3\xd7\xd7\xd9\xac\x14\xea\xc8\x6a\x0d\xde\x2f\x79\x03\x5b\x39\xef\x50\xbc\x9a\x31\xfc\x29\x77\x4f\xd5\xea\x97\x2f\x0b\xfc\x3f\x2b\x0b\xc4\x56\x29\xc5\x59\x2d\x97\x3c\xc0\xba\x01\x23\x75\x86\x1f\x74\xe6\x32\x70\x64\xf8\x3b\x47\x84\xe7\x67\xb4\x56\x3e\x24\x70\x4c\xd0\x2a\x8d\x35\x4e\x7a\x69\x02\x04\x65\x0d\xcf\x24\x50\x07\x75\x94\xbc\x2a\x81\xed\x9c\xdc\x2c\xf9\x83\x97\xee\xa8\x6a\x89\x94\xe0\x14\xcc\x6b\x9c\x23\xe6\x23\xf4\x3c\x70\xaa\xc5\x99\x80\x00\xf3\x60\xb7\xdb\x1c\xa9\x7e\x24\x58\x59\x40\x55\x16\x5a\xfd\x51\x0a\x2d\x0e\x4d\xa3\x55\x1d\xe3\x43\x01\xfd\xc1\x49\x11\x2b\x02\x7d\xb3\x10\xa2\x23\xd8\x46\xd5\x43\x05\x39\x3c\x59\xfb\x67\x04\xdd\x52\xd5\x1f\xd6\xbe\x76\xaa\x19\x9f\xfe\xc5\xe8\x74\x13\x28\xb6\x2f\xa5\x2c\x0e\x1a\x2d\x16\x1f\x89\x33\x31\x2d\xd6\x42\x5d\xd4\x3d\x23\x46\xa4\x19\x6d\x84\x25\x0f\x31\x25\x88\x49\xce\x1c\x91\xa7\x35\xa6\x24\x99\xf8\x12\xff\xce\x7d\x40\x99\x52\xa4\x37\x54\x20\xa4\xf1\x52\x5c\xe4\x77\x1c\xed\xc6\x19\x8d\x57\xab\x28\x81\xf9\x93\xf7\x30\x36\x04\x16\x57\x19\xd6\x56\x3c\x0f\xe3\xb8\xd9\x1d\x98\xad\x64\x8f\x06\xf6\xf2\x13\x7b\x4c\xfc\xec\xf3\x92\x2d\xb2\xcf\xdb\x3d\x3e\x24\x74\x43\xb6\x6e\x40\x54\xc8\x1a\xf9\x30\x11\x15\x8d\xc9\x29\xc6\xd2\x31\x0d\xcf\x9a\xd1\x6a\xc5\x88\x7e\x0c\xb6\x2b\x4a\x5a\xd9\x9d\x2d\xa7\xd7\x37\x74\xb6\x6b\x69\x6f\xdb\xfd\xbb\xb6\xa6\xb1\xea\x61\xbc\x99\x79\x98\xec\x74\xb6\xfa\xfe\xf5\xaf\x77\x5e\x61\xdb\xc9\x0a\xc4\xd6\xd3\xd3\xe5\x96\xf6\x83\x10\x48\xcc\x9e\xae\x3a\x80\x60\x69\xf1\xc5\x37\x0d\x61\x63\xdd\x9e\x08\xc0\x39\xbf\x8f\x91\x6e\x70\x52\x3a\x3e\x3f\x9c\x87\xe2\x89\x7d\x37\xf7\xc4\x59\x47\xdf\x74\x37\xc3\xdd\x1d\x13\x0b\x76\xc5\xfe\x27\x77\xf4\xef\xb7\x0f\x67\x12\x7a\xa5\x5e\xf7\x4a\x46\x7f\x31\xa2\xb1\xca\x84\xbb\x38\x8a\xae\x54\x77\x17\xd1\xa5\xbb\xbb\xbf\x68\xf9\x5e\xe9\x29\xb7\x5d\x25\xc8\x2b\xf5\x7e\xd7\x61\x7a\xcc\xce\x9d\xfe\xc4\xdf\x58\x1b\x2e\x3e\xf1\x7f\x07\x00\x00\xff\xff\x3e\x0c\x0c\xe0\x14\x0c\x00\x00")

func templatesIndexTplHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesIndexTplHtml,
		"templates/index.tpl.html",
	)
}

func templatesIndexTplHtml() (*asset, error) {
	bytes, err := templatesIndexTplHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/index.tpl.html", size: 3092, mode: os.FileMode(420), modTime: time.Unix(1437335544, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/index.tpl.html": templatesIndexTplHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"index.tpl.html": &bintree{templatesIndexTplHtml, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, Prefix: k}
	}
	panic("unreachable")
}
