// Code generated by go-bindata.
// sources:
// templates/index.tpl.html
// DO NOT EDIT!

package slack

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesIndexTplHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x54\x3d\x8f\x9c\x30\x10\xed\xf9\x15\x96\x73\xe9\x02\xe8\x8a\x44\xd1\xc9\x4b\x91\x8b\x14\xa5\x48\x9a\xfc\x02\x63\xcf\x82\x15\x63\x23\xdb\xe4\xb2\x3a\xed\x7f\xcf\x18\x30\x5f\x52\x56\x5b\x1c\x05\x8c\xed\x37\xf3\x9e\xdf\x8c\x78\x7d\x25\xca\x08\x3d\x48\x20\xf4\xec\xac\x09\x60\x24\x25\x54\xf3\x8b\x1d\x42\xd9\x02\x97\xe0\x8a\xd0\xeb\xa2\x0d\x9d\xa6\xe4\x7a\xcd\x32\x26\xd5\x1f\x22\x34\xf7\xfe\x44\x7b\xde\x40\x3e\xa1\x68\x95\x11\x7c\x58\xfb\x58\x7d\xb1\x81\x95\xf8\xcd\x58\x89\xd8\x6a\x9f\xe2\xec\x0b\x25\x3e\x5c\x34\xc4\x74\x29\x95\x69\x9e\xc8\xe7\xfe\x6f\xca\xdf\x40\x85\xd5\x79\x27\xf3\x4f\xb4\x62\x3e\xa0\xb8\x26\x56\x26\x86\x77\xc0\xca\x79\x63\x66\xf8\x7f\x26\x5e\xb0\xf8\xa5\xb9\xf8\x5d\xc4\x3c\xbc\xc0\xba\x31\x38\x8d\xeb\xb9\x42\xfa\xbc\x95\xd2\xe7\x96\x1b\x03\xda\xdf\xaf\x74\x3c\x8a\x0f\x2a\x74\xdc\x34\x40\x1e\xd4\x07\xf2\x20\xa6\x42\xe4\xe9\x94\x74\xcf\x3b\x3e\x76\x63\x93\xa3\xce\x0b\xb8\xf8\xee\x7f\x40\x57\x83\xdb\x42\x98\xef\xb9\x49\xb4\x9a\xd7\x58\x73\x7c\xe7\x7e\x10\x02\xbc\xa7\xd5\x3b\xac\xb2\x94\xf8\x39\xd9\x85\xfa\x31\x6d\x27\x0e\x47\xe4\x40\xbd\xd9\xd9\xdb\x79\xc7\xb0\x3c\xdb\xae\xe3\x46\xfa\xc3\xc4\x04\x5e\x6b\x48\x99\xd3\x62\x7c\xe7\x68\xa7\xea\x41\xce\x2b\x61\x8d\x04\xe3\x41\xa6\x8a\x21\x12\xa4\xd8\xad\xba\xf1\x80\xbc\x28\x19\xda\x13\x7d\xfc\xf8\x9e\x26\x5a\x56\x86\x76\x07\xaa\xbe\x82\x17\xc8\x10\x94\x35\xeb\x21\x46\x6e\x89\xb6\x0c\xb5\x95\x97\x29\x5e\xbb\x16\x07\x2d\x36\x6e\x62\x18\x1b\x97\x2e\xb9\xb8\xb4\x97\x26\xab\xd1\xf9\x09\x54\x7c\x83\xb0\x98\x1f\xe4\x4d\xdc\x46\xec\x0e\xbe\xea\x3d\x76\x67\x56\x8c\x41\xf4\x0f\x9d\xbe\xfd\x07\x38\x5b\x1b\x0e\x7f\x80\x7f\x01\x00\x00\xff\xff\x29\x6d\xf5\x65\x33\x04\x00\x00")

func templatesIndexTplHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesIndexTplHtml,
		"templates/index.tpl.html",
	)
}

func templatesIndexTplHtml() (*asset, error) {
	bytes, err := templatesIndexTplHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/index.tpl.html", size: 1075, mode: os.FileMode(420), modTime: time.Unix(1435004621, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/index.tpl.html": templatesIndexTplHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"index.tpl.html": &bintree{templatesIndexTplHtml, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, Prefix: k}
	}
	panic("unreachable")
}
